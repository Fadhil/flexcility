!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
API	deps/ecto/lib/ecto/query/api.ex	/^defmodule Ecto.Query.API do$/;"	m
Account	deps/coherence/test/support/schema.exs	/^defmodule TestCoherence.Account do$/;"	m
Accounts	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^defmodule Flexcility.Accounts do$/;"	m
ActionClauseError	deps/phoenix/lib/phoenix/exceptions.ex	/^defmodule Phoenix.ActionClauseError do$/;"	m
Adapter	deps/ecto/lib/ecto/adapter.ex	/^defmodule Ecto.Adapter do$/;"	m
Adapter	deps/plug/lib/plug/conn/adapter.ex	/^defmodule Plug.Conn.Adapter do$/;"	m
Adapter	deps/swoosh/lib/swoosh/adapter.ex	/^defmodule Swoosh.Adapter do$/;"	m
AddColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AddColumnMigration do$/;"	m
AddWeatherTable	deps/ecto/lib/ecto/migration.ex	/^      defmodule MyRepo.Migrations.AddWeatherTable do$/;"	m
Admin	apps/flexcility/lib/flexcility/admin/admin.ex	/^defmodule Flexcility.Admin do$/;"	m
AdminTest	apps/flexcility_web/test/admin_test.exs	/^defmodule Flexcility.Web.AdminTest do$/;"	m
Agent	deps/coherence/lib/coherence/plugs/authorization/credential_store/agent.ex	/^defmodule Coherence.CredentialStore.Agent do$/;"	m
AlreadySentError	deps/plug/lib/plug/conn.ex	/^  defmodule AlreadySentError do$/;"	m
AlterColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterColumnMigration do$/;"	m
AlterForeignKeyOnDeleteMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterForeignKeyOnDeleteMigration do$/;"	m
AlterForeignKeyOnUpdateMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterForeignKeyOnUpdateMigration do$/;"	m
AlterMigrationOne	deps/ecto/integration_test/sql/alter.exs	/^  defmodule AlterMigrationOne do$/;"	m
AlterMigrationTwo	deps/ecto/integration_test/sql/alter.exs	/^  defmodule AlterMigrationTwo do$/;"	m
AlterPrimaryKeyMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule AlterPrimaryKeyMigration do$/;"	m
AlterTest	deps/ecto/integration_test/sql/alter.exs	/^defmodule Ecto.Integration.AlterTest do$/;"	m
AmbiguousDateTime	deps/timex/lib/datetime/ambiguous.ex	/^defmodule Timex.AmbiguousDateTime do$/;"	m
AmbiguousTimezoneInfo	deps/timex/lib/timezone/ambiguous_timezone_info.ex	/^defmodule Timex.AmbiguousTimezoneInfo do$/;"	m
App	deps/db_connection/lib/db_connection/app.ex	/^defmodule DBConnection.App do$/;"	m
App	deps/distillery/lib/mix/lib/releases/models/app.ex	/^defmodule Mix.Releases.App do$/;"	m
App	deps/postgrex/lib/postgrex/app.ex	/^defmodule Postgrex.App do$/;"	m
App	deps/tzdata/lib/tzdata/tzdata_app.ex	/^defmodule Tzdata.App do$/;"	m
AppRouter	deps/plug/lib/plug/error_handler.ex	/^      defmodule AppRouter do$/;"	m
AppRouter	deps/plug/lib/plug/router.ex	/^      defmodule AppRouter do$/;"	m
Application	apps/flexcility/lib/flexcility/application.ex	/^defmodule Flexcility.Application do$/;"	m
Application	apps/flexcility_web/lib/flexcility_web/application.ex	/^defmodule Flexcility.Web.Application do$/;"	m
Application	deps/bolt_sips/lib/bolt_sips/application.ex	/^defmodule Bolt.Sips.Application do$/;"	m
Application	deps/con_cache/lib/con_cache/application.ex	/^defmodule ConCache.Application do$/;"	m
Application	deps/ecto/lib/ecto/application.ex	/^defmodule Ecto.Application do$/;"	m
Application	deps/gettext/lib/gettext/application.ex	/^defmodule Gettext.Application do$/;"	m
Application	deps/swoosh/lib/swoosh/application.ex	/^defmodule Swoosh.Application do$/;"	m
Appup	deps/distillery/lib/mix/lib/releases/appups.ex	/^defmodule Mix.Releases.Appup do$/;"	m
Archiver	deps/distillery/lib/mix/lib/releases/archiver.ex	/^defmodule Mix.Releases.Archiver do$/;"	m
Array	deps/postgrex/lib/postgrex/extensions/array.ex	/^defmodule Postgrex.Extensions.Array do$/;"	m
Assembler	deps/distillery/lib/mix/lib/releases/assembler.ex	/^defmodule Mix.Releases.Assembler do$/;"	m
Assoc	deps/ecto/lib/ecto/repo/assoc.ex	/^defmodule Ecto.Repo.Assoc do$/;"	m
AssocTest	deps/ecto/integration_test/cases/assoc.exs	/^defmodule Ecto.Integration.AssocTest do$/;"	m
Association	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association do$/;"	m
Authenticate	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^defmodule Flexcility.Web.Plugs.Authenticate do$/;"	m
Backend	deps/gettext/lib/gettext/backend.ex	/^defmodule Gettext.Backend do$/;"	m
Backoff	deps/db_connection/lib/db_connection/backoff.ex	/^defmodule DBConnection.Backoff do$/;"	m
BadEncodingError	deps/plug/lib/plug/parsers.ex	/^  defmodule BadEncodingError do$/;"	m
BadMigration	deps/ecto/integration_test/cases/migrator.exs	/^  defmodule BadMigration do$/;"	m
BadRequestError	deps/plug/lib/plug/exceptions.ex	/^defmodule Plug.BadRequestError do$/;"	m
Barebone	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Barebone do$/;"	m
Base	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^defmodule Bcrypt.Base do$/;"	m
Base	deps/combine/lib/combine/parsers/base.ex	/^defmodule Combine.Parsers.Base do$/;"	m
Base64	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^defmodule Bcrypt.Base64 do$/;"	m
Basic	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^defmodule Coherence.Authentication.Basic do$/;"	m
BasicDataMap	deps/tzdata/lib/tzdata/basic_data_map.ex	/^defmodule Tzdata.BasicDataMap do$/;"	m
Bcrypt	deps/bcrypt_elixir/lib/bcrypt.ex	/^defmodule Bcrypt do$/;"	m
BelongsTo	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.BelongsTo do$/;"	m
Binary	deps/combine/lib/combine/parsers/binary.ex	/^defmodule Combine.Parsers.Binary do$/;"	m
BinaryExtension	deps/postgrex/lib/postgrex/binary_extension.ex	/^defmodule Postgrex.BinaryExtension do$/;"	m
BinaryUtils	deps/postgrex/lib/postgrex/binary_utils.ex	/^defmodule Postgrex.BinaryUtils do$/;"	m
BitString	deps/postgrex/lib/postgrex/extensions/bit_string.ex	/^defmodule Postgrex.Extensions.BitString do$/;"	m
Bolt	deps/boltex/lib/boltex/bolt.ex	/^defmodule Boltex.Bolt do$/;"	m
Boltex	deps/boltex/lib/boltex.ex	/^defmodule Boltex do$/;"	m
Bool	deps/postgrex/lib/postgrex/extensions/bool.ex	/^defmodule Postgrex.Extensions.Bool do$/;"	m
BooleanExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule BooleanExpr do$/;"	m
Box	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Box do$/;"	m
Box	deps/postgrex/lib/postgrex/extensions/box.ex	/^defmodule Postgrex.Extensions.Box do$/;"	m
Broadcast	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Broadcast do$/;"	m
BroadcastError	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  defmodule BroadcastError do$/;"	m
Broker	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^defmodule DBConnection.Sojourn.Broker do$/;"	m
Builder	deps/ecto/lib/ecto/query/builder.ex	/^defmodule Ecto.Query.Builder do$/;"	m
Builder	deps/plug/lib/plug/builder.ex	/^defmodule Plug.Builder do$/;"	m
CIDR	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.CIDR do$/;"	m
CIDR	deps/postgrex/lib/postgrex/extensions/cidr.ex	/^defmodule Postgrex.Extensions.CIDR do$/;"	m
COOKIE	deps/plug/lib/plug/session/cookie.ex	/^defmodule Plug.Session.COOKIE do$/;"	m
CORSPlug	deps/cors_plug/lib/cors_plug.ex	/^defmodule CORSPlug do$/;"	m
CSRFProtection	deps/plug/lib/plug/csrf_protection.ex	/^defmodule Plug.CSRFProtection do$/;"	m
CastError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.CastError do$/;"	m
CastError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.Query.CastError do$/;"	m
ChangeError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.ChangeError do$/;"	m
Changeset	deps/ecto/lib/ecto/changeset.ex	/^defmodule Ecto.Changeset do$/;"	m
ChangesetView	apps/flexcility_web/lib/flexcility_web/views/changeset_view.ex	/^defmodule Flexcility.Web.ChangesetView do$/;"	m
Channel	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Channel do$/;"	m
Channel	deps/phoenix/lib/mix/tasks/phx.gen.channel.ex	/^defmodule Mix.Tasks.Phx.Gen.Channel do$/;"	m
Channel	deps/phoenix/lib/phoenix/channel.ex	/^defmodule Phoenix.Channel do$/;"	m
ChannelCase	apps/flexcility_web/test/support/channel_case.ex	/^defmodule Flexcility.Web.ChannelCase do$/;"	m
ChannelTest	deps/phoenix/lib/phoenix/test/channel_test.ex	/^defmodule Phoenix.ChannelTest do$/;"	m
Chars	deps/decimal/lib/decimal.ex	/^defimpl String.Chars, for: Decimal do$/;"	i
Chars	deps/ecto/lib/ecto/date_time.ex	/^defimpl String.Chars, for: [Ecto.DateTime, Ecto.Date, Ecto.Time] do$/;"	i
Chars	deps/postgrex/lib/postgrex/query.ex	/^defimpl String.Chars, for: Postgrex.Query do$/;"	i
Chars	deps/postgrex/lib/postgrex/stream.ex	/^defimpl String.Chars, for: Postgrex.Copy do$/;"	i
Chars	deps/postgrex/lib/postgrex/stream.ex	/^defimpl String.Chars, for: Postgrex.Stream do$/;"	i
Circle	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Circle do$/;"	m
Circle	deps/postgrex/lib/postgrex/extensions/circle.ex	/^defmodule Postgrex.Extensions.Circle do$/;"	m
Clean	deps/coherence/lib/mix/tasks/coh.clean.ex	/^defmodule Mix.Tasks.Coh.Clean do$/;"	m
Clean	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^defmodule Mix.Tasks.Coherence.Clean do$/;"	m
Clean	deps/distillery/lib/distillery/tasks/clean.ex	/^defmodule Mix.Tasks.Release.Clean do$/;"	m
Clean	deps/phoenix/lib/mix/tasks/phx.digest.clean.ex	/^defmodule Mix.Tasks.Phx.Digest.Clean do$/;"	m
Clock	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^defmodule Phoenix.Tracker.Clock do$/;"	m
CodeReloader	deps/phoenix/lib/phoenix/code_reloader.ex	/^defmodule Phoenix.CodeReloader do$/;"	m
Coherence	deps/coherence/lib/coherence.ex	/^defmodule Coherence do$/;"	m
CoherenceTest	deps/coherence/test/coherence_test.exs	/^defmodule CoherenceTest do$/;"	m
CoherenceView	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view.ex	/^defmodule Coherence.CoherenceView do$/;"	m
CoherenceView	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view.ex	/^defmodule Coherence.CoherenceView do$/;"	m
CoherenceView	deps/coherence/test/support/views.exs	/^defmodule Coherence.CoherenceView do$/;"	m
Collectable	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^defimpl Collectable, for: Ecto.Adapters.SQL.Stream do$/;"	i
Collectable	deps/plug/lib/plug/conn.ex	/^defimpl Collectable, for: Plug.Conn do$/;"	i
Collectable	deps/postgrex/lib/postgrex/stream.ex	/^defimpl Collectable, for: Postgrex.Stream do$/;"	i
Combine	deps/combine/lib/combine.ex	/^defmodule Combine do$/;"	m
Comeonin	deps/comeonin/lib/comeonin.ex	/^defmodule Comeonin do$/;"	m
Command	deps/ecto/lib/ecto/migration.ex	/^  defmodule Command do$/;"	m
Comment	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Comment do$/;"	m
Comment	deps/ecto/lib/ecto.ex	/^      defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/changeset.ex	/^      defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/schema.ex	/^      defmodule Comment do$/;"	m
Comment	deps/ecto/lib/ecto/schema.ex	/^      defmodule MyApp.Comment do$/;"	m
Comparable	deps/timex/lib/comparable/ambiguous_datetime.ex	/^defimpl Timex.Comparable, for: Timex.AmbiguousDateTime do$/;"	i
Comparable	deps/timex/lib/comparable/comparable.ex	/^defprotocol Timex.Comparable do$/;"	p
Comparable	deps/timex/lib/comparable/date.ex	/^defimpl Timex.Comparable, for: Date do$/;"	i
Comparable	deps/timex/lib/comparable/datetime.ex	/^defimpl Timex.Comparable, for: DateTime do$/;"	i
Comparable	deps/timex/lib/comparable/naivedatetime.ex	/^defimpl Timex.Comparable, for: NaiveDateTime do$/;"	i
Comparable	deps/timex/lib/comparable/tuple.ex	/^defimpl Timex.Comparable, for: Tuple do$/;"	i
CompileError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.Query.CompileError do$/;"	m
Compiler	deps/gettext/lib/gettext/compiler.ex	/^defmodule Gettext.Compiler do$/;"	m
CompositePk	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.CompositePk do$/;"	m
ConCache	deps/con_cache/lib/con_cache.ex	/^defmodule ConCache do$/;"	m
Config	deps/coherence/lib/coherence/config.ex	/^defmodule Coherence.Config do$/;"	m
Config	deps/coherence/test/config_test.exs	/^defmodule CoherenceTest.Config do$/;"	m
Config	deps/distillery/lib/mix/lib/releases/config/config.ex	/^defmodule Mix.Releases.Config do$/;"	m
Config	deps/phoenix/lib/phoenix/config.ex	/^defmodule Phoenix.Config do$/;"	m
ConfirmableService	deps/coherence/web/services/confirmable_service.ex	/^defmodule Coherence.ConfirmableService do$/;"	m
ConfirmationController	deps/coherence/web/controllers/confirmation_controller.ex	/^defmodule Coherence.ConfirmationController do$/;"	m
ConfirmationView	deps/coherence/priv/templates/coh.install/views/coherence/confirmation_view.ex	/^defmodule Coherence.ConfirmationView do$/;"	m
ConfirmationView	deps/coherence/priv/templates/coherence.install/views/coherence/confirmation_view.ex	/^defmodule Coherence.ConfirmationView do$/;"	m
Conn	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^defmodule Plug.Adapters.Cowboy.Conn do$/;"	m
Conn	deps/plug/lib/plug/adapters/test/conn.ex	/^defmodule Plug.Adapters.Test.Conn do$/;"	m
Conn	deps/plug/lib/plug/conn.ex	/^defmodule Plug.Conn do$/;"	m
ConnCase	apps/flexcility_web/test/support/conn_case.ex	/^defmodule Flexcility.Web.ConnCase do$/;"	m
ConnCase	deps/coherence/test/support/conn_case.exs	/^defmodule TestCoherence.ConnCase do$/;"	m
ConnTest	deps/phoenix/lib/phoenix/test/conn_test.ex	/^defmodule Phoenix.ConnTest do$/;"	m
Connection	deps/bolt_sips/lib/bolt_sips/connection.ex	/^defmodule Bolt.Sips.Connection do$/;"	m
Connection	deps/connection/lib/connection.ex	/^defmodule Connection do$/;"	m
Connection	deps/db_connection/lib/db_connection/connection.ex	/^defmodule DBConnection.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^  defmodule Ecto.Adapters.MySQL.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^  defmodule Ecto.Adapters.Postgres.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/sql/connection.ex	/^defmodule Ecto.Adapters.SQL.Connection do$/;"	m
Connection	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defmodule Connection do$/;"	m
ConnectionError	deps/db_connection/lib/db_connection/connection.ex	/^defmodule DBConnection.ConnectionError do$/;"	m
ConsoleFormatter	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^defmodule Phoenix.Router.ConsoleFormatter do$/;"	m
Constants	deps/timex/lib/timex/constants.ex	/^defmodule Timex.Constants  do$/;"	m
Constraint	deps/ecto/lib/ecto/migration.ex	/^  defmodule Constraint do$/;"	m
ConstraintError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.ConstraintError do$/;"	m
Context	deps/decimal/lib/decimal.ex	/^  defmodule Context do$/;"	m
Context	deps/phoenix/lib/mix/phoenix/context.ex	/^defmodule Mix.Phoenix.Context do$/;"	m
Context	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^defmodule Mix.Tasks.Phx.Gen.Context do$/;"	m
Controller	deps/phoenix/lib/phoenix/controller.ex	/^defmodule Phoenix.Controller do$/;"	m
ControllerHelpers	deps/coherence/test/controllers/controller_helpers_test.exs	/^defmodule CoherenceTest.ControllerHelpers do$/;"	m
ControllerHelpers	deps/coherence/web/controllers/controller_helpers.ex	/^defmodule Coherence.ControllerHelpers do$/;"	m
Convert	deps/timex/lib/convert/convert.ex	/^defmodule Timex.Convert do$/;"	m
CookieOverflowError	deps/plug/lib/plug/conn.ex	/^  defmodule CookieOverflowError do$/;"	m
Cookies	deps/plug/lib/plug/conn/cookies.ex	/^defmodule Plug.Conn.Cookies do$/;"	m
Copy	deps/postgrex/lib/postgrex/stream.ex	/^defmodule Postgrex.Copy do$/;"	m
CopyData	deps/postgrex/lib/postgrex/stream.ex	/^defmodule Postgrex.CopyData do$/;"	m
CopyDone	deps/postgrex/lib/postgrex/stream.ex	/^defmodule Postgrex.CopyDone do$/;"	m
CorruptedPk	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.CorruptedPk do$/;"	m
Cowboy	deps/plug/lib/plug/adapters/cowboy.ex	/^defmodule Plug.Adapters.Cowboy do$/;"	m
CowboyHandler	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^defmodule Phoenix.Endpoint.CowboyHandler do$/;"	m
CowboyWebSocket	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^defmodule Phoenix.Endpoint.CowboyWebSocket do$/;"	m
Create	deps/ecto/lib/mix/tasks/ecto.create.ex	/^defmodule Mix.Tasks.Ecto.Create do$/;"	m
CreateIndexes	deps/ecto/lib/ecto/migration.ex	/^      defmodule MyRepo.Migrations.CreateIndexes do$/;"	m
CreateMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule CreateMigration do$/;"	m
CredentialStore	deps/coherence/lib/coherence/plugs/authorization/credential_store.ex	/^defmodule Coherence.CredentialStore do$/;"	m
Crypto	deps/plug/lib/plug/crypto.ex	/^defmodule Plug.Crypto do$/;"	m
Cursor	deps/postgrex/lib/postgrex/stream.ex	/^defmodule Postgrex.Cursor do$/;"	m
Custom	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Custom do$/;"	m
CustomFunctions	deps/ecto/lib/ecto/query/api.ex	/^      defmodule CustomFunctions do$/;"	m
Cypher	deps/bolt_sips/lib/mix/tasks/cypher.ex	/^defmodule Mix.Tasks.Bolt.Cypher do$/;"	m
DBConnection	deps/db_connection/lib/db_connection.ex	/^defmodule DBConnection do$/;"	m
DataBuilder	deps/tzdata/lib/tzdata/data_builder.ex	/^defmodule Tzdata.DataBuilder do$/;"	m
DataCase	apps/flexcility/test/support/data_case.ex	/^defmodule Flexcility.DataCase do$/;"	m
DataLoader	deps/tzdata/lib/tzdata/data_loader.ex	/^defmodule Tzdata.DataLoader do$/;"	m
DataType	deps/ecto/lib/ecto/data_type.ex	/^      defimpl Ecto.DataType, for: Date do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: Any do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: Date do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: DateTime do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: List do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: NaiveDateTime do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defimpl Ecto.DataType, for: Time do$/;"	i
DataType	deps/ecto/lib/ecto/data_type.ex	/^defprotocol Ecto.DataType do$/;"	p
DataType	deps/ecto/lib/ecto/date_time.ex	/^defimpl Ecto.DataType, for: Ecto.Date do$/;"	i
DataType	deps/ecto/lib/ecto/date_time.ex	/^defimpl Ecto.DataType, for: Ecto.DateTime do$/;"	i
DataType	deps/ecto/lib/ecto/date_time.ex	/^defimpl Ecto.DataType, for: Ecto.Time do$/;"	i
Date	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^  defmodule Ecto.Adapters.Postgres.Date do$/;"	m
Date	deps/ecto/lib/ecto/date_time.ex	/^defmodule Ecto.Date do$/;"	m
Date	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Date do$/;"	m
Date	deps/postgrex/lib/postgrex/extensions/date.ex	/^defmodule Postgrex.Extensions.Date do$/;"	m
Date	deps/timex_ecto/lib/types/date.ex	/^defmodule Timex.Ecto.Date do$/;"	m
DateTime	deps/ecto/lib/ecto/date_time.ex	/^defmodule Ecto.DateTime do$/;"	m
DateTime	deps/timex_ecto/lib/types/datetime.ex	/^defmodule Timex.Ecto.DateTime do$/;"	m
DateTimeWithTimezone	deps/timex_ecto/lib/types/datetimetz.ex	/^defmodule Timex.Ecto.DateTimeWithTimezone do$/;"	m
DbStore	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^defimpl Coherence.DbStore, for: Any do$/;"	i
DbStore	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^defprotocol Coherence.DbStore do$/;"	p
DbStore	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^      defimpl Coherence.DbStore, for: MyProject.User do$/;"	i
Debugger	deps/plug/lib/plug/debugger.ex	/^defmodule Plug.Debugger do$/;"	m
Decimal	deps/decimal/lib/decimal.ex	/^defmodule Decimal do$/;"	m
Decode	deps/poison/lib/poison/decoder.ex	/^defmodule Poison.Decode do$/;"	m
Decoder	deps/poison/lib/poison/decoder.ex	/^defimpl Poison.Decoder, for: Any do$/;"	i
Decoder	deps/poison/lib/poison/decoder.ex	/^defprotocol Poison.Decoder do$/;"	p
Default	deps/timex/lib/format/datetime/formatters/default.ex	/^defmodule Timex.Format.DateTime.Formatters.Default do$/;"	m
Default	deps/timex/lib/format/duration/formatters/default.ex	/^defmodule Timex.Format.Duration.Formatters.Default do$/;"	m
Default	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Default do$/;"	m
DelayStreams	deps/retry/lib/retry/delay_streams.ex	/^defmodule Retry.DelayStreams do$/;"	m
Delegator	deps/exactor/lib/exactor/delegator.ex	/^defmodule ExActor.Delegator do$/;"	m
DeliveryError	deps/swoosh/lib/swoosh/delivery_error.ex	/^defmodule Swoosh.DeliveryError do$/;"	m
DeltaGeneration	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^defmodule Phoenix.Tracker.DeltaGeneration do$/;"	m
Diff	deps/timex/lib/comparable/diff.ex	/^defmodule Timex.Comparable.Diff do$/;"	m
Digest	deps/phoenix/lib/mix/tasks/phoenix.digest.ex	/^defmodule Mix.Tasks.Phoenix.Digest do$/;"	m
Digest	deps/phoenix/lib/mix/tasks/phx.digest.ex	/^defmodule Mix.Tasks.Phx.Digest do$/;"	m
Digester	deps/phoenix/lib/phoenix/digester.ex	/^defmodule Phoenix.Digester do$/;"	m
Directive	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Directive do$/;"	m
Distinct	deps/ecto/lib/ecto/query/builder/distinct.ex	/^defmodule Ecto.Query.Builder.Distinct do$/;"	m
Drop	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^defmodule Mix.Tasks.Ecto.Drop do$/;"	m
DropColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule DropColumnMigration do$/;"	m
DummyController	deps/coherence/test/support/dummy_controller.exs	/^defmodule TestCoherence.DummyController do$/;"	m
Dump	deps/ecto/lib/mix/tasks/ecto.dump.ex	/^defmodule Mix.Tasks.Ecto.Dump do$/;"	m
Duration	deps/timex/lib/time/duration.ex	/^defmodule Timex.Duration do$/;"	m
Dynamic	deps/ecto/lib/ecto/query/builder/dynamic.ex	/^defmodule Ecto.Query.Builder.Dynamic do$/;"	m
DynamicExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule DynamicExpr do$/;"	m
EExEngine	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^defmodule Phoenix.Template.EExEngine do$/;"	m
ETS	deps/plug/lib/plug/session/ets.ex	/^defmodule Plug.Session.ETS do$/;"	m
Ecto	deps/ecto/lib/ecto.ex	/^defmodule Ecto do$/;"	m
Ecto	deps/ecto/lib/mix/ecto.ex	/^defmodule Mix.Ecto do$/;"	m
Ecto	deps/ecto/lib/mix/tasks/ecto.ex	/^defmodule Mix.Tasks.Ecto do$/;"	m
Ecto	deps/phoenix_ecto/lib/phoenix_ecto.ex	/^defmodule Phoenix.Ecto do$/;"	m
Ecto	deps/timex_ecto/lib/timex_ecto.ex	/^defmodule Timex.Ecto do$/;"	m
ElixirMake	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^defmodule Mix.Tasks.Compile.ElixirMake do$/;"	m
Email	deps/coherence/test/support/email.exs	/^defmodule TestCoherence.Coherence.Email do$/;"	m
Email	deps/swoosh/lib/swoosh/email.ex	/^defmodule Swoosh.Email do$/;"	m
EmailView	deps/coherence/priv/templates/coh.install/views/coherence/email_view.ex	/^defmodule Coherence.EmailView do$/;"	m
EmailView	deps/coherence/priv/templates/coherence.install/views/coherence/email_view.ex	/^defmodule Coherence.EmailView do$/;"	m
EmailView	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  defmodule EmailView do$/;"	m
Embedded	deps/ecto/lib/ecto/embedded.ex	/^defmodule Ecto.Embedded do$/;"	m
Empty	deps/exactor/lib/exactor/empty.ex	/^defmodule ExActor.Empty do$/;"	m
Encode	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Encode do$/;"	m
EncodeError	deps/boltex/lib/boltex/pack_stream/encode_error.ex	/^defmodule Boltex.PackStream.EncodeError do$/;"	m
EncodeError	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.EncodeError do$/;"	m
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: Any do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: Atom do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: BitString do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: Float do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: Integer do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: List do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defimpl Boltex.PackStream.Encoder, for: Map do$/;"	i
Encoder	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^defprotocol Boltex.PackStream.Encoder do$/;"	p
Encoder	deps/ecto/lib/ecto/date_time.ex	/^  defimpl Poison.Encoder, for: [Ecto.Date, Ecto.Time, Ecto.DateTime] do$/;"	i
Encoder	deps/ecto/lib/ecto/poison.ex	/^  defimpl Poison.Encoder, for: Decimal do$/;"	i
Encoder	deps/ecto/lib/ecto/poison.ex	/^  defimpl Poison.Encoder, for: Ecto.Association.NotLoaded do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^      defimpl Poison.Encoder, for: unquote(module) do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^  defimpl Poison.Encoder, for: HashDict do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^  defimpl Poison.Encoder, for: [Date, Time, NaiveDateTime, DateTime] do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Any do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Atom do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: BitString do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Float do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Integer do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: List do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: Map do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defimpl Poison.Encoder, for: [Range, Stream, MapSet, HashSet] do$/;"	i
Encoder	deps/poison/lib/poison/encoder.ex	/^defprotocol Poison.Encoder do$/;"	p
Endpoint	apps/flexcility_web/lib/flexcility_web/endpoint.ex	/^defmodule Flexcility.Web.Endpoint do$/;"	m
Endpoint	deps/coherence/test/support/endpoint.exs	/^defmodule TestCoherence.Endpoint do$/;"	m
Endpoint	deps/phoenix/lib/phoenix/endpoint.ex	/^      defmodule YourApp.Endpoint do$/;"	m
Endpoint	deps/phoenix/lib/phoenix/endpoint.ex	/^defmodule Phoenix.Endpoint do$/;"	m
Engine	deps/phoenix/lib/phoenix/template/engine.ex	/^defmodule Phoenix.Template.Engine do$/;"	m
Engine	deps/phoenix_html/lib/phoenix_html/engine.ex	/^defmodule Phoenix.HTML.Engine do$/;"	m
Entity	deps/bolt_sips/lib/bolt_sips/types.ex	/^  defmodule Entity do$/;"	m
Enumerable	deps/db_connection/lib/db_connection.ex	/^defimpl Enumerable, for: DBConnection.PrepareStream do$/;"	i
Enumerable	deps/db_connection/lib/db_connection.ex	/^defimpl Enumerable, for: DBConnection.Stream do$/;"	i
Enumerable	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^defimpl Enumerable, for: Ecto.Adapters.SQL.Stream do$/;"	i
Enumerable	deps/postgrex/lib/postgrex/stream.ex	/^defimpl Enumerable, for: Postgrex.Stream do$/;"	i
Enumerable	deps/timex/lib/interval/interval.ex	/^  defimpl Enumerable do$/;"	i
Environment	deps/distillery/lib/mix/lib/releases/models/environment.ex	/^defmodule Mix.Releases.Environment do$/;"	m
Error	deps/bolt_sips/lib/bolt_sips/error.ex	/^defmodule Bolt.Sips.Error do$/;"	m
Error	deps/boltex/lib/boltex/error.ex	/^defmodule Boltex.Error do$/;"	m
Error	deps/decimal/lib/decimal.ex	/^  defmodule Error do$/;"	m
Error	deps/gettext/lib/gettext.ex	/^  defmodule Error do$/;"	m
Error	deps/postgrex/lib/postgrex/error.ex	/^defmodule Postgrex.Error do$/;"	m
ErrorCode	deps/postgrex/lib/postgrex/error_code.ex	/^defmodule Postgrex.ErrorCode do$/;"	m
ErrorEmail	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^      defmodule ErrorEmail do$/;"	m
ErrorHandler	deps/plug/lib/plug/error_handler.ex	/^defmodule Plug.ErrorHandler do$/;"	m
ErrorHelpers	apps/flexcility_web/lib/flexcility_web/views/error_helpers.ex	/^defmodule Flexcility.Web.ErrorHelpers do$/;"	m
ErrorView	apps/flexcility_web/lib/flexcility_web/views/error_view.ex	/^defmodule Flexcility.Web.ErrorView do$/;"	m
ErrorView	deps/coherence/test/support/views.exs	/^defmodule TestCoherence.ErrorView do$/;"	m
ErrorViewTest	apps/flexcility_web/test/views/error_view_test.exs	/^defmodule Flexcility.Web.ErrorViewTest do$/;"	m
Errors	deps/distillery/lib/mix/lib/releases/errors.ex	/^defmodule Mix.Releases.Errors do$/;"	m
EtsHolder	deps/tzdata/lib/tzdata/ets_holder.ex	/^defmodule Tzdata.EtsHolder do$/;"	m
Exception	deps/bolt_sips/lib/bolt_sips/exception.ex	/^defmodule Bolt.Sips.Exception do$/;"	m
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.CastError do$/;"	i
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.InvalidChangesetError do$/;"	i
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.NoResultsError do$/;"	i
Exception	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^defimpl Plug.Exception, for: Ecto.Query.CastError do$/;"	i
Exception	deps/plug/lib/plug/exceptions.ex	/^defimpl Plug.Exception, for: Any do$/;"	i
Exception	deps/plug/lib/plug/exceptions.ex	/^defprotocol Plug.Exception do$/;"	p
ExsEngine	deps/phoenix/lib/phoenix/template/exs_engine.ex	/^defmodule Phoenix.Template.ExsEngine do$/;"	m
Extension	deps/postgrex/lib/postgrex/extension.ex	/^defmodule Postgrex.Extension do$/;"	m
Extract	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^defmodule Mix.Tasks.Gettext.Extract do$/;"	m
Extractor	deps/gettext/lib/gettext/extractor.ex	/^defmodule Gettext.Extractor do$/;"	m
ExtractorAgent	deps/gettext/lib/gettext/extractor_agent.ex	/^defmodule Gettext.ExtractorAgent do$/;"	m
FallbackController	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^defmodule Flexcility.Web.FallbackController do$/;"	m
FarFutureDynamicPeriods	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^defmodule Tzdata.FarFutureDynamicPeriods do$/;"	m
FileHelpers	deps/ecto/integration_test/support/file_helpers.exs	/^defmodule Support.FileHelpers do$/;"	m
Filter	deps/ecto/lib/ecto/query/builder/filter.ex	/^defmodule Ecto.Query.Builder.Filter do$/;"	m
Float4	deps/postgrex/lib/postgrex/extensions/float4.ex	/^defmodule Postgrex.Extensions.Float4 do$/;"	m
Float8	deps/postgrex/lib/postgrex/extensions/float8.ex	/^defmodule Postgrex.Extensions.Float8 do$/;"	m
Foo	deps/ecto/integration_test/cases/repo.exs	/^  defmodule Foo do$/;"	m
Form	deps/phoenix_html/lib/phoenix_html/form.ex	/^defmodule Phoenix.HTML.Form do$/;"	m
FormData	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^  defimpl Phoenix.HTML.FormData, for: Ecto.Changeset do$/;"	i
FormData	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^defimpl Phoenix.HTML.FormData, for: Plug.Conn do$/;"	i
FormData	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^defprotocol Phoenix.HTML.FormData do$/;"	p
Format	deps/phoenix_html/lib/phoenix_html/format.ex	/^defmodule Phoenix.HTML.Format do$/;"	m
Format	deps/swoosh/lib/swoosh/email/format.ex	/^defmodule Swoosh.Email.Format do$/;"	m
FormatError	deps/timex/lib/format/format_error.ex	/^defmodule Timex.Format.FormatError do$/;"	m
FormatError	deps/timex/lib/interval/interval.ex	/^  defmodule FormatError do$/;"	m
Formatter	deps/timex/lib/format/datetime/formatter.ex	/^defmodule Timex.Format.DateTime.Formatter do$/;"	m
Formatter	deps/timex/lib/format/duration/formatter.ex	/^defmodule Timex.Format.Duration.Formatter do$/;"	m
From	deps/ecto/lib/ecto/query/builder/from.ex	/^defmodule Ecto.Query.Builder.From do$/;"	m
Fuzzy	deps/gettext/lib/gettext/fuzzy.ex	/^defmodule Gettext.Fuzzy do$/;"	m
Fuzzyurl	deps/fuzzyurl/lib/fuzzyurl.ex	/^defmodule Fuzzyurl do$/;"	m
GC	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^defmodule Phoenix.PubSub.GC do$/;"	m
GenServer	deps/exactor/lib/exactor/gen_server.ex	/^defmodule ExActor.GenServer do$/;"	m
GetSchema	apps/flexcility/lib/flexcility/utils/utils.ex	/^  defimpl GetSchema, for: Any do$/;"	i
GetSchema	apps/flexcility/lib/flexcility/utils/utils.ex	/^  defimpl GetSchema, for: Ecto.Changeset do$/;"	i
GetSchema	apps/flexcility/lib/flexcility/utils/utils.ex	/^  defprotocol GetSchema do$/;"	p
Gettext	apps/flexcility_web/lib/flexcility_web/gettext.ex	/^defmodule Flexcility.Web.Gettext do$/;"	m
Gettext	deps/coherence/test/support/gettext.exs	/^defmodule TestCoherence.Gettext do$/;"	m
Gettext	deps/gettext/lib/gettext.ex	/^      defmodule MyApp.Gettext do$/;"	m
Gettext	deps/gettext/lib/gettext.ex	/^defmodule Gettext do$/;"	m
Gettext	deps/gettext/lib/gettext/plural.ex	/^      defmodule MyApp.Gettext do$/;"	m
Gettext	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^defmodule Mix.Tasks.Compile.Gettext do$/;"	m
Gettext	deps/timex/lib/l10n/gettext.ex	/^defmodule Timex.Gettext do$/;"	m
GoodMigration	deps/ecto/integration_test/cases/migrator.exs	/^  defmodule GoodMigration do$/;"	m
Graph	apps/flexcility/lib/flexcility/graph/graph.ex	/^defmodule Flexcility.Graph do$/;"	m
GroupBy	deps/ecto/lib/ecto/query/builder/group_by.ex	/^defmodule Ecto.Query.Builder.GroupBy do$/;"	m
HStore	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^defmodule Postgrex.Extensions.HStore do$/;"	m
HTML	deps/phoenix/lib/phoenix/template/html.ex	/^defmodule Phoenix.Template.HTML do$/;"	m
HTML	deps/phoenix_html/lib/phoenix_html.ex	/^defmodule Phoenix.HTML do$/;"	m
HTML	deps/plug/lib/plug/html.ex	/^defmodule Plug.HTML do$/;"	m
Handler	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^defmodule Phoenix.Endpoint.Handler do$/;"	m
Handler	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^defmodule Plug.Adapters.Cowboy.Handler do$/;"	m
Has	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.Has do$/;"	m
HasThrough	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.HasThrough do$/;"	m
HashDictServer	deps/exactor/lib/exactor/delegator.ex	/^      defmodule HashDictServer do$/;"	m
Head	deps/plug/lib/plug/head.ex	/^defmodule Plug.Head do$/;"	m
Header	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule Header do$/;"	m
HeaderErrorHandlerPlug	deps/coherence/test/plugs/authentication/token_test.exs	/^  defmodule HeaderErrorHandlerPlug do$/;"	m
HeaderPlug	deps/coherence/test/plugs/authentication/token_test.exs	/^  defmodule HeaderPlug do$/;"	m
Helper	deps/exactor/lib/exactor/helper.ex	/^defmodule ExActor.Helper do$/;"	m
Helpers	deps/combine/lib/combine/helpers.ex	/^defmodule Combine.Helpers do$/;"	m
Helpers	deps/phoenix/lib/phoenix/router/helpers.ex	/^defmodule Phoenix.Router.Helpers do$/;"	m
Helpers	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^  defmodule Swoosh.Adapters.SMTP.Helpers do$/;"	m
Helpers	deps/timex/lib/datetime/helpers.ex	/^defmodule Timex.DateTime.Helpers do$/;"	m
Helpers	deps/timex/lib/parse/datetime/helpers.ex	/^defmodule Timex.Parse.DateTime.Helpers do$/;"	m
Helpers	deps/timex/lib/timex/helpers.ex	/^defmodule Timex.Helpers do$/;"	m
Helpers	deps/timex_ecto/lib/helpers.ex	/^defmodule Timex.Ecto.Helpers do$/;"	m
Html	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Html do$/;"	m
Html	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^defmodule Mix.Tasks.Phx.Gen.Html do$/;"	m
Humanized	deps/timex/lib/format/duration/formatters/humanized.ex	/^defmodule Timex.Format.Duration.Formatters.Humanized do$/;"	m
ID	deps/ecto/integration_test/cases/repo.exs	/^    defmodule ID do$/;"	m
INET	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.INET do$/;"	m
INET	deps/postgrex/lib/postgrex/extensions/inet.ex	/^defmodule Postgrex.Extensions.INET do$/;"	m
IO	deps/distillery/lib/distillery/lib/io.ex	/^defmodule Distillery.IO do$/;"	m
ISO8601Extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^defmodule Timex.Parse.DateTime.Parsers.ISO8601Extended do$/;"	m
ISO8601Parser	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^defmodule Timex.Parse.Duration.Parsers.ISO8601Parser do$/;"	m
Index	deps/ecto/lib/ecto/migration.ex	/^  defmodule Index do$/;"	m
InferredDropIndexMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule InferredDropIndexMigration do$/;"	m
Init	deps/distillery/lib/distillery/tasks/init.ex	/^defmodule Mix.Tasks.Release.Init do$/;"	m
Inspect	deps/decimal/lib/decimal.ex	/^defimpl Inspect, for: Decimal do$/;"	i
Inspect	deps/ecto/lib/ecto/association.ex	/^  defimpl Inspect do$/;"	i
Inspect	deps/ecto/lib/ecto/changeset.ex	/^defimpl Inspect, for: Ecto.Changeset do$/;"	i
Inspect	deps/ecto/lib/ecto/date_time.ex	/^defimpl Inspect, for: [Ecto.DateTime, Ecto.Date, Ecto.Time] do$/;"	i
Inspect	deps/ecto/lib/ecto/query/inspect.ex	/^defimpl Inspect, for: Ecto.Query do$/;"	i
Inspect	deps/ecto/lib/ecto/query/inspect.ex	/^defimpl Inspect, for: Ecto.Query.DynamicExpr do$/;"	i
Inspect	deps/ecto/lib/ecto/schema.ex	/^    defimpl Inspect do$/;"	i
Inspect	deps/plug/lib/plug/conn.ex	/^defimpl Inspect, for: Plug.Conn do$/;"	i
Inspect	deps/timex/lib/datetime/inspect.ex	/^  defimpl Inspect, for: DateTime do$/;"	i
Inspect	deps/timex/lib/datetime/inspect.ex	/^defimpl Inspect, for: Timex.AmbiguousDateTime do$/;"	i
Inspect	deps/timex/lib/time/inspect.ex	/^defimpl Inspect, for: Timex.Duration do$/;"	i
Inspect	deps/timex/lib/timezone/inspect.ex	/^defimpl Inspect, for: Timex.AmbiguousTimezoneInfo do$/;"	i
Inspect	deps/timex/lib/timezone/inspect.ex	/^defimpl Inspect, for: Timex.TimezoneInfo do$/;"	i
Install	deps/coherence/lib/mix/tasks/coh.install.ex	/^defmodule Mix.Tasks.Coh.Install do$/;"	m
Install	deps/coherence/lib/mix/tasks/coherence.install.ex	/^defmodule Mix.Tasks.Coherence.Install do$/;"	m
InstallTest	deps/coherence/test/mix/tasks/coh.install_test.exs	/^defmodule Mix.Tasks.Coh.InstallTest do$/;"	m
InstallTest	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^defmodule Mix.Tasks.Coherence.InstallTest do$/;"	m
Instrument	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^defmodule Phoenix.Endpoint.Instrument do$/;"	m
Int2	deps/postgrex/lib/postgrex/extensions/int2.ex	/^defmodule Postgrex.Extensions.Int2 do$/;"	m
Int4	deps/postgrex/lib/postgrex/extensions/int4.ex	/^defmodule Postgrex.Extensions.Int4 do$/;"	m
Int8	deps/postgrex/lib/postgrex/extensions/int8.ex	/^defmodule Postgrex.Extensions.Int8 do$/;"	m
Interpolation	deps/gettext/lib/gettext/interpolation.ex	/^defmodule Gettext.Interpolation do$/;"	m
Interval	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Interval do$/;"	m
Interval	deps/postgrex/lib/postgrex/extensions/interval.ex	/^defmodule Postgrex.Extensions.Interval do$/;"	m
Interval	deps/timex/lib/interval/interval.ex	/^defmodule Timex.Interval do$/;"	m
IntervalTest	deps/ecto/integration_test/cases/interval.exs	/^defmodule Ecto.Integration.IntervalTest do$/;"	m
InvalidCSRFTokenError	deps/plug/lib/plug/csrf_protection.ex	/^  defmodule InvalidCSRFTokenError do$/;"	m
InvalidChangesetError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.InvalidChangesetError do$/;"	m
InvalidCrossOriginRequestError	deps/plug/lib/plug/csrf_protection.ex	/^  defmodule InvalidCrossOriginRequestError do$/;"	m
InvalidHeaderError	deps/plug/lib/plug/conn.ex	/^  defmodule InvalidHeaderError do$/;"	m
InvalidMessageError	deps/phoenix/lib/phoenix/socket.ex	/^  defmodule InvalidMessageError do$/;"	m
InvalidPathError	deps/plug/lib/plug/static.ex	/^  defmodule InvalidPathError do$/;"	m
InvalidQueryError	deps/plug/lib/plug/conn.ex	/^  defmodule InvalidQueryError do$/;"	m
InvalidSpecError	deps/plug/lib/plug/router/utils.ex	/^defmodule Plug.Router.InvalidSpecError do$/;"	m
InvalidURLError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.InvalidURLError do$/;"	m
Invitation	deps/coherence/test/support/schema.exs	/^defmodule TestCoherence.Invitation do$/;"	m
Invitation	deps/coherence/web/models/invitation.ex	/^defmodule Coherence.Invitation do$/;"	m
InvitationController	deps/coherence/test/controllers/invitation_controller_test.exs	/^defmodule CoherenceTest.InvitationController do$/;"	m
InvitationController	deps/coherence/web/controllers/invitation_controller.ex	/^defmodule Coherence.InvitationController do$/;"	m
InvitationView	deps/coherence/priv/templates/coh.install/views/coherence/invitation_view.ex	/^defmodule Coherence.InvitationView do$/;"	m
InvitationView	deps/coherence/priv/templates/coherence.install/views/coherence/invitation_view.ex	/^defmodule Coherence.InvitationView do$/;"	m
InvitationView	deps/coherence/test/support/views.exs	/^defmodule TestCoherence.Coherence.InvitationView do$/;"	m
IpAddress	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^defmodule Coherence.Authentication.IpAddress do$/;"	m
IpAddress	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^defmodule CoherenceTest.Authentication.IpAddress do$/;"	m
IpAllowAllPlug	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defmodule IpAllowAllPlug do$/;"	m
IpPlug	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defmodule IpPlug do$/;"	m
Item	deps/con_cache/lib/con_cache.ex	/^defmodule ConCache.Item do$/;"	m
Item	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Item do$/;"	m
Item	deps/ecto/lib/ecto/schema.ex	/^      defmodule Item do$/;"	m
JSON	deps/plug/lib/plug/parsers/json.ex	/^defmodule Plug.Parsers.JSON do$/;"	m
JSON	deps/postgrex/lib/postgrex/extensions/json.ex	/^defmodule Postgrex.Extensions.JSON do$/;"	m
JSONB	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^defmodule Postgrex.Extensions.JSONB do$/;"	m
JSONHeaderPlug	deps/plug/lib/plug.ex	/^      defmodule JSONHeaderPlug do$/;"	m
Join	deps/ecto/lib/ecto/query/builder/join.ex	/^defmodule Ecto.Query.Builder.Join do$/;"	m
JoinExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule JoinExpr do$/;"	m
JoinsTest	deps/ecto/integration_test/cases/joins.exs	/^defmodule Ecto.Integration.JoinsTest do$/;"	m
Json	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Json do$/;"	m
Json	deps/phoenix/lib/mix/tasks/phx.gen.json.ex	/^defmodule Mix.Tasks.Phx.Gen.Json do$/;"	m
Julian	deps/timex/lib/calendar/julian.ex	/^defmodule Timex.Calendar.Julian do$/;"	m
KeyGenerator	deps/plug/lib/plug/crypto/key_generator.ex	/^defmodule Plug.Crypto.KeyGenerator do$/;"	m
LTree	deps/postgrex/lib/postgrex/extension.ex	/^      defmodule MyApp.LTree do$/;"	m
LayoutView	deps/coherence/priv/templates/coh.install/views/coherence/layout_view.ex	/^defmodule Coherence.LayoutView do$/;"	m
LayoutView	deps/coherence/priv/templates/coherence.install/views/coherence/layout_view.ex	/^defmodule Coherence.LayoutView do$/;"	m
LayoutView	deps/coherence/test/support/views.exs	/^defmodule Coherence.LayoutView do$/;"	m
LayoutView	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  defmodule LayoutView do$/;"	m
LeapSecParser	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^defmodule Tzdata.LeapSecParser do$/;"	m
LeapSecond	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule LeapSecond do$/;"	m
Lexeme	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Lexeme do$/;"	m
LimitOffset	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^defmodule Ecto.Query.Builder.LimitOffset do$/;"	m
Line	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Line do$/;"	m
Line	deps/postgrex/lib/postgrex/extensions/line.ex	/^defmodule Postgrex.Extensions.Line do$/;"	m
LineSegment	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.LineSegment do$/;"	m
LineSegment	deps/postgrex/lib/postgrex/extensions/line_segment.ex	/^defmodule Postgrex.Extensions.LineSegment do$/;"	m
Link	deps/phoenix_html/lib/phoenix_html/link.ex	/^defmodule Phoenix.HTML.Link do$/;"	m
Load	deps/ecto/lib/mix/tasks/ecto.load.ex	/^defmodule Mix.Tasks.Ecto.Load do$/;"	m
LoadError	deps/distillery/lib/mix/lib/releases/config/load_error.ex	/^defmodule Mix.Releases.Config.LoadError do$/;"	m
Local	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^defmodule Phoenix.PubSub.Local do$/;"	m
Local	deps/swoosh/lib/swoosh/adapters/local.ex	/^defmodule Swoosh.Adapters.Local do$/;"	m
Local	deps/timex/lib/timezone/timezone_local.ex	/^defmodule Timex.Timezone.Local do$/;"	m
LocalSupervisor	deps/phoenix_pubsub/lib/phoenix/pubsub/local_supervisor.ex	/^defmodule Phoenix.PubSub.LocalSupervisor do$/;"	m
Lock	deps/con_cache/lib/con_cache/lock.ex	/^defmodule ConCache.Lock do$/;"	m
Lock	deps/ecto/lib/ecto/query/builder/lock.ex	/^defmodule Ecto.Query.Builder.Lock do$/;"	m
LockCounter	deps/ecto/integration_test/sql/lock.exs	/^  defmodule LockCounter do$/;"	m
LockSupervisor	deps/con_cache/lib/con_cache/lock_supervisor.ex	/^defmodule ConCache.LockSupervisor do$/;"	m
LockTest	deps/ecto/integration_test/sql/lock.exs	/^defmodule Ecto.Integration.LockTest do$/;"	m
LockableService	deps/coherence/test/services/lockable_service_test.exs	/^defmodule CoherenceTest.LockableService do$/;"	m
LockableService	deps/coherence/web/services/lockable_service.ex	/^defmodule Coherence.LockableService do$/;"	m
LogEntry	deps/db_connection/lib/db_connection/log_entry.ex	/^defmodule DBConnection.LogEntry do$/;"	m
LogEntry	deps/ecto/lib/ecto/log_entry.ex	/^defmodule Ecto.LogEntry do$/;"	m
Logger	deps/distillery/lib/mix/lib/releases/logger.ex	/^defmodule Mix.Releases.Logger do$/;"	m
Logger	deps/phoenix/lib/phoenix/logger.ex	/^defmodule Phoenix.Logger do$/;"	m
Logger	deps/plug/lib/plug/logger.ex	/^defmodule Plug.Logger do$/;"	m
Logger	deps/swoosh/lib/swoosh/adapters/logger.ex	/^defmodule Swoosh.Adapters.Logger do$/;"	m
LongPoll	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^defmodule Phoenix.Transports.LongPoll do$/;"	m
LongPollSerializer	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^defmodule Phoenix.Transports.LongPollSerializer do$/;"	m
MACADDR	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.MACADDR do$/;"	m
MACADDR	deps/postgrex/lib/postgrex/extensions/macaddr.ex	/^defmodule Postgrex.Extensions.MACADDR do$/;"	m
MIME	deps/mime/lib/mime.ex	/^defmodule MIME do$/;"	m
MIME	deps/plug/lib/plug/mime.ex	/^defmodule Plug.MIME do$/;"	m
MULTIPART	deps/plug/lib/plug/parsers/multipart.ex	/^defmodule Plug.Parsers.MULTIPART do$/;"	m
Macros	deps/timex/lib/timex/macros.ex	/^defmodule Timex.Macros do$/;"	m
MailboxPreview	deps/swoosh/lib/plug/mailbox_preview.ex	/^  defmodule Plug.Swoosh.MailboxPreview do$/;"	m
Mailer	deps/coherence/test/support/email.exs	/^defmodule TestCoherence.Coherence.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/local.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/logger.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^        defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/smtp.ex	/^        defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/adapters/test.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/mailer.ex	/^      defmodule Sample.Mailer do$/;"	m
Mailer	deps/swoosh/lib/swoosh/mailer.ex	/^defmodule Swoosh.Mailer do$/;"	m
Mailgun	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^defmodule Swoosh.Adapters.Mailgun do$/;"	m
MakeTemplates	deps/coherence/lib/mix/tasks/coherence.make_templates.ex	/^defmodule Mix.Tasks.Coherence.MakeTemplates do$/;"	m
Manager	deps/db_connection/lib/db_connection/ownership/manager.ex	/^defmodule DBConnection.Ownership.Manager do$/;"	m
Mandrill	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^defmodule Swoosh.Adapters.Mandrill do$/;"	m
ManyToMany	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.ManyToMany do$/;"	m
Match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^defmodule Fuzzyurl.Match do$/;"	m
Memory	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^defmodule Swoosh.Adapters.Local.Storage.Memory do$/;"	m
Merge	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^defmodule Mix.Tasks.Gettext.Merge do$/;"	m
Merger	deps/gettext/lib/gettext/merger.ex	/^defmodule Gettext.Merger do$/;"	m
Message	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Message do$/;"	m
MessageEncryptor	deps/plug/lib/plug/crypto/message_encryptor.ex	/^defmodule Plug.Crypto.MessageEncryptor do$/;"	m
MessageVerifier	deps/plug/lib/plug/crypto/message_verifier.ex	/^defmodule Plug.Crypto.MessageVerifier do$/;"	m
Messages	deps/coherence/lib/coherence/messages.ex	/^defmodule Coherence.Messages do$/;"	m
Messages	deps/coherence/test/support/messages.exs	/^defmodule TestCoherence.Coherence.Messages do$/;"	m
Messages	deps/postgrex/lib/postgrex/messages.ex	/^defmodule Postgrex.Messages do$/;"	m
Metadata	deps/ecto/lib/ecto/schema.ex	/^  defmodule Metadata do$/;"	m
MethodOverride	deps/plug/lib/plug/method_override.ex	/^defmodule Plug.MethodOverride do$/;"	m
Migrate	deps/ecto/lib/mix/tasks/ecto.migrate.ex	/^defmodule Mix.Tasks.Ecto.Migrate do$/;"	m
Migration	deps/ecto/integration_test/support/migration.exs	/^defmodule Ecto.Integration.Migration do$/;"	m
Migration	deps/ecto/lib/ecto/adapter/migration.ex	/^defmodule Ecto.Adapter.Migration  do$/;"	m
Migration	deps/ecto/lib/ecto/migration.ex	/^defmodule Ecto.Migration do$/;"	m
Migration	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^defmodule Mix.Tasks.Ecto.Gen.Migration do$/;"	m
MigrationError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.MigrationError do$/;"	m
MigrationExample	deps/ecto/lib/ecto/migrator.ex	/^      defmodule MyApp.MigrationExample do$/;"	m
MigrationTest	deps/ecto/integration_test/sql/migration.exs	/^defmodule Ecto.Integration.MigrationTest do$/;"	m
Migrations	deps/coherence/test/support/migrations.exs	/^defmodule TestCoherence.Migrations do$/;"	m
Migrations	deps/ecto/lib/mix/tasks/ecto.migrations.ex	/^defmodule Mix.Tasks.Ecto.Migrations do$/;"	m
Migrator	deps/ecto/lib/ecto/migrator.ex	/^defmodule Ecto.Migrator do$/;"	m
MigratorTest	deps/ecto/integration_test/cases/migrator.exs	/^defmodule Ecto.Integration.MigratorTest do$/;"	m
MissingBindingsError	deps/gettext/lib/gettext.ex	/^  defmodule MissingBindingsError do$/;"	m
MissingParamError	deps/phoenix/lib/phoenix/exceptions.ex	/^defmodule Phoenix.MissingParamError do$/;"	m
MixHelper	deps/coherence/test/mix_helpers.exs	/^defmodule MixHelper do$/;"	m
Mixfile	apps/flexcility/mix.exs	/^defmodule Flexcility.Mixfile do$/;"	m
Mixfile	apps/flexcility_web/mix.exs	/^defmodule Flexcility.Web.Mixfile do$/;"	m
Mixfile	deps/bcrypt_elixir/mix.exs	/^defmodule BcryptElixir.Mixfile do$/;"	m
Mixfile	deps/bolt_sips/mix.exs	/^defmodule BoltSips.Mixfile do$/;"	m
Mixfile	deps/boltex/mix.exs	/^defmodule Boltex.Mixfile do$/;"	m
Mixfile	deps/coherence/mix.exs	/^defmodule Coherence.Mixfile do$/;"	m
Mixfile	deps/combine/mix.exs	/^defmodule Combine.Mixfile do$/;"	m
Mixfile	deps/comeonin/mix.exs	/^defmodule Comeonin.Mixfile do$/;"	m
Mixfile	deps/con_cache/mix.exs	/^defmodule ConCache.Mixfile do$/;"	m
Mixfile	deps/connection/mix.exs	/^defmodule Connection.Mixfile do$/;"	m
Mixfile	deps/cors_plug/mix.exs	/^defmodule CorsPlug.Mixfile do$/;"	m
Mixfile	deps/db_connection/mix.exs	/^defmodule DBConnection.Mixfile do$/;"	m
Mixfile	deps/decimal/mix.exs	/^defmodule Decimal.Mixfile do$/;"	m
Mixfile	deps/distillery/mix.exs	/^defmodule Distillery.Mixfile do$/;"	m
Mixfile	deps/ecto/mix.exs	/^defmodule Ecto.Mixfile do$/;"	m
Mixfile	deps/elixir_make/mix.exs	/^defmodule ElixirMake.Mixfile do$/;"	m
Mixfile	deps/exactor/mix.exs	/^defmodule ExActor.Mixfile do$/;"	m
Mixfile	deps/fuzzyurl/mix.exs	/^defmodule Fuzzyurl.Mixfile do$/;"	m
Mixfile	deps/gettext/mix.exs	/^defmodule Gettext.Mixfile do$/;"	m
Mixfile	deps/mime/mix.exs	/^defmodule MIME.Mixfile do$/;"	m
Mixfile	deps/phoenix/mix.exs	/^defmodule Phoenix.Mixfile do$/;"	m
Mixfile	deps/phoenix_ecto/mix.exs	/^defmodule PhoenixEcto.Mixfile do$/;"	m
Mixfile	deps/phoenix_html/mix.exs	/^defmodule PhoenixHtml.Mixfile do$/;"	m
Mixfile	deps/phoenix_pubsub/mix.exs	/^defmodule Phoenix.PubSub.Mixfile do$/;"	m
Mixfile	deps/phoenix_swoosh/mix.exs	/^defmodule PhoenixSwoosh.Mixfile do$/;"	m
Mixfile	deps/plug/mix.exs	/^defmodule Plug.Mixfile do$/;"	m
Mixfile	deps/poison/mix.exs	/^defmodule Poison.Mixfile do$/;"	m
Mixfile	deps/postgrex/mix.exs	/^defmodule Postgrex.Mixfile do$/;"	m
Mixfile	deps/retry/mix.exs	/^defmodule Retry.Mixfile do$/;"	m
Mixfile	deps/swoosh/mix.exs	/^defmodule Swoosh.Mixfile do$/;"	m
Mixfile	deps/timex/mix.exs	/^defmodule Timex.Mixfile do$/;"	m
Mixfile	deps/timex_ecto/mix.exs	/^defmodule TimexEcto.Mixfile do$/;"	m
Mixfile	deps/tzdata/mix.exs	/^defmodule Tzdata.Mixfile do$/;"	m
Mixfile	deps/uuid/mix.exs	/^defmodule UUID.Mixfile do$/;"	m
Mixfile	mix.exs	/^defmodule Flexcility.Umbrella.Mixfile do$/;"	m
Model	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Model do$/;"	m
ModelCase	deps/coherence/test/support/model_case.exs	/^defmodule TestCoherence.ModelCase do$/;"	m
Monitors	deps/con_cache/lib/con_cache/lock/monitors.ex	/^defmodule ConCache.Lock.Monitors do$/;"	m
Multi	deps/ecto/lib/ecto/multi.ex	/^defmodule Ecto.Multi do$/;"	m
MultiplePrimaryKeyError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.MultiplePrimaryKeyError do$/;"	m
MultipleResultsError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.MultipleResultsError do$/;"	m
MyApp	deps/plug/lib/plug/adapters/cowboy.ex	/^      defmodule MyApp do$/;"	m
MyApp	deps/plug/lib/plug/builder.ex	/^      defmodule MyApp do$/;"	m
MyApp	deps/plug/lib/plug/debugger.ex	/^      defmodule MyApp do$/;"	m
MyChannel	deps/phoenix/lib/phoenix/presence.ex	/^      defmodule MyApp.MyChannel do$/;"	m
MyController	deps/phoenix/lib/phoenix/controller.ex	/^      defmodule MyController do$/;"	m
MyFallbackController	deps/phoenix/lib/phoenix/controller.ex	/^      defmodule MyFallbackController do$/;"	m
MyPlug	deps/plug/lib/plug/static.ex	/^      defmodule MyPlug do$/;"	m
MyQueue	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^      defmodule Phoenix.PubSub.MyQueue do$/;"	m
MySQL	deps/ecto/lib/ecto/adapters/mysql.ex	/^defmodule Ecto.Adapters.MySQL do$/;"	m
MyServer	deps/exactor/lib/exactor/empty.ex	/^      defmodule MyServer do$/;"	m
MyServer	deps/exactor/lib/exactor/gen_server.ex	/^      defmodule MyServer do$/;"	m
MyServer	deps/exactor/lib/exactor/operations.ex	/^      defmodule MyServer do$/;"	m
MyServer	deps/exactor/lib/exactor/strict.ex	/^      defmodule MyServer do$/;"	m
MyServer	deps/exactor/lib/exactor/tolerant.ex	/^      defmodule MyServer do$/;"	m
MyTracker	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^      defmodule MyTracker do$/;"	m
Name	deps/postgrex/lib/postgrex/extensions/name.ex	/^defmodule Postgrex.Extensions.Name do$/;"	m
Naming	deps/phoenix/lib/phoenix/naming.ex	/^defmodule Phoenix.Naming do$/;"	m
NoErrorIndexMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoErrorIndexMigration do$/;"	m
NoErrorTableMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoErrorTableMigration do$/;"	m
NoPrimaryKeyFieldError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoPrimaryKeyFieldError do$/;"	m
NoPrimaryKeyValueError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoPrimaryKeyValueError do$/;"	m
NoResultsError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.NoResultsError do$/;"	m
NoRouteError	deps/phoenix/lib/phoenix/router.ex	/^  defmodule NoRouteError do$/;"	m
NoSQLMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule NoSQLMigration do$/;"	m
Node	deps/bolt_sips/lib/bolt_sips/types.ex	/^  defmodule Node do$/;"	m
NoopSerializer	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmodule NoopSerializer do$/;"	m
NotAcceptableError	deps/phoenix/lib/phoenix/exceptions.ex	/^defmodule Phoenix.NotAcceptableError do$/;"	m
NotLoaded	deps/ecto/lib/ecto/association.ex	/^defmodule Ecto.Association.NotLoaded do$/;"	m
NotSentError	deps/plug/lib/plug/conn.ex	/^  defmodule NotSentError do$/;"	m
NotificationChannel	deps/phoenix/lib/phoenix/channel.ex	/^      defmodule MyApp.Endpoint.NotificationChannel do$/;"	m
Notifications	deps/postgrex/lib/postgrex/notifications.ex	/^defmodule Postgrex.Notifications do$/;"	m
Numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^defmodule Postgrex.Extensions.Numeric do$/;"	m
OID	deps/postgrex/lib/postgrex/extensions/oid.ex	/^defmodule Postgrex.Extensions.OID do$/;"	m
OnDeleteMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule OnDeleteMigration do$/;"	m
Operations	deps/con_cache/lib/con_cache/operations.ex	/^defmodule ConCache.Operations do$/;"	m
Operations	deps/exactor/lib/exactor/operations.ex	/^defmodule ExActor.Operations do$/;"	m
Order	deps/ecto/integration_test/cases/repo.exs	/^    defmodule Order do$/;"	m
Order	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Order do$/;"	m
Order	deps/ecto/lib/ecto/schema.ex	/^      defmodule Order do$/;"	m
OrderBy	deps/ecto/lib/ecto/query/builder/order_by.ex	/^defmodule Ecto.Query.Builder.OrderBy do$/;"	m
Organisation	apps/flexcility/lib/flexcility/accounts/organisation.ex	/^defmodule Flexcility.Accounts.Organisation do$/;"	m
Organisation	apps/flexcility/lib/flexcility/admin/organisation.ex	/^defmodule Flexcility.Admin.Organisation do$/;"	m
Organization	deps/ecto/lib/ecto/schema.ex	/^      defmodule Organization do$/;"	m
Overlays	deps/distillery/lib/mix/lib/releases/overlays.ex	/^defmodule Mix.Releases.Overlays do$/;"	m
Owner	deps/con_cache/lib/con_cache/owner.ex	/^defmodule ConCache.Owner do$/;"	m
Ownership	deps/db_connection/lib/db_connection/ownership.ex	/^defmodule DBConnection.Ownership do$/;"	m
OwnershipError	deps/db_connection/lib/db_connection/ownership.ex	/^defmodule DBConnection.OwnershipError do$/;"	m
PG2	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2.ex	/^defmodule Phoenix.PubSub.PG2 do$/;"	m
PG2Server	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^defmodule Phoenix.PubSub.PG2Server do$/;"	m
PO	deps/gettext/lib/gettext/po.ex	/^defmodule Gettext.PO do$/;"	m
PackStream	deps/boltex/lib/boltex/pack_stream.ex	/^defmodule Boltex.PackStream do$/;"	m
Param	deps/phoenix/lib/phoenix/param.ex	/^      defimpl Phoenix.Param, for: unquote(module) do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Any do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Atom do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: BitString do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Integer do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defimpl Phoenix.Param, for: Map do$/;"	i
Param	deps/phoenix/lib/phoenix/param.ex	/^defprotocol Phoenix.Param do$/;"	p
ParamErrorHandlerPlug	deps/coherence/test/plugs/authentication/token_test.exs	/^  defmodule ParamErrorHandlerPlug do$/;"	m
ParamPlug	deps/coherence/test/plugs/authentication/token_test.exs	/^  defmodule ParamPlug do$/;"	m
Parameters	deps/postgrex/lib/postgrex/parameters.ex	/^defmodule Postgrex.Parameters do$/;"	m
Parent	deps/ecto/integration_test/sql/migration.exs	/^  defmodule Parent do$/;"	m
Parent	deps/ecto/lib/ecto/schema.ex	/^      defmodule Parent do$/;"	m
ParseError	deps/plug/lib/plug/parsers.ex	/^  defmodule ParseError do$/;"	m
ParseError	deps/timex/lib/parse/parse_error.ex	/^defmodule Timex.Parse.ParseError do$/;"	m
Parser	deps/gettext/lib/gettext/po/parser.ex	/^defmodule Gettext.PO.Parser do$/;"	m
Parser	deps/poison/lib/poison/parser.ex	/^defmodule Poison.Parser do$/;"	m
Parser	deps/timex/lib/parse/datetime/parser.ex	/^defmodule Timex.Parse.DateTime.Parser do$/;"	m
Parser	deps/timex/lib/parse/duration/parser.ex	/^defmodule Timex.Parse.Duration.Parser do$/;"	m
Parser	deps/timex/lib/parse/zoneinfo/parser.ex	/^defmodule Timex.Parse.ZoneInfo.Parser do$/;"	m
Parser	deps/tzdata/lib/tzdata/parser.ex	/^defmodule Tzdata.Parser do$/;"	m
ParserOrganizer	deps/tzdata/lib/tzdata/parser_organizer.ex	/^defmodule Tzdata.ParserOrganizer do$/;"	m
ParserState	deps/combine/lib/combine/parser_state.ex	/^defmodule Combine.ParserState do$/;"	m
Parsers	deps/plug/lib/plug/parsers.ex	/^defmodule Plug.Parsers do$/;"	m
Parsers	deps/timex/lib/parse/datetime/parsers.ex	/^defmodule Timex.Parse.DateTime.Parsers do$/;"	m
PasswordController	deps/coherence/test/controllers/password_controller_test.exs	/^defmodule CoherenceTest.PasswordController do$/;"	m
PasswordController	deps/coherence/web/controllers/password_controller.ex	/^defmodule Coherence.PasswordController do$/;"	m
PasswordManager	deps/ecto/lib/ecto/multi.ex	/^      defmodule PasswordManager do$/;"	m
PasswordService	deps/coherence/test/services/password_service_test.exs	/^defmodule CoherenceTest.PasswordService do$/;"	m
PasswordService	deps/coherence/web/services/password_service.ex	/^defmodule Coherence.PasswordService do$/;"	m
PasswordView	deps/coherence/priv/templates/coh.install/views/coherence/password_view.ex	/^defmodule Coherence.PasswordView do$/;"	m
PasswordView	deps/coherence/priv/templates/coherence.install/views/coherence/password_view.ex	/^defmodule Coherence.PasswordView do$/;"	m
Path	deps/bolt_sips/lib/bolt_sips/types.ex	/^  defmodule Path do$/;"	m
Path	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Path do$/;"	m
Path	deps/postgrex/lib/postgrex/extensions/path.ex	/^defmodule Postgrex.Extensions.Path do$/;"	m
PeriodBuilder	deps/tzdata/lib/tzdata/period_builder.ex	/^defmodule Tzdata.PeriodBuilder do$/;"	m
Permalink	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Permalink do$/;"	m
Permalink	deps/ecto/integration_test/support/types.exs	/^defmodule Custom.Permalink do$/;"	m
Permalink	deps/ecto/lib/ecto/type.ex	/^      defmodule Permalink do$/;"	m
Permalink	deps/phoenix_html/lib/phoenix_html/form.ex	/^      defmodule Permalink do$/;"	m
Phoenix	deps/phoenix/lib/mix/phoenix.ex	/^defmodule Mix.Phoenix do$/;"	m
Phoenix	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^defmodule Mix.Tasks.Compile.Phoenix do$/;"	m
Phoenix	deps/phoenix/lib/phoenix.ex	/^defmodule Phoenix do$/;"	m
Pipeline	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^defmodule Phoenix.Controller.Pipeline do$/;"	m
Planner	deps/ecto/lib/ecto/query/planner.ex	/^defmodule Ecto.Query.Planner do$/;"	m
Plug	deps/plug/lib/plug.ex	/^defmodule Plug do$/;"	m
PlugUsingHalt	deps/plug/lib/plug/builder.ex	/^      defmodule PlugUsingHalt do$/;"	m
PlugWithCustomCall	deps/plug/lib/plug/builder.ex	/^      defmodule PlugWithCustomCall do$/;"	m
PlugWithCustomOptions	deps/plug/lib/plug/builder.ex	/^      defmodule PlugWithCustomOptions do$/;"	m
Plugin	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^defmodule Mix.Releases.Plugin do$/;"	m
PluginDemo	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      defmodule MyApp.PluginDemo do$/;"	m
Plural	deps/gettext/lib/gettext/plural.ex	/^      defmodule MyApp.Plural do$/;"	m
Plural	deps/gettext/lib/gettext/plural.ex	/^defmodule Gettext.Plural do$/;"	m
PluralTranslation	deps/gettext/lib/gettext/po/plural_translation.ex	/^defmodule Gettext.PO.PluralTranslation do$/;"	m
Point	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Point do$/;"	m
Point	deps/postgrex/lib/postgrex/extensions/point.ex	/^defmodule Postgrex.Extensions.Point do$/;"	m
Poison	deps/poison/lib/poison.ex	/^defmodule Poison do$/;"	m
Polygon	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Polygon do$/;"	m
Polygon	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^defmodule Postgrex.Extensions.Polygon do$/;"	m
Pool	deps/db_connection/lib/db_connection/ownership/pool.ex	/^defmodule DBConnection.Ownership.Pool do$/;"	m
Pool	deps/db_connection/lib/db_connection/pool.ex	/^defmodule DBConnection.Pool do$/;"	m
Pool	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^defmodule DBConnection.Sojourn.Pool do$/;"	m
Pool	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defmodule Pool do$/;"	m
PoolSupervisor	deps/db_connection/lib/db_connection/ownership/pool_supervisor.ex	/^defmodule DBConnection.Ownership.PoolSupervisor do$/;"	m
Poolboy	deps/db_connection/lib/db_connection/poolboy.ex	/^defmodule DBConnection.Poolboy do$/;"	m
Posix	deps/timex/lib/parse/posix/parser.ex	/^defmodule Timex.Parse.Timezones.Posix do$/;"	m
PosixTimezone	deps/timex/lib/parse/posix/parser.ex	/^  defmodule PosixTimezone do$/;"	m
Post	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Post do$/;"	m
Post	deps/ecto/lib/ecto.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/changeset.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/schema.ex	/^      defmodule Post do$/;"	m
Post	deps/ecto/lib/ecto/type.ex	/^      defmodule Post do$/;"	m
PostTest	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      defmodule PostTest do$/;"	m
PostUsecTimestamps	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.PostUsecTimestamps do$/;"	m
PostUser	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.PostUser do$/;"	m
PostUserCompositePk	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.PostUserCompositePk do$/;"	m
Postgres	deps/ecto/lib/ecto/adapters/postgres.ex	/^defmodule Ecto.Adapters.Postgres do$/;"	m
Postgrex	deps/postgrex/lib/postgrex.ex	/^defmodule Postgrex do$/;"	m
Postmark	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^defmodule Swoosh.Adapters.Postmark do$/;"	m
PrefixMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule PrefixMigration do$/;"	m
Preload	deps/ecto/lib/ecto/query/builder/preload.ex	/^defmodule Ecto.Query.Builder.Preload do$/;"	m
PreloadTest	deps/ecto/integration_test/cases/preload.exs	/^defmodule Ecto.Integration.PreloadTest do$/;"	m
Preloader	deps/ecto/lib/ecto/repo/preloader.ex	/^defmodule Ecto.Repo.Preloader do$/;"	m
PrepareStream	deps/db_connection/lib/db_connection.ex	/^defmodule DBConnection.PrepareStream do$/;"	m
Presence	deps/phoenix/lib/mix/tasks/phoenix.gen.presence.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Presence do$/;"	m
Presence	deps/phoenix/lib/mix/tasks/phx.gen.presence.ex	/^defmodule Mix.Tasks.Phx.Gen.Presence do$/;"	m
Presence	deps/phoenix/lib/phoenix/presence.ex	/^      defmodule MyApp.Presence do$/;"	m
Presence	deps/phoenix/lib/phoenix/presence.ex	/^defmodule Phoenix.Presence do$/;"	m
Pretty	deps/poison/lib/poison/encoder.ex	/^defmodule Poison.Pretty do$/;"	m
Profile	deps/distillery/lib/mix/lib/releases/models/profile.ex	/^defmodule Mix.Releases.Profile do$/;"	m
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defimpl Flexcility.Graph.Property, for: Any do$/;"	i
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defimpl Flexcility.Graph.Property, for: BitString do$/;"	i
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defimpl Flexcility.Graph.Property, for: Boolean do$/;"	i
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defimpl Flexcility.Graph.Property, for: Float do$/;"	i
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defimpl Flexcility.Graph.Property, for: Integer do$/;"	i
Property	apps/flexcility/lib/flexcility/graph/property.ex	/^  defprotocol Flexcility.Graph.Property do$/;"	p
Protocol	deps/postgrex/lib/postgrex/protocol.ex	/^defmodule Postgrex.Protocol do$/;"	m
Protocol	deps/timex/lib/date/date.ex	/^defimpl Timex.Protocol, for: Date do$/;"	i
Protocol	deps/timex/lib/datetime/datetime.ex	/^defimpl Timex.Protocol, for: DateTime do$/;"	i
Protocol	deps/timex/lib/datetime/erlang.ex	/^defimpl Timex.Protocol, for: Tuple do$/;"	i
Protocol	deps/timex/lib/datetime/map.ex	/^defimpl Timex.Protocol, for: Map do$/;"	i
Protocol	deps/timex/lib/datetime/naivedatetime.ex	/^defimpl Timex.Protocol, for: NaiveDateTime do$/;"	i
Protocol	deps/timex/lib/protocol.ex	/^defimpl Timex.Protocol, for: Any do$/;"	i
Protocol	deps/timex/lib/protocol.ex	/^defprotocol Timex.Protocol do$/;"	p
Protocols	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^defmodule Fuzzyurl.Protocols do$/;"	m
Proxy	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^defmodule DBConnection.Ownership.Proxy do$/;"	m
Proxy	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^defmodule Phoenix.CodeReloader.Proxy do$/;"	m
ProxySupervisor	deps/db_connection/lib/db_connection/ownership/proxy_supervisor.ex	/^defmodule DBConnection.Ownership.ProxySupervisor do$/;"	m
PubSub	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^defmodule Phoenix.PubSub do$/;"	m
PubSubTest	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^defmodule Phoenix.PubSubTest do$/;"	m
Query	deps/bolt_sips/lib/bolt_sips/query.ex	/^defmodule Bolt.Sips.Query do$/;"	m
Query	deps/db_connection/lib/db_connection/query.ex	/^defprotocol DBConnection.Query do$/;"	p
Query	deps/ecto/lib/ecto/query.ex	/^defmodule Ecto.Query do$/;"	m
Query	deps/plug/lib/plug/conn/query.ex	/^defmodule Plug.Conn.Query do$/;"	m
Query	deps/postgrex/lib/postgrex/parameters.ex	/^defimpl DBConnection.Query, for: Postgrex.Parameters do$/;"	i
Query	deps/postgrex/lib/postgrex/query.ex	/^defimpl DBConnection.Query, for: Postgrex.Query do$/;"	i
Query	deps/postgrex/lib/postgrex/query.ex	/^defmodule Postgrex.Query do$/;"	m
Query	deps/postgrex/lib/postgrex/stream.ex	/^defimpl DBConnection.Query, for: Postgrex.Copy do$/;"	i
Query	deps/postgrex/lib/postgrex/stream.ex	/^defimpl DBConnection.Query, for: Postgrex.Stream do$/;"	i
QueryError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.QueryError do$/;"	m
QueryExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule QueryExpr do$/;"	m
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Atom do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: BitString do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Ecto.Query do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Ecto.SubQuery do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defimpl Ecto.Queryable, for: Tuple do$/;"	i
Queryable	deps/ecto/lib/ecto/queryable.ex	/^defprotocol Ecto.Queryable do$/;"	p
Queryable	deps/ecto/lib/ecto/repo/queryable.ex	/^defmodule Ecto.Repo.Queryable do$/;"	m
RAW	deps/ecto/integration_test/cases/repo.exs	/^    defmodule RAW do$/;"	m
Range	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Range do$/;"	m
Range	deps/postgrex/lib/postgrex/extensions/range.ex	/^defmodule Postgrex.Extensions.Range do$/;"	m
Raw	deps/postgrex/lib/postgrex/extensions/raw.ex	/^defmodule Postgrex.Extensions.Raw do$/;"	m
Record	deps/postgrex/lib/postgrex/extensions/record.ex	/^defmodule Postgrex.Extensions.Record do$/;"	m
Redirects	deps/coherence/lib/coherence/redirects.ex	/^defmodule Redirects do$/;"	m
Redirects	deps/coherence/priv/templates/coh.install/controllers/coherence/redirects.ex	/^defmodule Coherence.Redirects do$/;"	m
Redirects	deps/coherence/priv/templates/coherence.install/controllers/coherence/redirects.ex	/^defmodule Coherence.Redirects do$/;"	m
Redirects	deps/coherence/test/support/redirect.exs	/^defmodule Coherence.Redirects do$/;"	m
Reference	deps/ecto/lib/ecto/migration.ex	/^  defmodule Reference do$/;"	m
ReferencesRollbackMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule ReferencesRollbackMigration do$/;"	m
Registration	apps/flexcility/lib/flexcility/accounts/registration.ex	/^defmodule Flexcility.Accounts.Registration do$/;"	m
RegistrationController	apps/flexcility_web/lib/flexcility_web/controllers/registration_controller.ex	/^defmodule Flexcility.Web.RegistrationController do$/;"	m
RegistrationController	deps/coherence/test/controllers/registration_controller_test.exs	/^defmodule CoherenceTest.RegistrationController do$/;"	m
RegistrationController	deps/coherence/web/controllers/registration_controller.ex	/^defmodule Coherence.RegistrationController do$/;"	m
RegistrationControllerTest	apps/flexcility_web/test/controllers/registration_controller_test.exs	/^defmodule Flexcility.Web.RegistrationControllerTest do$/;"	m
RegistrationView	apps/flexcility_web/lib/flexcility_web/views/registration_view.ex	/^defmodule Flexcility.Web.RegistrationView do$/;"	m
RegistrationView	deps/coherence/priv/templates/coh.install/views/coherence/registration_view.ex	/^defmodule Coherence.RegistrationView do$/;"	m
RegistrationView	deps/coherence/priv/templates/coherence.install/views/coherence/registration_view.ex	/^defmodule Coherence.RegistrationView do$/;"	m
Registry	deps/ecto/lib/ecto/registry.ex	/^defmodule Ecto.Registry do$/;"	m
Regulator	deps/db_connection/lib/db_connection/sojourn/regulator.ex	/^defmodule DBConnection.Sojourn.Regulator do$/;"	m
Relation	deps/ecto/lib/ecto/changeset/relation.ex	/^defmodule Ecto.Changeset.Relation do$/;"	m
Relationship	deps/bolt_sips/lib/bolt_sips/types.ex	/^  defmodule Relationship do$/;"	m
Relative	deps/timex/lib/format/datetime/formatters/relative.ex	/^defmodule Timex.Format.DateTime.Formatters.Relative do$/;"	m
Release	deps/distillery/lib/distillery/tasks/release.ex	/^defmodule Mix.Tasks.Release do$/;"	m
Release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^defmodule Mix.Releases.Release do$/;"	m
ReleaseReader	deps/tzdata/lib/tzdata/release_reader.ex	/^defmodule Tzdata.ReleaseReader do$/;"	m
ReleaseUpdater	deps/tzdata/lib/tzdata/release_updater.ex	/^defmodule Tzdata.ReleaseUpdater do$/;"	m
Rememberable	deps/coherence/test/controllers/rememberable_test.exs	/^defmodule CoherenceTest.Rememberable do$/;"	m
Rememberable	deps/coherence/test/support/schema.exs	/^defmodule TestCoherence.Rememberable do$/;"	m
Rememberable	deps/coherence/web/models/rememberable.ex	/^defmodule Coherence.Rememberable do$/;"	m
RememberablePlug	deps/coherence/test/plugs/authentication/session_test.exs	/^  defmodule RememberablePlug do$/;"	m
RememberableServer	deps/coherence/lib/coherence/rememberable_server.ex	/^defmodule Coherence.RememberableServer do$/;"	m
RememberableService	deps/coherence/web/services/rememberable_service.ex	/^defmodule Coherence.RememberableService do$/;"	m
RememberableTest	deps/coherence/test/models/rememberable_test.exs	/^defmodule Coherence.RememberableTest do$/;"	m
RenameColumnMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule RenameColumnMigration do$/;"	m
RenameMigration	deps/ecto/integration_test/sql/migration.exs	/^  defmodule RenameMigration do$/;"	m
Render	deps/swoosh/lib/swoosh/email/render.ex	/^defmodule Swoosh.Email.Render do$/;"	m
RenderErrors	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^defmodule Phoenix.Endpoint.RenderErrors do$/;"	m
Replica	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^defmodule Phoenix.Tracker.Replica do$/;"	m
Reply	deps/phoenix/lib/phoenix/socket/message.ex	/^defmodule Phoenix.Socket.Reply do$/;"	m
Repo	deps/coherence/test/support/repo.exs	/^defmodule TestCoherence.Repo do$/;"	m
Repo	deps/ecto/integration_test/support/repo.exs	/^defmodule Ecto.Integration.Repo do$/;"	m
Repo	deps/ecto/lib/ecto.ex	/^      defmodule Repo do$/;"	m
Repo	deps/ecto/lib/ecto/repo.ex	/^      defmodule Repo do$/;"	m
Repo	deps/ecto/lib/ecto/repo.ex	/^defmodule Ecto.Repo do$/;"	m
Repo	deps/ecto/lib/mix/tasks/ecto.gen.repo.ex	/^defmodule Mix.Tasks.Ecto.Gen.Repo do$/;"	m
RepoSetup	deps/coherence/test/test_helper.exs	/^defmodule Coherence.RepoSetup do$/;"	m
RepoTest	deps/ecto/integration_test/cases/repo.exs	/^defmodule Ecto.Integration.RepoTest do$/;"	m
RequestId	deps/plug/lib/plug/request_id.ex	/^defmodule Plug.RequestId do$/;"	m
RequestTooLargeError	deps/plug/lib/plug/parsers.ex	/^  defmodule RequestTooLargeError do$/;"	m
RequireLogin	deps/coherence/lib/coherence/plugs/require_login.ex	/^defmodule Coherence.RequireLogin do$/;"	m
Resource	deps/con_cache/lib/con_cache/lock/resource.ex	/^defmodule ConCache.Lock.Resource do$/;"	m
Resource	deps/phoenix/lib/phoenix/router/resource.ex	/^defmodule Phoenix.Router.Resource do$/;"	m
Responders	deps/exactor/lib/exactor/responders.ex	/^defmodule ExActor.Responders do$/;"	m
Response	deps/bolt_sips/lib/bolt_sips/response.ex	/^defmodule Bolt.Sips.Response do$/;"	m
Result	deps/postgrex/lib/postgrex/result.ex	/^defmodule Postgrex.Result do$/;"	m
Retry	deps/retry/lib/retry.ex	/^defmodule Retry do$/;"	m
Rollback	deps/ecto/lib/mix/tasks/ecto.rollback.ex	/^defmodule Mix.Tasks.Ecto.Rollback do$/;"	m
Route	deps/phoenix/lib/phoenix/router/route.ex	/^defmodule Phoenix.Router.Route do$/;"	m
Router	apps/flexcility_web/lib/flexcility_web/router.ex	/^defmodule Flexcility.Web.Router do$/;"	m
Router	deps/coherence/test/support/router.exs	/^defmodule TestCoherence.Web.Router do$/;"	m
Router	deps/coherence/web/router.ex	/^      defmodule MyProject.Router do$/;"	m
Router	deps/coherence/web/router.ex	/^defmodule Coherence.Router do$/;"	m
Router	deps/phoenix/lib/phoenix/router.ex	/^      defmodule MyApp.Web.Router do$/;"	m
Router	deps/phoenix/lib/phoenix/router.ex	/^defmodule Phoenix.Router do$/;"	m
Router	deps/plug/lib/plug/router.ex	/^defmodule Plug.Router do$/;"	m
Router	deps/swoosh/lib/plug/mailbox_preview.ex	/^        defmodule Sample.Router do$/;"	m
Routes	deps/phoenix/lib/mix/tasks/phoenix.routes.ex	/^defmodule Mix.Tasks.Phoenix.Routes do$/;"	m
Routes	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^defmodule Mix.Tasks.Phx.Routes do$/;"	m
Runner	deps/ecto/lib/ecto/migration/runner.ex	/^defmodule Ecto.Migration.Runner do$/;"	m
SMTP	deps/swoosh/lib/swoosh/adapters/smtp.ex	/^  defmodule Swoosh.Adapters.SMTP do$/;"	m
SQL	deps/ecto/lib/ecto/adapters/sql.ex	/^defmodule Ecto.Adapters.SQL do$/;"	m
SQLTest	deps/ecto/integration_test/sql/sql.exs	/^defmodule Ecto.Integration.SQLTest do$/;"	m
SSL	deps/plug/lib/plug/ssl.ex	/^defmodule Plug.SSL do$/;"	m
Safe	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defimpl Phoenix.HTML.Safe, for: [Ecto.Time, Ecto.Date, Ecto.DateTime] do$/;"	i
Safe	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^  defimpl Phoenix.HTML.Safe, for: Decimal do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Atom do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: BitString do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Date do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: DateTime do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Float do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Integer do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: List do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: NaiveDateTime do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Time do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defimpl Phoenix.HTML.Safe, for: Tuple do$/;"	i
Safe	deps/phoenix_html/lib/phoenix_html/safe.ex	/^defprotocol Phoenix.HTML.Safe do$/;"	p
Sandbox	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^defmodule Ecto.Adapters.SQL.Sandbox do$/;"	m
Sandbox	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^defmodule Phoenix.Ecto.SQL.Sandbox do$/;"	m
SandboxTest	deps/ecto/integration_test/sql/sandbox.exs	/^defmodule Ecto.Integration.SandboxTest do$/;"	m
Schema	deps/coherence/lib/coherence/schema.ex	/^defmodule Coherence.Schema do$/;"	m
Schema	deps/coherence/test/schema_test.exs	/^defmodule CoherenceTest.Schema do$/;"	m
Schema	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Schema do$/;"	m
Schema	deps/ecto/lib/ecto/repo/schema.ex	/^defmodule Ecto.Repo.Schema do$/;"	m
Schema	deps/ecto/lib/ecto/schema.ex	/^      defmodule MyApp.Schema do$/;"	m
Schema	deps/ecto/lib/ecto/schema.ex	/^defmodule Ecto.Schema do$/;"	m
Schema	deps/phoenix/lib/mix/phoenix/schema.ex	/^defmodule Mix.Phoenix.Schema do$/;"	m
Schema	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^defmodule Mix.Tasks.Phx.Gen.Schema do$/;"	m
SchemaMigration	deps/ecto/lib/ecto/migration/schema_migration.ex	/^defmodule Ecto.Migration.SchemaMigration do$/;"	m
Scope	deps/phoenix/lib/phoenix/router/scope.ex	/^defmodule Phoenix.Router.Scope do$/;"	m
Secret	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^defmodule Mix.Tasks.Phoenix.Gen.Secret do$/;"	m
Secret	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^defmodule Mix.Tasks.Phx.Gen.Secret do$/;"	m
Select	deps/ecto/lib/ecto/query/builder/select.ex	/^defmodule Ecto.Query.Builder.Select do$/;"	m
SelectExpr	deps/ecto/lib/ecto/query.ex	/^  defmodule SelectExpr do$/;"	m
Sendgrid	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^defmodule Swoosh.Adapters.Sendgrid do$/;"	m
Sendmail	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^  defmodule Swoosh.Adapters.Sendmail do$/;"	m
Serializer	deps/phoenix/lib/phoenix/transports/serializer.ex	/^defmodule Phoenix.Transports.Serializer do$/;"	m
Server	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^defmodule Mix.Tasks.Phoenix.Server do$/;"	m
Server	deps/phoenix/lib/mix/tasks/phx.server.ex	/^defmodule Mix.Tasks.Phx.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/channel/server.ex	/^defmodule Phoenix.Channel.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^defmodule Phoenix.CodeReloader.Server do$/;"	m
Server	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^defmodule Phoenix.Transports.LongPoll.Server do$/;"	m
Server	deps/swoosh/lib/mix/tasks/swoosh.mailbox.server.ex	/^defmodule Mix.Tasks.Swoosh.Mailbox.Server do$/;"	m
Session	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^defmodule Coherence.CredentialStore.Session do$/;"	m
Session	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^defmodule Coherence.Authentication.Session do$/;"	m
Session	deps/coherence/test/plugs/authentication/session_test.exs	/^defmodule CoherenceTest.Plug.Session do$/;"	m
Session	deps/plug/lib/plug/session.ex	/^defmodule Plug.Session do$/;"	m
SessionController	apps/flexcility_web/lib/flexcility_web/controllers/session_controller.ex	/^defmodule Flexcility.Web.SessionController do$/;"	m
SessionController	deps/coherence/test/controllers/session_controller_test.exs	/^defmodule CoherenceTest.SessionController do$/;"	m
SessionController	deps/coherence/web/controllers/session_controller.ex	/^defmodule Coherence.SessionController do$/;"	m
SessionService	deps/coherence/web/services/session_service.ex	/^defmodule Coherence.SessionService do$/;"	m
SessionView	apps/flexcility_web/lib/flexcility_web/views/session_view.ex	/^defmodule Flexcility.Web.SessionView do$/;"	m
SessionView	deps/coherence/priv/templates/coh.install/views/coherence/session_view.ex	/^defmodule Coherence.SessionView do$/;"	m
SessionView	deps/coherence/priv/templates/coherence.install/views/coherence/session_view.ex	/^defmodule Coherence.SessionView do$/;"	m
SessionView	deps/coherence/test/support/views.exs	/^defmodule TestCoherence.Coherence.SessionView do$/;"	m
Sips	deps/bolt_sips/lib/bolt_sips.ex	/^defmodule Bolt.Sips do$/;"	m
Site	apps/flexcility/lib/flexcility/admin/site.ex	/^defmodule Flexcility.Admin.Site do$/;"	m
SiteController	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^defmodule Flexcility.Web.SiteController do$/;"	m
SiteControllerTest	apps/flexcility_web/test/controllers/site_controller_test.exs	/^defmodule Flexcility.Web.SiteControllerTest do$/;"	m
SiteView	apps/flexcility_web/lib/flexcility_web/views/site_view.ex	/^defmodule Flexcility.Web.SiteView do$/;"	m
Socket	deps/phoenix/lib/phoenix/socket.ex	/^defmodule Phoenix.Socket do$/;"	m
Sojourn	deps/db_connection/lib/db_connection/sojourn.ex	/^defmodule DBConnection.Sojourn do$/;"	m
SojournError	deps/db_connection/lib/db_connection/sojourn.ex	/^defmodule DBConnection.SojournError do$/;"	m
SparkPost	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^defmodule Swoosh.Adapters.SparkPost do$/;"	m
StaleEntryError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.StaleEntryError do$/;"	m
Starter	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^defmodule DBConnection.Sojourn.Starter do$/;"	m
State	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^defmodule Phoenix.Tracker.State do$/;"	m
Static	deps/plug/lib/plug/static.ex	/^defmodule Plug.Static do$/;"	m
Stats	deps/bcrypt_elixir/lib/bcrypt/stats.ex	/^defmodule Bcrypt.Stats do$/;"	m
Status	deps/plug/lib/plug/conn/status.ex	/^defmodule Plug.Conn.Status do$/;"	m
Storage	deps/ecto/lib/ecto/adapter/storage.ex	/^defmodule Ecto.Adapter.Storage  do$/;"	m
Store	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^      defmodule MyProject.Store do$/;"	m
Store	deps/plug/lib/plug/session/store.ex	/^defmodule Plug.Session.Store do$/;"	m
Stream	deps/db_connection/lib/db_connection.ex	/^defmodule DBConnection.Stream do$/;"	m
Stream	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^defmodule Ecto.Adapters.SQL.Stream do$/;"	m
Stream	deps/postgrex/lib/postgrex/stream.ex	/^defmodule Postgrex.Stream do$/;"	m
StreamTest	deps/ecto/integration_test/sql/stream.exs	/^defmodule Ecto.Integration.StreamTest do$/;"	m
Strftime	deps/timex/lib/format/datetime/formatters/strftime.ex	/^defmodule Timex.Format.DateTime.Formatters.Strftime do$/;"	m
Strftime	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^defmodule Timex.Parse.DateTime.Tokenizers.Strftime do$/;"	m
Strict	deps/exactor/lib/exactor/behaviour/strict.ex	/^defmodule ExActor.Behaviour.Strict do$/;"	m
Strict	deps/exactor/lib/exactor/strict.ex	/^defmodule ExActor.Strict do$/;"	m
Strings	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^defmodule Fuzzyurl.Strings do$/;"	m
Structure	deps/ecto/lib/ecto/adapter/structure.ex	/^defmodule Ecto.Adapter.Structure  do$/;"	m
SubQuery	deps/ecto/lib/ecto/query.ex	/^defmodule Ecto.SubQuery do$/;"	m
SubQueryError	deps/ecto/lib/ecto/exceptions.ex	/^defmodule Ecto.SubQueryError do$/;"	m
SubQueryTest	deps/ecto/integration_test/sql/subquery.exs	/^defmodule Ecto.Integration.SubQueryTest do$/;"	m
Success	deps/bolt_sips/lib/bolt_sips/success.ex	/^defmodule Bolt.Sips.Success do$/;"	m
SuperExtension	deps/postgrex/lib/postgrex/super_extension.ex	/^defmodule Postgrex.SuperExtension do$/;"	m
Supervisor	deps/coherence/lib/coherence/supervisor.ex	/^defmodule Coherence.Supervisor do$/;"	m
Supervisor	deps/db_connection/lib/db_connection/sojourn/supervisor.ex	/^defmodule DBConnection.Sojourn.Supervisor do$/;"	m
Supervisor	deps/ecto/lib/ecto/migration/supervisor.ex	/^defmodule Ecto.Migration.Supervisor do$/;"	m
Supervisor	deps/ecto/lib/ecto/repo/supervisor.ex	/^defmodule Ecto.Repo.Supervisor do$/;"	m
Supervisor	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^defmodule Phoenix.Endpoint.Supervisor do$/;"	m
Supervisor	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^defmodule Phoenix.Transports.LongPoll.Supervisor do$/;"	m
Supervisor	deps/phoenix_pubsub/lib/phoenix/pubsub/supervisor.ex	/^defmodule Phoenix.PubSub.Supervisor do$/;"	m
Supervisor	deps/plug/lib/plug/supervisor.ex	/^defmodule Plug.Supervisor do$/;"	m
Swoosh	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^defmodule Phoenix.Swoosh do$/;"	m
Swoosh	deps/swoosh/lib/swoosh.ex	/^defmodule Swoosh do$/;"	m
SwooshTest	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^defmodule Phoenix.SwooshTest do$/;"	m
SyntaxError	deps/gettext/lib/gettext/po/exceptions.ex	/^defmodule Gettext.PO.SyntaxError do$/;"	m
SyntaxError	deps/poison/lib/poison/parser.ex	/^defmodule Poison.SyntaxError do$/;"	m
TCPConnection	deps/connection/lib/connection.ex	/^      defmodule TCPConnection do$/;"	m
TID	deps/postgrex/lib/postgrex/extensions/tid.ex	/^defmodule Postgrex.Extensions.TID do$/;"	m
TSVector	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^defmodule Postgrex.Extensions.TSVector do$/;"	m
Table	deps/ecto/lib/ecto/migration.ex	/^  defmodule Table do$/;"	m
TableData	deps/tzdata/lib/tzdata/table_data.ex	/^defmodule Tzdata.TableData do$/;"	m
TableParser	deps/tzdata/lib/tzdata/table_parser.ex	/^defmodule Tzdata.TableParser do$/;"	m
Tag	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.Tag do$/;"	m
Tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^defmodule Phoenix.HTML.Tag do$/;"	m
Tagged	deps/ecto/lib/ecto/query.ex	/^  defmodule Tagged do$/;"	m
Task	deps/db_connection/lib/db_connection/task.ex	/^defmodule DBConnection.Task do$/;"	m
Task	deps/ecto/lib/ecto/schema.ex	/^      defmodule Task do$/;"	m
Template	deps/phoenix/lib/phoenix/template.ex	/^defmodule Phoenix.Template do$/;"	m
Templates	deps/phoenix/lib/phoenix/template.ex	/^      defmodule Templates do$/;"	m
Test	deps/coherence/test/plugs/authentication/basic_test.exs	/^defmodule Coherence.Authentication.Basic.Test do$/;"	m
Test	deps/combine/lib/combine.ex	/^      defmodule Test do$/;"	m
Test	deps/plug/lib/plug/test.ex	/^defmodule Plug.Test do$/;"	m
Test	deps/swoosh/lib/swoosh/adapters/test.ex	/^defmodule Swoosh.Adapters.Test do$/;"	m
TestAssertions	deps/swoosh/lib/swoosh/test_assertions.ex	/^defmodule Swoosh.TestAssertions do$/;"	m
TestEmail	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  defmodule TestEmail do$/;"	m
TestEmailLayout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  defmodule TestEmailLayout do$/;"	m
TestHelpers	deps/coherence/test/support/test_helpers.exs	/^defmodule TestCoherence.TestHelpers do$/;"	m
TestPlug	deps/coherence/test/plugs/authentication/basic_test.exs	/^  defmodule TestPlug do$/;"	m
TestPlug	deps/coherence/test/plugs/authentication/session_test.exs	/^  defmodule TestPlug do$/;"	m
Text	deps/combine/lib/combine/parsers/text.ex	/^defmodule Combine.Parsers.Text do$/;"	m
Time	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^  defmodule Ecto.Adapters.Postgres.Time do$/;"	m
Time	deps/ecto/lib/ecto/date_time.ex	/^defmodule Ecto.Time do$/;"	m
Time	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Time do$/;"	m
Time	deps/postgrex/lib/postgrex/extensions/time.ex	/^defmodule Postgrex.Extensions.Time do$/;"	m
Time	deps/timex/lib/time/time.ex	/^defmodule Timex.Time do$/;"	m
Time	deps/timex_ecto/lib/types/time.ex	/^defmodule Timex.Ecto.Time do$/;"	m
TimeTZ	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^defmodule Postgrex.Extensions.TimeTZ do$/;"	m
TimeoutError	deps/plug/lib/plug/exceptions.ex	/^defmodule Plug.TimeoutError do$/;"	m
Timestamp	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^  defmodule Ecto.Adapters.Postgres.Timestamp do$/;"	m
Timestamp	deps/postgrex/lib/postgrex/builtins.ex	/^defmodule Postgrex.Timestamp do$/;"	m
Timestamp	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^defmodule Postgrex.Extensions.Timestamp do$/;"	m
TimestampTZ	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^  defmodule Ecto.Adapters.Postgres.TimestampTZ do$/;"	m
TimestampTZ	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^defmodule Postgrex.Extensions.TimestampTZ do$/;"	m
Timestamps	deps/timex_ecto/lib/model.ex	/^defmodule Timex.Ecto.Timestamps do$/;"	m
Timex	deps/timex/lib/timex.ex	/^defmodule Timex do$/;"	m
Timezone	deps/timex/lib/timezone/timezone.ex	/^defmodule Timex.Timezone do$/;"	m
TimezoneInfo	deps/timex/lib/timezone/timezone_info.ex	/^defmodule Timex.TimezoneInfo do$/;"	m
Token	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^defmodule Coherence.Authentication.Token do$/;"	m
Token	deps/coherence/test/plugs/authentication/token_test.exs	/^defmodule CoherenceTest.Authentication.Token do$/;"	m
Token	deps/phoenix/lib/phoenix/token.ex	/^defmodule Phoenix.Token do$/;"	m
Tokenizer	deps/gettext/lib/gettext/po/tokenizer.ex	/^defmodule Gettext.PO.Tokenizer do$/;"	m
Tokenizer	deps/timex/lib/parse/datetime/tokenizer.ex	/^defmodule Timex.Parse.DateTime.Tokenizer do$/;"	m
Tolerant	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^defmodule ExActor.Behaviour.Tolerant do$/;"	m
Tolerant	deps/exactor/lib/exactor/tolerant.ex	/^defmodule ExActor.Tolerant do$/;"	m
Tools	deps/bcrypt_elixir/lib/bcrypt/tools.ex	/^defmodule Bcrypt.Tools do$/;"	m
Trackable	deps/coherence/web/models/trackable.ex	/^defmodule Coherence.Trackable do$/;"	m
TrackableService	deps/coherence/test/services/trackable_service_test.exs	/^defmodule CoherenceTest.TrackableService do$/;"	m
TrackableService	deps/coherence/web/services/trackable_service.ex	/^defmodule Coherence.TrackableService do$/;"	m
Tracker	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^defmodule Phoenix.Tracker do$/;"	m
Trans	deps/ecto/integration_test/sql/transaction.exs	/^  defmodule Trans do$/;"	m
Transaction	deps/bolt_sips/lib/bolt_sips/transaction.ex	/^defmodule Bolt.Sips.Transaction do$/;"	m
Transaction	deps/ecto/lib/ecto/adapter/transaction.ex	/^defmodule Ecto.Adapter.Transaction  do$/;"	m
TransactionTest	deps/ecto/integration_test/sql/transaction.exs	/^defmodule Ecto.Integration.TransactionTest do$/;"	m
TransitionInfo	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule TransitionInfo do$/;"	m
Translation	deps/gettext/lib/gettext/po/translation.ex	/^defmodule Gettext.PO.Translation do$/;"	m
Translations	deps/gettext/lib/gettext/po/translations.ex	/^defmodule Gettext.PO.Translations do$/;"	m
Translator	deps/plug/lib/plug/adapters/translator.ex	/^defmodule Plug.Adapters.Translator do$/;"	m
Translator	deps/timex/lib/l10n/translator.ex	/^defmodule Timex.Translator do$/;"	m
Transport	deps/phoenix/lib/phoenix/socket/transport.ex	/^defmodule Phoenix.Socket.Transport do$/;"	m
Type	deps/ecto/lib/ecto/type.ex	/^defmodule Ecto.Type do$/;"	m
TypeInfo	deps/postgrex/lib/postgrex/type_info.ex	/^defmodule Postgrex.TypeInfo do$/;"	m
TypeManager	deps/postgrex/lib/postgrex/type_manager.ex	/^defmodule Postgrex.TypeManager do$/;"	m
TypeModule	deps/postgrex/lib/postgrex/type_module.ex	/^defmodule Postgrex.TypeModule do$/;"	m
TypeServer	deps/postgrex/lib/postgrex/type_server.ex	/^defmodule Postgrex.TypeServer do$/;"	m
TypeSupervisor	deps/postgrex/lib/postgrex/type_supervisor.ex	/^defmodule Postgrex.TypeSupervisor do$/;"	m
TypeTest	deps/ecto/integration_test/cases/type.exs	/^defmodule Ecto.Integration.TypeTest do$/;"	m
Types	deps/bolt_sips/lib/bolt_sips/types.ex	/^defmodule Bolt.Sips.Types do$/;"	m
Types	deps/postgrex/lib/postgrex/types.ex	/^defmodule Postgrex.Types do$/;"	m
Types	deps/timex/lib/timex/types.ex	/^defmodule Timex.Types do$/;"	m
Tzdata	deps/tzdata/lib/tzdata.ex	/^defmodule Tzdata do$/;"	m
URLENCODED	deps/plug/lib/plug/parsers/urlencoded.ex	/^defmodule Plug.Parsers.URLENCODED do$/;"	m
UUID	deps/ecto/lib/ecto/uuid.ex	/^defmodule Ecto.UUID do$/;"	m
UUID	deps/postgrex/lib/postgrex/extensions/uuid.ex	/^defmodule Postgrex.Extensions.UUID do$/;"	m
UUID	deps/uuid/lib/uuid.ex	/^defmodule UUID do$/;"	m
UnboundRelationship	deps/bolt_sips/lib/bolt_sips/types.ex	/^  defmodule UnboundRelationship do$/;"	m
UndefinedError	deps/phoenix/lib/phoenix/template.ex	/^  defmodule UndefinedError do$/;"	m
Unfetched	deps/plug/lib/plug/conn/unfetched.ex	/^defmodule Plug.Conn.Unfetched do$/;"	m
UniqueError	deps/ecto/integration_test/sql/transaction.exs	/^  defmodule UniqueError do$/;"	m
UnknownLocaleError	deps/gettext/lib/gettext/plural.ex	/^  defmodule UnknownLocaleError do$/;"	m
UnlockController	deps/coherence/test/controllers/unlock_controller_test.exs	/^defmodule CoherenceTest.UnlockController do$/;"	m
UnlockController	deps/coherence/web/controllers/unlock_controller.ex	/^defmodule Coherence.UnlockController do$/;"	m
UnlockView	deps/coherence/priv/templates/coh.install/views/coherence/unlock_view.ex	/^defmodule Coherence.UnlockView do$/;"	m
UnlockView	deps/coherence/priv/templates/coherence.install/views/coherence/unlock_view.ex	/^defmodule Coherence.UnlockView do$/;"	m
UnsupportedMediaTypeError	deps/plug/lib/plug/parsers.ex	/^  defmodule UnsupportedMediaTypeError do$/;"	m
Update	deps/ecto/lib/ecto/query/builder/update.ex	/^defmodule Ecto.Query.Builder.Update do$/;"	m
Upload	deps/plug/lib/plug/upload.ex	/^defmodule Plug.Upload do$/;"	m
UploadError	deps/plug/lib/plug/upload.ex	/^defmodule Plug.UploadError do$/;"	m
User	apps/flexcility/lib/flexcility/accounts/user.ex	/^defmodule Flexcility.Accounts.User do$/;"	m
User	apps/flexcility/priv/repo/migrations/20170505060115_create_web_accounts_user.exs	/^defmodule Flexcility.Web.Repo.Migrations.CreateFlexcility.Web.Accounts.User do$/;"	m
User	deps/coherence/lib/coherence/schema.ex	/^      defmodule MyProject.User do$/;"	m
User	deps/coherence/test/support/schema.exs	/^defmodule TestCoherence.User do$/;"	m
User	deps/ecto/integration_test/support/schemas.exs	/^defmodule Ecto.Integration.User do$/;"	m
User	deps/ecto/lib/ecto.ex	/^      defmodule User do$/;"	m
User	deps/ecto/lib/ecto/changeset.ex	/^      defmodule User do$/;"	m
User	deps/ecto/lib/ecto/schema.ex	/^      defmodule User do$/;"	m
User	deps/phoenix/lib/phoenix/param.ex	/^      defmodule User do$/;"	m
User	deps/phoenix_html/lib/phoenix_html/form.ex	/^      defmodule User do$/;"	m
User	deps/timex_ecto/lib/model.ex	/^  defmodule User do$/;"	m
UserController	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^defmodule Flexcility.Web.UserController do$/;"	m
UserController	deps/phoenix/lib/phoenix/controller.ex	/^      defmodule MyApp.UserController do$/;"	m
UserControllerTest	apps/flexcility_web/test/controllers/user_controller_test.exs	/^defmodule Flexcility.Web.UserControllerTest do$/;"	m
UserEmail	deps/coherence/test/support/email.exs	/^defmodule TestCoherence.Coherence.UserEmail do$/;"	m
UserEmail	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^      defmodule Sample.UserEmail do$/;"	m
UserOrganization	deps/ecto/lib/ecto/schema.ex	/^      defmodule UserOrganization do$/;"	m
UserSocket	apps/flexcility_web/lib/flexcility_web/channels/user_socket.ex	/^defmodule Flexcility.Web.UserSocket do$/;"	m
UserSocket	deps/phoenix/lib/phoenix/socket.ex	/^      defmodule MyApp.UserSocket do$/;"	m
UserSocket	deps/phoenix/lib/phoenix/token.ex	/^      defmodule MyApp.UserSocket do$/;"	m
UserView	apps/flexcility_web/lib/flexcility_web/views/user_view.ex	/^defmodule Flexcility.Web.UserView do$/;"	m
UserView	deps/phoenix/lib/phoenix/view.ex	/^      defmodule YourApp.UserView do$/;"	m
Util	deps/tzdata/lib/tzdata/util.ex	/^defmodule Tzdata.Util do$/;"	m
Utils	apps/flexcility/lib/flexcility/utils/utils.ex	/^defmodule Flexcility.Utils do$/;"	m
Utils	deps/bolt_sips/lib/bolt_sips/utils.ex	/^defmodule Bolt.Sips.Utils do$/;"	m
Utils	deps/boltex/lib/boltex/utils.ex	/^defmodule Boltex.Utils do$/;"	m
Utils	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^defmodule Coherence.Authentication.Utils do$/;"	m
Utils	deps/coherence/lib/mix/mix_utils.ex	/^defmodule Coherence.Mix.Utils do$/;"	m
Utils	deps/distillery/lib/mix/lib/releases/utils.ex	/^defmodule Mix.Releases.Utils do$/;"	m
Utils	deps/ecto/lib/ecto/date_time.ex	/^defmodule Ecto.DateTime.Utils do$/;"	m
Utils	deps/plug/lib/plug/conn/utils.ex	/^defmodule Plug.Conn.Utils do$/;"	m
Utils	deps/plug/lib/plug/router/utils.ex	/^defmodule Plug.Router.Utils do$/;"	m
Utils	deps/postgrex/lib/postgrex/utils.ex	/^defmodule Postgrex.Utils do$/;"	m
Utils	deps/timex/lib/comparable/utils.ex	/^defmodule Timex.Comparable.Utils do$/;"	m
Utils	deps/timex/lib/timezone/utils.ex	/^defmodule Timex.Timezone.Utils do$/;"	m
ValidateOption	deps/coherence/lib/coherence/plugs/validate_option.ex	/^defmodule Coherence.ValidateOption do$/;"	m
View	deps/phoenix/lib/phoenix/view.ex	/^defmodule Phoenix.View do$/;"	m
ViewHelpers	deps/coherence/test/support/view_helpers.exs	/^defmodule TestCoherence.ViewHelpers do$/;"	m
ViewHelpers	deps/coherence/test/view_helpers_test.exs	/^defmodule CoherenceTest.ViewHelpers do$/;"	m
VoidBinary	deps/postgrex/lib/postgrex/extensions/void_binary.ex	/^defmodule Postgrex.Extensions.VoidBinary do$/;"	m
VoidText	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^defmodule Postgrex.Extensions.VoidText do$/;"	m
Watcher	deps/db_connection/lib/db_connection/watcher.ex	/^defmodule DBConnection.Watcher do$/;"	m
Watcher	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^defmodule Phoenix.Endpoint.Watcher do$/;"	m
Weather	deps/ecto/lib/ecto.ex	/^      defmodule Weather do$/;"	m
Web	apps/flexcility_web/lib/flexcility_web.ex	/^defmodule Flexcility.Web do$/;"	m
Web	deps/coherence/test/support/web.exs	/^defmodule TestCoherence.Coherence.Web do$/;"	m
Web	deps/coherence/web/web.ex	/^defmodule Coherence.Web do$/;"	m
Web	deps/phoenix/lib/phoenix/view.ex	/^      defmodule YourApp.Web do$/;"	m
WebSocket	deps/phoenix/lib/phoenix/transports/websocket.ex	/^defmodule Phoenix.Transports.WebSocket do$/;"	m
WebSocketSerializer	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^defmodule Phoenix.Transports.WebSocketSerializer do$/;"	m
Worker	deps/db_connection/lib/db_connection/poolboy/worker.ex	/^defmodule DBConnection.Poolboy.Worker do$/;"	m
WrapperError	deps/plug/lib/plug/conn/wrapper_error.ex	/^defmodule Plug.Conn.WrapperError do$/;"	m
Zone	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmodule Zone do$/;"	m
__action_fallback__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def __action_fallback__(plug) do$/;"	f
__adapter__	deps/ecto/lib/ecto/repo.ex	/^      def __adapter__ do$/;"	f
__adapter__	deps/swoosh/lib/swoosh/mailer.ex	/^      def __adapter__, do: @adapter$/;"	f
__after_compile__	deps/ecto/lib/ecto/schema.ex	/^  def __after_compile__(%{module: module} = env, _) do$/;"	f
__apply__	deps/ecto/lib/ecto/multi.ex	/^  def __apply__(%Multi{} = multi, repo, wrap, return) do$/;"	f
__assocs__	deps/ecto/lib/ecto/schema.ex	/^  def __assocs__(assocs) do$/;"	f
__autogenerate__	deps/ecto/lib/ecto/schema.ex	/^  def __autogenerate__(id, insert, update) do$/;"	f
__before_compile__	deps/ecto/lib/ecto/adapters/sql.ex	/^      defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/ecto/lib/ecto/adapters/sql.ex	/^  def __before_compile__(conn, _env) do$/;"	f
__before_compile__	deps/ecto/lib/ecto/migration.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__before_compile__	deps/gettext/lib/gettext/compiler.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/router.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/phoenix/lib/phoenix/template.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/plug/lib/plug/builder.ex	/^  defmacro __before_compile__(env) do$/;"	a
__before_compile__	deps/plug/lib/plug/debugger.ex	/^  defmacro __before_compile__(_) do$/;"	a
__before_compile__	deps/plug/lib/plug/error_handler.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__before_compile__	deps/plug/lib/plug/router.ex	/^  defmacro __before_compile__(_env) do$/;"	a
__belongs_to__	deps/ecto/lib/ecto/schema.ex	/^  def __belongs_to__(mod, name, queryable, opts) do$/;"	f
__build__	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  def __build__(repo, statement, params, mapper, opts) do$/;"	f
__call__	deps/phoenix/lib/phoenix/router.ex	/^  def __call__({%Plug.Conn{private: %{phoenix_bypass: :all}} = conn, _pipeline, _dispatch}) do$/;"	f
__call__	deps/phoenix/lib/phoenix/router.ex	/^  def __call__({%Plug.Conn{private: %{phoenix_router: router, phoenix_bypass: {router, pipes}}} = conn, _pipeline, _dispatch}) do$/;"	f
__call__	deps/phoenix/lib/phoenix/router.ex	/^  def __call__({conn, pipeline, dispatch}) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def __catch__(%Plug.Conn{} = conn, kind, reason, _controller, _action, _stack) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def __catch__(%Plug.Conn{}, :error, :function_clause, controller, action,$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def __catch__(conn, kind, reason, opts) do$/;"	f
__catch__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp __catch__(conn, kind, reason, stack, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  def __catch__(conn, kind, reason, opts) do$/;"	f
__catch__	deps/plug/lib/plug/debugger.ex	/^  defp __catch__(conn, kind, reason, stack, opts) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  def __catch__(_conn, :error, %Plug.Conn.WrapperError{} = wrapper, handle_errors) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  def __catch__(conn, kind, reason, handle_errors) do$/;"	f
__catch__	deps/plug/lib/plug/error_handler.ex	/^  defp __catch__(conn, kind, reason, wrapped_reason, stack, handle_errors) do$/;"	f
__changeset__	deps/ecto/lib/ecto/schema.ex	/^      def __changeset__, do: unquote(map)$/;"	f
__changeset__	deps/ecto/lib/ecto/schema.ex	/^  def __changeset__(changeset_fields) do$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(_topic, _transport), do: nil$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(unquote(topic_match), _transport), do: unquote(channel_module)$/;"	f
__channel__	deps/phoenix/lib/phoenix/socket.ex	/^      def __channel__(unquote(topic_match), transport)$/;"	f
__defstruct__	deps/ecto/lib/ecto/schema.ex	/^  def __defstruct__(struct_fields) do$/;"	f
__deriving__	deps/phoenix/lib/phoenix/param.ex	/^  defmacro __deriving__(module, struct, options) do$/;"	a
__deriving__	deps/poison/lib/poison/encoder.ex	/^  defmacro __deriving__(module, struct, options) do$/;"	a
__dumper__	deps/ecto/lib/ecto/schema.ex	/^  def __dumper__(fields, field_sources) do$/;"	f
__embeds__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds__(embeds) do$/;"	f
__embeds_many__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds_many__(mod, name, schema, opts) do$/;"	f
__embeds_module__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds_module__(env, name, opts, block) do$/;"	f
__embeds_one__	deps/ecto/lib/ecto/schema.ex	/^  def __embeds_one__(mod, name, schema, opts) do$/;"	f
__field__	deps/ecto/lib/ecto/schema.ex	/^  def __field__(mod, name, type, opts) do$/;"	f
__field_sources__	deps/ecto/lib/ecto/schema.ex	/^  def __field_sources__(fields, field_sources) do$/;"	f
__force_ssl__	deps/phoenix/lib/phoenix/endpoint.ex	/^  def __force_ssl__(module, config) do$/;"	f
__gettext__	deps/gettext/lib/gettext/compiler.ex	/^      def __gettext__(:known_locales), do: unquote(known_locales)$/;"	f
__gettext__	deps/gettext/lib/gettext/compiler.ex	/^      def __gettext__(:otp_app),       do: unquote(otp_app)$/;"	f
__gettext__	deps/gettext/lib/gettext/compiler.ex	/^      def __gettext__(:priv),          do: unquote(priv)$/;"	f
__has_many__	deps/ecto/lib/ecto/schema.ex	/^  def __has_many__(mod, name, queryable, opts) do$/;"	f
__has_one__	deps/ecto/lib/ecto/schema.ex	/^  def __has_one__(mod, name, queryable, opts) do$/;"	f
__helpers__	deps/phoenix/lib/phoenix/router.ex	/^      def __helpers__, do: __MODULE__.Helpers$/;"	f
__intercepts__	deps/phoenix/lib/phoenix/channel.ex	/^      def __intercepts__, do: @phoenix_intercepts$/;"	f
__layout__	deps/phoenix/lib/phoenix/controller.ex	/^  def __layout__(controller_module, opts) do$/;"	f
__loader__	deps/ecto/lib/ecto/schema.ex	/^  def __loader__(fields, field_sources) do$/;"	f
__log__	deps/ecto/lib/ecto/repo.ex	/^      def __log__(entry) do$/;"	f
__many_to_many__	deps/ecto/lib/ecto/schema.ex	/^  def __many_to_many__(mod, name, queryable, opts) do$/;"	f
__match_route__	deps/phoenix/lib/phoenix/router.ex	/^        def __match_route__(conn, _method, _path_info, _host) do$/;"	f
__match_route__	deps/phoenix/lib/phoenix/router.ex	/^      def __match_route__(var!(conn), unquote(exprs.verb_match), unquote(exprs.path),$/;"	f
__migration__	deps/ecto/lib/ecto/migration.ex	/^      def __migration__,$/;"	f
__on_definition__	deps/phoenix/lib/phoenix/channel.ex	/^  def __on_definition__(_env, _kind, _name, _args, _guards, _body) do$/;"	f
__on_definition__	deps/phoenix/lib/phoenix/channel.ex	/^  def __on_definition__(env, :def, :handle_out, [event, _payload, _socket], _, _)$/;"	f
__phoenix_recompile__?	deps/phoenix/lib/phoenix/template.ex	/^      def __phoenix_recompile__? do$/;"	f
__prefix__	deps/ecto/lib/ecto/migration.ex	/^  def __prefix__(%{prefix: prefix} = index_or_table) do$/;"	f
__pubsub_server__	deps/phoenix/lib/phoenix/endpoint.ex	/^      def __pubsub_server__, do: @pubsub_server$/;"	f
__read_after_writes__	deps/ecto/lib/ecto/schema.ex	/^  def __read_after_writes__(fields) do$/;"	f
__resource__	deps/phoenix/lib/phoenix/view.ex	/^      def __resource__, do: @view_resource$/;"	f
__route__	deps/plug/lib/plug/router.ex	/^  def __route__(method, path, guards, options) do$/;"	f
__routes__	deps/phoenix/lib/phoenix/router.ex	/^      def __routes__,  do: unquote(Macro.escape(routes))$/;"	f
__safe_load__	deps/ecto/lib/ecto/schema.ex	/^  def __safe_load__(struct, types, values, prefix, source, loader) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:association, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:embed, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:field_source, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:source_type, unquote(field_sources[name] || name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^          def __schema__(:type, unquote(name)) do$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:association, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:associations), do: unquote(assoc_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:autogenerate), do: unquote(Macro.escape(insert))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:autogenerate_id), do: unquote(Macro.escape(id))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:autoupdate), do: unquote(Macro.escape(update))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:dump), do: %{unquote_splicing(mapping)}$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:embed, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:embeds), do: unquote(embed_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:field_source, _field), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:fields),      do: unquote(field_names)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:hash),        do: unquote(hash)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:load), do: unquote(mapping)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:prefix),      do: unquote(prefix)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:primary_key), do: unquote(primary_key)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:query),       do: %Ecto.Query{from: {unquote(source), __MODULE__}, prefix: unquote(prefix)}$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:read_after_writes), do: unquote(Enum.reverse(fields))$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:source),      do: unquote(source)$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:source_type, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^      def __schema__(:type, _), do: nil$/;"	f
__schema__	deps/ecto/lib/ecto/schema.ex	/^  def __schema__(prefix, source, fields, primary_key) do$/;"	f
__socket__	deps/phoenix/lib/phoenix/channel.ex	/^      def __socket__(:private) do$/;"	f
__sockets__	deps/phoenix/lib/phoenix/endpoint.ex	/^      def __sockets__, do: unquote(sockets)$/;"	f
__sql__	deps/ecto/lib/ecto/adapters/sql.ex	/^      def __sql__, do: unquote(conn)$/;"	f
__stringify__	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def __stringify__(%{__struct__: _} = struct),$/;"	f
__stringify__	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def __stringify__(%{} = params),$/;"	f
__stringify__	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def __stringify__(other),$/;"	f
__template_options__	deps/phoenix/lib/phoenix/view.ex	/^  def __template_options__(module, opts) do$/;"	f
__templates__	deps/phoenix/lib/phoenix/template.ex	/^      def __templates__ do$/;"	f
__timestamps__	deps/ecto/lib/ecto/schema.ex	/^  def __timestamps__(:naive_datetime, :microseconds) do$/;"	f
__timestamps__	deps/ecto/lib/ecto/schema.ex	/^  def __timestamps__(:naive_datetime, :seconds) do$/;"	f
__timestamps__	deps/ecto/lib/ecto/schema.ex	/^  def __timestamps__(type, :microseconds) do$/;"	f
__timestamps__	deps/ecto/lib/ecto/schema.ex	/^  def __timestamps__(type, :seconds) do$/;"	f
__transport__	deps/phoenix/lib/phoenix/socket.ex	/^          def __transport__(unquote(name)) do$/;"	f
__transport__	deps/phoenix/lib/phoenix/socket.ex	/^  def __transport__(transports, name, module, config) do$/;"	f
__transports__	deps/phoenix/lib/phoenix/socket.ex	/^      def __transports__, do: unquote(Macro.escape(transports))$/;"	f
__types__	deps/ecto/lib/ecto/schema.ex	/^  def __types__(fields, field_sources) do$/;"	f
__unsafe_load__	deps/ecto/lib/ecto/schema.ex	/^  def __unsafe_load__(schema, data, loader) do$/;"	f
__unsafe_load__	deps/ecto/lib/ecto/schema.ex	/^  def __unsafe_load__(struct, types, map, loader) when is_map(map) do$/;"	f
__using__	apps/flexcility_web/lib/flexcility_web.ex	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__using__	deps/bolt_sips/lib/bolt_sips/types.ex	/^    defmacro __using__(fields) do$/;"	a
__using__	deps/coherence/lib/coherence/config.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/coherence/lib/coherence/redirects.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/coherence/lib/coherence/schema.ex	/^  defmacro __using__(opts \\\\ []) do$/;"	a
__using__	deps/coherence/priv/templates/coh.install/coherence_web.ex	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__using__	deps/coherence/priv/templates/coherence.install/coherence_web.ex	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__using__	deps/coherence/test/support/web.exs	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__using__	deps/coherence/web/router.ex	/^  defmacro __using__(_opts \\\\ []) do$/;"	a
__using__	deps/coherence/web/services/confirmable_service.ex	/^  defmacro __using__(opts \\\\ []) do$/;"	a
__using__	deps/coherence/web/web.ex	/^  defmacro __using__(which) when is_atom(which) do$/;"	a
__using__	deps/combine/lib/combine.ex	/^  defmacro __using__(opts \\\\ []) do$/;"	a
__using__	deps/combine/lib/combine/helpers.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/connection/lib/connection.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/db_connection/lib/db_connection.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/ecto/integration_test/support/repo.exs	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/ecto/integration_test/support/schemas.exs	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/adapters/sql.ex	/^  defmacro __using__(adapter) do$/;"	a
__using__	deps/ecto/lib/ecto/migration.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/repo.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/ecto/lib/ecto/schema.ex	/^        defmacro __using__(_) do$/;"	a
__using__	deps/ecto/lib/ecto/schema.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/exactor/lib/exactor/behaviour/strict.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/exactor/lib/exactor/empty.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/exactor/lib/exactor/gen_server.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/exactor/lib/exactor/strict.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/exactor/lib/exactor/tolerant.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/gettext/lib/gettext.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro __using__(opts \\\\ []) do$/;"	a
__using__	deps/phoenix/lib/phoenix/controller.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/presence.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix/lib/phoenix/router.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/template.ex	/^  defmacro __using__(options) do$/;"	a
__using__	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix/lib/phoenix/view.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/builder.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/debugger.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/error_handler.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/plug/lib/plug/router.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/plug/lib/plug/test.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/poison/lib/poison/encoder.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/postgrex/lib/postgrex/binary_extension.ex	/^  defmacro __using__(matching) do$/;"	a
__using__	deps/retry/lib/retry.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/swoosh/lib/swoosh/adapter.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/swoosh/lib/swoosh/mailer.ex	/^  defmacro __using__(opts) do$/;"	a
__using__	deps/timex/lib/format/datetime/formatter.ex	/^  defmacro __using__(_opts) do$/;"	a
__using__	deps/timex/lib/format/duration/formatter.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/parse/datetime/tokenizer.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/parse/duration/parser.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/timex.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex/lib/timex/constants.ex	/^  defmacro __using__(_) do$/;"	a
__using__	deps/timex_ecto/lib/model.ex	/^  defmacro __using__(opts) do$/;"	a
__view__	deps/phoenix/lib/phoenix/controller.ex	/^  def __view__(controller_module) do$/;"	f
_string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  defp _string_amount_to_secs([<<?- :: utf8>> <> hours | rest]) when length(rest) == 2 do$/;"	f
_string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  defp _string_amount_to_secs(list) when length(list) == 1 or length(list) == 2 do$/;"	f
_string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  defp _string_amount_to_secs(list) when length(list) == 3 do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{coef: :qNaN} = num) do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{coef: :sNaN} = num) do$/;"	f
abs	deps/decimal/lib/decimal.ex	/^  def abs(%Decimal{} = num) do$/;"	f
abs	deps/timex/lib/time/duration.ex	/^  def abs(%Duration{} = duration) do$/;"	f
absolute_digested_url	deps/phoenix/lib/phoenix/digester.ex	/^  defp absolute_digested_url(url, digested_path) do$/;"	f
absolute_digested_url	deps/phoenix/lib/phoenix/digester.ex	/^  defp absolute_digested_url(url, digested_path, false) do$/;"	f
absolute_digested_url	deps/phoenix/lib/phoenix/digester.ex	/^  defp absolute_digested_url(url, digested_path, true) do$/;"	f
accept_encoding?	deps/plug/lib/plug/static.ex	/^  defp accept_encoding?(conn, encoding) do$/;"	f
accepts	deps/coherence/test/controllers/rememberable_test.exs	/^  defp accepts(conn, opts) do$/;"	f
accepts	deps/coherence/test/plugs/authentication/session_test.exs	/^    defp accepts(conn, params), do: Phoenix.Controller.accepts(conn, params)$/;"	f
accepts	deps/phoenix/lib/phoenix/controller.ex	/^  def accepts(conn, [_|_] = accepted) do$/;"	f
accepts_html?	deps/plug/lib/plug/debugger.ex	/^  defp accepts_html?(_accept_header = []),$/;"	f
accepts_html?	deps/plug/lib/plug/debugger.ex	/^  defp accepts_html?(_accept_header = [header | _]),$/;"	f
account_already_confirmed	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def account_already_confirmed, do: dgettext(@domain, "Account already confirmed.")$/;"	f
account_already_confirmed	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def account_already_confirmed, do: dgettext(@domain, "Account already confirmed.")$/;"	f
account_already_confirmed	deps/coherence/test/support/messages.exs	/^  def account_already_confirmed, do: dgettext(@domain, "Account already confirmed.")$/;"	f
account_is_not_locked	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def account_is_not_locked, do: dgettext(@domain, "Account is not locked.")$/;"	f
account_is_not_locked	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def account_is_not_locked, do: dgettext(@domain, "Account is not locked.")$/;"	f
account_is_not_locked	deps/coherence/test/support/messages.exs	/^  def account_is_not_locked, do: dgettext(@domain, "Account is not locked.")$/;"	f
account_updated_successfully	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def account_updated_successfully, do: dgettext(@domain, "Account updated successfully.")$/;"	f
account_updated_successfully	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def account_updated_successfully, do: dgettext(@domain, "Account updated successfully.")$/;"	f
account_updated_successfully	deps/coherence/test/support/messages.exs	/^  def account_updated_successfully, do: dgettext(@domain, "Account updated successfully.")$/;"	f
accumulate_joins	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp accumulate_joins(local, remote_map) do$/;"	f
ack_failure	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  defp ack_failure(non_failure, _, _), do: non_failure$/;"	f
ack_failure	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  defp ack_failure(response = %Boltex.Error{}, transport, port) do$/;"	f
ack_failure	deps/boltex/lib/boltex/bolt.ex	/^  def ack_failure(transport, port, options \\\\ []) do$/;"	f
acquire_next	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp acquire_next($/;"	f
acquire_next	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp acquire_next(%__MODULE__{} = resource) do$/;"	f
action	deps/phoenix/lib/phoenix/controller.ex	/^      def action(conn, _) do$/;"	f
action	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def action(%Plug.Conn{private: %{phoenix_action: action}} = conn, _options) do$/;"	f
action	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def action(var!(conn_before), opts) do$/;"	f
action_fallback	deps/phoenix/lib/phoenix/controller.ex	/^  defmacro action_fallback(plug) do$/;"	a
action_from_changeset	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp action_from_changeset(%{data: %{__meta__: %{state: state}}}) do$/;"	f
action_from_changeset	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp action_from_changeset(_) do$/;"	f
action_name	deps/phoenix/lib/phoenix/controller.ex	/^  def action_name(conn), do: conn.private.phoenix_action$/;"	f
action_to_auto	deps/ecto/lib/ecto/embedded.ex	/^  defp action_to_auto(:insert), do: :autogenerate$/;"	f
action_to_auto	deps/ecto/lib/ecto/embedded.ex	/^  defp action_to_auto(:update), do: :autoupdate$/;"	f
action_to_auto	deps/ecto/lib/ecto/repo/schema.ex	/^  defp action_to_auto(:insert), do: :autogenerate$/;"	f
action_to_auto	deps/ecto/lib/ecto/repo/schema.ex	/^  defp action_to_auto(:update), do: :autoupdate$/;"	f
activate	deps/postgrex/lib/postgrex/protocol.ex	/^  defp activate(%{sock: {mod, sock}} = s, buffer) do$/;"	f
activate	deps/postgrex/lib/postgrex/protocol.ex	/^  defp activate(s, <<>>) do$/;"	f
adapter_dump	deps/ecto/lib/ecto/type.ex	/^  def adapter_dump(_adapter, type, nil),$/;"	f
adapter_dump	deps/ecto/lib/ecto/type.ex	/^  def adapter_dump(adapter, type, value),$/;"	f
adapter_load	deps/ecto/lib/ecto/type.ex	/^  def adapter_load(_adapter, type, nil) do$/;"	f
adapter_load	deps/ecto/lib/ecto/type.ex	/^  def adapter_load(adapter, type, value) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :inf, sign: sign, exp: exp1} = num1, %Decimal{coef: :inf, sign: sign, exp: exp2} = num2) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :inf} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :inf} = num2) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
add	deps/decimal/lib/decimal.ex	/^  def add(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
add	deps/ecto/lib/ecto/migration.ex	/^  def add(column, :datetime, opts) when is_atom(column) do$/;"	f
add	deps/ecto/lib/ecto/migration.ex	/^  def add(column, type, opts \\\\ [])$/;"	f
add	deps/ecto/lib/ecto/migration.ex	/^  def add(column, type, opts) when is_atom(column) and is_list(opts) do$/;"	f
add	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp add(%State{} = state, pid, topic, key, meta) do$/;"	f
add	deps/timex/lib/time/duration.ex	/^  def add(%Duration{megaseconds: mega1, seconds: sec1, microseconds: micro1},$/;"	f
add	deps/timex/lib/timex.ex	/^  def add(date, %Duration{megaseconds: mega, seconds: sec, microseconds: micro}),$/;"	f
add column	deps/ecto/integration_test/sql/migration.exs	/^  test "add column" do$/;"	t
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 < exp2,$/;"	f
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 == exp2,$/;"	f
add_align	deps/decimal/lib/decimal.ex	/^  defp add_align(coef1, exp1, coef2, exp2) when exp1 > exp2,$/;"	f
add_backend	deps/gettext/lib/gettext/extractor_agent.ex	/^  def add_backend(backend) do$/;"	f
add_changeset	deps/ecto/lib/ecto/multi.ex	/^  defp add_changeset(multi, action, name, changeset, opts) when is_list(opts) do$/;"	f
add_constraint	deps/ecto/lib/ecto/changeset.ex	/^  defp add_constraint(%Changeset{constraints: constraints} = changeset,$/;"	f
add_credentials	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  def add_credentials(ip, user_data, store \\\\ Coherence.CredentialStore.Agent) do$/;"	f
add_credentials	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def add_credentials(token, user_data, store \\\\ Coherence.CredentialStore.Agent) do$/;"	f
add_end_marker	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp add_end_marker(string) do$/;"	f
add_end_marker	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp add_end_marker(string) do$/;"	f
add_error	deps/ecto/lib/ecto/changeset.ex	/^  def add_error(%Changeset{errors: errors} = changeset, key, message, keys \\\\ []) when is_binary(message) do$/;"	f
add_hash	deps/comeonin/lib/comeonin/base.ex	/^      def add_hash(password, opts \\\\ []) do$/;"	f
add_headers_to_new_po	deps/gettext/lib/gettext/extractor.ex	/^  defp add_headers_to_new_po(%PO{headers: []} = po) do$/;"	f
add_links_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_links_to_map(map, []), do: map$/;"	f
add_links_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_links_to_map(map, [head|tail]) do$/;"	f
add_operation	deps/ecto/lib/ecto/multi.ex	/^  defp add_operation(%Multi{} = multi, name, operation) do$/;"	f
add_pk_filter!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp add_pk_filter!(filters, struct) do$/;"	f
add_read_after_writes	deps/ecto/lib/ecto/repo/schema.ex	/^  defp add_read_after_writes(return, schema) do$/;"	f
add_reply_to	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  defp add_reply_to(mail) do$/;"	f
add_reply_to	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  defp add_reply_to(mail) do$/;"	f
add_reply_to	deps/coherence/test/support/email.exs	/^  defp add_reply_to(mail) do$/;"	f
add_resource_owner	deps/con_cache/lib/con_cache/lock.ex	/^  defp add_resource_owner(state, id, lock_instance, resource, {caller_pid, _} = from) do$/;"	f
add_resources	deps/phoenix/lib/phoenix/router.ex	/^  defp add_resources(path, controller, options, do: context) do$/;"	f
add_route	deps/phoenix/lib/phoenix/router.ex	/^  defp add_route(kind, verb, path, plug, plug_opts, options) do$/;"	f
add_rules_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_rules_to_map(map, []), do: map$/;"	f
add_rules_to_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp add_rules_to_map(map, [rule|tail]) do$/;"	f
add_seconds	deps/plug/lib/plug/conn/cookies.ex	/^  defp add_seconds(time, seconds_to_add) do$/;"	f
add_sign	deps/decimal/lib/decimal.ex	/^  defp add_sign(sign1, sign2, coef) do$/;"	f
add_timestamp	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp add_timestamp(acc, %{model_found?: false}), do: acc ++ ["", "timestamps()"]$/;"	f
add_timestamp	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp add_timestamp(acc, _), do: acc$/;"	f
add_timestamp	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp add_timestamp(acc, %{model_found?: false}), do: acc ++ ["", "timestamps()"]$/;"	f
add_timestamp	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp add_timestamp(acc, _), do: acc$/;"	f
add_translation	deps/gettext/lib/gettext/extractor_agent.ex	/^  def add_translation(backend, domain, translation) do$/;"	f
adjust_microsecond	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  defp adjust_microsecond(microsec, tz) do$/;"	f
advance_datetime_from_59_to_60_sec	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp advance_datetime_from_59_to_60_sec(datetime) do$/;"	f
aes128_gcm_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes128_gcm_decrypt(cipher_text, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes128_gcm_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes128_gcm_decrypt(cipher_text, secret, sign_secret)$/;"	f
aes128_gcm_encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes128_gcm_encrypt(plain_text, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes128_gcm_encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes128_gcm_encrypt(plain_text, secret, sign_secret)$/;"	f
aes256_cbc_hmac_sha1_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes256_cbc_hmac_sha1_decrypt(cipher_text, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes256_cbc_hmac_sha1_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes256_cbc_hmac_sha1_decrypt(cipher_text, secret, sign_secret)$/;"	f
aes256_cbc_hmac_sha1_encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes256_cbc_hmac_sha1_encrypt(plain_text, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes256_cbc_hmac_sha1_encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes256_cbc_hmac_sha1_encrypt(plain_text, secret, sign_secret)$/;"	f
aes_gcm_key_unwrap	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes_gcm_key_unwrap(wrapped_cek, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes_gcm_key_unwrap	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes_gcm_key_unwrap(wrapped_cek, secret, sign_secret)$/;"	f
aes_gcm_key_wrap	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes_gcm_key_wrap(cek, secret, sign_secret) when bit_size(secret) > 256 do$/;"	f
aes_gcm_key_wrap	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp aes_gcm_key_wrap(cek, secret, sign_secret)$/;"	f
after?	deps/timex/lib/interval/interval.ex	/^    defp after?(%Timex.Interval{until: until, right_open: false}, value), do: Timex.compare(value, until) > 0$/;"	f
after?	deps/timex/lib/interval/interval.ex	/^    defp after?(%Timex.Interval{until: until, right_open: true}, value), do: Timex.compare(value, until) >= 0$/;"	f
after?	deps/timex/lib/timex.ex	/^  def after?(a, b) do$/;"	f
after_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^        def after_assembly(%Release{} = release, _opts) do$/;"	f
after_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      def after_assembly(release), do: release$/;"	f
after_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  def after_assembly(release),  do: call(:after_assembly, release)$/;"	f
after_cleanup	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^        def after_cleanup(_args, _opts) do$/;"	f
after_cleanup	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      def after_cleanup(release, _), do: release$/;"	f
after_cleanup	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  def after_cleanup(release, args), do: run(release.profile.plugins, :after_package, args)$/;"	f
after_compile_validation	deps/ecto/lib/ecto/association.ex	/^  def after_compile_validation(%{queryable: queryable, join_through: join_through}) do$/;"	f
after_compile_validation	deps/ecto/lib/ecto/association.ex	/^  def after_compile_validation(%{queryable: queryable, related_key: related_key}) do$/;"	f
after_compile_validation	deps/ecto/lib/ecto/association.ex	/^  def after_compile_validation(_) do$/;"	f
after_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^        def after_package(%Release{} = release, _opts) do$/;"	f
after_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      def after_package(release), do: release$/;"	f
after_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  def after_package(release),   do: call(:after_package, release)$/;"	f
aggregate	deps/ecto/integration_test/cases/repo.exs	/^  test "aggregate" do$/;"	t
aggregate	deps/ecto/lib/ecto/repo.ex	/^      def aggregate(queryable, aggregate, field, opts \\\\ [])$/;"	f
aggregate	deps/ecto/lib/ecto/repo/queryable.ex	/^  def aggregate(repo, adapter, queryable, aggregate, field, opts) do$/;"	f
aggregate types	deps/ecto/integration_test/cases/type.exs	/^  test "aggregate types" do$/;"	t
ago	deps/ecto/integration_test/cases/interval.exs	/^  test "ago" do$/;"	t
ago	deps/ecto/lib/ecto/query/api.ex	/^  def ago(count, interval), do: doc! [count, interval]$/;"	f
ajax?	deps/phoenix/lib/phoenix/controller.ex	/^  defp ajax?(conn) do$/;"	f
alarm_id	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp alarm_id(opts) do$/;"	f
alarm_id	deps/db_connection/lib/db_connection/sojourn/regulator.ex	/^  defp alarm_id(opts) do$/;"	f
aliases	apps/flexcility/mix.exs	/^  defp aliases do$/;"	f
aliases	apps/flexcility_web/mix.exs	/^  defp aliases do$/;"	f
aliases	deps/distillery/mix.exs	/^  defp aliases do$/;"	f
aliases	deps/swoosh/mix.exs	/^  defp aliases do$/;"	f
all	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def all(resource_type) do$/;"	f
all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def all(query) do$/;"	f
all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def all(query) do$/;"	f
all	deps/ecto/lib/ecto/repo.ex	/^      def all(queryable, opts \\\\ []) do$/;"	f
all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def all(repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
all	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def all() do$/;"	f
all_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def all_options, do: @all_options_atoms$/;"	f
all_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def all_options, do: @all_options_atoms$/;"	f
all_recipients	deps/swoosh/lib/swoosh/adapters/smtp.ex	/^    defp all_recipients(email) do$/;"	f
all_waiting	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp all_waiting(acc, endpoint) do$/;"	f
allow	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def allow(manager, parent, allow, opts) do$/;"	f
allow	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def allow(repo, parent, allow, _opts \\\\ []) do$/;"	f
allow_jsonp	deps/phoenix/lib/phoenix/controller.ex	/^  def allow_jsonp(conn, opts \\\\ []) do$/;"	f
allow_sandbox_access	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  defp allow_sandbox_access(%{repo: repo, owner: owner}, sandbox) do$/;"	f
allow_sandbox_access	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  defp allow_sandbox_access(_metadata, _sandbox), do: nil$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?([], [], _list), do: true$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?(_only, _prefix, []), do: false$/;"	f
allowed?	deps/plug/lib/plug/static.ex	/^  defp allowed?(only, prefix, [h|_]) do$/;"	f
allowed_actions	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp allowed_actions(pk_values) do$/;"	f
allowed_headers	deps/cors_plug/lib/cors_plug.ex	/^  defp allowed_headers(["*"], conn) do$/;"	f
allowed_headers	deps/cors_plug/lib/cors_plug.ex	/^  defp allowed_headers(key, _conn) do$/;"	f
allows an ownership timeout to be passed for an individual	deps/ecto/integration_test/sql/sandbox.exs	/^  test "allows an ownership timeout to be passed for an individual `checkout` call" do$/;"	t
alphanumeric_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp alphanumeric_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
alphanumeric_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp alphanumeric_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
already_checked_out	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp already_checked_out(checkouts, pid) do$/;"	f
already_confirmed	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def already_confirmed, do: dgettext(@domain, "already confirmed")$/;"	f
already_confirmed	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def already_confirmed, do: dgettext(@domain, "already confirmed")$/;"	f
already_confirmed	deps/coherence/test/support/messages.exs	/^  def already_confirmed, do: dgettext(@domain, "already confirmed")$/;"	f
already_locked	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def already_locked, do: dgettext(@domain, "already locked")$/;"	f
already_locked	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def already_locked, do: dgettext(@domain, "already locked")$/;"	f
already_locked	deps/coherence/test/support/messages.exs	/^  def already_locked, do: dgettext(@domain, "already locked")$/;"	f
already_logged_in	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def already_logged_in, do: dgettext(@domain, "Already logged in.")$/;"	f
already_logged_in	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def already_logged_in, do: dgettext(@domain, "Already logged in.")$/;"	f
already_logged_in	deps/coherence/test/support/messages.exs	/^  def already_logged_in, do: dgettext(@domain, "Already logged in.")$/;"	f
alter	deps/ecto/lib/ecto/migration.ex	/^  defmacro alter(object, do: block) do$/;"	a
alter primary key	deps/ecto/integration_test/sql/migration.exs	/^  test "alter primary key" do$/;"	t
ampm	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm(_) do$/;"	f
ampm_lower	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm_lower(_) do$/;"	f
ampm_upper	deps/timex/lib/parse/datetime/parsers.ex	/^  def ampm_upper(_) do$/;"	f
ansic	deps/timex/lib/parse/datetime/parsers.ex	/^  def ansic(opts \\\\ []) do$/;"	f
any_char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp any_char_impl(%ParserState{status: :ok, column: col, input: <<cp::utf8, rest::binary>>, results: results} = state) do$/;"	f
any_char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp any_char_impl(%ParserState{status: :ok} = state) do$/;"	f
any_files?	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp any_files?(files, model, path) do$/;"	f
any_files?	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp any_files?(files, model, path) do$/;"	f
any_nonzero	deps/decimal/lib/decimal.ex	/^  defp any_nonzero(digits),$/;"	f
api_endpoint	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp api_endpoint(%Email{provider_options: %{template_id: _, template_model: _}}),$/;"	f
api_endpoint	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp api_endpoint(_email),$/;"	f
app_instrumenters	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp app_instrumenters(otp_app, endpoint) do$/;"	f
app_mod	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^  defp app_mod(base, name), do: Module.concat([base, name])$/;"	f
append	deps/ecto/lib/ecto/multi.ex	/^  def append(lhs, rhs) do$/;"	f
append_clock	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def append_clock(clockset, {_, clock}) when map_size(clock) == 0, do: clockset$/;"	f
append_clock	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def append_clock(clockset, {node, clock}) do$/;"	f
append_option	deps/con_cache/lib/con_cache/owner.ex	/^  defp append_option(%{options: options} = ets_options, option) do$/;"	f
append_versions	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp append_versions(_table, [], contents) do$/;"	f
append_versions	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp append_versions(table, versions, contents) do$/;"	f
append_versions	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp append_versions(_table, [], path) do$/;"	f
append_versions	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp append_versions(table, versions, path) do$/;"	f
application	apps/flexcility/mix.exs	/^  def application do$/;"	f
application	apps/flexcility_web/mix.exs	/^  def application do$/;"	f
application	deps/bcrypt_elixir/mix.exs	/^  def application do$/;"	f
application	deps/bolt_sips/mix.exs	/^  def application do$/;"	f
application	deps/boltex/mix.exs	/^  def application do$/;"	f
application	deps/coherence/lib/mix/tasks/coh.install.ex	/^    def application do$/;"	f
application	deps/coherence/lib/mix/tasks/coherence.install.ex	/^      def application do$/;"	f
application	deps/coherence/mix.exs	/^  def application do$/;"	f
application	deps/combine/mix.exs	/^  def application, do: [extra_applications: []]$/;"	f
application	deps/comeonin/mix.exs	/^  def application do$/;"	f
application	deps/con_cache/mix.exs	/^  def application do$/;"	f
application	deps/connection/mix.exs	/^  def application do$/;"	f
application	deps/cors_plug/mix.exs	/^  def application do$/;"	f
application	deps/db_connection/mix.exs	/^  def application do$/;"	f
application	deps/decimal/mix.exs	/^  def application() do$/;"	f
application	deps/distillery/mix.exs	/^  def application, do: [applications: []]$/;"	f
application	deps/ecto/mix.exs	/^  def application do$/;"	f
application	deps/elixir_make/mix.exs	/^  def application do$/;"	f
application	deps/exactor/mix.exs	/^  def application, do: [applications: [:logger]]$/;"	f
application	deps/fuzzyurl/mix.exs	/^  def application do$/;"	f
application	deps/gettext/mix.exs	/^  def application do$/;"	f
application	deps/mime/mix.exs	/^  def application do$/;"	f
application	deps/phoenix/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_ecto/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_html/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_pubsub/mix.exs	/^  def application do$/;"	f
application	deps/phoenix_swoosh/mix.exs	/^  def application do$/;"	f
application	deps/plug/mix.exs	/^  def application do$/;"	f
application	deps/poison/mix.exs	/^  def application do$/;"	f
application	deps/postgrex/mix.exs	/^  def application do$/;"	f
application	deps/retry/mix.exs	/^  def application do$/;"	f
application	deps/swoosh/lib/swoosh/adapters/smtp.ex	/^        def application do$/;"	f
application	deps/swoosh/mix.exs	/^  def application do$/;"	f
application	deps/timex/mix.exs	/^  def application do$/;"	f
application	deps/timex_ecto/mix.exs	/^  def application do$/;"	f
application	deps/tzdata/mix.exs	/^  def application do$/;"	f
application	deps/uuid/mix.exs	/^  def application do$/;"	f
apply	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  def apply(_ouput_dir, [], _overlay_vars), do: {:ok, []}$/;"	f
apply	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  def apply(output_dir, overlays, overlay_vars) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def apply(%Ecto.Query{distinct: nil} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def apply(%Ecto.Query{}, _expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(%Ecto.Query{havings: havings} = query, :having, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(%Ecto.Query{wheres: wheres} = query, :where, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(query, _, %{expr: true}) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def apply(query, kind, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/from.ex	/^  def apply(query, binds) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def apply(%Ecto.Query{group_bys: group_bys} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/join.ex	/^  def apply(%Ecto.Query{joins: joins} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/join.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def apply(%Ecto.Query{} = query, :limit, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def apply(%Ecto.Query{} = query, :offset, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def apply(query, kind, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def apply(%Ecto.Query{} = query, value) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def apply(query, value) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def apply(%Ecto.Query{order_bys: order_bys} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def apply(%Ecto.Query{preloads: p, assocs: a} = query, preloads, assocs) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def apply(query, preloads, assocs) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/select.ex	/^  def apply(%Ecto.Query{select: nil} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/select.ex	/^  def apply(%Ecto.Query{}, _expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/select.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/update.ex	/^  def apply(%Ecto.Query{updates: updates} = query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/query/builder/update.ex	/^  def apply(query, expr) do$/;"	f
apply	deps/ecto/lib/ecto/repo/schema.ex	/^  defp apply(%{valid?: false} = changeset, _adapter, _action, _args) do$/;"	f
apply	deps/ecto/lib/ecto/repo/schema.ex	/^  defp apply(_changeset, _adapter, :noop, _args) do$/;"	f
apply	deps/ecto/lib/ecto/repo/schema.ex	/^  defp apply(changeset, adapter, action, args) do$/;"	f
apply	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def apply(_, _, _), do: :unrecognized$/;"	f
apply	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def apply(_, _, _), do: :unrecognized$/;"	f
apply_action	deps/ecto/lib/ecto/changeset.ex	/^  def apply_action(%Changeset{} = changeset, action) when action in @actions do$/;"	f
apply_action	deps/ecto/lib/ecto/changeset.ex	/^  def apply_action(%Changeset{}, action) do$/;"	f
apply_action	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp apply_action(changeset, _action),$/;"	f
apply_action	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp apply_action(changeset, nil),$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset.ex	/^  def apply_changes(%Changeset{changes: changes, data: data, types: types}) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset.ex	/^  def apply_changes(%Changeset{changes: changes, data: data}) when changes == %{} do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :many}, changesets) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :one}, changeset) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  def apply_changes(%{cardinality: :one}, nil) do$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp apply_changes(%Changeset{action: :delete}),  do: nil$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp apply_changes(%Changeset{action: :replace}), do: nil$/;"	f
apply_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp apply_changes(changeset), do: Changeset.apply_changes(changeset)$/;"	f
apply_configuration	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def apply_configuration(%__MODULE__{version: current_version, profile: profile} = release, %Config{} = config, log? \\\\ false) do$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([], _),$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([], date, _), do: {:ok, date}$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives([{token, value}|tokens], date, tokenizer) do$/;"	f
apply_directives	deps/timex/lib/parse/datetime/parser.ex	/^  defp apply_directives(tokens, tokenizer),$/;"	f
apply_embeds	deps/ecto/lib/ecto/embedded.ex	/^  defp apply_embeds(changes, struct) do$/;"	f
apply_environment	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  def apply_environment(%Release{} = r, %Environment{} = e) do$/;"	f
apply_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def apply_environment(%__MODULE__{profile: rel_profile} = r, %Environment{profile: env_profile}) do$/;"	f
apply_fun	deps/ecto/lib/ecto/multi.ex	/^  defp apply_fun(fun, acc),              do: apply(fun, [acc])$/;"	f
apply_fun	deps/ecto/lib/ecto/multi.ex	/^  defp apply_fun({mod, fun, args}, acc), do: apply(mod, fun, [acc | args])$/;"	f
apply_metadata	deps/ecto/lib/ecto/repo/schema.ex	/^  defp apply_metadata(%{__meta__: meta} = data, state, source) do$/;"	f
apply_microseconds	deps/timex/lib/datetime/datetime.ex	/^  defp apply_microseconds(%DateTime{microsecond: {_, precision}} = datetime, ms) do$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:changeset, changeset, opts}, _acc, _apply_args, repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:delete_all, query, opts}, _acc, _apply_args, repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:error, value}, _acc, _apply_args, _repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:insert_all, source, entries, opts}, _acc, _apply_args, repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:merge, merge}, acc, {wrap, return}, repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:run, run}, acc, _apply_args, _repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({:update_all, query, updates, opts}, _acc, _apply_args, repo),$/;"	f
apply_operation	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operation({name, operation}, repo, wrap, return, {acc, names}) do$/;"	f
apply_operations	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operations({:error, error}, _names, _repo, _wrap, _return) do$/;"	f
apply_operations	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operations({:ok, []}, _names, _repo, _wrap, _return), do: {:ok, %{}}$/;"	f
apply_operations	deps/ecto/lib/ecto/multi.ex	/^  defp apply_operations({:ok, operations}, names, repo, wrap, return) do$/;"	f
apply_overlays	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp apply_overlays(%Release{} = release) do$/;"	f
apply_pending_ttls	deps/con_cache/lib/con_cache/owner.ex	/^  defp apply_pending_ttls(%__MODULE__{pending_ttl_sets: pending_ttl_sets} = state) do$/;"	f
apply_plugin	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp apply_plugin(plugin, callback, release, opts) do$/;"	f
apply_query	deps/ecto/lib/ecto/query/builder.ex	/^  def apply_query(query, module, args, env) do$/;"	f
apply_shifts	deps/timex/lib/datetime/datetime.ex	/^  defp apply_shifts(datetime, []),$/;"	f
apply_shifts	deps/timex/lib/datetime/datetime.ex	/^  defp apply_shifts(datetime, [{:duration, %Duration{} = duration} | rest]) do$/;"	f
apply_shifts	deps/timex/lib/datetime/datetime.ex	/^  defp apply_shifts(datetime, [{unit, 0} | rest]) when is_atom(unit),$/;"	f
apply_shifts	deps/timex/lib/datetime/datetime.ex	/^  defp apply_shifts(datetime, [{unit, value} | rest]) when is_atom(unit) and is_integer(value) do$/;"	f
apply_shifts	deps/timex/lib/datetime/datetime.ex	/^  defp apply_shifts({:error, _} = err, _),$/;"	f
apply_shifts	deps/timex/lib/datetime/naivedatetime.ex	/^  defp apply_shifts(%NaiveDateTime{microsecond: {ms, precision}} = datetime, [{:duration, %Duration{} = duration} | rest]) do$/;"	f
apply_shifts	deps/timex/lib/datetime/naivedatetime.ex	/^  defp apply_shifts(datetime, []),$/;"	f
apply_shifts	deps/timex/lib/datetime/naivedatetime.ex	/^  defp apply_shifts(datetime, [{unit, 0} | rest]) when is_atom(unit),$/;"	f
apply_shifts	deps/timex/lib/datetime/naivedatetime.ex	/^  defp apply_shifts(datetime, [{unit, value} | rest]) when is_atom(unit) and is_integer(value) do$/;"	f
apply_shifts	deps/timex/lib/datetime/naivedatetime.ex	/^  defp apply_shifts({:error, _} = err, _),$/;"	f
archive	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  def archive(%Release{} = release) do$/;"	f
archive_content_length	deps/tzdata/lib/tzdata/release_reader.ex	/^  def archive_content_length, do: simple_lookup(:archive_content_length) |> hd |> elem(1)$/;"	f
archive_path	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def archive_path(%__MODULE__{profile: %Profile{output_dir: output_dir} = p} = r) do$/;"	f
args	deps/plug/lib/plug/adapters/cowboy.ex	/^  def args(scheme, plug, opts, cowboy_options) do$/;"	f
args_for_makefile	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp args_for_makefile("nmake", :default), do: ["\/F", "Makefile.win"]$/;"	f
args_for_makefile	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp args_for_makefile("nmake", makefile), do: ["\/F", makefile]$/;"	f
args_for_makefile	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp args_for_makefile(_, :default), do: []$/;"	f
args_for_makefile	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp args_for_makefile(_, makefile), do: ["-f", makefile]$/;"	f
array	deps/ecto/lib/ecto/type.ex	/^  defp array([], _type, _fun, acc) do$/;"	f
array	deps/ecto/lib/ecto/type.ex	/^  defp array([h|t], type, fun, acc) do$/;"	f
array type	deps/ecto/integration_test/cases/type.exs	/^  test "array type" do$/;"	t
array type with custom types	deps/ecto/integration_test/cases/type.exs	/^  test "array type with custom types" do$/;"	t
array type with nil in array	deps/ecto/integration_test/cases/type.exs	/^  test "array type with nil in array" do$/;"	t
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values("]" <> rest, pos, _, []) do$/;"	f
array_values	deps/poison/lib/poison/parser.ex	/^  defp array_values(string, pos, keys, acc) do$/;"	f
ask	deps/db_connection/lib/db_connection/sojourn.ex	/^  defp ask(broker, opts) do$/;"	f
asn1_generalized_time	deps/timex/lib/parse/datetime/parsers.ex	/^  def asn1_generalized_time(opts \\\\ []) do$/;"	f
asn1_utc_time	deps/timex/lib/parse/datetime/parsers.ex	/^  def asn1_utc_time(_) do$/;"	f
assemble	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  def assemble(%Config{} = config) do$/;"	f
assert_assoc!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_assoc!(_mode, atom, var) do$/;"	f
assert_assoc!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp assert_assoc!(mode, _atom, _var) when mode in [:both, :assoc], do: :ok$/;"	f
assert_authorized	deps/coherence/test/plugs/authentication/basic_test.exs	/^  defp assert_authorized(conn, content) do$/;"	f
assert_authorized	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defp assert_authorized(conn, content) do$/;"	f
assert_authorized	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp assert_authorized(conn, content) do$/;"	f
assert_broadcast	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_broadcast(event, payload, timeout \\\\ 100) do$/;"	a
assert_changeset_struct!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp assert_changeset_struct!(%{data: %{__struct__: mod}} = changeset, %{related: mod}) do$/;"	f
assert_changeset_struct!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp assert_changeset_struct!(%{data: data}, %{related: mod}) do$/;"	f
assert_creds	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp assert_creds({conn, nil}, realm, error, _), do: halt_with_login(conn, realm, error)$/;"	f
assert_creds	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp assert_creds({conn, user_data}, _, _, key), do: assign_user_data(conn, user_data, key)$/;"	f
assert_creds	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp assert_creds({conn, nil}, error), do: halt_with_error(conn, error)$/;"	f
assert_creds	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp assert_creds({conn, nil}, nil), do: conn$/;"	f
assert_creds	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp assert_creds({conn, user_data}, _), do: assign_user_data(conn, user_data)$/;"	f
assert_dirs	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  def assert_dirs(dirs, full_dirs, path) do$/;"	f
assert_dirs	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  def assert_dirs(dirs, full_dirs, path) do$/;"	f
assert_email_not_sent	deps/swoosh/lib/swoosh/test_assertions.ex	/^  def assert_email_not_sent(email) do$/;"	f
assert_email_sent	deps/swoosh/lib/swoosh/test_assertions.ex	/^  def assert_email_sent(%Email{} = email) do$/;"	f
assert_email_sent	deps/swoosh/lib/swoosh/test_assertions.ex	/^  def assert_email_sent(params) when is_list(params) do$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:bcc, value}) when is_list(value), do: assert email.bcc == Enum.map(value, &format_recipient\/1)$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:bcc, value}), do: assert format_recipient(value) in email.bcc$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:cc, value}) when is_list(value), do: assert email.cc == Enum.map(value, &format_recipient\/1)$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:cc, value}), do: assert format_recipient(value) in email.cc$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:from, value}), do: assert email.from == format_recipient(value)$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:html_body, value}), do: assert email.html_body == value$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:reply_to, value}), do: assert email.reply_to == format_recipient(value)$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:subject, value}), do: assert email.subject == value$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:text_body, value}), do: assert email.text_body == value$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:to, value}) when is_list(value), do: assert email.to == Enum.map(value, &format_recipient\/1)$/;"	f
assert_equal	deps/swoosh/lib/swoosh/test_assertions.ex	/^  defp assert_equal(email, {:to, value}), do: assert format_recipient(value) in email.to$/;"	f
assert_error_handler_called	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp assert_error_handler_called(conn) do$/;"	f
assert_error_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def assert_error_sent(status_int_or_atom, func) do$/;"	f
assert_file	deps/coherence/test/mix_helpers.exs	/^  def assert_file(file) do$/;"	f
assert_file	deps/coherence/test/mix_helpers.exs	/^  def assert_file(file, match) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file, callback) when is_function(callback, 1) do$/;"	f
assert_file	deps/ecto/integration_test/support/file_helpers.exs	/^  def assert_file(file, match) do$/;"	f
assert_file_list	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  def assert_file_list(files, full_files, path) do$/;"	f
assert_file_list	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  def assert_file_list(files, full_files, path) do$/;"	f
assert_ip	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp assert_ip({conn, _, _}, %{error: error}), do: halt_with_error(conn, error)$/;"	f
assert_ip	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp assert_ip({conn, true, nil}, _), do: conn$/;"	f
assert_ip	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp assert_ip({conn, true, user_data}, %{assign_key: assign_key}), do: assign(conn, assign_key, user_data)$/;"	f
assert_joined!	deps/phoenix/lib/phoenix/channel.ex	/^  defp assert_joined!(%Socket{joined: false}) do$/;"	f
assert_joined!	deps/phoenix/lib/phoenix/channel.ex	/^  defp assert_joined!(%Socket{joined: true} = socket) do$/;"	f
assert_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp assert_login(conn, _, _), do: conn$/;"	f
assert_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp assert_login({conn, nil}, login, _) when is_function(login) do$/;"	f
assert_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp assert_login({conn, user_data}, _, assign_key) do$/;"	f
assert_no_dup_binding!	deps/ecto/lib/ecto/query/builder.ex	/^  defp assert_no_dup_binding!(vars) do$/;"	f
assert_no_email_sent	deps/swoosh/lib/swoosh/test_assertions.ex	/^  def assert_no_email_sent() do$/;"	f
assert_no_select!	deps/ecto/lib/ecto/query/planner.ex	/^  def assert_no_select!(%{select: _} = query, operation) do$/;"	f
assert_no_select!	deps/ecto/lib/ecto/query/planner.ex	/^  def assert_no_select!(%{select: nil} = query, _operation) do$/;"	f
assert_no_subquery_assocs!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_no_subquery_assocs!(%{assocs: assocs, preloads: preloads} = query)$/;"	f
assert_no_subquery_assocs!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_no_subquery_assocs!(query) do$/;"	f
assert_no_update!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_no_update!(query, operation) do$/;"	f
assert_only_filter_expressions!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_only_filter_expressions!(query, operation) do$/;"	f
assert_push	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_push(event, payload, timeout \\\\ 100) do$/;"	a
assert_reply	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro assert_reply(ref, status, payload \\\\ Macro.escape(%{}), timeout \\\\ 100) do$/;"	a
assert_schema!	deps/ecto/lib/ecto/query.ex	/^  defp assert_schema!(%{from: {_source, schema}}) when schema != nil, do: schema$/;"	f
assert_schema!	deps/ecto/lib/ecto/query.ex	/^  defp assert_schema!(query) do$/;"	f
assert_schema!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp assert_schema!(%{from: {_source, schema}}) when schema != nil, do: schema$/;"	f
assert_schema!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp assert_schema!(query) do$/;"	f
assert_ssl_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp assert_ssl_options(cowboy_options) do$/;"	f
assert_struct!	deps/ecto/lib/ecto.ex	/^  defp assert_struct!(module, %{__struct__: struct}) do$/;"	f
assert_struct!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assert_struct!(mod, %{__struct__: mod}), do: true$/;"	f
assert_struct!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assert_struct!(mod, %{__struct__: struct}) do$/;"	f
assert_subquery_fields!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_subquery_fields!(query, expr, pairs) do$/;"	f
assert_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp assert_type!(_expr, {int, _field}, _actual) when is_integer(int) do$/;"	f
assert_type!	deps/ecto/lib/ecto/query/builder.ex	/^  defp assert_type!(expr, type, actual) do$/;"	f
assert_unauthorized	deps/coherence/test/plugs/authentication/basic_test.exs	/^  defp assert_unauthorized(conn, realm) do$/;"	f
assert_unauthorized	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defp assert_unauthorized(conn, content) do$/;"	f
assert_unauthorized	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp assert_unauthorized(conn, content) do$/;"	f
assert_update!	deps/ecto/lib/ecto/query/planner.ex	/^  defp assert_update!(%Ecto.Query{updates: updates} = query, operation) do$/;"	f
assert_user_data	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defp assert_user_data(conn, user_data) do$/;"	f
assign	deps/phoenix/lib/phoenix/socket.ex	/^  def assign(socket = %Socket{}, key, value) do$/;"	f
assign	deps/plug/lib/plug/conn.ex	/^  def assign(%Conn{assigns: assigns} = conn, key, value) when is_atom(key) do$/;"	f
assign	deps/swoosh/lib/swoosh/email.ex	/^  def assign(%__MODULE__{assigns: assigns} = email, key, value) when is_atom(key) do$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list([], value), do: value$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list(t, current, value) do$/;"	f
assign_list	deps/plug/lib/plug/conn/query.ex	/^  defp assign_list(t, value),  do: assign_parts(t, value, %{})$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key,""|t], value, acc) do$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key], value, acc) do$/;"	f
assign_parts	deps/plug/lib/plug/conn/query.ex	/^  defp assign_parts([key|t], value, acc) do$/;"	f
assign_resource	deps/phoenix/lib/phoenix/view.ex	/^  defp assign_resource(assigns, view, resource) do$/;"	f
assign_user_data	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def assign_user_data(conn, user_data, key \\\\ :current_user) do$/;"	f
assoc	deps/ecto/lib/ecto.ex	/^  def assoc(struct_or_structs, assocs) do$/;"	f
assoc constraint	deps/ecto/integration_test/cases/repo.exs	/^  test "assoc constraint" do$/;"	t
assoc_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def assoc_constraint(changeset, assoc, opts \\\\ []) do$/;"	f
assoc_from_data	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_data(%{__meta__: %{state: :built}}, %Ecto.Association.NotLoaded{}, _field) do$/;"	f
assoc_from_data	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_data(%{__struct__: struct}, %Ecto.Association.NotLoaded{}, field) do$/;"	f
assoc_from_data	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_data(_data, value, _field) do$/;"	f
assoc_from_data	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp assoc_from_data(data, field) do$/;"	f
assoc_loaded?	deps/ecto/lib/ecto.ex	/^  def assoc_loaded?(association) do$/;"	f
assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assoc_map(:many, ids, structs) do$/;"	f
assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp assoc_map(:one, ids, structs) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%module{} = refl, [], query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{join_through: join_through, join_keys: join_keys,$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{owner: owner, through: [h|t], field: field}, extra, query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{queryable: queryable, related_key: related_key}, query, [value]) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{queryable: queryable, related_key: related_key}, query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(%{queryable: queryable} = refl, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(refl, query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(refl, t, query, values) do$/;"	f
assoc_query	deps/ecto/lib/ecto/association.ex	/^  def assoc_query(refl, through, query, values)$/;"	f
assoc_to_where	deps/ecto/lib/ecto/association.ex	/^  defp assoc_to_where(%{on: %QueryExpr{} = on}) do$/;"	f
associate	deps/ecto/lib/ecto/registry.ex	/^  def associate(pid, value) when is_pid(pid) do$/;"	f
associate	deps/postgrex/lib/postgrex/type_server.ex	/^  defp associate(%{types: types, lock: ref} = state, type_infos) do$/;"	f
associate_type_infos	deps/postgrex/lib/postgrex/types.ex	/^  def associate_type_infos(type_infos, {module, table}) do$/;"	f
association	deps/ecto/lib/ecto/schema.ex	/^  def association(schema, cardinality, name, association, opts) do$/;"	f
association with composite pk join	deps/ecto/integration_test/cases/joins.exs	/^  test "association with composite pk join" do$/;"	t
association_from_schema!	deps/ecto/lib/ecto/association.ex	/^  def association_from_schema!(schema, assoc) do$/;"	f
association_key	deps/ecto/lib/ecto/association.ex	/^  def association_key(module, suffix) do$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs([], _names),    do: []$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs(assocs) do$/;"	f
assocs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp assocs(assocs, names), do: [preload: expr(assocs(assocs), names, %{})]$/;"	f
assocs	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp assocs(assocs) do$/;"	f
async_assign	deps/plug/lib/plug/conn.ex	/^  def async_assign(%Conn{} = conn, key, fun) when is_atom(key) and is_function(fun, 0) do$/;"	f
at_least_four	deps/ecto/lib/ecto/query/api.ex	/^      def at_least_four(doors_or_tires) do$/;"	f
attach_on	deps/ecto/lib/ecto/query/planner.ex	/^  defp attach_on([%{on: on} = h | t], %{expr: expr, params: params}) do$/;"	f
attach_prefix	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp attach_prefix(query, opts) do$/;"	f
attempt	deps/ecto/lib/ecto/migrator.ex	/^  defp attempt(repo, module, direction, operation, reference, opts) do$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(nil),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(other) when is_binary(other),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape(other),$/;"	f
attr_escape	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp attr_escape({:safe, data}),$/;"	f
attributes	deps/postgrex/lib/postgrex/type_module.ex	/^  defp attributes(opts) do$/;"	f
attrs	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def attrs(attrs) do$/;"	f
auth	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp auth(config), do: Base.encode64("api:#{config[:api_key]}")$/;"	f
auth_cleartext	deps/postgrex/lib/postgrex/protocol.ex	/^  defp auth_cleartext(s, %{opts: opts} = status, buffer) do$/;"	f
auth_header	deps/coherence/test/plugs/authentication/basic_test.exs	/^  defp auth_header(creds) do$/;"	f
auth_md5	deps/postgrex/lib/postgrex/protocol.ex	/^  defp auth_md5(s, %{opts: opts} = status, salt, buffer) do$/;"	f
auth_param	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp auth_param(creds), do: {"auth_token", creds}$/;"	f
auth_params	deps/boltex/lib/boltex/bolt.ex	/^  defp auth_params({username, password}) do$/;"	f
auth_params	deps/boltex/lib/boltex/bolt.ex	/^  defp auth_params({}), do: %{}$/;"	f
auth_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp auth_recv(s, status, buffer) do$/;"	f
auth_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp auth_send(s, msg, status, buffer) do$/;"	f
authenticatable?	deps/coherence/lib/coherence/schema.ex	/^      def authenticatable? do$/;"	f
authenticate	deps/phoenix/lib/phoenix/controller.ex	/^        defp authenticate(conn, options) do$/;"	f
authenticates with correct login cookie	deps/coherence/test/controllers/rememberable_test.exs	/^    test "authenticates with correct login cookie", %{conn: conn} = meta do$/;"	t
authorized?	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  defp authorized?(_payload) do$/;"	f
authorized?	deps/phoenix/priv/templates/phx.gen.channel/channel.ex	/^  defp authorized?(_payload) do$/;"	f
autogenerate	deps/ecto/lib/ecto/adapters/sql.ex	/^      def autogenerate(:binary_id), do: Ecto.UUID.bingenerate()$/;"	f
autogenerate	deps/ecto/lib/ecto/adapters/sql.ex	/^      def autogenerate(:embed_id),  do: Ecto.UUID.generate()$/;"	f
autogenerate	deps/ecto/lib/ecto/adapters/sql.ex	/^      def autogenerate(:id),        do: nil$/;"	f
autogenerate	deps/ecto/lib/ecto/date_time.ex	/^  def autogenerate(:sec) do$/;"	f
autogenerate	deps/ecto/lib/ecto/date_time.ex	/^  def autogenerate(:usec) do$/;"	f
autogenerate	deps/ecto/lib/ecto/date_time.ex	/^  def autogenerate(precision \\\\ :sec)$/;"	f
autogenerate	deps/ecto/lib/ecto/embedded.ex	/^  defp autogenerate(changes, action, schema) do$/;"	f
autogenerate	deps/ecto/lib/ecto/uuid.ex	/^  def autogenerate, do: generate()$/;"	f
autogenerate	deps/timex_ecto/lib/types/date.ex	/^  def autogenerate(_) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/date.ex	/^  def autogenerate(precision \\\\ :sec)$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetime.ex	/^  def autogenerate(:sec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetime.ex	/^  def autogenerate(:usec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetime.ex	/^  def autogenerate(precision \\\\ :sec)$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetimetz.ex	/^  def autogenerate(:sec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetimetz.ex	/^  def autogenerate(:usec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/datetimetz.ex	/^  def autogenerate(precision \\\\ :sec)$/;"	f
autogenerate	deps/timex_ecto/lib/types/time.ex	/^  def autogenerate(:sec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/time.ex	/^  def autogenerate(:usec) do$/;"	f
autogenerate	deps/timex_ecto/lib/types/time.ex	/^  def autogenerate(precision \\\\ :sec)$/;"	f
autogenerate_changes	deps/ecto/lib/ecto/repo/schema.ex	/^  defp autogenerate_changes(schema, action, changes) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/embedded.ex	/^  defp autogenerate_id(changes, _struct, :insert, schema, adapter) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/embedded.ex	/^  defp autogenerate_id(changes, struct, :update, _schema, _adapter) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/repo/schema.ex	/^  defp autogenerate_id(nil, changes, return_types, return_sources, _adapter) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/repo/schema.ex	/^  defp autogenerate_id(nil, fields, _adapter), do: fields$/;"	f
autogenerate_id	deps/ecto/lib/ecto/repo/schema.ex	/^  defp autogenerate_id({key, source, type}, changes, return_types, return_sources, adapter) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/repo/schema.ex	/^  defp autogenerate_id({key, source, type}, fields, adapter) do$/;"	f
autogenerate_id	deps/ecto/lib/ecto/schema.ex	/^  defp autogenerate_id(type) do$/;"	f
autogenerated?	deps/gettext/lib/gettext/po/translations.ex	/^  def autogenerated?(%{__struct__: s, references: []})$/;"	f
autogenerated?	deps/gettext/lib/gettext/po/translations.ex	/^  def autogenerated?(%{__struct__: s, references: _})$/;"	f
autogenerated?	deps/gettext/lib/gettext/po/translations.ex	/^  def autogenerated?(translation)$/;"	f
available_templates	deps/phoenix/lib/phoenix/template.ex	/^    defp available_templates([]), do: "No templates were compiled for this module."$/;"	f
available_templates	deps/phoenix/lib/phoenix/template.ex	/^    defp available_templates(available) do$/;"	f
avg	deps/ecto/lib/ecto/query/api.ex	/^  def avg(value), do: doc! [value]$/;"	f
await_assign	deps/plug/lib/plug/conn.ex	/^  def await_assign(%Conn{} = conn, key, timeout \\\\ 5000) when is_atom(key) do$/;"	f
b64d	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp b64d(val) do$/;"	f
b64d_ok	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp b64d_ok(val) do$/;"	f
b64d_ok	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp b64d_ok(val) when is_integer(val), do: val$/;"	f
b64e	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp b64e(val) do$/;"	f
backend	deps/coherence/lib/coherence/messages.ex	/^  def backend do$/;"	f
backoff	deps/db_connection/lib/db_connection/backoff.ex	/^  def backoff(%Backoff{type: :exp, max: max, state: prev} = s) do$/;"	f
backoff	deps/db_connection/lib/db_connection/backoff.ex	/^  def backoff(%Backoff{type: :exp, min: min, state: nil} = s) do$/;"	f
backoff	deps/db_connection/lib/db_connection/backoff.ex	/^  def backoff(%Backoff{type: :rand, min: min, max: max, state: state} = s) do$/;"	f
backoff	deps/db_connection/lib/db_connection/backoff.ex	/^  def backoff(%Backoff{type: :rand_exp, max: max, state: state} = s) do$/;"	f
bad migration	deps/ecto/integration_test/cases/migrator.exs	/^  test "bad migration" do$/;"	t
base	deps/phoenix/lib/mix/phoenix.ex	/^  def base do$/;"	f
base10?	deps/decimal/lib/decimal.ex	/^    defp base10?(unquote(acc)), do: true$/;"	f
base10?	deps/decimal/lib/decimal.ex	/^  defp base10?(_num), do: false$/;"	f
base10?	deps/decimal/lib/decimal.ex	/^  defp base10?(num) when num > unquote(pow10_max) do$/;"	f
base?	deps/ecto/lib/ecto/type.ex	/^  def base?(atom), do: atom in @base$/;"	f
base_url	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp base_url(config), do: config[:base_url] || @base_url$/;"	f
base_url	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp base_url(config), do: config[:base_url] || @base_url$/;"	f
base_url	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp base_url(config), do: config[:base_url] || @base_url$/;"	f
base_url	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp base_url(config), do: config[:base_url] || @base_url$/;"	f
bcc	deps/swoosh/lib/swoosh/email.ex	/^  def bcc(%__MODULE__{bcc: bcc} = email, recipients) when is_list(recipients) do$/;"	f
bcc	deps/swoosh/lib/swoosh/email.ex	/^  def bcc(%__MODULE__{} = email, recipient) do$/;"	f
bcrypt	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp bcrypt(_, _, prefix, _) do$/;"	f
bcrypt	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp bcrypt(key, salt, prefix, log_rounds) when prefix in ['2b', '2a'] do$/;"	f
beam_attributes	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp beam_attributes(file) do$/;"	f
beam_exports	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp beam_exports(file) do$/;"	f
beam_imports	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp beam_imports(file) do$/;"	f
beam_to_module	deps/phoenix/lib/mix/phoenix.ex	/^  defp beam_to_module(path) do$/;"	f
before?	deps/timex/lib/interval/interval.ex	/^    defp before?(%Timex.Interval{from: from, left_open: false}, value), do: Timex.compare(value, from) < 0$/;"	f
before?	deps/timex/lib/interval/interval.ex	/^    defp before?(%Timex.Interval{from: from, left_open: true}, value), do: Timex.compare(value, from) <= 0$/;"	f
before?	deps/timex/lib/timex.ex	/^  def before?(a, b) do$/;"	f
before_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^        def before_assembly(%Release{} = release, _opts) do$/;"	f
before_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      def before_assembly(release), do: release$/;"	f
before_assembly	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  def before_assembly(release), do: call(:before_assembly, release)$/;"	f
before_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^        def before_package(%Release{} = release, _opts) do$/;"	f
before_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^      def before_package(release), do: release$/;"	f
before_package	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  def before_package(release),  do: call(:before_package, release)$/;"	f
before_send	deps/plug/lib/plug/session.ex	/^  defp before_send(sid, config) do$/;"	f
begin	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate begin(conn), to: Transaction$/;"	d
begin	deps/bolt_sips/lib/bolt_sips/transaction.ex	/^  def begin(conn) do$/;"	f
begin	deps/db_connection/lib/db_connection.ex	/^  defp begin(conn, log, times, fun, opts) do$/;"	f
begin_meter	deps/db_connection/lib/db_connection.ex	/^  defp begin_meter(conn, conn_state, log, times, fun, opts) do$/;"	f
begin_meter	deps/db_connection/lib/db_connection.ex	/^  defp begin_meter(conn, conn_state, nil, [], fun, opts) do$/;"	f
beginning_of_day	deps/timex/lib/date/date.ex	/^  def beginning_of_day(%Date{} = date), do: date$/;"	f
beginning_of_day	deps/timex/lib/datetime/datetime.ex	/^  def beginning_of_day(%DateTime{} = datetime) do$/;"	f
beginning_of_day	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_day(_), do: {:error, :invalid_date}$/;"	f
beginning_of_day	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_day({y,m,d} = date) when is_date(y,m,d), do: date$/;"	f
beginning_of_day	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_day({{y,m,d}=date,_}) when is_date(y,m,d),$/;"	f
beginning_of_day	deps/timex/lib/datetime/map.ex	/^  def beginning_of_day(map),          do: convert!(map, :beginning_of_day)$/;"	f
beginning_of_day	deps/timex/lib/datetime/naivedatetime.ex	/^  def beginning_of_day(%NaiveDateTime{:microsecond => {_, _precision}} = datetime) do$/;"	f
beginning_of_day	deps/timex/lib/protocol.ex	/^  def beginning_of_day(%{__struct__: _} = d), do: Timex.beginning_of_day(Map.from_struct(d))$/;"	f
beginning_of_day	deps/timex/lib/protocol.ex	/^  def beginning_of_day(_datetime), do: {:error, :invalid_date}$/;"	f
beginning_of_day	deps/timex/lib/protocol.ex	/^  def beginning_of_day(datetime)$/;"	f
beginning_of_day	deps/timex/lib/timex.ex	/^  defdelegate beginning_of_day(datetime), to: Timex.Protocol$/;"	d
beginning_of_day	deps/timex/lib/timezone/timezone.ex	/^  def beginning_of_day(%DateTime{time_zone: tz} = dt) do$/;"	f
beginning_of_month	deps/timex/lib/date/date.ex	/^  def beginning_of_month(%Date{} = date),$/;"	f
beginning_of_month	deps/timex/lib/datetime/datetime.ex	/^  def beginning_of_month(%DateTime{microsecond: {_, _precision}} = datetime),$/;"	f
beginning_of_month	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_month(_), do: {:error, :invalid_date}$/;"	f
beginning_of_month	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_month({y,m,d}) when is_date(y,m,d),$/;"	f
beginning_of_month	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_month({{y,m,d},_}) when is_date(y,m,d),$/;"	f
beginning_of_month	deps/timex/lib/datetime/map.ex	/^  def beginning_of_month(map),        do: convert!(map, :beginning_of_month)$/;"	f
beginning_of_month	deps/timex/lib/datetime/naivedatetime.ex	/^  def beginning_of_month(%NaiveDateTime{} = datetime),$/;"	f
beginning_of_month	deps/timex/lib/protocol.ex	/^  def beginning_of_month(%{__struct__: _} = d), do: Timex.beginning_of_month(Map.from_struct(d))$/;"	f
beginning_of_month	deps/timex/lib/protocol.ex	/^  def beginning_of_month(_datetime), do: {:error, :invalid_date}$/;"	f
beginning_of_month	deps/timex/lib/protocol.ex	/^  def beginning_of_month(datetime)$/;"	f
beginning_of_month	deps/timex/lib/timex.ex	/^  def beginning_of_month(_, _),$/;"	f
beginning_of_month	deps/timex/lib/timex.ex	/^  def beginning_of_month(year, month) when is_year(month) and is_month(month),$/;"	f
beginning_of_month	deps/timex/lib/timex.ex	/^  defdelegate beginning_of_month(datetime), to: Timex.Protocol$/;"	d
beginning_of_quarter	deps/timex/lib/date/date.ex	/^  def beginning_of_quarter(%Date{month: month} = date) do$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/datetime.ex	/^  def beginning_of_quarter(%DateTime{year: year, month: month, time_zone: tz}) do$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_quarter(_), do: {:error, :invalid_date}$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_quarter({y,m,d}) when is_date(y,m,d) do$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_quarter({{y,m,d},{h,mm,s,_us} = _time}) when is_datetime(y,m,d,h,mm,s) do$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_quarter({{y,m,d},{h,mm,s} = _time}) when is_datetime(y,m,d,h,mm,s) do$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/map.ex	/^  def beginning_of_quarter(map),      do: convert!(map, :beginning_of_quarter)$/;"	f
beginning_of_quarter	deps/timex/lib/datetime/naivedatetime.ex	/^  def beginning_of_quarter(%NaiveDateTime{month: month} = date) do$/;"	f
beginning_of_quarter	deps/timex/lib/protocol.ex	/^  def beginning_of_quarter(%{__struct__: _} = d), do: Timex.beginning_of_quarter(Map.from_struct(d))$/;"	f
beginning_of_quarter	deps/timex/lib/protocol.ex	/^  def beginning_of_quarter(_datetime), do: {:error, :invalid_date}$/;"	f
beginning_of_quarter	deps/timex/lib/protocol.ex	/^  def beginning_of_quarter(datetime)$/;"	f
beginning_of_quarter	deps/timex/lib/timex.ex	/^  defdelegate beginning_of_quarter(datetime), to: Timex.Protocol$/;"	d
beginning_of_week	deps/timex/lib/date/date.ex	/^  def beginning_of_week(%Date{} = date, weekstart) do$/;"	f
beginning_of_week	deps/timex/lib/datetime/datetime.ex	/^  def beginning_of_week(%DateTime{} = date, weekstart) do$/;"	f
beginning_of_week	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_week(_,_), do: {:error, :invalid_date}$/;"	f
beginning_of_week	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_week({y,m,d} = date, weekstart) when is_date(y,m,d) do$/;"	f
beginning_of_week	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_week({{y,m,d} = date,_}, weekstart) when is_date(y,m,d) do$/;"	f
beginning_of_week	deps/timex/lib/datetime/map.ex	/^  def beginning_of_week(map, start),  do: convert(map, :beginning_of_week, [start])$/;"	f
beginning_of_week	deps/timex/lib/datetime/naivedatetime.ex	/^  def beginning_of_week(%NaiveDateTime{} = date, weekstart) do$/;"	f
beginning_of_week	deps/timex/lib/protocol.ex	/^  def beginning_of_week(%{__struct__: _} = d, weekstart), do: Timex.beginning_of_week(Map.from_struct(d), weekstart)$/;"	f
beginning_of_week	deps/timex/lib/protocol.ex	/^  def beginning_of_week(_datetime, _weekstart), do: {:error, :invalid_date}$/;"	f
beginning_of_week	deps/timex/lib/protocol.ex	/^  def beginning_of_week(datetime, weekstart)$/;"	f
beginning_of_week	deps/timex/lib/timex.ex	/^  defdelegate beginning_of_week(date, weekstart \\\\ :mon), to: Timex.Protocol$/;"	d
beginning_of_year	deps/timex/lib/date/date.ex	/^  def beginning_of_year(%Date{} = date),$/;"	f
beginning_of_year	deps/timex/lib/datetime/datetime.ex	/^  def beginning_of_year(%DateTime{year: year, time_zone: tz}) do$/;"	f
beginning_of_year	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_year(_), do: {:error, :invalid_date}$/;"	f
beginning_of_year	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_year({y,m,d}) when is_date(y,m,d),$/;"	f
beginning_of_year	deps/timex/lib/datetime/erlang.ex	/^  def beginning_of_year({{y,m,d},_}) when is_date(y,m,d),$/;"	f
beginning_of_year	deps/timex/lib/datetime/map.ex	/^  def beginning_of_year(map),         do: convert!(map, :beginning_of_year)$/;"	f
beginning_of_year	deps/timex/lib/datetime/naivedatetime.ex	/^  def beginning_of_year(%NaiveDateTime{:year => y}) do$/;"	f
beginning_of_year	deps/timex/lib/protocol.ex	/^  def beginning_of_year(%{__struct__: _} = d), do: Timex.beginning_of_year(Map.from_struct(d))$/;"	f
beginning_of_year	deps/timex/lib/protocol.ex	/^  def beginning_of_year(_datetime), do: {:error, :invalid_date}$/;"	f
beginning_of_year	deps/timex/lib/protocol.ex	/^  def beginning_of_year(datetime)$/;"	f
beginning_of_year	deps/timex/lib/timex.ex	/^  def beginning_of_year(datetime), do: Timex.Protocol.beginning_of_year(datetime)$/;"	f
beginning_of_year	deps/timex/lib/timex.ex	/^  def beginning_of_year(year) when is_year(year),$/;"	f
belongs_to	deps/ecto/lib/ecto/schema.ex	/^  defmacro belongs_to(name, queryable, opts \\\\ []) do$/;"	a
belongs_to assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "belongs_to assoc" do$/;"	t
belongs_to assoc selector	deps/ecto/integration_test/cases/joins.exs	/^  test "belongs_to assoc selector" do$/;"	t
belongs_to association join	deps/ecto/integration_test/cases/joins.exs	/^  test "belongs_to association join" do$/;"	t
belongs_to changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "belongs_to changeset assoc" do$/;"	t
best_match	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def best_match(masks, url) do$/;"	f
best_match_index	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def best_match_index(masks, url) do$/;"	f
best_match_index	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def best_match_index(masks, url) do$/;"	f
between?	deps/timex/lib/timex.ex	/^  def between?(a, start, ending, options \\\\ []) do$/;"	f
bf_encrypt	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_encrypt(_), do: :erlang.nif_error(:not_loaded)$/;"	f
bf_encrypt	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_encrypt(state)$/;"	f
bf_expand0	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_expand0(_, _, _), do: :erlang.nif_error(:not_loaded)$/;"	f
bf_expand0	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_expand0(state, input, input_len)$/;"	f
bf_init	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_init(_, _, _), do: :erlang.nif_error(:not_loaded)$/;"	f
bf_init	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def bf_init(key, key_len, salt)$/;"	f
bigger_than	deps/tzdata/lib/tzdata.ex	/^  defp bigger_than(:max, _), do: true$/;"	f
bigger_than	deps/tzdata/lib/tzdata.ex	/^  defp bigger_than(first, second), do: first > second$/;"	f
bin_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp bin_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
bin_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp bin_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
bin_opt_info	deps/postgrex/lib/postgrex/type_module.ex	/^  defp bin_opt_info(opts) do$/;"	f
binary	deps/postgrex/lib/postgrex/binary_utils.ex	/^  defmacro binary(size) do$/;"	a
binary	deps/postgrex/lib/postgrex/binary_utils.ex	/^  defmacro binary(size, unit) do$/;"	a
binary id type	deps/ecto/integration_test/cases/type.exs	/^  test "binary id type" do$/;"	t
binary_to_hex_list	deps/uuid/lib/uuid.ex	/^  defp binary_to_hex_list(binary) do$/;"	f
binary_to_identifier	deps/plug/lib/plug/router/utils.ex	/^  defp binary_to_identifier(prefix, <<letter, _::binary>> = binary)$/;"	f
binary_to_identifier	deps/plug/lib/plug/router/utils.ex	/^  defp binary_to_identifier(prefix, _) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(<<uuid::binary>>, format) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(_, _) do$/;"	f
binary_to_string!	deps/uuid/lib/uuid.ex	/^  def binary_to_string!(uuid, format \\\\ :default)$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(%{buffer: buffer} = s, status, query, params, res) do$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(%{postgres: {postgres, ref}} = s, status, query, params, res) do$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(%{types: types} = s, _, %Query{types: types2} = query, _, _)$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(s, _, %Query{name: @reserved_prefix <> _} = query, _, _) do$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(s, _, %Query{types: nil} = query, _, _) do$/;"	f
bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind(s, status, query, params, %{portal: portal} = res, buffer) do$/;"	f
bind_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind_error(s, status, query, fields, buffer) do$/;"	f
bind_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind_execute(s, status, query, params, buffer) do$/;"	f
bind_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bind_recv(s, status, query, buffer, recv \\\\ &execute_recv\/4) do$/;"	f
bingenerate	deps/ecto/lib/ecto/uuid.ex	/^  def bingenerate do$/;"	f
blank?	deps/gettext/lib/gettext/extractor.ex	/^  defp blank?(nil), do: true$/;"	f
blank?	deps/gettext/lib/gettext/extractor.ex	/^  defp blank?(str), do: IO.iodata_length(str) == 0$/;"	f
block_runner	deps/retry/lib/retry.ex	/^  defp block_runner(block) do$/;"	f
body	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    def body(email, config) do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(body, _query, headers) when is_binary(body) do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(nil, _query, headers),$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(params, query, headers) when is_list(params) do$/;"	f
body_or_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp body_or_params(params, query, headers) when is_map(params) do$/;"	f
boltex_opts	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  defp boltex_opts() do$/;"	f
bool_decode	deps/ecto/lib/ecto/adapter.ex	/^      defp bool_decode(0), do: {:ok, false}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapter.ex	/^      defp bool_decode(1), do: {:ok, true}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp bool_decode(0), do: {:ok, false}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp bool_decode(1), do: {:ok, true}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp bool_decode(<<0>>), do: {:ok, false}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp bool_decode(<<1>>), do: {:ok, true}$/;"	f
bool_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp bool_decode(x), do: {:ok, x}$/;"	f
bool_encode	deps/ecto/lib/ecto/adapter.ex	/^      defp bool_encode(false), do: {:ok, 0}$/;"	f
bool_encode	deps/ecto/lib/ecto/adapter.ex	/^      defp bool_encode(true), do: {:ok, 1}$/;"	f
bool_exprs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp bool_exprs(keys, exprs, names) do$/;"	f
boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp boolean(_name, [], _sources, _query), do: []$/;"	f
boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp boolean(name, [%{expr: expr, op: op} | query_exprs], sources, query) do$/;"	f
boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp boolean(_name, [], _sources, _query), do: []$/;"	f
boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp boolean(name, [%{expr: expr, op: op} | query_exprs], sources, query) do$/;"	f
boom	deps/plug/lib/plug/debugger.ex	/^        def boom(conn, _) do$/;"	f
bootstrap	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap(s, %{types_key: nil}, buffer) do$/;"	f
bootstrap	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap(s, status, buffer) do$/;"	f
bootstrap_fail	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_fail(s, err, %{types_lock: {server, ref}}) do$/;"	f
bootstrap_fail	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_fail(s, err, status, buffer) do$/;"	f
bootstrap_query	deps/postgrex/lib/postgrex/types.ex	/^  def bootstrap_query(version, {_, table}) do$/;"	f
bootstrap_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_recv(s, status, type_infos, buffer, next) do$/;"	f
bootstrap_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_send(s, status, types, buffer) do$/;"	f
bootstrap_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_send(s, status, types, parameters, buffer, next) do$/;"	f
bootstrap_sync_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_sync_recv(s, status, buffer) do$/;"	f
bootstrap_types	deps/postgrex/lib/postgrex/protocol.ex	/^  defp bootstrap_types(s, status, type_infos, buffer, next) do$/;"	f
bound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp bound_from(from, name), do: ["from #{name} in #{unbound_from from}"]$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(:max), do: :max$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(:min), do: :min$/;"	f
boundary_to_erlang_datetime	deps/timex/lib/timezone/timezone.ex	/^  defp boundary_to_erlang_datetime(secs), do: :calendar.gregorian_seconds_to_datetime(trunc(secs))$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast(socket, event, message) do$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast(_, _, _, _), do: raise_invalid_message()$/;"	f
broadcast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast(pubsub_server, topic, event, payload)$/;"	f
broadcast	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast(topic, event, msg) do$/;"	f
broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def broadcast(server, topic, message) when is_atom(server) or is_tuple(server),$/;"	f
broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def broadcast(fastlane, pubsub_server, 1 = _pool_size, from, topic, msg) when is_atom(pubsub_server) do$/;"	f
broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def broadcast(fastlane, pubsub_server, pool_size, from, topic, msg) when is_atom(pubsub_server) do$/;"	f
broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  def broadcast(fastlane, server_name, pool_size, from_pid, topic, msg) do$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast!(socket, event, message) do$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast!(_, _, _, _), do: raise_invalid_message()$/;"	f
broadcast!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast!(pubsub_server, topic, event, payload)$/;"	f
broadcast!	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast!(topic, event, msg) do$/;"	f
broadcast!	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def broadcast!(server, topic, message) do$/;"	f
broadcast_delta_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp broadcast_delta_heartbeat(%{presences: presences} = state) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast_from(socket, event, message) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from(_, _, _, _, _), do: raise_invalid_message()$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from(pubsub_server, from, topic, event, payload)$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast_from(from, topic, event, msg) do$/;"	f
broadcast_from	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def broadcast_from(socket, event, message) do$/;"	f
broadcast_from	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def broadcast_from(server, from_pid, topic, message) when is_atom(server) and is_pid(from_pid),$/;"	f
broadcast_from	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp broadcast_from(state, from, msg) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel.ex	/^  def broadcast_from!(socket, event, message) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from!(_, _, _, _, _), do: raise_invalid_message()$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/channel/server.ex	/^  def broadcast_from!(pubsub_server, from, topic, event, payload)$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/endpoint.ex	/^      def broadcast_from!(from, topic, event, msg) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def broadcast_from!(socket, event, message) do$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp broadcast_from!(_endpoint, pid, msg) when is_pid(pid),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp broadcast_from!(endpoint, topic, msg) when is_binary(topic),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp broadcast_from!(_state, client_ref, msg) when is_pid(client_ref),$/;"	f
broadcast_from!	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp broadcast_from!(state, client_ref, msg) when is_binary(client_ref),$/;"	f
broadcast_from!	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def broadcast_from!(server, from_pid, topic, message) when is_atom(server) and is_pid(from_pid) do$/;"	f
broadcasts are pushed to the client	deps/phoenix/priv/templates/phoenix.gen.channel/channel_test.exs	/^  test "broadcasts are pushed to the client", %{socket: socket} do$/;"	t
broadcasts are pushed to the client	deps/phoenix/priv/templates/phx.gen.channel/channel_test.exs	/^  test "broadcasts are pushed to the client", %{socket: socket} do$/;"	t
broker_args	deps/db_connection/lib/db_connection/sojourn.ex	/^  defp broker_args(mod, opts) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{field: name}, %{__struct__: struct}, _attributes) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{owner_key: owner_key, related_key: related_key} = refl, struct, attributes) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(%{related: related, queryable: queryable, defaults: defaults}) do$/;"	f
build	deps/ecto/lib/ecto/association.ex	/^  def build(refl, _, attributes) do$/;"	f
build	deps/ecto/lib/ecto/embedded.ex	/^  def build(%Embedded{related: related}) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/dynamic.ex	/^  def build(binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def build(kind, op, query, _binding, {:^, _, [var]}, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def build(kind, op, query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/from.ex	/^  def build(query, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/join.ex	/^  def build(query, qual, binding, expr, on, count_bind, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  def build(type, query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def build(query, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/select.ex	/^  def build(kind, query, _binding, {:^, _, [var]}, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/select.ex	/^  def build(kind, query, binding, expr, env) do$/;"	f
build	deps/ecto/lib/ecto/query/builder/update.ex	/^  def build(query, binding, expr, env) do$/;"	f
build	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp build(config, task_args) do$/;"	f
build	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  def build(args) do$/;"	f
build	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def build(args, help \\\\ __MODULE__) do$/;"	f
build	deps/phoenix/lib/phoenix/router/resource.ex	/^  def build(path, controller, options) when is_atom(controller) and is_list(options) do$/;"	f
build	deps/phoenix/lib/phoenix/router/route.ex	/^  def build(kind, verb, path, host, plug, opts, helper, pipe_through, private, assigns)$/;"	f
build_assoc	deps/ecto/lib/ecto.ex	/^  def build_assoc(%{__struct__: schema} = struct, assoc, attributes \\\\ %{}) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(_tag, []), do: []$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(_tag, [], acc),$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{_, false}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{_, nil}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, true}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, v}|t], acc) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, [{k, v}|t], acc) when k in @tag_prefixes and is_list(v) do$/;"	f
build_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp build_attrs(tag, attrs), do: build_attrs(tag, attrs, [])$/;"	f
build_channel_socket	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def build_channel_socket(%Socket{} = socket, channel, topic, join_ref) do$/;"	f
build_children	deps/coherence/lib/coherence/supervisor.ex	/^  defp build_children(children, _), do: children$/;"	f
build_children	deps/coherence/lib/coherence/supervisor.ex	/^  defp build_children(children, true) do$/;"	f
build_conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def build_conn() do$/;"	f
build_conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def build_conn(method, path, params_or_body \\\\ nil) do$/;"	f
build_conn_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_conn_forward_path(%Conn{private: %{phoenix_router: phx_router}} = conn, router, path) do$/;"	f
build_conn_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_conn_forward_path(_conn, _router, _path), do: nil$/;"	f
build_detail	deps/postgrex/lib/postgrex/error.ex	/^  defp build_detail(kw) do$/;"	f
build_digest	deps/phoenix/lib/phoenix/digester.ex	/^  defp build_digest(file) do$/;"	f
build_dispatch	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_dispatch(%Route{kind: :forward} = route) do$/;"	f
build_dispatch	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_dispatch(%Route{} = route) do$/;"	f
build_duplicated_error	deps/gettext/lib/gettext/po/parser.ex	/^  defp build_duplicated_error(%PluralTranslation{} = t, old_line) do$/;"	f
build_duplicated_error	deps/gettext/lib/gettext/po/parser.ex	/^  defp build_duplicated_error(%Translation{} = t, old_line) do$/;"	f
build_fallback	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defp build_fallback(:unregistered) do$/;"	f
build_fallback	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defp build_fallback({:function, plug}) do$/;"	f
build_fallback	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defp build_fallback({:module, plug}) do$/;"	f
build_host	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_host(host) do$/;"	f
build_host_match	deps/plug/lib/plug/router/utils.ex	/^  def build_host_match(host) do$/;"	f
build_match	deps/phoenix/lib/phoenix/router.ex	/^  defp build_match({_route, exprs}) do$/;"	f
build_meta	deps/ecto/lib/ecto/query/planner.ex	/^  defp build_meta(%{prefix: prefix, sources: sources, preloads: preloads}, select) do$/;"	f
build_metadata	deps/postgrex/lib/postgrex/error.ex	/^  defp build_metadata(kw) do$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods([], guards) do$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods([method], guards) do$/;"	f
build_methods	deps/plug/lib/plug/router.ex	/^  defp build_methods(methods, guards) do$/;"	f
build_on	deps/ecto/lib/ecto/query/builder/join.ex	/^  def build_on(on, query, binding, count_bind,$/;"	f
build_on	deps/ecto/lib/ecto/query/builder/join.ex	/^  def build_on({:^, _, [var]}, query, _binding, count_bind,$/;"	f
build_own_forward_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp build_own_forward_path(conn, router, path) do$/;"	f
build_params	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_params([]), do: nil$/;"	f
build_params	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_params(binding) do$/;"	f
build_path_and_binding	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_path_and_binding(%Route{path: path} = route) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  def build_path_match(spec, context \\\\ nil) when is_binary(spec) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  defp build_path_match([], _context, vars, acc) do$/;"	f
build_path_match	deps/plug/lib/plug/router/utils.ex	/^  defp build_path_match([h|t], context, vars, acc) do$/;"	f
build_path_params_match	deps/plug/lib/plug/router/utils.ex	/^  def build_path_params_match(vars) do$/;"	f
build_pipes	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_pipes(%Route{pipe_through: []}) do$/;"	f
build_pipes	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_pipes(%Route{pipe_through: pipe_through}) do$/;"	f
build_ref	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp build_ref(plug, scheme) do$/;"	f
build_rememberable	deps/coherence/test/models/rememberable_test.exs	/^  def build_rememberable(changes) do$/;"	f
build_result_variable	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp build_result_variable(index) when is_integer(index) do$/;"	f
build_route_match	deps/phoenix/lib/phoenix/router/route.ex	/^  defp build_route_match(route, binding) do$/;"	f
build_struct_or_error	deps/timex/lib/interval/interval.ex	/^  defp build_struct_or_error(%{step:  err = {:error, _}}), do: err$/;"	f
build_struct_or_error	deps/timex/lib/interval/interval.ex	/^  defp build_struct_or_error(%{until: err = {:error, _}}), do: err$/;"	f
build_struct_or_error	deps/timex/lib/interval/interval.ex	/^  defp build_struct_or_error(valid_attrs),                 do: struct(__MODULE__, valid_attrs)$/;"	f
build_type_info	deps/postgrex/lib/postgrex/types.ex	/^  def build_type_info(row) do$/;"	f
build_url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp build_url(endpoint, url) do$/;"	f
build_url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp build_url(https, http, url) do$/;"	f
build_wait	deps/retry/lib/retry.ex	/^  defp build_wait(_stream_builder, _clauses) do$/;"	f
build_wait	deps/retry/lib/retry.ex	/^  defp build_wait(stream_builder, do: do_clause) do$/;"	f
build_wait	deps/retry/lib/retry.ex	/^  defp build_wait(stream_builder, do: do_clause, then: then_clause, else: else_clause) do$/;"	f
build_wait	deps/retry/lib/retry.ex	/^  defp build_wait(stream_builder, do: {:__block__, _, [do_clause, {:then, _, nil}, then_clause]}) do$/;"	f
build_wait	deps/retry/lib/retry.ex	/^  defp build_wait(stream_builder, do: {:__block__, _, [do_clause, {:then, _, nil}, then_clause]}, else: else_clause) do$/;"	f
bump_clock	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp bump_clock(%State{mode: :normal, replica: rep, cloud: cloud, context: ctx, delta: delta} = state) do$/;"	f
button	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def button(opts, [do: contents]) do$/;"	f
button	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def button(text, opts) do$/;"	f
by_group	deps/tzdata/lib/tzdata/release_reader.ex	/^  def by_group,               do: simple_lookup(:by_group) |> hd |> elem(1)$/;"	f
bypass_through	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def bypass_through(conn) do$/;"	f
bypass_through	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def bypass_through(conn, router, pipelines \\\\ []) do$/;"	f
bytes	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defmacrop bytes(size) do$/;"	a
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?0), do: ?0$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?1), do: ?1$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?2), do: ?2$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?3), do: ?3$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?4), do: ?4$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?5), do: ?5$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?6), do: ?6$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?7), do: ?7$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?8), do: ?8$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?9), do: ?9$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?A), do: ?a$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?B), do: ?b$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?C), do: ?c$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?D), do: ?d$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?E), do: ?e$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?F), do: ?f$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?a), do: ?a$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?b), do: ?b$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?c), do: ?c$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?d), do: ?d$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?e), do: ?e$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(?f), do: ?f$/;"	f
c	deps/ecto/lib/ecto/uuid.ex	/^  defp c(_),  do: throw(:error)$/;"	f
cache	deps/con_cache/lib/con_cache/owner.ex	/^  def cache(local) when is_atom(local), do: cache(Process.whereis(local))$/;"	f
cache	deps/con_cache/lib/con_cache/owner.ex	/^  def cache(pid) when is_pid(pid) do$/;"	f
cache	deps/con_cache/lib/con_cache/owner.ex	/^  def cache({:global, name}), do: cache({:via, :global, name})$/;"	f
cache	deps/con_cache/lib/con_cache/owner.ex	/^  def cache({:local, local}) when is_atom(local), do: cache(local)$/;"	f
cache	deps/con_cache/lib/con_cache/owner.ex	/^  def cache({:via, module, name}), do: cache(module.whereis_name(name))$/;"	f
cache	deps/phoenix/lib/phoenix/config.ex	/^  def cache(module, key, fun) do$/;"	f
cache_insert	deps/ecto/lib/ecto/query/planner.ex	/^  defp cache_insert(repo, key, elem) do$/;"	f
cache_reset	deps/ecto/lib/ecto/query/planner.ex	/^  defp cache_reset(repo, key, prepared) do$/;"	f
cache_static_manifest	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp cache_static_manifest(endpoint) do$/;"	f
cache_update	deps/ecto/lib/ecto/query/planner.ex	/^  defp cache_update(repo, key, cached) do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, [zone_line_hd|zone_line_tl], from, zone_hd_rules, letter) do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, [zone_line_hd|zone_line_tl], from, zone_hd_rules, letter) when zone_hd_rules == nil do$/;"	f
calc_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods(btz_data, zone_name) do$/;"	f
calc_periods_for_year	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_periods_for_year(btz_data, [zone_line|zone_line_tl], from, utc_off, std_off, years, zone_rules, rules_for_year, letter) do$/;"	f
calc_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_periods_h(btz_data, zone_name) do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(_btz_data, zone_lines, from, utc_off, std_off, years, _, letter) when length(zone_lines)==1 and years ==[] do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(btz_data, [zone_line|zone_line_tl], from, utc_off, std_off, years, _, letter) when years==[] do$/;"	f
calc_rule_periods	deps/tzdata/lib/tzdata/period_builder.ex	/^  def calc_rule_periods(btz_data, zone_lines, from, utc_off, std_off, [years_hd|years_tl], zone_rules, letter) do$/;"	f
calc_rule_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_rule_periods_h(btz_data, :amount, rules_value, [zone_line_hd|zone_line_tl], from, _, _, _, letter) do$/;"	f
calc_rule_periods_h	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp calc_rule_periods_h(btz_data, :named_rules, rules_value, [zone_line_hd|zone_line_tl], from, utc_off, std_off, years_to_use, letter) do$/;"	f
calculate_column_widths	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp calculate_column_widths(routes) do$/;"	f
call	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^  def call(conn, {:error, %Ecto.Changeset{} = changeset}) do$/;"	f
call	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^  def call(conn, {:error, :not_found}) do$/;"	f
call	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^  def call(conn, {:error, [_head|_tail] = ecto_changesets}) do$/;"	f
call	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^  def call(conn, {:error, error_message}) do$/;"	f
call	apps/flexcility_web/lib/flexcility_web/controllers/fallback_controller.ex	/^  def call(conn, {:error,$/;"	f
call	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def call(conn, _) do$/;"	f
call	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  def call(conn, opts) do$/;"	f
call	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  def call(conn, opts) do$/;"	f
call	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  def call(conn, opts) do$/;"	f
call	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def call(conn, opts) do$/;"	f
call	deps/coherence/lib/coherence/plugs/require_login.ex	/^  def call(conn, _opts) do$/;"	f
call	deps/coherence/lib/coherence/plugs/validate_option.ex	/^  def call(conn, opts) do$/;"	f
call	deps/coherence/test/plugs/authentication/basic_test.exs	/^  defp call(plug, headers) do$/;"	f
call	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defp call(plug, params) do$/;"	f
call	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  defp call(plug, params, ip_address) do$/;"	f
call	deps/coherence/test/plugs/authentication/session_test.exs	/^  defp call(plug, headers) do$/;"	f
call	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp call(plug, params) do$/;"	f
call	deps/coherence/test/plugs/authentication/token_test.exs	/^  defp call(plug, params, token) do$/;"	f
call	deps/connection/lib/connection.ex	/^  defdelegate call(conn, req), to: :gen_server$/;"	d
call	deps/connection/lib/connection.ex	/^  defdelegate call(conn, req, timeout), to: :gen_server$/;"	d
call	deps/cors_plug/lib/cors_plug.ex	/^  def call(conn, options) do$/;"	f
call	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp call([], _, release), do: {:ok, release}$/;"	f
call	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp call([{plugin, opts}|plugins], callback, release) do$/;"	f
call	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp call(callback, release) do$/;"	f
call	deps/phoenix/lib/phoenix/code_reloader.ex	/^  def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/controller.ex	/^        def call(conn, {:error, :not_found}) do$/;"	f
call	deps/phoenix/lib/phoenix/controller.ex	/^        def call(conn, {:error, :unauthorized}) do$/;"	f
call	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def call(conn, action) when is_atom(action) do$/;"	f
call	deps/phoenix/lib/phoenix/endpoint.ex	/^      def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^      def call(conn, opts) do$/;"	f
call	deps/phoenix/lib/phoenix/router.ex	/^      def call(conn, _opts) do$/;"	f
call	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def call(conn, {endpoint, handler, transport}) do$/;"	f
call	deps/phoenix/priv/templates/phx.gen.json/fallback_controller.ex	/^  def call(conn, {:error, %Ecto.Changeset{} = changeset}) do$/;"	f
call	deps/phoenix/priv/templates/phx.gen.json/fallback_controller.ex	/^  def call(conn, {:error, :not_found}) do$/;"	f
call	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  def call(conn, sandbox) do$/;"	f
call	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  defp call(server, kind, args) do$/;"	f
call	deps/plug/lib/plug.ex	/^        def call(conn, _opts) do$/;"	f
call	deps/plug/lib/plug/builder.ex	/^        def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/builder.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/csrf_protection.ex	/^  def call(conn, mode) do$/;"	f
call	deps/plug/lib/plug/debugger.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/error_handler.ex	/^      def call(conn, opts) do$/;"	f
call	deps/plug/lib/plug/head.ex	/^  def call(%Conn{method: "HEAD"} = conn, []), do: %{conn | method: "GET"}$/;"	f
call	deps/plug/lib/plug/head.ex	/^  def call(conn, []), do: conn$/;"	f
call	deps/plug/lib/plug/logger.ex	/^  def call(conn, level) do$/;"	f
call	deps/plug/lib/plug/method_override.ex	/^  def call(%Plug.Conn{method: "POST", body_params: body_params} = conn, []),$/;"	f
call	deps/plug/lib/plug/method_override.ex	/^  def call(%Plug.Conn{} = conn, []),$/;"	f
call	deps/plug/lib/plug/parsers.ex	/^  def call(%{body_params: body_params} = conn, _options) do$/;"	f
call	deps/plug/lib/plug/parsers.ex	/^  def call(%{req_headers: req_headers, method: method,$/;"	f
call	deps/plug/lib/plug/request_id.ex	/^  def call(conn, req_id_header) do$/;"	f
call	deps/plug/lib/plug/session.ex	/^  def call(conn, config) do$/;"	f
call	deps/plug/lib/plug/ssl.ex	/^  def call(conn, {hsts, host, rewrites}) do$/;"	f
call	deps/plug/lib/plug/static.ex	/^  def call(conn = %Conn{method: meth}, %{at: at, only: only, prefix: prefix, from: from, gzip?: gzip?, brotli?: brotli?} = options)$/;"	f
call	deps/plug/lib/plug/static.ex	/^  def call(conn, _options) do$/;"	f
call	deps/swoosh/lib/plug/mailbox_preview.ex	/^    def call(conn, opts) do$/;"	f
call_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^  defp call_cookie(plug, headers, cookie) do$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(:is_nil, 1),                                     do: {:any, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(:not, 1),                                        do: {:boolean, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(_, _),                                           do: nil$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(agg, 1)  when agg in ~w(avg count max min sum)a, do: {:any, :any}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(bool, 2) when bool in ~w(and or)a,               do: {:boolean, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(comp, 2) when comp in ~w(== != < > <= >=)a,      do: {:any, :boolean}$/;"	f
call_type	deps/ecto/lib/ecto/query/builder.ex	/^  defp call_type(like, 2) when like in ~w(like ilike)a,           do: {:string, :boolean}$/;"	f
callback	deps/coherence/lib/coherence/rememberable_server.ex	/^  def callback(callback) do$/;"	f
callback_stop	deps/connection/lib/connection.ex	/^  defp callback_stop(:throw, value, stack, s) do$/;"	f
callback_stop	deps/connection/lib/connection.ex	/^  defp callback_stop(class, reason, stack, s) do$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize("", :lower), do: ""$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(<<?_, t :: binary>>, :lower) do$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(<<h, _t :: binary>> = value, :lower) do$/;"	f
camelize	deps/phoenix/lib/phoenix/naming.ex	/^  def camelize(value), do: Macro.camelize(value)$/;"	f
can	deps/coherence/test/controllers/invitation_controller_test.exs	/^    test "can't create new user when invitation token not exist", %{conn: conn} do$/;"	t
can	deps/coherence/test/controllers/invitation_controller_test.exs	/^    test "can't invite an existing user", %{conn: conn, user: user} do$/;"	t
can create new registration with valid params	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can create new registration with valid params", %{conn: conn} do$/;"	t
can create new user when invitation token exist	deps/coherence/test/controllers/invitation_controller_test.exs	/^    test "can create new user when invitation token exist", %{conn: conn} do$/;"	t
can invite new user	deps/coherence/test/controllers/invitation_controller_test.exs	/^    test "can invite new user", %{conn: conn} do$/;"	t
can not register with invalid params	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can not register with invalid params", %{conn: conn} do$/;"	t
can not reset password when user not exist	deps/coherence/test/controllers/password_controller_test.exs	/^    test "can not reset password when user not exist", %{conn: conn} do$/;"	t
can not update registration without current password	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can not update registration without current password", %{conn: conn} do$/;"	t
can not update registration without valid current password	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can not update registration without valid current password", %{conn: conn} do$/;"	t
can reset password when user exist	deps/coherence/test/controllers/password_controller_test.exs	/^    test "can reset password when user exist",  %{conn: conn, user: user} do$/;"	t
can update registration with valid current password	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can update registration with valid current password", %{conn: conn, user: user} do$/;"	t
can use the repository when allowed from another process	deps/ecto/integration_test/sql/sandbox.exs	/^  test "can use the repository when allowed from another process" do$/;"	t
can use the repository when checked out	deps/ecto/integration_test/sql/sandbox.exs	/^  test "can use the repository when checked out" do$/;"	t
can use the repository when shared from another process	deps/ecto/integration_test/sql/sandbox.exs	/^  test "can use the repository when shared from another process" do$/;"	t
can visit edit registraion page	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can visit edit registraion page", %{conn: conn} do$/;"	t
can visit registration page	deps/coherence/test/controllers/invitation_controller_test.exs	/^    test "can visit registration page", %{conn: conn} do$/;"	t
can visit show registraion page	deps/coherence/test/controllers/registration_controller_test.exs	/^    test "can visit show registraion page", %{conn: conn} do$/;"	t
can_generate_secure_cookie?	deps/distillery/lib/distillery/tasks/init.ex	/^  defp can_generate_secure_cookie? do$/;"	f
can_lock?	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def can_lock?(%__MODULE__{owner: pid}, pid), do: true$/;"	f
can_lock?	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def can_lock?(resource, _), do: empty?(resource)$/;"	f
cancel	deps/db_connection/lib/db_connection/connection.ex	/^  defp cancel(pool, ref) do$/;"	f
cancel_backoff	deps/connection/lib/connection.ex	/^  defp cancel_backoff(%{backoff: backoff} = s) do$/;"	f
cancel_backoff	deps/connection/lib/connection.ex	/^  defp cancel_backoff(%{backoff: nil} = s), do: s$/;"	f
cancel_handshake_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  def cancel_handshake_timer(:infinity), do: :ok$/;"	f
cancel_handshake_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  def cancel_handshake_timer({:timer, tref}) do$/;"	f
cancel_listener_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  def cancel_listener_timer(:infinity), do: :ok$/;"	f
cancel_listener_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  def cancel_listener_timer({:timer, tref}) do$/;"	f
cancel_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp cancel_recv(%{timeout: timeout}, sock) do$/;"	f
cancel_request	deps/postgrex/lib/postgrex/protocol.ex	/^  defp cancel_request(%{connection_key: nil}), do: :ok$/;"	f
cancel_request	deps/postgrex/lib/postgrex/protocol.ex	/^  defp cancel_request(s) do$/;"	f
cancel_send_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp cancel_send_recv(%{connection_id: pid, connection_key: key} = s, sock) do$/;"	f
cancel_timer	deps/db_connection/lib/db_connection/connection.ex	/^  defp cancel_timer(nil), do: :ok$/;"	f
cancel_timer	deps/db_connection/lib/db_connection/connection.ex	/^  defp cancel_timer(timer) do$/;"	f
cancel_timer	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp cancel_timer(nil), do: :ok$/;"	f
cancel_timer	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp cancel_timer(timer) do$/;"	f
canonical_zone?	deps/tzdata/lib/tzdata.ex	/^  def canonical_zone?(name), do: Enum.member?(canonical_zone_list(), name)$/;"	f
canonical_zone_list	deps/tzdata/lib/tzdata.ex	/^  def canonical_zone_list, do: Tzdata.ReleaseReader.zone_list$/;"	f
cant_be_blank	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def cant_be_blank, do: dgettext(@domain, "can't be blank")$/;"	f
cant_be_blank	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def cant_be_blank, do: dgettext(@domain, "can't be blank")$/;"	f
cant_be_blank	deps/coherence/test/support/messages.exs	/^  def cant_be_blank, do: dgettext(@domain, "can't be blank")$/;"	f
cant_find_that_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def cant_find_that_token, do: dgettext(@domain, "Can't find that token")$/;"	f
cant_find_that_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def cant_find_that_token, do: dgettext(@domain, "Can't find that token")$/;"	f
cant_find_that_token	deps/coherence/test/support/messages.exs	/^  def cant_find_that_token, do: dgettext(@domain, "Can't find that token")$/;"	f
cap	deps/retry/lib/retry/delay_streams.ex	/^  def cap(delays, max) do$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("apr"), do: 4$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("aug"), do: 8$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("dec"), do: 12$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("feb"), do: 2$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jan"), do: 1$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jul"), do: 7$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("jun"), do: 6$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("mar"), do: 3$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("may"), do: 5$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("nov"), do: 11$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("oct"), do: 10$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name("sep"), do: 9$/;"	f
cap_month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  defp cap_month_number_for_month_name(string), do: to_int(string)$/;"	f
captured_zone_map_clean_up	deps/tzdata/lib/tzdata/parser.ex	/^  defp captured_zone_map_clean_up(captured) do$/;"	f
cardinality_to_empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cardinality_to_empty(:many), do: []$/;"	f
cardinality_to_empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cardinality_to_empty(:one), do: nil$/;"	f
cast	deps/connection/lib/connection.ex	/^  defdelegate cast(conn, req), to: GenServer$/;"	d
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(_), do: :error$/;"	f
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
cast	deps/ecto/integration_test/support/types.exs	/^  def cast(string) when is_binary(string) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(%Changeset{changes: changes, data: data, types: types, empty_values: empty_values} = changeset,$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(%Changeset{types: nil}, _params, _permitted, _opts) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(%{__struct__: module} = data, params, permitted, opts) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(_data, %{__struct__: _} = params, _permitted, _opts) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast(data, params, permitted, opts \\\\ [])$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  def cast({data, types}, params, permitted, opts) when is_map(data) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  defp cast(%{} = data, %{} = types, %{} = changes, %{} = params, permitted, opts) when is_list(permitted) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  defp cast(%{} = data, %{} = types, %{} = changes, :invalid, permitted, opts) when is_list(permitted) do$/;"	f
cast	deps/ecto/lib/ecto/changeset.ex	/^  defp cast(%{}, %{}, %{}, params, permitted, _opts) when is_list(permitted) do$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{cardinality: :many} = relation, params, current, on_cast) when is_map(params) do$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{cardinality: :one} = relation, nil, current, _on_cast) do$/;"	f
cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  def cast(%{related: mod} = relation, params, current, on_cast) do$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%Ecto.Time{} = t),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{"hour" => empty, "minute" => empty}) when empty in ["", nil],$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{"hour" => hour, "min" => min} = map),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{"hour" => hour, "minute" => minute} = map),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{hour: empty, minute: empty}) when empty in ["", nil],$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{hour: hour, min: min} = map),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(%{hour: hour, minute: minute} = map),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(<<hour::2-bytes, ?:, min::2-bytes, ?:, sec::2-bytes, rest::binary>>) do$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(_),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(d), do: d |> do_cast() |> validate_cast()$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast(dt), do: dt |> do_cast() |> validate_cast()$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast({hour, min, sec, usec}),$/;"	f
cast	deps/ecto/lib/ecto/date_time.ex	/^  def cast({hour, min, sec}),$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(_), do: :error$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^        def cast(string) when is_binary(string) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:binary_id, value) when is_binary(value) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:boolean, term) when term in ~w(false 0), do: {:ok, false}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:boolean, term) when term in ~w(true 1),  do: {:ok, true}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:date, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:decimal, term) when is_binary(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:decimal, term) when is_number(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:float, term) when is_binary(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:float, term) when is_integer(term), do: {:ok, term + 0.0}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:naive_datetime, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:time, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(:utc_datetime, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(_type, nil), do: {:ok, nil}$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(type, term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast(type, term) when type in [:id, :integer] and is_binary(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:array, type}, term) when is_list(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:embed, type}, value) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:in, _type}, nil), do: :error$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:in, type}, term) when is_list(term) do$/;"	f
cast	deps/ecto/lib/ecto/type.ex	/^  def cast({:map, type}, term) when is_map(term) do$/;"	f
cast	deps/ecto/lib/ecto/uuid.ex	/^  def cast(<< _::128 >> = binary), do: encode(binary)$/;"	f
cast	deps/ecto/lib/ecto/uuid.ex	/^  def cast(<< a1, a2, a3, a4, a5, a6, a7, a8, ?-,$/;"	f
cast	deps/ecto/lib/ecto/uuid.ex	/^  def cast(_), do: :error$/;"	f
cast	deps/timex_ecto/lib/types/date.ex	/^  def cast(%Date{} = date), do: {:ok, date}$/;"	f
cast	deps/timex_ecto/lib/types/date.ex	/^  def cast(%{"calendar" => _,$/;"	f
cast	deps/timex_ecto/lib/types/date.ex	/^  def cast(date) when is_binary(date) do$/;"	f
cast	deps/timex_ecto/lib/types/date.ex	/^  def cast(datetime) do$/;"	f
cast	deps/timex_ecto/lib/types/datetime.ex	/^  def cast(%DateTime{} = datetime), do: {:ok, datetime}$/;"	f
cast	deps/timex_ecto/lib/types/datetime.ex	/^  def cast(%{"calendar" => _cal,$/;"	f
cast	deps/timex_ecto/lib/types/datetime.ex	/^  def cast(input) do$/;"	f
cast	deps/timex_ecto/lib/types/datetime.ex	/^  def cast(input) when is_binary(input) do$/;"	f
cast	deps/timex_ecto/lib/types/datetimetz.ex	/^  def cast(%DateTime{} = datetime), do: {:ok, datetime}$/;"	f
cast	deps/timex_ecto/lib/types/datetimetz.ex	/^  def cast(%{"calendar" => _cal,$/;"	f
cast	deps/timex_ecto/lib/types/datetimetz.ex	/^  def cast(input) do$/;"	f
cast	deps/timex_ecto/lib/types/datetimetz.ex	/^  def cast(input) when is_binary(input) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(%Duration{} = d) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(%{"hour" => h, "minute" => mm, "second" => s, "microsecond" => {us, _}}) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(%{"hour" => h, "minute" => mm, "second" => s, "millisecond" => ms}) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(%{"hour" => h, "minute" => mm, "second" => s, "ms" => ms}) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(%{"megaseconds" => m, "seconds" => s, "microseconds" => us}) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(input) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast(input) when is_binary(input) do$/;"	f
cast	deps/timex_ecto/lib/types/time.ex	/^  def cast({h, m, s} = timestamp) when is_number(h) and is_number(m) and is_number(s) do$/;"	f
cast!	deps/ecto/lib/ecto/date_time.ex	/^  def cast!(value) do$/;"	f
cast!	deps/ecto/lib/ecto/uuid.ex	/^  def cast!(value) do$/;"	f
cast!	deps/timex_ecto/lib/types/datetime.ex	/^  def cast!(input) do$/;"	f
cast_and_merge_params	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_and_merge_params(kind, query, expr, params, adapter) do$/;"	f
cast_assoc	deps/ecto/lib/ecto/changeset.ex	/^  def cast_assoc(changeset, name, opts \\\\ []) when is_atom(name) do$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(%{"year" => empty, "month" => empty, "day" => empty}) when empty in ["", nil],$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(%{"year" => year, "month" => month, "day" => day}),$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(%{year: empty, month: empty, day: empty}) when empty in ["", nil],$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(%{year: year, month: month, day: day}),$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(_),$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(_, _, _),$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(binary) when is_binary(binary) do$/;"	f
cast_date	deps/ecto/lib/ecto/type.ex	/^  defp cast_date(year, month, day) when is_integer(year) and is_integer(month) and is_integer(day) do$/;"	f
cast_date!	deps/ecto/lib/ecto/query/builder.ex	/^  def cast_date!(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
cast_date!	deps/ecto/lib/ecto/query/builder.ex	/^  def cast_date!(value),$/;"	f
cast_datetime!	deps/ecto/lib/ecto/query/builder.ex	/^  def cast_datetime!(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
cast_datetime!	deps/ecto/lib/ecto/query/builder.ex	/^  def cast_datetime!(value),$/;"	f
cast_embed	deps/ecto/lib/ecto/changeset.ex	/^  def cast_embed(changeset, name, opts \\\\ []) when is_atom(name) do$/;"	f
cast_embed	deps/ecto/lib/ecto/type.ex	/^  defp cast_embed(%{cardinality: :many, related: schema}, value) when is_list(value) do$/;"	f
cast_embed	deps/ecto/lib/ecto/type.ex	/^  defp cast_embed(%{cardinality: :many}, nil), do: {:ok, []}$/;"	f
cast_embed	deps/ecto/lib/ecto/type.ex	/^  defp cast_embed(%{cardinality: :one, related: schema}, %{__struct__: schema} = struct) do$/;"	f
cast_embed	deps/ecto/lib/ecto/type.ex	/^  defp cast_embed(%{cardinality: :one}, nil), do: {:ok, nil}$/;"	f
cast_embed	deps/ecto/lib/ecto/type.ex	/^  defp cast_embed(_embed, _value) do$/;"	f
cast_field	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_field(key, param_key, type, params, current, empty_values, defaults, valid?) do$/;"	f
cast_key	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_key(key) when is_atom(key),$/;"	f
cast_key	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_key(key) when is_binary(key) do$/;"	f
cast_merge	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_merge(cs1, cs2) do$/;"	f
cast_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_naive_datetime(%{"year" => empty, "month" => empty, "day" => empty,$/;"	f
cast_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_naive_datetime(%{year: empty, month: empty, day: empty,$/;"	f
cast_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_naive_datetime(%{} = map) do$/;"	f
cast_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_naive_datetime(binary) when is_binary(binary) do$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(%{cardinality: :many, unique: unique}, value, current, current_pks, new_pks, fun) when is_list(value) do$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(%{cardinality: :many}, [], [], _current_pks, _new_pks, _fun) do$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(%{cardinality: :one} = relation, value, current, current_pks,$/;"	f
cast_or_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp cast_or_change(_, _, _, _, _, _), do: :error$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(_kind, query, expr, %DynamicExpr{}, _type, _value) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(_kind, query, expr, [{_, _} | _], _type, _value) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, query, expr, v, type, adapter) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, type, v) do$/;"	f
cast_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp cast_param(kind, type, v, adapter) do$/;"	f
cast_relation	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_relation(type, %Changeset{data: data, types: types}, _name, _opts)$/;"	f
cast_relation	deps/ecto/lib/ecto/changeset.ex	/^  defp cast_relation(type, %Changeset{} = changeset, key, opts) do$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(%{"hour" => empty, "minute" => empty}) when empty in ["", nil],$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(%{"hour" => hour, "minute" => minute} = map),$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(%{hour: empty, minute: empty}) when empty in ["", nil],$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(%{hour: hour, minute: minute, second: second, microsecond: {microsecond, precision}}),$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(%{hour: hour, minute: minute} = map),$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(_),$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(_, _, _, _) do$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(binary) when is_binary(binary) do$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(hour, minute, sec, nil) do$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(hour, minute, sec, usec) when is_integer(usec) do$/;"	f
cast_time	deps/ecto/lib/ecto/type.ex	/^  defp cast_time(hour, minute, sec, {usec, precision})$/;"	f
cast_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_utc_datetime(%DateTime{time_zone: "Etc\/UTC"} = datetime), do: {:ok, datetime}$/;"	f
cast_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_utc_datetime(%DateTime{} = datetime) do$/;"	f
cast_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_utc_datetime(binary) when is_binary(binary) do$/;"	f
cast_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp cast_utc_datetime(value) do$/;"	f
cc	deps/swoosh/lib/swoosh/email.ex	/^  def cc(%__MODULE__{cc: cc} = email, recipients) when is_list(recipients) do$/;"	f
cc	deps/swoosh/lib/swoosh/email.ex	/^  def cc(%__MODULE__{} = email, recipient) do$/;"	f
cd	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  defp cd(opts), do: opts[:cd] || File.cwd!()$/;"	f
century	deps/timex/lib/date/date.ex	/^  def century(%Date{:year => year}), do: Timex.century(year)$/;"	f
century	deps/timex/lib/datetime/datetime.ex	/^  def century(%DateTime{:year => year}), do: Timex.century(year)$/;"	f
century	deps/timex/lib/datetime/erlang.ex	/^  def century(_), do: {:error, :invalid_date}$/;"	f
century	deps/timex/lib/datetime/erlang.ex	/^  def century({y,m,d}) when is_date(y,m,d),     do: Timex.century(y)$/;"	f
century	deps/timex/lib/datetime/erlang.ex	/^  def century({{y,m,d},_}) when is_date(y,m,d), do: Timex.century(y)$/;"	f
century	deps/timex/lib/datetime/map.ex	/^  def century(map),                   do: convert!(map, :century)$/;"	f
century	deps/timex/lib/datetime/naivedatetime.ex	/^  def century(%NaiveDateTime{:year => year}), do: Timex.century(year)$/;"	f
century	deps/timex/lib/parse/datetime/parsers.ex	/^  def century(opts \\\\ []) do$/;"	f
century	deps/timex/lib/protocol.ex	/^  def century(%{__struct__: _} = d), do: Timex.century(Map.from_struct(d))$/;"	f
century	deps/timex/lib/protocol.ex	/^  def century(_datetime), do: {:error, :invalid_date}$/;"	f
century	deps/timex/lib/protocol.ex	/^  def century(datetime)$/;"	f
century	deps/timex/lib/timex.ex	/^  def century(), do: century(:calendar.universal_time())$/;"	f
century	deps/timex/lib/timex.ex	/^  def century(date), do: Timex.Protocol.century(date)$/;"	f
century	deps/timex/lib/timex.ex	/^  def century(year) when is_integer(year) do$/;"	f
change	apps/flexcility/priv/repo/migrations/20170505060115_create_web_accounts_user.exs	/^  def change do$/;"	f
change	deps/coherence/lib/mix/tasks/coh.install.ex	/^      def change do$/;"	f
change	deps/coherence/lib/mix/tasks/coherence.install.ex	/^      def change do$/;"	f
change	deps/coherence/test/support/migrations.exs	/^  def change do$/;"	f
change	deps/ecto/integration_test/cases/migrator.exs	/^    def change do$/;"	f
change	deps/ecto/integration_test/sql/migration.exs	/^    def change do$/;"	f
change	deps/ecto/integration_test/support/migration.exs	/^  def change do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%Changeset{changes: changes, types: types} = changeset, new_changes)$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%Changeset{types: nil}, _changes) do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(%{__struct__: struct} = data, changes) when is_map(changes) or is_list(changes) do$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change(data, changes \\\\ %{})$/;"	f
change	deps/ecto/lib/ecto/changeset.ex	/^  def change({data, types}, changes) when is_map(data) do$/;"	f
change	deps/ecto/lib/ecto/changeset/relation.ex	/^  def change(%{cardinality: :one} = relation, nil, current) do$/;"	f
change	deps/ecto/lib/ecto/changeset/relation.ex	/^  def change(%{related: mod} = relation, value, current) do$/;"	f
change	deps/ecto/lib/ecto/migration.ex	/^        def change do$/;"	f
change	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^    def change do$/;"	f
change	deps/phoenix/priv/templates/phoenix.gen.model/migration.exs	/^  def change do$/;"	f
change	deps/phoenix/priv/templates/phx.gen.schema/migration.exs	/^  def change do$/;"	f
change_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "change_<%= schema.singular %>\/1 returns a <%= schema.singular %> changeset" do$/;"	t
change_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def change_<%= schema.singular %>(%<%= inspect schema.alias %>{} = <%= schema.singular %>) do$/;"	f
change_as_field	deps/ecto/lib/ecto/changeset.ex	/^  defp change_as_field(types, key, value) do$/;"	f
change_manifests	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  defp change_manifests(manifest_to_pos) do$/;"	f
change_organisation	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def change_organisation(organisation) do$/;"	f
change_parents	deps/ecto/lib/ecto/repo/schema.ex	/^  defp change_parents(changes, struct, assocs) do$/;"	f
change_site	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def change_site(%Site{} = site) do$/;"	f
change_site	apps/flexcility_web/test/admin_test.exs	/^  test "change_site\/1 returns a site changeset" do$/;"	t
change_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def change_user(user) do$/;"	f
changeset	deps/coherence/lib/coherence/schema.ex	/^        def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/lib/coherence/schema.ex	/^        def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/lib/mix/tasks/coh.install.ex	/^      def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/lib/mix/tasks/coh.install.ex	/^      def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/lib/mix/tasks/coherence.install.ex	/^      def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/lib/mix/tasks/coherence.install.ex	/^      def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/priv/templates/coh.install/models/coherence/user.ex	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/priv/templates/coh.install/models/coherence/user.ex	/^  def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/priv/templates/coherence.install/models/coherence/user.ex	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/priv/templates/coherence.install/models/coherence/user.ex	/^  def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/test/support/schema.exs	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/test/support/schema.exs	/^  def changeset(model, params, :password) do$/;"	f
changeset	deps/coherence/web/controllers/controller_helpers.ex	/^  def changeset(:password, module, model, params) do$/;"	f
changeset	deps/coherence/web/controllers/controller_helpers.ex	/^  def changeset(which, module, model, params \\\\ %{})$/;"	f
changeset	deps/coherence/web/controllers/controller_helpers.ex	/^  def changeset(which, module, model, params) do$/;"	f
changeset	deps/coherence/web/models/invitation.ex	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/web/models/rememberable.ex	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/coherence/web/models/trackable.ex	/^  def changeset(model, params \\\\ %{}) do$/;"	f
changeset	deps/ecto/integration_test/cases/repo.exs	/^      def changeset(order, params) do$/;"	f
changeset	deps/ecto/integration_test/support/schemas.exs	/^  def changeset(schema, params) do$/;"	f
changeset	deps/ecto/lib/ecto.ex	/^        def changeset(user, params \\\\ %{}) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^        def changeset(:update, struct, params \\\\ %{}) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^        def changeset(comment, params) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^        def changeset(user, params \\\\ %{}) do$/;"	f
changeset	deps/ecto/lib/ecto/changeset.ex	/^      def changeset(struct, params) do$/;"	f
changeset	deps/ecto/lib/ecto/schema.ex	/^        def changeset(struct, params \\\\ %{}) do$/;"	f
changeset	deps/ecto/lib/ecto/schema.ex	/^      def changeset(schema, params) do$/;"	f
changeset	deps/phoenix/priv/templates/phoenix.gen.model/model.ex	/^  def changeset(struct, params \\\\ %{}) do$/;"	f
changeset	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def changeset(user, params \\\\ %{}) do$/;"	f
changeset with invalid attributes	deps/coherence/test/models/rememberable_test.exs	/^  test "changeset with invalid attributes" do$/;"	t
changeset with invalid attributes	deps/phoenix/priv/templates/phoenix.gen.model/model_test.exs	/^  test "changeset with invalid attributes" do$/;"	t
changeset with valid attributes	deps/coherence/test/models/rememberable_test.exs	/^  test "changeset with valid attributes" do$/;"	t
changeset with valid attributes	deps/phoenix/priv/templates/phoenix.gen.model/model_test.exs	/^  test "changeset with valid attributes" do$/;"	t
changeset_view	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp changeset_view do$/;"	f
channel	apps/flexcility_web/lib/flexcility_web.ex	/^  def channel do$/;"	f
channel	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro channel(topic_pattern, module, opts \\\\ []) do$/;"	a
channel_log	deps/phoenix/lib/phoenix/logger.ex	/^  defp channel_log(log_option, %Socket{private: private}, message_or_func) do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char() do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char(c) when is_integer(c) do$/;"	f
char	deps/combine/lib/combine/parsers/text.ex	/^  def char(parser) when is_function(parser, 1) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, column: col, input: <<c::utf8,rest::binary>>, results: results} = state, c) when is_integer(c) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, input: <<>>} = state, c) do$/;"	f
char_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp char_impl(%ParserState{status: :ok, line: line, column: col, input: <<next::utf8,_::binary>>} = state, c) do$/;"	f
check_action!	deps/ecto/lib/ecto/association.ex	/^  defp check_action!(%{related: schema}, :delete, :insert),$/;"	f
check_action!	deps/ecto/lib/ecto/association.ex	/^  defp check_action!(_, _, _), do: :ok$/;"	f
check_action!	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp check_action!(changeset, allowed_actions) do$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(:delete, :insert, %{related: schema}),$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(:replace, action, %{on_replace: :delete} = embed),$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(:update, :insert, %{related: schema}),$/;"	f
check_action!	deps/ecto/lib/ecto/embedded.ex	/^  defp check_action!(action, _, _), do: action$/;"	f
check_binds	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp check_binds(query, count) do$/;"	f
check_confirm	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_confirm(options, %{confirm: true}), do: options$/;"	f
check_confirm	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_confirm(options, _), do: ["--no-confirm" | options]$/;"	f
check_confirm	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_confirm(options, %{confirm: true}), do: options$/;"	f
check_confirm	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_confirm(options, _), do: ["--no-confirm" | options]$/;"	f
check_confirm_once	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_confirm_once(options, %{confirm_once: false} = config), do: check_confirm(options, config)$/;"	f
check_confirm_once	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_confirm_once(options, _), do: ["--confirm-once" | options]$/;"	f
check_confirm_once	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_confirm_once(options, %{confirm_once: false} = config), do: check_confirm(options, config)$/;"	f
check_confirm_once	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_confirm_once(options, _), do: ["--confirm-once" | options]$/;"	f
check_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def check_constraint(changeset, field, opts \\\\ []) do$/;"	f
check_cookie	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  defp check_cookie(%__MODULE__{profile: %Profile{cookie: cookie} = profile} = release, log?) do$/;"	f
check_ets	deps/con_cache/lib/con_cache/owner.ex	/^  defp check_ets(ets) do$/;"	f
check_for_duplicates	deps/gettext/lib/gettext/po/parser.ex	/^  defp check_for_duplicates(translations) do$/;"	f
check_for_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_for_model(%{user_schema: user_schema, web_path: web_path} = config) do$/;"	f
check_for_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_for_model(config), do: config$/;"	f
check_for_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_for_model(%{user_schema: user_schema} = config) do$/;"	f
check_for_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_for_model(config), do: config$/;"	f
check_if_time_to_update	deps/tzdata/lib/tzdata/release_updater.ex	/^  def check_if_time_to_update do$/;"	f
check_migrations	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_migrations(options, %{with_migrations: true}), do: options$/;"	f
check_migrations	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_migrations(options, _), do: ["--no-migrations" | options]$/;"	f
check_migrations	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_migrations(options, %{with_migrations: true}), do: options$/;"	f
check_migrations	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_migrations(options, _), do: ["--no-migrations" | options]$/;"	f
check_module_name_availability!	deps/phoenix/lib/mix/phoenix.ex	/^  def check_module_name_availability!(name) do$/;"	f
check_operations_valid	deps/ecto/lib/ecto/multi.ex	/^  defp check_operations_valid(operations) do$/;"	f
check_options!	deps/ecto/lib/ecto/schema.ex	/^  defp check_options!(opts, valid, fun_arity) do$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(%Plug.Conn{halted: true} = conn, _handler, _endpoint, _opts, _sender),$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(conn, handler, endpoint, opts, sender \\\\ &Plug.Conn.send_resp\/1)$/;"	f
check_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def check_origin(conn, handler, endpoint, opts, sender) do$/;"	f
check_origin_config	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp check_origin_config(handler, endpoint, opts) do$/;"	f
check_pass	deps/comeonin/lib/comeonin/base.ex	/^      def check_pass(nil, _password, opts) do$/;"	f
check_pass	deps/comeonin/lib/comeonin/base.ex	/^      def check_pass(user, password, _) do$/;"	f
check_pass	deps/comeonin/lib/comeonin/base.ex	/^      def check_pass(user, password, opts \\\\ [])$/;"	f
check_processes	deps/postgrex/lib/postgrex/type_server.ex	/^  defp check_processes(%{connections: connections} = state) do$/;"	f
check_processes	deps/postgrex/lib/postgrex/type_server.ex	/^  defp check_processes(%{lock: ref} = state) when is_reference(ref) do$/;"	f
check_serializer	deps/plug/lib/plug/session/cookie.ex	/^  defp check_serializer(_), do:$/;"	f
check_serializer	deps/plug/lib/plug/session/cookie.ex	/^  defp check_serializer(serializer) when is_atom(serializer), do: serializer$/;"	f
check_signing_salt	deps/plug/lib/plug/session/cookie.ex	/^  defp check_signing_salt(opts) do$/;"	f
check_silent	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_silent(options, %{silent: false}), do: options$/;"	f
check_silent	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp check_silent(options, _), do: ["--silent" | options]$/;"	f
check_silent	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_silent(options, %{silent: false}), do: options$/;"	f
check_silent	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp check_silent(options, _), do: ["--silent" | options]$/;"	f
check_symlinks	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def check_symlinks do$/;"	f
check_token_from_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def check_token_from_session({conn, creds}, _param), do: {conn, creds}$/;"	f
check_token_from_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def check_token_from_session({conn, nil}, param), do: get_token_from_session(conn, param)$/;"	f
check_type!	deps/ecto/lib/ecto/schema.ex	/^  defp check_type!(name, type, virtual?) do$/;"	f
checkbox	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def checkbox(form, field, opts \\\\ []) do$/;"	f
checkin	deps/db_connection/lib/db_connection.ex	/^      def checkin(state) do$/;"	f
checkin	deps/db_connection/lib/db_connection.ex	/^  defp checkin(conn, conn_state, opts) do$/;"	f
checkin	deps/db_connection/lib/db_connection/connection.ex	/^  def checkin({pid, ref}, state, _) do$/;"	f
checkin	deps/db_connection/lib/db_connection/ownership.ex	/^  def checkin(proxy, state, opts) do$/;"	f
checkin	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def checkin(manager, opts) do$/;"	f
checkin	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def checkin({proxy, ref}, state, _opts) do$/;"	f
checkin	deps/db_connection/lib/db_connection/poolboy.ex	/^  def checkin({pool, worker, worker_ref}, state, opts) do$/;"	f
checkin	deps/db_connection/lib/db_connection/sojourn.ex	/^  defdelegate checkin(ref, state, opts), to: DBConnection.Connection$/;"	d
checkin	deps/db_connection/lib/db_connection/task.ex	/^  defdelegate checkin(info, state, opts), to: DBConnection.Connection$/;"	d
checkin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def checkin(pool_ref, {conn_mod, conn_state, _in_transaction?}, opts) do$/;"	f
checkin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def checkin(state), do: proxy(:checkin, state, [])$/;"	f
checkin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def checkin(repo, _opts \\\\ []) do$/;"	f
checkin	deps/postgrex/lib/postgrex/notifications.ex	/^  defp checkin(protocol, s) do$/;"	f
checkin	deps/postgrex/lib/postgrex/protocol.ex	/^  def checkin(%{buffer: buffer} = s) when is_binary(buffer) do$/;"	f
checkin	deps/postgrex/lib/postgrex/protocol.ex	/^  def checkin(%{postgres: :transaction, transactions: :strict} = s) do$/;"	f
checkout	deps/db_connection/lib/db_connection.ex	/^      def checkout(state) do$/;"	f
checkout	deps/db_connection/lib/db_connection.ex	/^  defp checkout(pool, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/connection.ex	/^  def checkout(pool, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/ownership.ex	/^  def checkout(manager, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def checkout(manager, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp checkout(state, caller, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def checkout(proxy, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/poolboy.ex	/^  def checkout(pool, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/poolboy.ex	/^  defp checkout(pool, worker, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/sojourn.ex	/^  def checkout(broker, opts) do$/;"	f
checkout	deps/db_connection/lib/db_connection/task.ex	/^  def checkout({:via, __MODULE__, {info, mod, state}}, _) do$/;"	f
checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def checkout(pool, opts) do$/;"	f
checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def checkout(state), do: proxy(:checkout, state, [])$/;"	f
checkout	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def checkout(repo, opts \\\\ []) do$/;"	f
checkout	deps/postgrex/lib/postgrex/protocol.ex	/^  def checkout(%{buffer: :active_once} = s) do$/;"	f
checkout	deps/postgrex/lib/postgrex/protocol.ex	/^  def checkout(%{postgres: :transaction, transactions: :strict} = s) do$/;"	f
checkpw	deps/coherence/lib/coherence/schema.ex	/^        def checkpw(password, encrypted) do$/;"	f
checkpw	deps/coherence/test/schema_test.exs	/^  test "checkpw" do$/;"	t
checkpw	deps/comeonin/lib/comeonin/base.ex	/^      defdelegate checkpw(password, hash), to: module, as: :verify_pass$/;"	d
checkpw invalid passwords	deps/coherence/test/schema_test.exs	/^  test "checkpw invalid passwords" do$/;"	t
child_changeset	deps/ecto/lib/ecto/schema.ex	/^      defp child_changeset(schema, params) do$/;"	f
child_spec	deps/bolt_sips/lib/bolt_sips.ex	/^  def child_spec(opts) do$/;"	f
child_spec	deps/db_connection/lib/db_connection.ex	/^  def child_spec(conn_mod, opts, child_opts \\\\ []) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/connection.ex	/^  def child_spec(mod, opts, child_opts \\\\ []) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/connection.ex	/^  def child_spec(mod, opts, mode, child_opts) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/ownership.ex	/^  def child_spec(module, opts, child_opts) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/poolboy.ex	/^  def child_spec(mod, opts, child_opts) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/sojourn.ex	/^  def child_spec(mod, opts, child_opts \\\\ []) do$/;"	f
child_spec	deps/db_connection/lib/db_connection/task.ex	/^  def child_spec(_, _, _) do$/;"	f
child_spec	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def child_spec(opts) do$/;"	f
child_spec	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def child_spec(opts) do$/;"	f
child_spec	deps/ecto/lib/ecto/adapters/sql.ex	/^      def child_spec(repo, opts) do$/;"	f
child_spec	deps/ecto/lib/ecto/adapters/sql.ex	/^  def child_spec(connection, adapter, repo, opts) do$/;"	f
child_spec	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def child_spec(_module, _opts, _child_opts) do$/;"	f
child_spec	deps/ecto/lib/ecto/repo.ex	/^      def child_spec(opts) do$/;"	f
child_spec	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  def child_spec(scheme, endpoint, config) do$/;"	f
child_spec	deps/plug/lib/plug/adapters/cowboy.ex	/^  def child_spec(scheme, plug, opts, cowboy_options \\\\ []) do$/;"	f
child_spec	deps/postgrex/lib/postgrex.ex	/^  def child_spec(opts) do$/;"	f
chunk	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def chunk(req, body) do$/;"	f
chunk	deps/plug/lib/plug/adapters/test/conn.ex	/^  def chunk(%{chunks: chunks} = state, body) do$/;"	f
chunk	deps/plug/lib/plug/adapters/test/conn.ex	/^  def chunk(%{method: "HEAD"} = state, _body),$/;"	f
chunk	deps/plug/lib/plug/conn.ex	/^  def chunk(%Conn{adapter: {adapter, payload}, state: :chunked} = conn, chunk) do$/;"	f
chunk	deps/plug/lib/plug/conn.ex	/^  def chunk(%Conn{state: :chunked} = conn, ""), do: {:ok, conn}$/;"	f
chunk	deps/plug/lib/plug/conn.ex	/^  def chunk(%Conn{}, chunk) when is_binary(chunk) or is_list(chunk) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size("", _, acc), do: acc$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<_ :: utf8>> <> _, :unicode, acc) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char :: utf8>> <> _, :javascript, acc) when char in [0x2028, 0x2029] do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> _, _mode, acc) when char <= 0x1F or char in '"\\\\' do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>> <> rest, mode, acc) when char < 0x80 do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<char>>, _, _) do$/;"	f
chunk_size	deps/poison/lib/poison/encoder.ex	/^  defp chunk_size(<<codepoint :: utf8>> <> rest, mode, acc) do$/;"	f
clean	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  def clean() do$/;"	f
clean	deps/phoenix/lib/phoenix/digester.ex	/^  def clean(output_path, age, keep, now \\\\ now()) do$/;"	f
clean!	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp clean!(%Config{releases: releases}, args) do$/;"	f
clean_all!	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp clean_all!(output_dir) do$/;"	f
clean_path	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp clean_path(path) do$/;"	f
clean_release	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp clean_release(%Release{profile: %Profile{output_dir: output_dir}} = release, args) do$/;"	f
clear_cache	deps/phoenix/lib/phoenix/config.ex	/^  def clear_cache(module) do$/;"	f
clear_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def clear_flash(conn) do$/;"	f
clear_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate clear_flash(conn), to: Phoenix.Controller$/;"	d
clear_password_params	deps/coherence/priv/templates/coh.install/controllers/coherence/password_controller.ex	/^  defp clear_password_params(params \\\\ %{}) do$/;"	f
clear_password_params	deps/coherence/priv/templates/coherence.install/controllers/coherence/password_controller.ex	/^  defp clear_password_params(params \\\\ %{}) do$/;"	f
clear_password_params	deps/coherence/web/controllers/password_controller.ex	/^  defp clear_password_params(params \\\\ %{}) do$/;"	f
clear_queue	deps/db_connection/lib/db_connection/connection.ex	/^  defp clear_queue(:broker), do: :broker$/;"	f
clear_queue	deps/db_connection/lib/db_connection/connection.ex	/^  defp clear_queue(queue) do$/;"	f
clear_session	deps/plug/lib/plug/conn.ex	/^  def clear_session(conn) do$/;"	f
clear_ttl	deps/con_cache/lib/con_cache/operations.ex	/^  defp clear_ttl(%ConCache{ttl_manager: nil}, _), do: :ok$/;"	f
clear_ttl	deps/con_cache/lib/con_cache/operations.ex	/^  defp clear_ttl(%ConCache{ttl_manager: ttl_manager}, key) do$/;"	f
clear_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  def clear_ttl(server, key) do$/;"	f
clear_unlock_values	deps/coherence/priv/templates/coh.install/controllers/coherence/unlock_controller.ex	/^  def clear_unlock_values(user, user_schema) do$/;"	f
clear_unlock_values	deps/coherence/priv/templates/coherence.install/controllers/coherence/unlock_controller.ex	/^  def clear_unlock_values(user, user_schema) do$/;"	f
clear_unlock_values	deps/coherence/web/controllers/unlock_controller.ex	/^  def clear_unlock_values(user, user_schema) do$/;"	f
client_queue	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp client_queue(opts) do$/;"	f
client_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp client_ref(pid) when is_pid(pid), do: self()$/;"	f
client_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp client_ref(topic) when is_binary(topic), do: topic$/;"	f
clock	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp clock(state), do: State.clocks(state.presences)$/;"	f
clock	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp clock(%State{replica: rep, context: ctx}), do: Map.get(ctx, rep, 0)$/;"	f
clocks	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def clocks(%State{replica: rep, context: ctx}), do: {rep, ctx}$/;"	f
clockset_replicas	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def clockset_replicas(clockset) do$/;"	f
clockset_to_sync	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp clockset_to_sync(state) do$/;"	f
close	deps/connection/lib/connection.ex	/^        def close(conn), do: Connection.call(conn, :close)$/;"	f
close	deps/db_connection/lib/db_connection.ex	/^  def close(conn, query, opts \\\\ []) do$/;"	f
close	deps/phoenix/lib/phoenix/channel/server.ex	/^  def close(pid, timeout \\\\ 5000) do$/;"	f
close	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def close(socket, timeout \\\\ 5000) do$/;"	f
close	deps/postgrex/lib/postgrex.ex	/^  def close(conn, query, opts \\\\ []) do$/;"	f
close	deps/postgrex/lib/postgrex/protocol.ex	/^  defp close(s, status, %Query{name: name} = query, result, buffer) do$/;"	f
close	deps/postgrex/lib/postgrex/protocol.ex	/^  defp close(s, status, query, buffer, result, messages) do$/;"	f
close!	deps/db_connection/lib/db_connection.ex	/^  def close!(conn, query, opts \\\\ []) do$/;"	f
close!	deps/postgrex/lib/postgrex.ex	/^  def close!(conn, query, opts \\\\ []) do$/;"	f
close_parse_describe	deps/postgrex/lib/postgrex/protocol.ex	/^  defp close_parse_describe(s, status, query, buffer, next) do$/;"	f
close_portal_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp close_portal_recv(s, status, cursor, buffer) do$/;"	f
close_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp close_recv(s, status, query, buffer, recv) do$/;"	f
cmd	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp cmd(exec, args, cwd, env, verbose?) do$/;"	f
cmd	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^    def cmd(email, config) do$/;"	f
cmd_args	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^    def cmd_args(config) do$/;"	f
cmd_path	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^    def cmd_path(config) do$/;"	f
cmp	deps/decimal/lib/decimal.ex	/^  def cmp(num1, num2) do$/;"	f
coalesce	deps/ecto/lib/ecto/query/api.ex	/^        defmacro coalesce(left, right) do$/;"	a
coalesce_token	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp coalesce_token([flags, directive]) do$/;"	f
coalesce_token	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp coalesce_token([flags, width, modifiers, directive]) do$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^    def code(unquote(atom)), do: unquote(code)$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^  def code(integer) when integer in 100..999 do$/;"	f
code	deps/plug/lib/plug/conn/status.ex	/^  def code(integer_or_atom)$/;"	f
code_change	deps/connection/lib/connection.ex	/^      def code_change(_old, state, _extra) do$/;"	f
code_change	deps/connection/lib/connection.ex	/^  def code_change(old_vsn, %{mod: mod, mod_state: mod_state} = s, extra) do$/;"	f
code_change	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def code_change(_old, state, _extra) do$/;"	f
code_change	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def code_change(_old, state, _extra) do$/;"	f
code_change	deps/phoenix/lib/phoenix/channel.ex	/^      def code_change(_old, socket, _extra), do: {:ok, socket}$/;"	f
code_change	deps/phoenix/lib/phoenix/channel/server.ex	/^  def code_change(old, socket, extra) do$/;"	f
code_reload	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp code_reload(conn, opts, endpoint) do$/;"	f
code_reload	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp code_reload(conn, opts, endpoint) do$/;"	f
code_to_name	deps/postgrex/lib/postgrex/error_code.ex	/^    def code_to_name(unquote(code)), do: unquote(name)$/;"	f
code_to_name	deps/postgrex/lib/postgrex/error_code.ex	/^  def code_to_name(_), do: nil$/;"	f
code_to_name	deps/postgrex/lib/postgrex/error_code.ex	/^  def code_to_name(code)$/;"	f
coherence_fields	deps/coherence/lib/coherence/schema.ex	/^  def coherence_fields do$/;"	f
coherence_links	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, :layout, opts) do$/;"	f
coherence_links	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, :new_session, opts) do$/;"	f
coherence_links	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, which, opts \\\\ [])$/;"	f
coherence_links	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, :layout, opts) do$/;"	f
coherence_links	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, :new_session, opts) do$/;"	f
coherence_links	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_links(conn, which, opts \\\\ [])$/;"	f
coherence_links	deps/coherence/test/support/view_helpers.exs	/^  def coherence_links(conn, :layout, opts) do$/;"	f
coherence_links	deps/coherence/test/support/view_helpers.exs	/^  def coherence_links(conn, :new_session, opts) do$/;"	f
coherence_links	deps/coherence/test/support/view_helpers.exs	/^  def coherence_links(conn, which, opts \\\\ [])$/;"	f
coherence_links	deps/coherence/test/support/views.exs	/^  def coherence_links(conn, :new_session) do$/;"	f
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :layout not signed no register" do$/;"	t
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :layout not signed" do$/;"	t
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :layout signed in", %{conn: conn} do$/;"	t
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :new_session defaults", %{conn: conn} do$/;"	t
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :new_session no register", %{conn: conn} do$/;"	t
coherence_links	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_links :new_session not locked no register", %{conn: conn} do$/;"	t
coherence_path	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_path(module, route_name, conn, action) do$/;"	f
coherence_path	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_path(module, route_name, conn, action, opts) do$/;"	f
coherence_path	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_path(module, route_name, conn, action) do$/;"	f
coherence_path	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def coherence_path(module, route_name, conn, action, opts) do$/;"	f
coherence_path	deps/coherence/test/support/view_helpers.exs	/^  def coherence_path(module, route_name, conn, action) do$/;"	f
coherence_path	deps/coherence/test/support/view_helpers.exs	/^  def coherence_path(module, route_name, conn, action, opts) do$/;"	f
coherence_path	deps/coherence/test/view_helpers_test.exs	/^  test "coherence_path", %{conn: conn} do$/;"	t
coherence_routes	deps/coherence/web/router.ex	/^  defmacro coherence_routes(mode \\\\ [], opts \\\\ []) do$/;"	a
collect_args	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_args([], fields, from, _query, _take, acc) do$/;"	f
collect_args	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_args([elem | elems], fields, from, query, take, acc) do$/;"	f
collect_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_assocs(exprs, fields, _query, _tag, _take, []) do$/;"	f
collect_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_assocs(exprs, fields, query, tag, take, [{assoc, {ix, children}}|tail]) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(%Ecto.Query.Tagged{tag: tag} = expr, fields, from, _query, _take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(args, fields, from, query, take) when is_list(args) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(expr, fields, from, _query, _take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields(expr, fields, from, _query, _take)$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:%, _, [name, {:%{}, _, [{:|, _, [data, args]}]}]}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:%, _, [name, {:%{}, _, args}]}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:%{}, _, [{:|, _, [data, args]}]}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:%{}, _, args}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:&, _, [0]}, fields, :error, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:&, _, [0]}, fields, from, _query, _take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:&, _, [ix]}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:merge, _, args}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({:{}, _, args}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({agg, _, [{{:., _, [{:&, _, [ix]}, field]}, _, []} | _]} = expr,$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({left, right}, fields, from, query, take) do$/;"	f
collect_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_fields({{:., _, [{:&, _, [ix]}, field]}, _, []} = expr,$/;"	f
collect_kv	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_kv([], fields, from, _query, _take, acc) do$/;"	f
collect_kv	deps/ecto/lib/ecto/query/planner.ex	/^  defp collect_kv([{key, value} | elems], fields, from, query, take, acc) do$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on([{:on, expr}|t], acc),$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on([{:on, expr}|t], nil),$/;"	f
collect_on	deps/ecto/lib/ecto/query.ex	/^  defp collect_on(other, acc),$/;"	f
collect_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp collect_sources(query) do$/;"	f
color_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def color_input(form, field, opts \\\\ []) do$/;"	f
colorize	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp colorize(message, color), do: IO.ANSI.format([color, message, IO.ANSI.reset])$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:add, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:modify, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(_table, {:remove, name}), do: ["DROP ", quote_name(name)]$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_change(table, {:modify, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:add, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:modify, name, type, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(_table, {:remove, name}), do: ["DROP COLUMN ", quote_name(name)]$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_change	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_change(table, {:modify, name, %Reference{} = ref, opts}) do$/;"	f
column_changes	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_changes(table, columns) do$/;"	f
column_changes	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_changes(table, columns) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definition(_table, {:add, name, type, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definition(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definition(_table, {:add, name, type, opts}) do$/;"	f
column_definition	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definition(table, {:add, name, %Reference{} = ref, opts}) do$/;"	f
column_definitions	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_definitions(table, columns) do$/;"	f
column_definitions	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_definitions(table, columns) do$/;"	f
column_oids	deps/postgrex/lib/postgrex/protocol.ex	/^  defp column_oids(fields) do$/;"	f
column_options	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_options(opts) do$/;"	f
column_options	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_options(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp column_type(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_type(type, opts) do$/;"	f
column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp column_type({:array, type}, opts),$/;"	f
columns	deps/postgrex/lib/postgrex/protocol.ex	/^  defp columns(fields) do$/;"	f
combine_clocks	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  defp combine_clocks(clockset) do$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command(ddl) when is_binary(ddl) or is_list(ddl),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:alter, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Constraint{check: check, exclude: exclude}}) when is_binary(check) and is_binary(exclude),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Constraint{check: check} = constraint}) when is_binary(check),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Constraint{check: nil, exclude: nil}}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Constraint{exclude: exclude} = constraint}) when is_binary(exclude),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create_if_not_exists, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:create_if_not_exists, %Table{} = table, _}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop, %Constraint{} = constraint}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop, %Table{} = table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop_if_exists, %Index{} = index}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:drop_if_exists, %Table{} = table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:rename, %Table{} = current_table, %Table{} = new_table}),$/;"	f
command	deps/ecto/lib/ecto/migration/runner.ex	/^  defp command({:rename, %Table{} = table, current_column, new_column}),$/;"	f
comment_changeset	deps/ecto/integration_test/cases/repo.exs	/^      def comment_changeset(comment, params) do$/;"	f
comments_for_columns	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp comments_for_columns(table_name, columns) do$/;"	f
comments_on	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp comments_on(_object, _name, nil), do: []$/;"	f
comments_on	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp comments_on(_object, _name, nil, _table_name), do:  []$/;"	f
comments_on	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp comments_on(object, name, comment) do$/;"	f
comments_on	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp comments_on(object, name, comment, table_name) do$/;"	f
commit	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate commit(conn), to: Transaction$/;"	d
commit	deps/bolt_sips/lib/bolt_sips/transaction.ex	/^  def commit(conn) do$/;"	f
commit	deps/db_connection/lib/db_connection.ex	/^  defp commit(conn, log, opts, result) do$/;"	f
compact	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def compact(%State{context: ctx, cloud: cloud} = state) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(%Decimal{coef: :inf, sign: sign}, _num2) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(%Decimal{coef: :inf} = num1, %Decimal{coef: :inf} = num2) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(%Decimal{coef: :qNaN} = num1, _num2) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(_num1, %Decimal{coef: :inf, sign: sign}) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(_num1, %Decimal{coef: :qNaN} = num2) do$/;"	f
compare	deps/decimal/lib/decimal.ex	/^  def compare(num1, num2) do$/;"	f
compare	deps/ecto/lib/ecto/date_time.ex	/^  def compare(%{__struct__: module} = t1, %{__struct__: module} = t2) do$/;"	f
compare	deps/ecto/lib/ecto/date_time.ex	/^  defdelegate compare(t1, t2), to: Ecto.DateTime.Utils$/;"	d
compare	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def compare(%AmbiguousDateTime{:after => a}, %AmbiguousDateTime{:after => b}, granularity) do$/;"	f
compare	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def compare(_, :distant_future, _granularity), do: -1$/;"	f
compare	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def compare(_, :distant_past, _granularity), do: 1$/;"	f
compare	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def compare(a, _b, _granularity) do$/;"	f
compare	deps/timex/lib/comparable/comparable.ex	/^  def compare(a, b, granularity \\\\ :microseconds)$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(_, :distant_future, _granularity), do: -1$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(_, :distant_past, _granularity),   do: +1$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(a, :epoch, granularity),           do: compare(a, Timex.epoch(), granularity)$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(a, :zero, granularity),            do: compare(a, Timex.zero(), granularity)$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(a, a, _granularity),               do: 0$/;"	f
compare	deps/timex/lib/comparable/date.ex	/^  def compare(a, b, granularity),$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(_, :distant_future, _granularity), do: -1$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(_, :distant_past, _granularity),   do: +1$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(a, :epoch, granularity),           do: compare(a, Timex.epoch(), granularity)$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(a, :zero, granularity),            do: compare(a, Timex.zero(), granularity)$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(a, a, _granularity),               do: 0$/;"	f
compare	deps/timex/lib/comparable/datetime.ex	/^  def compare(a, b, granularity),$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(_, :distant_future, _granularity), do: -1$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(_, :distant_past, _granularity),   do: +1$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(a, :epoch, granularity),           do: compare(a, Timex.epoch(), granularity)$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(a, :zero, granularity),            do: compare(a, Timex.zero(), granularity)$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(a, a, _granularity),               do: 0$/;"	f
compare	deps/timex/lib/comparable/naivedatetime.ex	/^  def compare(a, b, granularity),$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(_, :distant_future, _granularity), do: -1$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(_, :distant_past, _granularity),   do: +1$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(a, :epoch, granularity),           do: compare(a, Timex.epoch(), granularity)$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(a, :zero, granularity),            do: compare(a, Timex.zero(), granularity)$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(a, a, _granularity),               do: 0$/;"	f
compare	deps/timex/lib/comparable/tuple.ex	/^  def compare(a, b, granularity),$/;"	f
compare	deps/timex/lib/timex.ex	/^  def compare(%Time{} = a, %Time{} = b) do$/;"	f
compare	deps/timex/lib/timex.ex	/^  def compare(%Time{} = a, %Time{} = b, granularity), do: Timex.Comparable.Utils.to_compare_result(diff(a, b, granularity))$/;"	f
compare	deps/timex/lib/timex.ex	/^  defdelegate compare(a, b), to: Timex.Comparable$/;"	d
compare	deps/timex/lib/timex.ex	/^  defdelegate compare(a, b, granularity), to: Timex.Comparable$/;"	d
compare?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare?(request_val, allowed_val) do$/;"	f
compare_host?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare_host?(_request_host, nil),$/;"	f
compare_host?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare_host?(request_host, "*." <> allowed_host),$/;"	f
compare_host?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp compare_host?(request_host, allowed_host),$/;"	f
compile	deps/phoenix/lib/phoenix/digester.ex	/^  def compile(input_path, output_path) do$/;"	f
compile	deps/phoenix/lib/phoenix/template.ex	/^  defp compile(path, root) do$/;"	f
compile	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^  def compile(path, name) do$/;"	f
compile	deps/phoenix/lib/phoenix/template/engine.ex	/^      def compile(template_path, template_name)$/;"	f
compile	deps/phoenix/lib/phoenix/template/exs_engine.ex	/^  def compile(path, _name) do$/;"	f
compile	deps/plug/lib/plug/builder.ex	/^  def compile(env, pipeline, builder_opts) do$/;"	f
compile	deps/plug/lib/plug/router.ex	/^  defp compile(method, expr, options, contents) do$/;"	f
compile_config	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def compile_config(repo, opts) do$/;"	f
compile_error!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp compile_error!(expr) do$/;"	f
compile_guards	deps/plug/lib/plug/builder.ex	/^  defp compile_guards(call, guards) do$/;"	f
compile_guards	deps/plug/lib/plug/builder.ex	/^  defp compile_guards(call, true) do$/;"	f
compile_interpolatable_string	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_interpolatable_string(str) do$/;"	f
compile_interpolation	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_interpolation(str) do$/;"	f
compile_interpolation	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_interpolation(str, [] = _keys) do$/;"	f
compile_interpolation	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_interpolation(str, keys) do$/;"	f
compile_interpolation_match	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_interpolation_match(keys) do$/;"	f
compile_po_file	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_po_file(path) do$/;"	f
compile_po_files	deps/gettext/lib/gettext/compiler.ex	/^  def compile_po_files(dir) do$/;"	f
compile_start_callbacks	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  def compile_start_callbacks(event, instrumenters) do$/;"	f
compile_stop_callbacks	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  def compile_stop_callbacks(event, instrumenters) do$/;"	f
compile_translation	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_translation(locale, domain, %PluralTranslation{} = t) do$/;"	f
compile_translation	deps/gettext/lib/gettext/compiler.ex	/^  defp compile_translation(locale, domain, %Translation{} = t) do$/;"	f
compiled_engines	deps/phoenix/lib/phoenix/template.ex	/^  defp compiled_engines do$/;"	f
compiled_file?	deps/phoenix/lib/phoenix/digester.ex	/^  defp compiled_file?(file_path) do$/;"	f
compiled_format_encoders	deps/phoenix/lib/phoenix/template.ex	/^  defp compiled_format_encoders do$/;"	f
compilers	deps/phoenix_swoosh/mix.exs	/^  defp compilers(:test), do: [:phoenix] ++ Mix.compilers$/;"	f
compilers	deps/phoenix_swoosh/mix.exs	/^  defp compilers(_), do: Mix.compilers$/;"	f
complete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp complete(s, status, %Query{} = query, rows, tag, buffer) do$/;"	f
compose_namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp compose_namebased_uuid(version, hash) do$/;"	f
composite?	deps/ecto/lib/ecto/type.ex	/^  def composite?(atom), do: atom in @composite$/;"	f
compress_file?	deps/phoenix/lib/phoenix/digester.ex	/^  defp compress_file?(file) do$/;"	f
concat	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([], acc), do: Enum.reverse(acc)$/;"	f
concat	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([h|t], []), do: concat(t, [h])$/;"	f
concat	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([h|t], acc), do: concat(t, [h, @seperator | acc])$/;"	f
concat	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([], acc), do: Enum.reverse(acc)$/;"	f
concat	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([h|t], []), do: concat(t, [h])$/;"	f
concat	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  defp concat([h|t], acc), do: concat(t, [h, @seperator | acc])$/;"	f
concat	deps/coherence/test/support/view_helpers.exs	/^  defp concat([], acc), do: Enum.reverse(acc)$/;"	f
concat	deps/coherence/test/support/view_helpers.exs	/^  defp concat([h|t], []), do: concat(t, [h])$/;"	f
concat	deps/coherence/test/support/view_helpers.exs	/^  defp concat([h|t], acc), do: concat(t, [h, @seperator | acc])$/;"	f
concat	deps/coherence/test/support/views.exs	/^  defp concat([], acc), do: Enum.reverse(acc)$/;"	f
concat	deps/coherence/test/support/views.exs	/^  defp concat([h|t], []), do: concat(t, [h])$/;"	f
concat	deps/coherence/test/support/views.exs	/^  defp concat([h|t], acc), do: concat(t, [h, @seperator | acc])$/;"	f
concat_if	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp concat_if(content, nil, _fun),  do: content$/;"	f
concat_if	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp concat_if(content, value, fun), do: content <> " " <> fun.(value)$/;"	f
concat_if	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp concat_if(content, nil, _fun),  do: content$/;"	f
concat_if	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp concat_if(content, value, fun), do: content <> " " <> fun.(value)$/;"	f
concat_if	deps/plug/lib/plug/conn/cookies.ex	/^  defp concat_if(acc, value, fun_or_string) do$/;"	f
conclude_meter	deps/db_connection/lib/db_connection.ex	/^  defp conclude_meter(conn, conn_state, log, callback, opts, result) do$/;"	f
conclude_meter	deps/db_connection/lib/db_connection.ex	/^  defp conclude_meter(conn, conn_state, nil, callback, opts, result) do$/;"	f
config	deps/bolt_sips/lib/bolt_sips.ex	/^  def config(), do: ConCache.get(:bolt_sips_cache, :config)$/;"	f
config	deps/bolt_sips/lib/bolt_sips.ex	/^  def config(key), do: Keyword.get(config(), key)$/;"	f
config	deps/bolt_sips/lib/bolt_sips.ex	/^  def config(key, default) do$/;"	f
config	deps/ecto/lib/ecto/repo.ex	/^      def config do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint.ex	/^      def config(key, default \\\\ nil) do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp config(opts) do$/;"	f
config	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def config(otp_app, endpoint) do$/;"	f
config_change	deps/phoenix/lib/phoenix/config.ex	/^  def config_change(module, changed, removed) do$/;"	f
config_change	deps/phoenix/lib/phoenix/endpoint.ex	/^      def config_change(changed, removed) do$/;"	f
config_change	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def config_change(endpoint, changed, removed) do$/;"	f
config_children	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp config_children(mod, conf, otp_app) do$/;"	f
config_option	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp config_option(opt, acc) when is_atom(opt) do$/;"	f
config_option	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp config_option(opt, acc) when is_tuple(opt) do$/;"	f
config_option	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp config_option(opt, acc) when is_atom(opt) do$/;"	f
config_option	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp config_option(opt, acc) when is_tuple(opt) do$/;"	f
configure	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def configure(verbosity) when is_atom(verbosity) do$/;"	f
configure	deps/postgrex/lib/postgrex/type_module.ex	/^  defp configure(extension) do$/;"	f
configure	deps/postgrex/lib/postgrex/type_module.ex	/^  defp configure(extensions, opts) do$/;"	f
configure	deps/postgrex/lib/postgrex/type_module.ex	/^  defp configure({extension, opts}) do$/;"	f
configure_session	deps/plug/lib/plug/conn.ex	/^  def configure_session(%Conn{state: state}, _opts) when not state in @unsent,$/;"	f
configure_session	deps/plug/lib/plug/conn.ex	/^  def configure_session(conn, opts) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm(%{confirm: true} = config, path, fun) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm(%{dry_run: true} = config, path, _fun) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm(config, _path, fun) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm(%{confirm: true} = config, path, fun) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm(%{dry_run: true} = config, path, _fun) do$/;"	f
confirm	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm(config, _path, fun) do$/;"	f
confirm	deps/coherence/test/schema_test.exs	/^  test "confirm" do$/;"	t
confirm	deps/coherence/web/services/confirmable_service.ex	/^        def confirm(user) do$/;"	f
confirm	deps/coherence/web/services/confirmable_service.ex	/^  def confirm(user) do$/;"	f
confirm	deps/distillery/lib/distillery/lib/io.ex	/^  def confirm(message) do$/;"	f
confirm	deps/distillery/lib/distillery/lib/io.ex	/^  def confirm(message, prompt, answer_pattern) do$/;"	f
confirm!	deps/coherence/test/controllers/controller_helpers_test.exs	/^  test "confirm!" do$/;"	t
confirm!	deps/coherence/web/controllers/controller_helpers.ex	/^  def confirm!(user) do$/;"	f
confirm!	deps/coherence/web/services/confirmable_service.ex	/^        def confirm!(user) do$/;"	f
confirm!	deps/coherence/web/services/confirmable_service.ex	/^  def confirm!(user) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm_config(%{confirm: true} = config, message, fun) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm_config(%{dry_run: true} = config, message, _fun) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm_config(config, message, fun) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm_config(%{confirm: true} = config, message, fun) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm_config(%{dry_run: true} = config, message, _fun) do$/;"	f
confirm_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm_config(config, message, fun) do$/;"	f
confirm_implode?	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp confirm_implode? do$/;"	f
confirm_once	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm_once(%{confirm_once: true} = config, fun) do$/;"	f
confirm_once	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp confirm_once(config, fun) do$/;"	f
confirm_once	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm_once(%{confirm_once: true} = config, fun) do$/;"	f
confirm_once	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp confirm_once(config, fun) do$/;"	f
confirmable?	deps/coherence/web/services/confirmable_service.ex	/^      def confirmable? do$/;"	f
confirmation	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  def confirmation(user, url) do$/;"	f
confirmation	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  def confirmation(user, url) do$/;"	f
confirmation	deps/coherence/test/support/email.exs	/^  def confirmation(user, url) do$/;"	f
confirmation_create	deps/coherence/lib/coherence/redirects.ex	/^      def confirmation_create(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
confirmation_edit	deps/coherence/lib/coherence/redirects.ex	/^      def confirmation_edit(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
confirmation_edit_error	deps/coherence/lib/coherence/redirects.ex	/^      def confirmation_edit_error(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
confirmation_edit_expired	deps/coherence/lib/coherence/redirects.ex	/^      def confirmation_edit_expired(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
confirmation_edit_invalid	deps/coherence/lib/coherence/redirects.ex	/^      def confirmation_edit_invalid(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
confirmation_email_sent	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def confirmation_email_sent, do: dgettext(@domain, "Confirmation email sent.")$/;"	f
confirmation_email_sent	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def confirmation_email_sent, do: dgettext(@domain, "Confirmation email sent.")$/;"	f
confirmation_email_sent	deps/coherence/test/support/messages.exs	/^  def confirmation_email_sent, do: dgettext(@domain, "Confirmation email sent.")$/;"	f
confirmation_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(_conn, _user_schema, false), do: []$/;"	f
confirmation_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(conn, text \\\\ @confirm_link) do$/;"	f
confirmation_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(conn, user_schema, text) do$/;"	f
confirmation_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(_conn, _user_schema, false), do: []$/;"	f
confirmation_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(conn, text \\\\ @confirm_link) do$/;"	f
confirmation_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def confirmation_link(conn, user_schema, text) do$/;"	f
confirmation_link	deps/coherence/test/support/view_helpers.exs	/^  def confirmation_link(_conn, _user_schema, false), do: []$/;"	f
confirmation_link	deps/coherence/test/support/view_helpers.exs	/^  def confirmation_link(conn, text \\\\ @confirm_link) do$/;"	f
confirmation_link	deps/coherence/test/support/view_helpers.exs	/^  def confirmation_link(conn, user_schema, text) do$/;"	f
confirmation_missing	deps/ecto/lib/ecto/changeset.ex	/^  defp confirmation_missing(opts, error_field) do$/;"	f
confirmation_token_expired	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def confirmation_token_expired, do: dgettext(@domain, "Confirmation token expired.")$/;"	f
confirmation_token_expired	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def confirmation_token_expired, do: dgettext(@domain, "Confirmation token expired.")$/;"	f
confirmation_token_expired	deps/coherence/test/support/messages.exs	/^  def confirmation_token_expired, do: dgettext(@domain, "Confirmation token expired.")$/;"	f
confirmed?	deps/coherence/test/schema_test.exs	/^  test "confirmed?" do$/;"	t
confirmed?	deps/coherence/web/services/confirmable_service.ex	/^        def confirmed?(user) do$/;"	f
confirmed?	deps/coherence/web/services/confirmable_service.ex	/^  def confirmed?(user) do$/;"	f
conflict_target	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp conflict_target([]),$/;"	f
conflict_target	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp conflict_target(targets),$/;"	f
conflict_target	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp conflict_target({:constraint, constraint}),$/;"	f
conflict_target	deps/ecto/lib/ecto/repo/schema.ex	/^  defp conflict_target(conflict_target, dumper) do$/;"	f
conflict_target	deps/ecto/lib/ecto/repo/schema.ex	/^  defp conflict_target({:constraint, constraint}, _dumper) when is_atom(constraint) do$/;"	f
conn	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate conn(), to: Connection$/;"	d
conn	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def conn() do$/;"	f
conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def conn() do$/;"	f
conn	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def conn(method, path, params_or_body \\\\ nil) do$/;"	f
conn	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def conn(req, transport) do$/;"	f
conn	deps/plug/lib/plug/adapters/test/conn.ex	/^  def conn(conn, method, uri, body_or_params) do$/;"	f
conn	deps/plug/lib/plug/test.ex	/^  def conn(method, path, params_or_body \\\\ nil) do$/;"	f
conn_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp conn_error(:ssl, action, reason) do$/;"	f
conn_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp conn_error(:tcp, action, reason) do$/;"	f
conn_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp conn_error(message) do$/;"	f
conn_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp conn_error(mod, action, reason) when reason in @nonposix_errors do$/;"	f
conn_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp conn_info(_min_level, conn) do$/;"	f
conn_queue	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp conn_queue(opts) do$/;"	f
conn_sup	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  defp conn_sup(mod, opts) do$/;"	f
conn_valve	deps/db_connection/lib/db_connection/sojourn/regulator.ex	/^  defp conn_valve(opts) do$/;"	f
connect	apps/flexcility_web/lib/flexcility_web/channels/user_socket.ex	/^  def connect(_params, socket) do$/;"	f
connect	deps/connection/lib/connection.ex	/^        def connect(_, %{sock: nil, host: host, port: port, opts: opts,$/;"	f
connect	deps/connection/lib/connection.ex	/^      def connect(info, state) do$/;"	f
connect	deps/connection/lib/connection.ex	/^  defp connect(info, mod_state, %{mod: mod} = s) do$/;"	f
connect	deps/db_connection/lib/db_connection.ex	/^      def connect(_) do$/;"	f
connect	deps/db_connection/lib/db_connection/connection.ex	/^  def connect(_, %{regulator: regulator, lock: nil} = s)$/;"	f
connect	deps/db_connection/lib/db_connection/connection.ex	/^  def connect(_, s) do$/;"	f
connect	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^  def connect(:init, {sup, broker, opts}) do$/;"	f
connect	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def connect(_opts) do$/;"	f
connect	deps/phoenix/lib/phoenix/socket.ex	/^        def connect(params, socket) do$/;"	f
connect	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def connect(endpoint, handler, transport_name, transport, serializer, params) do$/;"	f
connect	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro connect(handler, params) do$/;"	a
connect	deps/phoenix/lib/phoenix/token.ex	/^        def connect(%{"token" => token}, socket) do$/;"	f
connect	deps/postgrex/lib/postgrex/notifications.ex	/^  def connect(_, opts) do$/;"	f
connect	deps/postgrex/lib/postgrex/protocol.ex	/^  def connect(opts) do$/;"	f
connect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp connect(host, port, sock_opts, timeout, s) do$/;"	f
connect_vsn	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp connect_vsn(endpoint, handler, transport_name, transport, serializer, params) do$/;"	f
connection_type	deps/plug/lib/plug/logger.ex	/^  defp connection_type(%{state: :chunked}), do: "Chunked"$/;"	f
connection_type	deps/plug/lib/plug/logger.ex	/^  defp connection_type(_), do: "Sent"$/;"	f
consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp consecutive_matching(list, fun) do$/;"	f
consolidate_protocols?	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp consolidate_protocols? do$/;"	f
constraint	deps/ecto/lib/ecto/migration.ex	/^  def constraint(table, name, opts \\\\ [])$/;"	f
constraint	deps/ecto/lib/ecto/migration.ex	/^  def constraint(table, name, opts) when is_atom(table) do$/;"	f
constraint	deps/ecto/lib/ecto/migration.ex	/^  def constraint(table, name, opts) when is_binary(table) and is_list(opts) do$/;"	f
constraint_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp constraint_expr(%Reference{} = ref, table, name),$/;"	f
constraint_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp constraint_expr(%Reference{} = ref, table, name),$/;"	f
constraints_to_errors	deps/ecto/lib/ecto/repo/schema.ex	/^  defp constraints_to_errors(%{constraints: user_constraints, errors: errors} = changeset, action, constraints) do$/;"	f
construct	deps/timex/lib/datetime/helpers.ex	/^  def construct({_, _, _} = date, timezone) do$/;"	f
construct	deps/timex/lib/datetime/helpers.ex	/^  def construct({{_,_,_} = date, {h,mm,s}}, timezone) do$/;"	f
construct	deps/timex/lib/datetime/helpers.ex	/^  def construct({{y,m,d} = date, {h,mm,s,us}}, timezone) do$/;"	f
construct_microseconds	deps/timex/lib/datetime/helpers.ex	/^  def construct_microseconds(0), do: {0,0}$/;"	f
construct_microseconds	deps/timex/lib/datetime/helpers.ex	/^  def construct_microseconds(n), do: {n, precision(n)}$/;"	f
construct_microseconds	deps/timex/lib/datetime/helpers.ex	/^  def construct_microseconds({us, p} = us_tuple) when is_integer(us) and is_integer(p), do: us_tuple$/;"	f
contains_variable?	deps/ecto/lib/ecto/query/builder/limit_offset.ex	/^  defp contains_variable?(ast) do$/;"	f
content_length_from_headers	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp content_length_from_headers(headers) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, [do: block]) when is_atom(name) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, attrs, [do: block]) when is_atom(name) and is_list(attrs) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, content) when is_atom(name) do$/;"	f
content_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def content_tag(name, content, attrs) when is_atom(name) and is_list(attrs) do$/;"	f
content_type	deps/plug/lib/plug/conn/utils.ex	/^  def content_type(binary) do$/;"	f
content_type	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp content_type(%Email{attachments: []}), do: "application\/x-www-form-urlencoded"$/;"	f
content_type	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp content_type(%Email{attachments: nil}), do: "application\/x-www-form-urlencoded"$/;"	f
content_type	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp content_type(%Email{}), do: "multipart\/form-data"$/;"	f
context	deps/decimal/lib/decimal.ex	/^  defp context(num, signals \\\\ []) do$/;"	f
continue	deps/db_connection/lib/db_connection/connection.ex	/^  defp continue(idle, s) do$/;"	f
continue_ask	deps/db_connection/lib/db_connection/connection.ex	/^  defp continue_ask(s) do$/;"	f
continue_ping	deps/db_connection/lib/db_connection/connection.ex	/^  defp continue_ping(%{mod: mod, state: state} = s) do$/;"	f
controller	apps/flexcility_web/lib/flexcility_web.ex	/^  def controller do$/;"	f
controller	deps/coherence/priv/templates/coh.install/coherence_web.ex	/^  def controller do$/;"	f
controller	deps/coherence/priv/templates/coherence.install/coherence_web.ex	/^  def controller do$/;"	f
controller	deps/coherence/web/web.ex	/^  def controller do$/;"	f
controller_files	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def controller_files, do: @controller_files$/;"	f
controller_files	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def controller_files, do: @controller_files$/;"	f
controller_files	deps/coherence/lib/mix/tasks/coherence.make_templates.ex	/^  def controller_files, do: Enum.map(@controller_files, &(elem(&1, 1)))$/;"	f
controller_module	deps/phoenix/lib/phoenix/controller.ex	/^  def controller_module(conn), do: conn.private.phoenix_controller$/;"	f
convert	deps/timex/lib/datetime/map.ex	/^  defmacro convert(map, function, args \\\\ []) when is_list(args) do$/;"	a
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(%DateTime{} = date, %AmbiguousTimezoneInfo{} = tz) do$/;"	f
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(%DateTime{} = date, %TimezoneInfo{full_name: name} = tz) do$/;"	f
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(%DateTime{} = date, tz) do$/;"	f
convert	deps/timex/lib/timezone/timezone.ex	/^  def convert(date, tz) do$/;"	f
convert!	deps/timex/lib/datetime/map.ex	/^  defmacro convert!(map, function, args \\\\ []) when is_list(args) do$/;"	a
convert_keys	deps/timex/lib/convert/convert.ex	/^  def convert_keys(map) when is_map(map) do$/;"	f
convert_map	deps/timex/lib/convert/convert.ex	/^  def convert_map(%{__struct__: _} = struct) do$/;"	f
convert_map	deps/timex/lib/convert/convert.ex	/^  def convert_map(map) when is_map(map) do$/;"	f
convert_params	deps/ecto/lib/ecto/changeset.ex	/^  defp convert_params(params) do$/;"	f
convert_parsers	deps/plug/lib/plug/parsers.ex	/^  defp convert_parsers(parsers) do$/;"	f
convert_source	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp convert_source(:header, param),$/;"	f
convert_source	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp convert_source(:params, param),$/;"	f
convert_source	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp convert_source(:params_session, param),$/;"	f
convert_source	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp convert_source(:session, param),$/;"	f
convert_source	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp convert_source(source = {module, fun, args}, _param) when$/;"	f
convert_store	deps/plug/lib/plug/session.ex	/^  defp convert_store(store) do$/;"	f
copy_app	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp copy_app(app, %Release{profile: %Profile{$/;"	f
copy_app	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp copy_app(app_dir, target_dir, false, include_src?) do$/;"	f
copy_app	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp copy_app(app_dir, target_dir, true, _include_src?) do$/;"	f
copy_applications	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp copy_applications(%Release{profile: %Profile{output_dir: output_dir}} = release) do$/;"	f
copy_both_disconnect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_both_disconnect(s, query, buffer) do$/;"	f
copy_fail	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_fail(s, %{mode: :savepoint} = status, err, buffer) do$/;"	f
copy_fail	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_fail(s, %{mode: :transaction} = status, err, buffer) do$/;"	f
copy_fail_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_fail_recv(s, status, err, buffer) do$/;"	f
copy_from	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def copy_from(apps, source_dir, target_dir, binding, mapping, config) when is_list(mapping) do$/;"	f
copy_from	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def copy_from(apps, source_dir, target_dir, binding, mapping, config) when is_list(mapping) do$/;"	f
copy_from	deps/phoenix/lib/mix/phoenix.ex	/^  def copy_from(apps, source_dir, target_dir, binding, mapping) when is_list(mapping) do$/;"	f
copy_headers	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp copy_headers(conn, headers, copy) do$/;"	f
copy_in_data	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_data(%{sock: {mod, sock}} = s, data) do$/;"	f
copy_in_data	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_data(s, status, %Copy{portal: portal} = copy, data, buffer) do$/;"	f
copy_in_done	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_done(s, status, %Copy{query: query}, buffer) do$/;"	f
copy_in_done_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_done_recv(s, status, query, buffer) do$/;"	f
copy_in_ready	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_ready(s, _status, %Copy{ref: ref}, buffer) do$/;"	f
copy_in_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_in_recv(s, status, query, buffer) do$/;"	f
copy_new_files	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  def copy_new_files(%Context{schema: schema} = context, paths, binding) do$/;"	f
copy_new_files	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  def copy_new_files(%Context{schema: schema} = context, paths, binding) do$/;"	f
copy_new_files	deps/phoenix/lib/mix/tasks/phx.gen.json.ex	/^  def copy_new_files(%Context{schema: schema} = context, paths, binding) do$/;"	f
copy_new_files	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def copy_new_files(%Schema{} = schema, paths, binding) do$/;"	f
copy_out	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out(s, status, %Query{} = query, buffer) do$/;"	f
copy_out_done	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_done(s, status, query, acc, buffer) do$/;"	f
copy_out_portal	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_portal(s, status, query, cursor, buffer) do$/;"	f
copy_out_portal_done	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_portal_done(s, status, query, acc, buffer) do$/;"	f
copy_out_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_recv(s, _, _, cursor, max_rows, acc, max_rows, buffer) do$/;"	f
copy_out_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_recv(s, status, query, acc, buffer) do$/;"	f
copy_out_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp copy_out_recv(s, status, query, cursor, max_rows, acc, nrows, buffer) do$/;"	f
copy_templates	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp copy_templates(binding, name, file_list, %{web_path: web_path} = config) do$/;"	f
copy_templates	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp copy_templates(binding, name, file_list, config) do$/;"	f
copy_templates	deps/coherence/lib/mix/tasks/coherence.make_templates.ex	/^  defp copy_templates(dest_path, which \\\\ :coh) do$/;"	f
correctly infers how to drop index	deps/ecto/integration_test/sql/migration.exs	/^  test "correctly infers how to drop index" do$/;"	t
could_not_find_that_email_address	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def could_not_find_that_email_address, do: dgettext(@domain, "Could not find that email address")$/;"	f
could_not_find_that_email_address	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def could_not_find_that_email_address, do: dgettext(@domain, "Could not find that email address")$/;"	f
could_not_find_that_email_address	deps/coherence/test/support/messages.exs	/^  def could_not_find_that_email_address, do: dgettext(@domain, "Could not find that email address")$/;"	f
count	deps/db_connection/lib/db_connection.ex	/^  def count(_), do: {:error, __MODULE__}$/;"	f
count	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  def count(_), do: {:error, __MODULE__}$/;"	f
count	deps/ecto/lib/ecto/query/api.ex	/^  def count(value), do: doc! [value]$/;"	f
count	deps/ecto/lib/ecto/query/api.ex	/^  def count(value, :distinct), do: doc! [value, :distinct]$/;"	f
count	deps/postgrex/lib/postgrex/stream.ex	/^  def count(_) do$/;"	f
count	deps/timex/lib/interval/interval.ex	/^    def count(_interval) do$/;"	f
count_binds	deps/ecto/lib/ecto/query/builder.ex	/^  def count_binds(%Query{joins: joins}) do$/;"	f
count_entries	deps/ecto/integration_test/cases/migrator.exs	/^  defp count_entries() do$/;"	f
counter	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      defp counter do$/;"	f
create	apps/flexcility_web/lib/flexcility_web/controllers/registration_controller.ex	/^  def create(conn, %{"user" => registration_params}) do$/;"	f
create	apps/flexcility_web/lib/flexcility_web/controllers/session_controller.ex	/^  def create(conn, %{"email" => _email, "password" => _password} = session_params) do$/;"	f
create	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^  def create(conn, %{"site" => site_params}) do$/;"	f
create	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^  def create(conn, %{"user" => user_params}) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/confirmation_controller.ex	/^  def create(conn, %{"confirmation" => password_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  def create(conn, %{"invitation" =>  invitation_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/password_controller.ex	/^  def create(conn, %{"password" => password_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def create(conn, %{"registration" => registration_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def create(conn, params) do$/;"	f
create	deps/coherence/priv/templates/coh.install/controllers/coherence/unlock_controller.ex	/^  def create(conn, %{"unlock" => unlock_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/confirmation_controller.ex	/^  def create(conn, %{"confirmation" => password_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  def create(conn, %{"invitation" =>  invitation_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/password_controller.ex	/^  def create(conn, %{"password" => password_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def create(conn, %{"registration" => registration_params} = params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def create(conn, params) do$/;"	f
create	deps/coherence/priv/templates/coherence.install/controllers/coherence/unlock_controller.ex	/^  def create(conn, %{"unlock" => unlock_params} = params) do$/;"	f
create	deps/coherence/web/controllers/confirmation_controller.ex	/^  def create(conn, %{"confirmation" => password_params} = params) do$/;"	f
create	deps/coherence/web/controllers/invitation_controller.ex	/^  def create(conn, %{"invitation" =>  invitation_params} = params) do$/;"	f
create	deps/coherence/web/controllers/password_controller.ex	/^  def create(conn, %{"password" => password_params} = params) do$/;"	f
create	deps/coherence/web/controllers/registration_controller.ex	/^  def create(conn, %{"registration" => registration_params} = params) do$/;"	f
create	deps/coherence/web/controllers/session_controller.ex	/^  def create(conn, params) do$/;"	f
create	deps/coherence/web/controllers/unlock_controller.ex	/^  def create(conn, %{"unlock" => unlock_params} = params) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  def create(%Constraint{} = constraint) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  def create(%Index{} = index) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  def create(%Table{} = table) do$/;"	f
create	deps/ecto/lib/ecto/migration.ex	/^  defmacro create(object, do: block) do$/;"	a
create	deps/phoenix/lib/phoenix/channel.ex	/^      def create(conn, params) do$/;"	f
create	deps/phoenix/lib/phoenix/token.ex	/^      def create(conn, params) do$/;"	f
create	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def create(conn, %{<%= inspect singular %> => <%= singular %>_params}) do$/;"	f
create	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def create(conn, %{<%= inspect schema.singular %> => <%= schema.singular %>_params}) do$/;"	f
create	deps/phoenix/priv/templates/phx.gen.json/controller.ex	/^  def create(conn, %{<%= inspect schema.singular %> => <%= schema.singular %>_params}) do$/;"	f
create	deps/timex/lib/timezone/timezone_info.ex	/^  def create(name, abbr, offset_utc, offset_std, from, until) do$/;"	f
create and drop table and indexes	deps/ecto/integration_test/sql/migration.exs	/^  test "create and drop table and indexes" do$/;"	t
create index if not exists and drop index if exists does not raise on failure	deps/ecto/integration_test/sql/migration.exs	/^  test "create index if not exists and drop index if exists does not raise on failure" do$/;"	t
create post	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^        test "create post" do$/;"	t
create table if not exists and drop table if exists does not raise on failure	deps/ecto/integration_test/sql/migration.exs	/^  test "create table if not exists and drop table if exists does not raise on failure" do$/;"	t
create token	deps/coherence/test/services/lockable_service_test.exs	/^  test "create token", %{user: user} do$/;"	t
create token	deps/coherence/test/services/password_service_test.exs	/^  test "create token", %{user: user} do$/;"	t
create two posts	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      test "create two posts, one sync, another async" do$/;"	t
create_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "create_<%= schema.singular %>\/1 with invalid data returns error changeset" do$/;"	t
create_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "create_<%= schema.singular %>\/1 with valid data creates a <%= schema.singular %>" do$/;"	t
create_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def create_<%= schema.singular %>(attrs \\\\ %{}) do$/;"	f
create_RELEASES	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp create_RELEASES(output_dir, relfile) do$/;"	f
create_accs	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp create_accs(fields) do$/;"	f
create_changeset_to_string	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def create_changeset_to_string(changeset) do$/;"	f
create_comment	deps/ecto/lib/ecto/changeset.ex	/^      def create_comment(comment, params) do$/;"	f
create_current_release_ets_table	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp create_current_release_ets_table do$/;"	f
create_ets	deps/con_cache/lib/con_cache/owner.ex	/^  defp create_ets(input_options) do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  def create_if_not_exists(%Index{} = index) do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  def create_if_not_exists(%Table{} = table) do$/;"	f
create_if_not_exists	deps/ecto/lib/ecto/migration.ex	/^  defmacro create_if_not_exists(object, do: block) do$/;"	a
create_login	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  def create_login(email, password, user_data, _opts \\\\ []) do$/;"	f
create_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  def create_login(conn, user_data, opts  \\\\ []) do$/;"	f
create_login	deps/coherence/test/models/rememberable_test.exs	/^  test "create_login", %{user: user} do$/;"	t
create_login	deps/coherence/web/models/rememberable.ex	/^  def create_login(user) do$/;"	f
create_migration	deps/ecto/integration_test/cases/migrator.exs	/^  defp create_migration(num) do$/;"	f
create_migrations_table	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  defp create_migrations_table(adapter, repo, prefix) do$/;"	f
create_missing_locale_dir	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp create_missing_locale_dir(dir) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(%{prefix: prefix, sources: sources}) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(_prefix, _sources, pos, pos) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp create_names(prefix, sources, pos, limit) when pos < limit do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(%{prefix: prefix, sources: sources}) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(_prefix, _sources, pos, pos) do$/;"	f
create_names	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp create_names(prefix, sources, pos, limit) when pos < limit do$/;"	f
create_node	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def create_node(resource, changeset) do$/;"	f
create_nodes_with_rel	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def create_nodes_with_rel({node1, rel, node2}) do$/;"	f
create_or_alter_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp create_or_alter_model(config, name) do$/;"	f
create_or_alter_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp create_or_alter_model(config, name) do$/;"	f
create_organisation	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def create_organisation(org_attrs \\\\ %{}) do$/;"	f
create_po_struct	deps/gettext/lib/gettext/extractor.ex	/^  defp create_po_struct(backend, domain, translations) do$/;"	f
create_po_structs_from_extracted_translations	deps/gettext/lib/gettext/extractor.ex	/^  defp create_po_structs_from_extracted_translations(all_translations) do$/;"	f
create_records	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp create_records([], []), do: []$/;"	f
create_records	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp create_records(fields, records) do$/;"	f
create_refls	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp create_refls(idx, fields, sources) do$/;"	f
create_release_info	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp create_release_info(%Release{name: relname, profile: %Profile{output_dir: output_dir}} = release) do$/;"	f
create_session	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def create_session(%{"email" => email, "password" => password}) do$/;"	f
create_site	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def create_site(attrs \\\\ %{}) do$/;"	f
create_site	apps/flexcility_web/test/admin_test.exs	/^  test "create_site\/1 with invalid data returns error changeset" do$/;"	t
create_site	apps/flexcility_web/test/admin_test.exs	/^  test "create_site\/1 with valid data creates a site" do$/;"	t
create_start_clean	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp create_start_clean(rel_dir, output_dir, options) do$/;"	f
create_translation_struct	deps/gettext/lib/gettext/extractor.ex	/^  defp create_translation_struct(msgid, file, line),$/;"	f
create_translation_struct	deps/gettext/lib/gettext/extractor.ex	/^  defp create_translation_struct({msgid, msgid_plural}, file, line),$/;"	f
create_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def create_user(attrs \\\\ %{}) do$/;"	f
create_user	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  def create_user(conn, params) do$/;"	f
create_user	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  def create_user(conn, params) do$/;"	f
create_user	deps/coherence/web/controllers/invitation_controller.ex	/^  def create_user(conn, params) do$/;"	f
create_user_token	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def create_user_token(conn, _, nil_or_false, _) when nil_or_false in [nil, false], do: conn$/;"	f
create_user_token	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def create_user_token(conn, user, _, assign_key) do$/;"	f
created_at	deps/coherence/web/models/rememberable.ex	/^  defp created_at, do: Timex.now$/;"	f
creates	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "creates <%= schema.singular %> and redirects to show when data is valid", %{conn: conn} do$/;"	t
creates	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "creates <%= schema.singular %> and renders <%= schema.singular %> when data is valid", %{conn: conn} do$/;"	t
creates a user	deps/coherence/test/coherence_test.exs	/^  test "creates a user" do$/;"	t
creates and renders resource when data is valid	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "creates and renders resource when data is valid", %{conn: conn} do$/;"	t
creates resource and redirects when data is valid	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "creates resource and redirects when data is valid", %{conn: conn} do$/;"	t
creates site and renders site when data is valid	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "creates site and renders site when data is valid", %{conn: conn} do$/;"	t
cross_origin_js?	deps/plug/lib/plug/csrf_protection.ex	/^  defp cross_origin_js?(%Plug.Conn{method: "GET"} = conn),$/;"	f
cross_origin_js?	deps/plug/lib/plug/csrf_protection.ex	/^  defp cross_origin_js?(%Plug.Conn{}),$/;"	f
csrf_meta_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def csrf_meta_tag do$/;"	f
csrf_token_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp csrf_token_tag(opts, extra) do$/;"	f
current_date_utc	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp current_date_utc, do: :calendar.universal_time |> elem(0)$/;"	f
current_locale	deps/timex/lib/l10n/translator.ex	/^  def current_locale, do: Gettext.get_locale(Timex.Gettext)$/;"	f
current_path	deps/phoenix/lib/phoenix/controller.ex	/^  def current_path(%Plug.Conn{query_params: params} = conn) do$/;"	f
current_path	deps/phoenix/lib/phoenix/controller.ex	/^  def current_path(%Plug.Conn{} = conn, params) do$/;"	f
current_path	deps/phoenix/lib/phoenix/controller.ex	/^  def current_path(%Plug.Conn{} = conn, params) when params == %{} do$/;"	f
current_release_from_table	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp current_release_from_table do$/;"	f
current_secure_url	deps/phoenix/lib/phoenix/controller.ex	/^      def current_secure_url(conn, params \\\\ %{}) do$/;"	f
current_url	deps/phoenix/lib/phoenix/controller.ex	/^  def current_url(%Plug.Conn{} = conn) do$/;"	f
current_url	deps/phoenix/lib/phoenix/controller.ex	/^  def current_url(%Plug.Conn{} = conn, %{} = params) do$/;"	f
current_user	deps/coherence/lib/coherence.ex	/^  def current_user(conn), do: conn.assigns[Config.assigns_key]$/;"	f
current_user	deps/coherence/test/services/trackable_service_test.exs	/^  defp current_user(conn), do: conn.assigns[:current_user]$/;"	f
current_user	deps/coherence/test/support/view_helpers.exs	/^  def current_user(conn) do$/;"	f
current_version	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro current_version(app) do$/;"	a
currently_pending	deps/con_cache/lib/con_cache/owner.ex	/^  defp currently_pending(%__MODULE__{pending: pending, current_time: current_time}) do$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?0), do: 0$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?1), do: 1$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?2), do: 2$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?3), do: 3$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?4), do: 4$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?5), do: 5$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?6), do: 6$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?7), do: 7$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?8), do: 8$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?9), do: 9$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?A), do: 10$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?B), do: 11$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?C), do: 12$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?D), do: 13$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?E), do: 14$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?F), do: 15$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?a), do: 10$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?b), do: 11$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?c), do: 12$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?d), do: 13$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?e), do: 14$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(?f), do: 15$/;"	f
d	deps/ecto/lib/ecto/uuid.ex	/^  defp d(_),  do: throw(:error)$/;"	f
dasherize	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp dasherize(value) when is_atom(value),   do: dasherize(Atom.to_string(value))$/;"	f
dasherize	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp dasherize(value) when is_binary(value), do: String.replace(value, "_", "-")$/;"	f
data	deps/postgrex/lib/postgrex/protocol.ex	/^  defp data(%{timeout: timeout} = s, status, buffer) do$/;"	f
data_as_field	deps/ecto/lib/ecto/changeset.ex	/^  defp data_as_field(data, types, key, value) do$/;"	f
data_dir	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp data_dir, do: Tzdata.Util.data_dir$/;"	f
data_dir	deps/tzdata/lib/tzdata/util.ex	/^  def data_dir do$/;"	f
data_pk	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp data_pk(pks) do$/;"	f
date_add	deps/ecto/lib/ecto/query/api.ex	/^  def date_add(date, count, interval), do: doc! [date, count, interval]$/;"	f
date_add with day	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with day" do$/;"	t
date_add with dynamic	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with dynamic" do$/;"	t
date_add with hour	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with hour" do$/;"	t
date_add with month	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with month" do$/;"	t
date_add with negative interval	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with negative interval" do$/;"	t
date_add with week	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with week" do$/;"	t
date_add with year	deps/ecto/integration_test/cases/interval.exs	/^  test "date_add with year" do$/;"	t
date_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_builder(b, _opts) do$/;"	f
date_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def date_select(form, field, opts \\\\ []) do$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(%{"year" => year, "month" => month, "day" => day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(%{year: year, month: month, day: day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(nil),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value(other),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value({year, month, day}),$/;"	f
date_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp date_value({{year, month, day}, _}),$/;"	f
datetime_add	deps/ecto/lib/ecto/query/api.ex	/^  def datetime_add(datetime, count, interval), do: doc! [datetime, count, interval]$/;"	f
datetime_add with day	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with day" do$/;"	t
datetime_add with dynamic	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with dynamic" do$/;"	t
datetime_add with dynamic in filters	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with dynamic in filters" do$/;"	t
datetime_add with hour	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with hour" do$/;"	t
datetime_add with microsecond	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with microsecond" do$/;"	t
datetime_add with millisecond	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with millisecond" do$/;"	t
datetime_add with minute	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with minute" do$/;"	t
datetime_add with month	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with month" do$/;"	t
datetime_add with negative interval	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with negative interval" do$/;"	t
datetime_add with second	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with second" do$/;"	t
datetime_add with week	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with week" do$/;"	t
datetime_add with year	deps/ecto/integration_test/cases/interval.exs	/^  test "datetime_add with year" do$/;"	t
datetime_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp datetime_builder(form, field, date, time, parent) do$/;"	f
datetime_options	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp datetime_options(type, values, id, name, parent, datetime, opts) do$/;"	f
datetime_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def datetime_select(form, field, opts \\\\ []) do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc(until, _, _) when until == nil do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, _, _) when modifier == :utc do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, utc_off, _) when modifier == :standard do$/;"	f
datetime_to_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def datetime_to_utc({datetime, modifier}, utc_off, std_off) when modifier == :wall do$/;"	f
day	deps/timex/lib/date/date.ex	/^  def day(%Date{} = date),$/;"	f
day	deps/timex/lib/datetime/datetime.ex	/^  def day(%DateTime{} = date) do$/;"	f
day	deps/timex/lib/datetime/erlang.ex	/^  def day(_), do: {:error, :invalid_date}$/;"	f
day	deps/timex/lib/datetime/erlang.ex	/^  def day({y,m,d} = date) when is_date(y,m,d),$/;"	f
day	deps/timex/lib/datetime/erlang.ex	/^  def day({{y,m,d} = date,_}) when is_date(y,m,d),$/;"	f
day	deps/timex/lib/datetime/map.ex	/^  def day(map),                       do: convert!(map, :day)$/;"	f
day	deps/timex/lib/datetime/naivedatetime.ex	/^  def day(%NaiveDateTime{} = date) do$/;"	f
day	deps/timex/lib/protocol.ex	/^  def day(%{__struct__: _} = d), do: Timex.day(Map.from_struct(d))$/;"	f
day	deps/timex/lib/protocol.ex	/^  def day(_datetime), do: {:error, :invalid_date}$/;"	f
day	deps/timex/lib/protocol.ex	/^  def day(datetime)$/;"	f
day	deps/timex/lib/timex.ex	/^  defdelegate day(datetime), to: Timex.Protocol$/;"	d
day_count_for_month	deps/tzdata/lib/tzdata/util.ex	/^  def day_count_for_month(year, month), do: :calendar.last_day_of_the_month(year, month)$/;"	f
day_name	deps/timex/lib/timex.ex	/^  def day_name(_), do: {:error, :invalid_weekday_number}$/;"	f
day_name	deps/timex/lib/timex.ex	/^  def day_name(num) when num in 1..7 do$/;"	f
day_of_month	deps/timex/lib/parse/datetime/parsers.ex	/^  def day_of_month(opts \\\\ []) do$/;"	f
day_of_the_week	deps/tzdata/lib/tzdata/util.ex	/^  def day_of_the_week(year, month, day), do: :calendar.day_of_the_week(year, month, day)$/;"	f
day_of_week	deps/timex/lib/calendar/julian.ex	/^  def day_of_week(_, _, _, weekstart) when not weekstart in [:sun, :mon] do$/;"	f
day_of_week	deps/timex/lib/calendar/julian.ex	/^  def day_of_week(_,_,_, _) do$/;"	f
day_of_week	deps/timex/lib/calendar/julian.ex	/^  def day_of_week(year, month, day, weekstart) when is_date(year, month, day) and weekstart in [:sun, :mon] do$/;"	f
day_of_week	deps/timex/lib/calendar/julian.ex	/^  def day_of_week({year, month, day}, weekstart),$/;"	f
day_of_year	deps/timex/lib/parse/datetime/parsers.ex	/^  def day_of_year(opts \\\\ []) do$/;"	f
day_shortname	deps/timex/lib/timex.ex	/^  def day_shortname(_), do: {:error, :invalid_weekday_number}$/;"	f
day_shortname	deps/timex/lib/timex.ex	/^  def day_shortname(num) when num in 1..7 do$/;"	f
day_to_elixir	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def day_to_elixir(days) do$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(abbr_atom)),do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(abbr_cased)), do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(abbr_lower)), do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(atom)),     do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(day_name)),   do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^      def day_to_num(unquote(lower)),      do: unquote(day_num)$/;"	f
day_to_num	deps/timex/lib/timex.ex	/^  def day_to_num(_), do: {:error, :invalid_day_name}$/;"	f
day_to_postgrex	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def day_to_postgrex(days) do$/;"	f
days_in_month	deps/timex/lib/date/date.ex	/^  def days_in_month(%Date{:year => y, :month => m}), do: Timex.days_in_month(y, m)$/;"	f
days_in_month	deps/timex/lib/datetime/datetime.ex	/^  def days_in_month(%DateTime{:year => y, :month => m}), do: Timex.days_in_month(y, m)$/;"	f
days_in_month	deps/timex/lib/datetime/erlang.ex	/^  def days_in_month(_), do: {:error, :invalid_date}$/;"	f
days_in_month	deps/timex/lib/datetime/erlang.ex	/^  def days_in_month({y,m,d}) when is_date(y,m,d), do: Timex.days_in_month(y, m)$/;"	f
days_in_month	deps/timex/lib/datetime/erlang.ex	/^  def days_in_month({{y,m,d},_}) when is_date(y,m,d), do: Timex.days_in_month(y, m)$/;"	f
days_in_month	deps/timex/lib/datetime/map.ex	/^  def days_in_month(map),             do: convert!(map, :days_in_month)$/;"	f
days_in_month	deps/timex/lib/datetime/naivedatetime.ex	/^  def days_in_month(%NaiveDateTime{:year => y, :month => m}), do: Timex.days_in_month(y, m)$/;"	f
days_in_month	deps/timex/lib/protocol.ex	/^  def days_in_month(%{__struct__: _} = d), do: Timex.days_in_month(Map.from_struct(d))$/;"	f
days_in_month	deps/timex/lib/protocol.ex	/^  def days_in_month(_datetime), do: {:error, :invalid_date}$/;"	f
days_in_month	deps/timex/lib/protocol.ex	/^  def days_in_month(datetime)$/;"	f
days_in_month	deps/timex/lib/timex.ex	/^  defdelegate days_in_month(datetime), to: Timex.Protocol$/;"	d
days_in_month	deps/timex/lib/timex.ex	/^  defdelegate days_in_month(year, month), to: Timex.Helpers$/;"	d
days_in_month	deps/timex/lib/timex/helpers.ex	/^  def days_in_month(year, month) do$/;"	f
days_in_month	deps/timex/lib/timex/helpers.ex	/^  def days_in_month(year, month) when is_year(year) and is_month(month) do$/;"	f
days_since_last_remote_poll	deps/tzdata/lib/tzdata/data_loader.ex	/^  def days_since_last_remote_poll do$/;"	f
days_to_beginning_of_week	deps/timex/lib/timex.ex	/^  def days_to_beginning_of_week(_, _), do: {:error, :badarg}$/;"	f
days_to_beginning_of_week	deps/timex/lib/timex.ex	/^  def days_to_beginning_of_week(_, {:error, _} = err), do: err$/;"	f
days_to_beginning_of_week	deps/timex/lib/timex.ex	/^  def days_to_beginning_of_week(date, weekstart \\\\ 1)$/;"	f
days_to_beginning_of_week	deps/timex/lib/timex.ex	/^  def days_to_beginning_of_week(date, weekstart) when is_atom(weekstart) or is_binary(weekstart)  do$/;"	f
days_to_beginning_of_week	deps/timex/lib/timex.ex	/^  def days_to_beginning_of_week(date, weekstart) when is_day_of_week(weekstart, :mon) do$/;"	f
days_to_end_of_week	deps/timex/lib/timex.ex	/^  def days_to_end_of_week(date, weekstart \\\\ :mon) do$/;"	f
deallocate	deps/db_connection/lib/db_connection.ex	/^  defp deallocate(conn, query, cursor, opts) do$/;"	f
deallocate	deps/db_connection/lib/db_connection.ex	/^  defp deallocate(conn, {_, query, cursor}, opts) do$/;"	f
deallocate	deps/postgrex/lib/postgrex/protocol.ex	/^  defp deallocate(s, status, query, rows, tag, buffer) do$/;"	f
deallocate_copy_done	deps/postgrex/lib/postgrex/protocol.ex	/^  defp deallocate_copy_done(s, status, nrows, buffer) do$/;"	f
deallocate_copy_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp deallocate_copy_recv(s, status, nrows \\\\ 0, buffer) do$/;"	f
debug	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def debug(message), do: log(:debug, colorize("==> #{message}", @debug_color))$/;"	f
debug	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def debug(message, :plain), do: log(:debug, colorize(message, @debug_color))$/;"	f
dec_lock	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def dec_lock(%__MODULE__{lock_instances: lock_instances} = resource, lock_instance, pid) do$/;"	f
dec_monitor_ref	deps/con_cache/lib/con_cache/lock.ex	/^  defp dec_monitor_ref(%__MODULE__{monitors: monitors} = state, caller_pid, lock_instance) do$/;"	f
dec_owner_lock	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp dec_owner_lock(%__MODULE__{owner: pid, count: 1} = resource, pid) do$/;"	f
dec_owner_lock	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp dec_owner_lock(%__MODULE__{owner: pid, count: count} = resource, pid)$/;"	f
dec_owner_lock	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp dec_owner_lock(resource, _), do: resource$/;"	f
dec_ref	deps/con_cache/lib/con_cache/lock/monitors.ex	/^  def dec_ref(%__MODULE__{processes: processes} = monitors, pid, lock_instance) do$/;"	f
decimal type	deps/ecto/integration_test/cases/type.exs	/^  test "decimal type" do$/;"	t
decimal?	deps/decimal/lib/decimal.ex	/^  def decimal?(%Decimal{}), do: true$/;"	f
decimal?	deps/decimal/lib/decimal.ex	/^  def decimal?(_),          do: false$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(:eq, spec), do: spec in [:equal_to, :less_than_or_equal_to, :greater_than_or_equal_to]$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(:gt, spec), do: spec in [:greater_than, :greater_than_or_equal_to]$/;"	f
decimal_compare	deps/ecto/lib/ecto/changeset.ex	/^  defp decimal_compare(:lt, spec), do: spec in [:less_than, :less_than_or_equal_to]$/;"	f
decimal_to_float	deps/decimal/lib/decimal.ex	/^  defp decimal_to_float(sign, num, den, exp) do$/;"	f
declare	deps/db_connection/lib/db_connection.ex	/^  defp declare(conn, query, params, opts) do$/;"	f
declare_log	deps/db_connection/lib/db_connection.ex	/^  defp declare_log(conn, query, params, meter, cursor, opts) do$/;"	f
decode	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  def decode(words), do: decode_l(words, [])$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(""), do: []$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0x8 :: 4, str_length :: 4, rest :: bytes >>) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0x9 :: 4, list_size :: 4  >> <> bin), do: list(bin, list_size)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xA :: 4, entries :: 4 >>  <> bin), do: map(bin, entries)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xB :: 4, struct_size :: 4, sig :: 8 >> <> struct) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC0, rest :: binary >>), do: [nil| decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC1, number :: float, rest :: binary >>) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC2, rest :: binary >>), do: [false | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC3, rest :: binary >>), do: [true  | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC8, int, rest :: binary >>),       do: [int | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xC9, int :: 16, rest :: binary >>), do: [int | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xCA, int :: 32, rest :: binary >>), do: [int | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xCB, int :: 64, rest :: binary >>), do: [int | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD0, str_length, rest :: bytes >>) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD1, str_length :: 16, rest :: bytes >>) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD2, str_length :: 32, rest :: binary >>) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD4,     list_size :: 8  >> <> bin), do: list(bin, list_size)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD5,     list_size :: 16 >> <> bin), do: list(bin, list_size)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD6,     list_size :: 32 >> <> bin), do: list(bin, list_size)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD8,     entries :: 8 >>  <> bin), do: map(bin, entries)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xD9,     entries :: 16 >> <> bin), do: map(bin, entries)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xDA,     entries :: 32 >> <> bin), do: map(bin, entries)$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xDC, struct_size :: 8, sig :: 8 >> <> struct) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< 0xDD, struct_size :: 16, sig :: 8 >> <> struct) do$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<< int, rest :: binary >>),             do: [int | decode(rest)]$/;"	f
decode	deps/boltex/lib/boltex/pack_stream.ex	/^  def decode(<<0, 0>>), do: []$/;"	f
decode	deps/db_connection/lib/db_connection.ex	/^  defp decode(call, query, params, meter, result, opts) do$/;"	f
decode	deps/db_connection/lib/db_connection/query.ex	/^  def decode(query, result, opts)$/;"	f
decode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode(_) do$/;"	f
decode	deps/plug/lib/plug/conn/cookies.ex	/^  def decode(cookie) do$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode("", initial) do$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode(query, initial \\\\ %{})$/;"	f
decode	deps/plug/lib/plug/conn/query.ex	/^  def decode(query, initial) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:error, :timeout}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:error, _}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:more, _, conn}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:ok, "", conn}, _decoder) do$/;"	f
decode	deps/plug/lib/plug/parsers/json.ex	/^  defp decode({:ok, body, conn}, decoder) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode(:error, _serializer, false) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode(:error, _serializer, log) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode({:ok, binary}, :external_term_format, log) do$/;"	f
decode	deps/plug/lib/plug/session/cookie.ex	/^  defp decode({:ok, binary}, serializer, _log) do$/;"	f
decode	deps/poison/lib/poison.ex	/^  def decode(iodata, options \\\\ []) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, _options) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options) when is_map(value) or is_list(value) do$/;"	f
decode	deps/poison/lib/poison/decoder.ex	/^  def decode(value, options)$/;"	f
decode	deps/postgrex/lib/postgrex/extension.ex	/^        def decode(:copy) do$/;"	f
decode	deps/postgrex/lib/postgrex/extension.ex	/^        def decode(:reference) do$/;"	f
decode	deps/postgrex/lib/postgrex/extension.ex	/^      def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def decode(dims, elems) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/bit_string.ex	/^  def decode(:copy) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/bit_string.ex	/^  def decode(:reference) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/bool.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/box.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/cidr.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/circle.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def decode(:elixir) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def decode(:postgrex) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/float4.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/float8.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def decode(mode) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/inet.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/int2.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/int4.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/int8.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/interval.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def decode({library, :copy}) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def decode({library, :reference}) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def decode({library, :copy}) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def decode({library, :reference}) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/line.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/line_segment.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/macaddr.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/name.ex	/^  def decode(:copy) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/name.ex	/^  def decode(:reference) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/oid.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/path.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/point.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def decode(flags, _oid, [], null) when (flags &&& @range_empty) != 0 do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def decode(flags, _oid, elems, null) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/raw.ex	/^  def decode(:copy) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/raw.ex	/^  def decode(:reference) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/tid.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def decode(:elixir) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def decode(:postgrex) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def decode(:elixir) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def decode(:postgrex) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def decode(:elixir) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def decode(:postgrex) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def decode(:elixir) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def decode(:postgrex) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/uuid.ex	/^  def decode(:copy) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/uuid.ex	/^  def decode(:reference) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/void_binary.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^  def decode(_) do$/;"	f
decode	deps/postgrex/lib/postgrex/parameters.ex	/^  def decode(_, parameters, _), do: parameters$/;"	f
decode	deps/postgrex/lib/postgrex/query.ex	/^  def decode(%Postgrex.Query{result_types: nil}, res, opts) do$/;"	f
decode	deps/postgrex/lib/postgrex/query.ex	/^  def decode(_, %Postgrex.Result{rows: rows} = res, opts) do$/;"	f
decode	deps/postgrex/lib/postgrex/stream.ex	/^  def decode(%Copy{query: query}, result, opts) do$/;"	f
decode	deps/postgrex/lib/postgrex/stream.ex	/^  def decode(_, copy, _), do: copy$/;"	f
decode	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode(config, define_opts) do$/;"	f
decode!	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode!(microsecs) do$/;"	f
decode!	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def decode!(microsecs) when microsecs < 0 and rem(microsecs, 1_000_000) != 0 do$/;"	f
decode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def decode!(message, _opts), do: message$/;"	f
decode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def decode!(message, _opts) do$/;"	f
decode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def decode!(message, _opts) do$/;"	f
decode!	deps/poison/lib/poison.ex	/^  def decode!(iodata, options \\\\ []) do$/;"	f
decode_auth_type	deps/postgrex/lib/postgrex/messages.ex	/^    def decode_auth_type(unquote(value)), do: unquote(type)$/;"	f
decode_copy	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_copy(<<format::int8, len::uint16, rest::binary(len, 16)>>) do$/;"	f
decode_dims	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp decode_dims(<<>>, acc) do$/;"	f
decode_dims	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp decode_dims(<<len :: int32, _lbound :: int32, rest :: binary>>, acc) do$/;"	f
decode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_extension(extension, clause,$/;"	f
decode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_extension(extension, pattern, body,$/;"	f
decode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_extension(extension, pattern, guard, body,$/;"	f
decode_extension_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_extension_null(extension, dispatch, rest, acc, rem, full, rows) do$/;"	f
decode_field_type	deps/postgrex/lib/postgrex/messages.ex	/^    def decode_field_type(unquote(char)), do: unquote(field)$/;"	f
decode_field_type	deps/postgrex/lib/postgrex/messages.ex	/^  def decode_field_type(_), do: :unknown$/;"	f
decode_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_fields(<<0>>), do: []$/;"	f
decode_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_fields(<<field :: int8, rest :: binary>>) do$/;"	f
decode_format	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_format(0), do: :text$/;"	f
decode_format	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_format(1), do: :binary$/;"	f
decode_hstore	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def decode_hstore(<<_length::int32, pairs::binary>>, :copy) do$/;"	f
decode_hstore	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def decode_hstore(<<_length::int32, pairs::binary>>, :reference) do$/;"	f
decode_hstore_copy	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp decode_hstore_copy(<<>>, acc) do$/;"	f
decode_hstore_copy	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp decode_hstore_copy(<<key_length::int32, key::binary(key_length),$/;"	f
decode_hstore_ref	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp decode_hstore_ref(<<>>, acc) do$/;"	f
decode_hstore_ref	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp decode_hstore_ref(<<key_length::int32, key::binary(key_length),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key("", _key),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< ?=, _ :: binary >>, ""),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< ?=, t :: binary >>, key),$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< h, _ :: binary >>, _key) when h in [?\\s, ?\\t, ?\\r, ?\\n, ?\\v, ?\\f],$/;"	f
decode_key	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_key(<< h, t :: binary >>, key),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(""),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(<< ?$, _ :: binary >>),$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(<< h, t :: binary >>) when h in [?\\s, ?\\t],$/;"	f
decode_kv	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_kv(kv),$/;"	f
decode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp decode_l([], a), do: a$/;"	f
decode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp decode_l([c1,c2,c3,c4| cs], a) do$/;"	f
decode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp decode_l([c1,c2,c3], a) do$/;"	f
decode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp decode_l([c1,c2], a) do$/;"	f
decode_legacy_base64	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp decode_legacy_base64(content) do$/;"	f
decode_legacy_token	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp decode_legacy_token(token, sign_secret) do$/;"	f
decode_legacy_token	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp decode_legacy_token(token) do$/;"	f
decode_list	deps/postgrex/lib/postgrex/type_module.ex	/^      def decode_list(<<unquote(rest)::binary>>, type) do$/;"	f
decode_list	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_list(config) do$/;"	f
decode_list_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_list_dispatch(extension, :super_binary, rest) do$/;"	f
decode_list_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_list_dispatch(extension, _, rest) do$/;"	f
decode_log	deps/db_connection/lib/db_connection.ex	/^  defp decode_log(_, _, _, nil, result), do: log_result(result)$/;"	f
decode_log	deps/db_connection/lib/db_connection.ex	/^  defp decode_log(call, query, params, {log, times}, result) do$/;"	f
decode_map	deps/postgrex/lib/postgrex/query.ex	/^  defp decode_map([], _, decoded) do$/;"	f
decode_map	deps/postgrex/lib/postgrex/query.ex	/^  defp decode_map([row | data], mapper, decoded) do$/;"	f
decode_map	deps/postgrex/lib/postgrex/query.ex	/^  defp decode_map(data, opts) do$/;"	f
decode_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_null(extension, :super_binary,$/;"	f
decode_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_null(extension, _,$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  def decode_numeric(<<ndigits :: int16, weight :: int16, sign :: uint16, scale :: int16, tail :: binary>>) do$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_numeric(0, _weight, 0xC000, _scale, "") do$/;"	f
decode_numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_numeric(_num_digits, weight, sign, scale, bin) do$/;"	f
decode_numeric_int	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_numeric_int("", weight, acc), do: {acc, weight}$/;"	f
decode_numeric_int	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_numeric_int(<<digit :: int16, tail :: binary>>, weight, acc) do$/;"	f
decode_pair	deps/plug/lib/plug/conn/query.ex	/^  def decode_pair({key, value}, acc) do$/;"	f
decode_path	deps/postgrex/lib/postgrex/extensions/path.ex	/^  def decode_path(<<o::int8, n::int32, point_data::binary-size(n)-unit(128)>>) do$/;"	f
decode_points	deps/postgrex/lib/postgrex/extensions/path.ex	/^  defp decode_points(<<>>, points), do: Enum.reverse(points)$/;"	f
decode_points	deps/postgrex/lib/postgrex/extensions/path.ex	/^  defp decode_points(<<x::float64, y::float64, rest::bits>>, points) do$/;"	f
decode_row_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_row_dispatch(extension, :super_binary, rest, acc,$/;"	f
decode_row_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_row_dispatch(extension, _, rest, acc, rem, full, rows) do$/;"	f
decode_row_field	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_field(rest) do$/;"	f
decode_row_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_fields("", 0), do: []$/;"	f
decode_row_fields	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_row_fields(rest, count) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      def decode_rows(binary, types, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_rows(<<?D, rest::binary>>, _, _, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_rows(<<?D, size::int32, _::int16, unquote(rest)::binary>>,$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_rows(<<?D, size::int32, rest::binary>>, rem, _, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_rows(<<rest::binary-size(0)>>, _, _, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_rows(<<rest::binary>>, _, _, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_rows(dispatch, rest, acc, rem, full, rows) do$/;"	f
decode_rows	deps/postgrex/lib/postgrex/types.ex	/^  def decode_rows(binary, types, rows, {mod, _}) do$/;"	f
decode_rows_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_rows_dispatch(rest, acc, rem, full, rows) do$/;"	f
decode_sign	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_sign(0x0000), do: 1$/;"	f
decode_sign	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp decode_sign(0x4000), do: -1$/;"	f
decode_string	deps/postgrex/lib/postgrex/messages.ex	/^  defp decode_string(bin) do$/;"	f
decode_string_pair	deps/plug/lib/plug/conn/query.ex	/^  defp decode_string_pair(binary, acc) do$/;"	f
decode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_super(extension, clause, dispatch, rest, acc, rem, full, rows) do$/;"	f
decode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_super(extension, pattern, sub_oids, sub_types, body,$/;"	f
decode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_super(extension, pattern, sub_oids, sub_types, guard, body,$/;"	f
decode_super_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_super_null(extension, dispatch, rest, acc, rem, full, rows) do$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("BEGIN"),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("COMMIT"),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("COPY " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("DELETE " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("FETCH " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("INSERT " <> rest) do$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("MOVE " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("ROLLBACK"),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("SELECT " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag("UPDATE " <> int),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(<<>>, acc),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(<<?\\s, t::binary>>, acc),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(<<h, t::binary>>, acc) when h in ?A..?Z,$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(<<h, t::binary>>, acc),$/;"	f
decode_tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp decode_tag(tag),$/;"	f
decode_text	deps/boltex/lib/boltex/pack_stream.ex	/^  defp decode_text(bytes, str_length) do$/;"	f
decode_token	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp decode_token(token) do$/;"	f
decode_token	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp decode_token(token) do$/;"	f
decode_tsvector_values	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  def decode_tsvector_values("") do$/;"	f
decode_tsvector_values	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  def decode_tsvector_values(words) do$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      def decode_tuple(<<rest::binary>>, count, types) when is_integer(count) do$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      def decode_tuple(<<rest::binary>>, oids, types) do$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_tuple(<<>>, 0, _types, n, acc) do$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_tuple(<<>>, [], [], n, acc) do$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp decode_tuple(<<oid::int32, unquote(rest)::binary>>,$/;"	f
decode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_tuple(config) do$/;"	f
decode_tuple_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_tuple_dispatch(extension, :super_binary, rest, oids, n, acc) do$/;"	f
decode_tuple_dispatch	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_tuple_dispatch(extension, _, rest, oids, n, acc) do$/;"	f
decode_type	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_type(extension, :super_binary, clause,$/;"	f
decode_type	deps/postgrex/lib/postgrex/type_module.ex	/^  defp decode_type(extension, _, clause,$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value("", _spaces, key, value),$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< ?\\s, t :: binary >>, spaces, key, value),$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< h, _ :: binary >>, _spaces, _key, _value) when h in [?\\t, ?\\r, ?\\n, ?\\v, ?\\f],$/;"	f
decode_value	deps/plug/lib/plug/conn/cookies.ex	/^  defp decode_value(<< h, t :: binary >>, spaces, key, value),$/;"	f
decode_vertices	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^  def decode_vertices(<<n::int32, vert_data::binary-size(n)-unit(128)>>) do$/;"	f
decode_vertices	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^  defp decode_vertices(<<>>, v), do: Enum.reverse(v)$/;"	f
decode_vertices	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^  defp decode_vertices(<<x::float64, y::float64, rest::bits>>, v) do$/;"	f
decode_weight	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp decode_weight(0), do: nil$/;"	f
decode_weight	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp decode_weight(1), do: :C$/;"	f
decode_weight	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp decode_weight(2), do: :B$/;"	f
decode_weight	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp decode_weight(3), do: :A$/;"	f
decode_www_form	deps/plug/lib/plug/conn/query.ex	/^  defp decode_www_form(value) do$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/default.ex	/^  defp deconstruct(duration) do$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/default.ex	/^  defp deconstruct({0, 0}, components),$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/default.ex	/^  defp deconstruct({seconds, us}, components) do$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp deconstruct(duration) do$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp deconstruct({0, 0}, []),$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp deconstruct({0, 0}, components),$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp deconstruct({0, micro}, components) do$/;"	f
deconstruct	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp deconstruct({seconds, us}, components) when seconds > 0 do$/;"	f
decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def decrypt(encrypted, secret, sign_secret)$/;"	f
decrypt_legacy	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp decrypt_legacy(encrypted, cipher, secret, iv) do$/;"	f
decrypt_legacy	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp decrypt_legacy(encrypted, cipher, secret, iv)$/;"	f
def_request	deps/exactor/lib/exactor/operations.ex	/^  def def_request(type, req_def, options) do$/;"	f
defabcast	deps/exactor/lib/exactor/operations.ex	/^  defmacro defabcast(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defabcastp	deps/exactor/lib/exactor/operations.ex	/^  defmacro defabcastp(req_def, options \\\\ [], body \\\\ []) do$/;"	a
default	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp default(config, otp_app, port) when is_list(config) do$/;"	f
default_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp default_actions(false), do: @actions$/;"	f
default_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp default_actions(true),  do: @actions -- [:index]$/;"	f
default_config	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  def default_config(config \\\\ Application.get_env(:bolt_sips, Bolt)) do$/;"	f
default_config	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def default_config() do$/;"	f
default_config	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def default_config() do$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr(:error),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, %{} = map}) do$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, literal}) when is_binary(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, literal}) when is_number(literal) or is_boolean(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, nil}),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp default_expr({:ok, {:fragment, expr}}),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr(:error, _),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, %{} = map}, :map) do$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, []}, type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, expr}, type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, literal}, _type) when is_binary(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, literal}, _type) when is_number(literal) or is_boolean(literal),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, nil}, _type),$/;"	f
default_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp default_expr({:ok, {:fragment, expr}}, _type),$/;"	f
default_extension?	deps/postgrex/lib/postgrex/utils.ex	/^    def default_extension?(unquote(ext)), do: true$/;"	f
default_extension?	deps/postgrex/lib/postgrex/utils.ex	/^  def default_extension?(_), do: false$/;"	f
default_extensions	deps/postgrex/lib/postgrex/utils.ex	/^  def default_extensions(opts \\\\ []) do$/;"	f
default_for	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  defp default_for(Phoenix.Transports.LongPoll), do: Plug.Adapters.Cowboy.Handler$/;"	f
default_for	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  defp default_for(Phoenix.Transports.WebSocket), do: Phoenix.Endpoint.CowboyWebSocket$/;"	f
default_for	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  defp default_for(_), do: nil$/;"	f
default_for_type	deps/ecto/lib/ecto/schema.ex	/^  defp default_for_type(_, opts) do$/;"	f
default_format_parser	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp default_format_parser() do$/;"	f
default_index_name	deps/ecto/lib/ecto/migration.ex	/^  defp default_index_name(index) do$/;"	f
default_join_keys	deps/ecto/lib/ecto/association.ex	/^  defp default_join_keys(module, related) do$/;"	f
default_locale	deps/timex/lib/l10n/translator.ex	/^  def default_locale, do: Application.get_env(:timex, :default_locale, "en")$/;"	f
default_login_callback	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp default_login_callback do$/;"	f
default_opts	deps/postgrex/lib/postgrex/utils.ex	/^  def default_opts(opts) do$/;"	f
default_param	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def default_param(%Schema{} = schema, action) do$/;"	f
defaults	deps/cors_plug/lib/cors_plug.ex	/^  def defaults do$/;"	f
defaults	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp defaults(otp_app, module) do$/;"	f
defaults	deps/postgrex/lib/postgrex.ex	/^  defp defaults(opts) do$/;"	f
defcall	deps/exactor/lib/exactor/operations.ex	/^  defmacro defcall(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defcallp	deps/exactor/lib/exactor/operations.ex	/^  defmacro defcallp(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defcast	deps/exactor/lib/exactor/operations.ex	/^  defmacro defcast(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defcastp	deps/exactor/lib/exactor/operations.ex	/^  defmacro defcastp(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defchannel	deps/phoenix/lib/phoenix/socket.ex	/^  defp defchannel(topic_match, channel_module, nil) do$/;"	f
defchannel	deps/phoenix/lib/phoenix/socket.ex	/^  defp defchannel(topic_match, channel_module, transports) do$/;"	f
defdeprecated	deps/timex/lib/timex/macros.ex	/^  defmacro defdeprecated({name, _env, args} = head, message, do: body) do$/;"	a
defhandlecall	deps/exactor/lib/exactor/operations.ex	/^  defmacro defhandlecall(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defhandlecast	deps/exactor/lib/exactor/operations.ex	/^  defmacro defhandlecast(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defhandleinfo	deps/exactor/lib/exactor/operations.ex	/^  defmacro defhandleinfo(msg, opts \\\\ [], body) do$/;"	a
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{helper: nil}, _exprs), do: nil$/;"	f
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{kind: :forward}, _exprs), do: nil$/;"	f
defhelper	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper(%Route{} = route, exprs) do$/;"	f
defhelper_catch_all	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def defhelper_catch_all({helper, routes_and_exprs}) do$/;"	f
define	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def define(env, routes) do$/;"	f
define	deps/postgrex/lib/postgrex/type_module.ex	/^  def define(module, extensions, opts) do$/;"	f
define	deps/postgrex/lib/postgrex/types.ex	/^  def define(module, extensions, opts \\\\ []) do$/;"	f
define_inline	deps/postgrex/lib/postgrex/type_module.ex	/^  defp define_inline(module, config, opts) do$/;"	f
define_interface	deps/exactor/lib/exactor/operations.ex	/^  defp define_interface(type, req_name, interface_matches, payload, options) do$/;"	f
define_starter	deps/exactor/lib/exactor/operations.ex	/^  defp define_starter(private, fun, args, options) do$/;"	f
definit	deps/exactor/lib/exactor/operations.ex	/^  defmacro definit(arg \\\\ quote(do: _), opts), do: do_definit([{:arg, arg} | opts])$/;"	a
definstrument	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  def definstrument(otp_app, endpoint) do$/;"	f
defmulticall	deps/exactor/lib/exactor/operations.ex	/^  defmacro defmulticall(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defmulticallp	deps/exactor/lib/exactor/operations.ex	/^  defmacro defmulticallp(req_def, options \\\\ [], body \\\\ []) do$/;"	a
defparser	deps/combine/lib/combine/helpers.ex	/^  defmacro defparser(call, do: body) do$/;"	a
defs	deps/phoenix/lib/phoenix/router.ex	/^  defp defs() do$/;"	f
defstart	deps/exactor/lib/exactor/operations.ex	/^  defmacro defstart(definition, opts \\\\ [], body \\\\ []) do$/;"	a
defstartp	deps/exactor/lib/exactor/operations.ex	/^  defmacro defstartp(definition, options \\\\ [], body \\\\ []) do$/;"	a
delays_from	deps/retry/lib/retry.ex	/^  defp delays_from(stream_builder) do$/;"	f
delegate_to	deps/exactor/lib/exactor/delegator.ex	/^  defmacro delegate_to(target_module, opts) do$/;"	a
delete	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def delete(struct) do$/;"	f
delete	apps/flexcility_web/lib/flexcility_web/controllers/session_controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/coherence/web/controllers/registration_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/coherence/web/controllers/session_controller.ex	/^  def delete(conn, params) do$/;"	f
delete	deps/con_cache/lib/con_cache.ex	/^  def delete(cache_id, key), do: Operations.delete(Owner.cache(cache_id), key)$/;"	f
delete	deps/con_cache/lib/con_cache/operations.ex	/^  def delete(cache, key) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def delete(prefix, table, filters, _returning) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def delete(prefix, table, filters, returning) do$/;"	f
delete	deps/ecto/lib/ecto/adapters/sql.ex	/^      def delete(repo, %{source: {prefix, source}}, params, opts) do$/;"	f
delete	deps/ecto/lib/ecto/multi.ex	/^  def delete(multi, name, %Changeset{} = changeset, opts) do$/;"	f
delete	deps/ecto/lib/ecto/multi.ex	/^  def delete(multi, name, changeset_or_struct, opts \\\\ [])$/;"	f
delete	deps/ecto/lib/ecto/multi.ex	/^  def delete(multi, name, struct, opts) do$/;"	f
delete	deps/ecto/lib/ecto/repo.ex	/^      def delete(struct, opts \\\\ []) do$/;"	f
delete	deps/ecto/lib/ecto/repo/schema.ex	/^  def delete(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
delete	deps/ecto/lib/ecto/repo/schema.ex	/^  def delete(repo, adapter, %{__struct__: _} = struct, opts) when is_list(opts) do$/;"	f
delete	deps/phoenix/lib/phoenix/controller.ex	/^      def delete(conn, %{"id" => id}, user) do$/;"	f
delete	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp delete(state, topic, channel_pid) do$/;"	f
delete	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp delete(state, topic, channel_pid) do$/;"	f
delete	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/phoenix/priv/templates/phx.gen.json/controller.ex	/^  def delete(conn, %{"id" => id}) do$/;"	f
delete	deps/plug/lib/plug/router.ex	/^  defmacro delete(path, options, contents \\\\ []) do$/;"	a
delete	deps/plug/lib/plug/session/cookie.ex	/^  def delete(_conn, _sid, _opts) do$/;"	f
delete	deps/plug/lib/plug/session/ets.ex	/^  def delete(_conn, sid, table) do$/;"	f
delete	deps/postgrex/lib/postgrex/parameters.ex	/^  def delete(ref) do$/;"	f
delete all	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all" do$/;"	t
delete all no entries	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all no entries" do$/;"	t
delete all with filter	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all with filter" do$/;"	t
delete all with invalid prefix	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all with invalid prefix" do$/;"	t
delete all with joins	deps/ecto/integration_test/cases/joins.exs	/^  test "delete all with joins" do$/;"	t
delete all with returning with schema	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all with returning with schema" do$/;"	t
delete all with returning without schema	deps/ecto/integration_test/cases/repo.exs	/^  test "delete all with returning without schema" do$/;"	t
delete!	deps/ecto/lib/ecto/repo.ex	/^      def delete!(struct, opts \\\\ []) do$/;"	f
delete!	deps/ecto/lib/ecto/repo/schema.ex	/^  def delete!(repo, adapter, struct_or_changeset, opts) do$/;"	f
delete_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "delete_<%= schema.singular %>\/1 deletes the <%= schema.singular %>" do$/;"	t
delete_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def delete_<%= schema.singular %>(%<%= inspect schema.alias %>{} = <%= schema.singular %>) do$/;"	f
delete_all	deps/coherence/web/models/rememberable.ex	/^  def delete_all(user_id) do$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def delete_all(%{select: nil} = query) do$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def delete_all(_query),$/;"	f
delete_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def delete_all(%{from: from} = query) do$/;"	f
delete_all	deps/ecto/lib/ecto/association.ex	/^  def delete_all(%{join_through: join_through, join_keys: join_keys, owner: owner}, parent, repo, opts) do$/;"	f
delete_all	deps/ecto/lib/ecto/association.ex	/^  def delete_all(refl, parent, repo, opts) do$/;"	f
delete_all	deps/ecto/lib/ecto/multi.ex	/^  def delete_all(multi, name, queryable, opts \\\\ []) when is_list(opts) do$/;"	f
delete_all	deps/ecto/lib/ecto/repo.ex	/^      def delete_all(queryable, opts \\\\ []) do$/;"	f
delete_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def delete_all(repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
delete_all	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def delete_all() do$/;"	f
delete_assocs	deps/ecto/lib/ecto/repo/schema.ex	/^  defp delete_assocs(%{data: struct}, repo, schema, assocs, opts) do$/;"	f
delete_change	deps/ecto/lib/ecto/changeset.ex	/^  def delete_change(%Changeset{} = changeset, key) when is_atom(key) do$/;"	f
delete_conn	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp delete_conn(pool) do$/;"	f
delete_cookie	deps/plug/lib/plug/session.ex	/^  defp delete_cookie(conn, %{cookie_opts: cookie_opts, key: key}),$/;"	f
delete_credentials	deps/coherence/lib/coherence/plugs/authorization/credential_store/agent.ex	/^  def delete_credentials(credentials) do$/;"	f
delete_credentials	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  def delete_credentials(credentials) do$/;"	f
delete_credentials	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def delete_credentials(_, _), do: nil$/;"	f
delete_credentials	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def delete_credentials(resource, credentials)$/;"	f
delete_credentials	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^        def delete_credentials(_, creds) do$/;"	f
delete_csrf_token	deps/phoenix/lib/phoenix/controller.ex	/^  defdelegate delete_csrf_token(), to: Plug.CSRFProtection$/;"	d
delete_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  def delete_csrf_token do$/;"	f
delete_disconnect	deps/db_connection/lib/db_connection.ex	/^  defp delete_disconnect(conn, conn_state, err, opts) do$/;"	f
delete_ets_file_for_version	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp delete_ets_file_for_version(release_version) do$/;"	f
delete_ets_table_for_version	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp delete_ets_table_for_version(release_version) do$/;"	f
delete_expired_tokens	deps/coherence/web/models/rememberable.ex	/^  def delete_expired_tokens do$/;"	f
delete_expired_tokens!	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp delete_expired_tokens!(repo) do$/;"	f
delete_expired_tokens!	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp delete_expired_tokens!(repo) do$/;"	f
delete_expired_tokens!	deps/coherence/web/controllers/session_controller.ex	/^  defp delete_expired_tokens!(repo) do$/;"	f
delete_info	deps/db_connection/lib/db_connection.ex	/^  defp delete_info(conn) do$/;"	f
delete_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  def delete_login(conn, opts \\\\ []) do$/;"	f
delete_parameters	deps/postgrex/lib/postgrex/protocol.ex	/^  defp delete_parameters(%{parameters: ref}) when is_reference(ref) do$/;"	f
delete_parameters	deps/postgrex/lib/postgrex/protocol.ex	/^  defp delete_parameters(_), do: :ok$/;"	f
delete_rememberable	deps/coherence/web/services/rememberable_service.ex	/^  def delete_rememberable(conn, %{id: id}) do$/;"	f
delete_req_cookie	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate delete_req_cookie(conn, key), to: Plug.Test$/;"	d
delete_req_cookie	deps/plug/lib/plug/test.ex	/^  def delete_req_cookie(%Conn{req_cookies: %Plug.Conn.Unfetched{}} = conn, key)$/;"	f
delete_req_cookie	deps/plug/lib/plug/test.ex	/^  def delete_req_cookie(_conn, key) when is_binary(key) do$/;"	f
delete_req_header	deps/plug/lib/plug/conn.ex	/^  def delete_req_header(%Conn{req_headers: headers} = conn, key) when$/;"	f
delete_req_header	deps/plug/lib/plug/conn.ex	/^  def delete_req_header(%Conn{state: :sent}, _key) do$/;"	f
delete_resp_cookie	deps/plug/lib/plug/conn.ex	/^  def delete_resp_cookie(%Conn{resp_cookies: resp_cookies} = conn, key, opts \\\\ []) when$/;"	f
delete_resp_header	deps/plug/lib/plug/conn.ex	/^  def delete_resp_header(%Conn{resp_headers: headers} = conn, key) when$/;"	f
delete_resp_header	deps/plug/lib/plug/conn.ex	/^  def delete_resp_header(%Conn{state: :sent}, _key) do$/;"	f
delete_session	deps/plug/lib/plug/conn.ex	/^  def delete_session(%Conn{state: state}, _key) when not state in @unsent,$/;"	f
delete_session	deps/plug/lib/plug/conn.ex	/^  def delete_session(conn, key) do$/;"	f
delete_session	deps/plug/lib/plug/session.ex	/^  defp delete_session(sid, conn, %{store: store, store_config: store_config}),$/;"	f
delete_site	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def delete_site(%Site{} = site) do$/;"	f
delete_site	apps/flexcility_web/test/admin_test.exs	/^  test "delete_site\/1 deletes the site" do$/;"	t
delete_stop	deps/db_connection/lib/db_connection.ex	/^  defp delete_stop(conn, conn_state, kind, reason, stack, opts) do$/;"	f
delete_token_session	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def delete_token_session(conn) do$/;"	f
delete_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def delete_user(user) do$/;"	f
delete_user_token	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def delete_user_token(conn) do$/;"	f
deletes chosen	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "deletes chosen <%= schema.singular %>", %{conn: conn} do$/;"	t
deletes chosen	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "deletes chosen <%= schema.singular %>", %{conn: conn} do$/;"	t
deletes chosen resource	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "deletes chosen resource", %{conn: conn} do$/;"	t
deletes chosen resource	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "deletes chosen resource", %{conn: conn} do$/;"	t
deletes chosen site	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "deletes chosen site", %{conn: conn} do$/;"	t
deliver	deps/coherence/test/support/email.exs	/^  def deliver(email), do: email$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/local.ex	/^  def deliver(%Swoosh.Email{} = email, config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  def deliver(%Swoosh.Email{} = email, config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  def deliver(%Email{} = email, config \\\\ []) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  def deliver(%Email{} = email, config \\\\ []) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  def deliver(%Email{} = email, config \\\\ []) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  def deliver(%Email{} = email, config \\\\ []) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^    def deliver(%Email{} = email, config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/smtp.ex	/^    def deliver(%Email{} = email, config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  def deliver(%Email{} = email, config \\\\ []) do$/;"	f
deliver	deps/swoosh/lib/swoosh/adapters/test.ex	/^  def deliver(email, _config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/mailer.ex	/^      def deliver(email, config \\\\ [])$/;"	f
deliver	deps/swoosh/lib/swoosh/mailer.ex	/^      def deliver(email, config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/mailer.ex	/^  def deliver(_adapter, %Swoosh.Email{from: nil}, _config) do$/;"	f
deliver	deps/swoosh/lib/swoosh/mailer.ex	/^  def deliver(_adapter, %Swoosh.Email{from: {_name, address}}, _config) when address in ["", nil] do$/;"	f
deliver	deps/swoosh/lib/swoosh/mailer.ex	/^  def deliver(adapter, %Swoosh.Email{} = email, config) do$/;"	f
deliver!	deps/swoosh/lib/swoosh/mailer.ex	/^      def deliver!(email, config \\\\ [])$/;"	f
deliver!	deps/swoosh/lib/swoosh/mailer.ex	/^      def deliver!(email, config) do$/;"	f
delta_fullfilling_clock	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  defp delta_fullfilling_clock(generations, remote_clock) do$/;"	f
delta_size	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def delta_size(%State{mode: :delta, cloud: cloud, values: values}) do$/;"	f
demonitor	deps/db_connection/lib/db_connection/connection.ex	/^  defp demonitor(nil), do: true$/;"	f
demonitor	deps/db_connection/lib/db_connection/connection.ex	/^  defp demonitor({_, _}), do: true$/;"	f
demonitor	deps/db_connection/lib/db_connection/connection.ex	/^  defp demonitor({_, mon}) when is_reference(mon) do$/;"	f
demonitor	deps/db_connection/lib/db_connection/connection.ex	/^  defp demonitor({mon, :after_connect}) when is_reference(mon) do$/;"	f
deps	apps/flexcility/mix.exs	/^  defp deps do$/;"	f
deps	apps/flexcility_web/mix.exs	/^  defp deps do$/;"	f
deps	deps/bcrypt_elixir/mix.exs	/^  defp deps do$/;"	f
deps	deps/bolt_sips/mix.exs	/^  defp deps() do$/;"	f
deps	deps/boltex/mix.exs	/^  defp deps do$/;"	f
deps	deps/coherence/mix.exs	/^  defp deps do$/;"	f
deps	deps/combine/mix.exs	/^  defp deps do$/;"	f
deps	deps/comeonin/mix.exs	/^  defp deps do$/;"	f
deps	deps/con_cache/mix.exs	/^  defp deps do$/;"	f
deps	deps/connection/mix.exs	/^  defp deps() do$/;"	f
deps	deps/cors_plug/mix.exs	/^  defp deps do$/;"	f
deps	deps/db_connection/mix.exs	/^  defp deps do$/;"	f
deps	deps/decimal/mix.exs	/^  defp deps() do$/;"	f
deps	deps/distillery/mix.exs	/^  defp deps do$/;"	f
deps	deps/ecto/mix.exs	/^  defp deps do$/;"	f
deps	deps/exactor/mix.exs	/^  defp deps do$/;"	f
deps	deps/fuzzyurl/mix.exs	/^  defp deps do$/;"	f
deps	deps/gettext/mix.exs	/^  defp deps do$/;"	f
deps	deps/mime/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_ecto/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_html/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_pubsub/mix.exs	/^  defp deps do$/;"	f
deps	deps/phoenix_swoosh/mix.exs	/^  defp deps do$/;"	f
deps	deps/plug/mix.exs	/^  def deps do$/;"	f
deps	deps/poison/mix.exs	/^  defp deps do$/;"	f
deps	deps/postgrex/mix.exs	/^  defp deps do$/;"	f
deps	deps/retry/mix.exs	/^  defp deps do$/;"	f
deps	deps/swoosh/mix.exs	/^  defp deps do$/;"	f
deps	deps/timex/mix.exs	/^  def deps do$/;"	f
deps	deps/timex_ecto/mix.exs	/^  defp deps do$/;"	f
deps	deps/tzdata/mix.exs	/^  defp deps do$/;"	f
deps	deps/uuid/mix.exs	/^  defp deps do$/;"	f
deps	mix.exs	/^  defp deps do$/;"	f
derive	deps/plug/lib/plug/session/cookie.ex	/^  defp derive(conn, key, key_opts) do$/;"	f
deriving	deps/poison/lib/poison/encoder.ex	/^  def deriving(module, _struct, options) do$/;"	f
describe	deps/db_connection/lib/db_connection.ex	/^  defp describe(conn, query, opts) do$/;"	f
describe	deps/db_connection/lib/db_connection/query.ex	/^  def describe(query, opts)$/;"	f
describe	deps/postgrex/lib/postgrex/parameters.ex	/^  def describe(query, _), do: query$/;"	f
describe	deps/postgrex/lib/postgrex/query.ex	/^  def describe(query, _), do: query$/;"	f
describe	deps/postgrex/lib/postgrex/stream.ex	/^  def describe(%Stream{query: query} = stream, opts) do$/;"	f
describe	deps/postgrex/lib/postgrex/stream.ex	/^  def describe(copy, _) do$/;"	f
describe_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_error(s, %{sync: :flush} = status, query, buffer) do$/;"	f
describe_error_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_error_recv(s, status, err, buffer) do$/;"	f
describe_params	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_params(s, status, query, param_oids, buffer, next) do$/;"	f
describe_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_recv(s, status, %Query{ref: nil} = query, buffer, next) do$/;"	f
describe_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_recv(s, status, query, buffer, next) do$/;"	f
describe_result	deps/postgrex/lib/postgrex/protocol.ex	/^  defp describe_result(s, status, query, fields, buffer, next) do$/;"	f
describe_run	deps/db_connection/lib/db_connection.ex	/^  defp describe_run(conn, fun, query, params, opts) do$/;"	f
description	deps/connection/mix.exs	/^  defp description do$/;"	f
description	deps/cors_plug/mix.exs	/^  defp description do$/;"	f
description	deps/db_connection/mix.exs	/^  defp description do$/;"	f
description	deps/decimal/mix.exs	/^  defp description() do$/;"	f
description	deps/distillery/mix.exs	/^  defp description do$/;"	f
description	deps/ecto/mix.exs	/^  defp description do$/;"	f
description	deps/phoenix_swoosh/mix.exs	/^  defp description do$/;"	f
description	deps/postgrex/mix.exs	/^  defp description do$/;"	f
description	deps/swoosh/mix.exs	/^  defp description do$/;"	f
description	deps/timex/mix.exs	/^  defp description do$/;"	f
description	deps/tzdata/mix.exs	/^  defp description do$/;"	f
description	deps/uuid/mix.exs	/^  defp description do$/;"	f
detect_down	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  def detect_down(replicas, replica, temp_interval, perm_interval, now \\\\ now_ms()) do$/;"	f
detect_downs	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp detect_downs(%{permdown_period: perm_int, down_period: temp_int} = state) do$/;"	f
detect_erts_version	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def detect_erts_version(path) when is_binary(path) do$/;"	f
dgettext	deps/gettext/lib/gettext.ex	/^  def dgettext(backend, domain, msgid, bindings \\\\ %{})$/;"	f
dgettext	deps/gettext/lib/gettext.ex	/^  def dgettext(backend, domain, msgid, bindings) when is_list(bindings) do$/;"	f
dgettext	deps/gettext/lib/gettext.ex	/^  def dgettext(backend, domain, msgid, bindings)$/;"	f
dgettext	deps/gettext/lib/gettext/compiler.ex	/^      defmacro dgettext(domain, msgid, bindings \\\\ Macro.escape(%{})) do$/;"	a
dgettext_noop	deps/gettext/lib/gettext/compiler.ex	/^      defmacro dgettext_noop(domain, msgid) do$/;"	a
diff	deps/db_connection/lib/db_connection/log_entry.ex	/^  defmacrop diff(to, from) do$/;"	a
diff	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def diff(%AmbiguousDateTime{:after => a}, %AmbiguousDateTime{:after => b}, granularity) do$/;"	f
diff	deps/timex/lib/comparable/ambiguous_datetime.ex	/^  def diff(a, _b, _granularity) do$/;"	f
diff	deps/timex/lib/comparable/comparable.ex	/^  def diff(a, b, granularity \\\\ :microseconds)$/;"	f
diff	deps/timex/lib/comparable/date.ex	/^  def diff(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
diff	deps/timex/lib/comparable/date.ex	/^  def diff(a, b, granularity) do$/;"	f
diff	deps/timex/lib/comparable/datetime.ex	/^  def diff(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
diff	deps/timex/lib/comparable/datetime.ex	/^  defdelegate diff(a, b, granularity), to: Diff$/;"	d
diff	deps/timex/lib/comparable/diff.ex	/^  def diff(a, a, granularity) when is_integer(a), do: zero(granularity)$/;"	f
diff	deps/timex/lib/comparable/diff.ex	/^  def diff(a, b, granularity) do$/;"	f
diff	deps/timex/lib/comparable/diff.ex	/^  def diff(a, b, granularity) when is_integer(a) and is_integer(b) and is_atom(granularity) do$/;"	f
diff	deps/timex/lib/comparable/naivedatetime.ex	/^  def diff(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
diff	deps/timex/lib/comparable/naivedatetime.ex	/^  defdelegate diff(a, b, granularity), to: Diff$/;"	d
diff	deps/timex/lib/comparable/tuple.ex	/^  def diff(_, %AmbiguousDateTime{} = b, _granularity),$/;"	f
diff	deps/timex/lib/comparable/tuple.ex	/^  defdelegate diff(a, b, granularity), to: Diff$/;"	d
diff	deps/timex/lib/time/duration.ex	/^  def diff(%Duration{} = t1, %Duration{} = t2, type) do$/;"	f
diff	deps/timex/lib/time/duration.ex	/^  def diff(%Duration{} = t1, nil, type), do: diff(t1, now(), type)$/;"	f
diff	deps/timex/lib/time/duration.ex	/^  def diff(t1, t2, type \\\\ nil)$/;"	f
diff	deps/timex/lib/timex.ex	/^  def diff(%Time{} = a, %Time{} = b), do: diff(a, b, :microseconds)$/;"	f
diff	deps/timex/lib/timex.ex	/^  def diff(%Time{} = a, %Time{} = b, granularity) do$/;"	f
diff	deps/timex/lib/timex.ex	/^  def diff(%Time{}, %Time{}, granularity) when granularity in [:days, :weeks, :calendar_weeks, :months, :years] do$/;"	f
diff	deps/timex/lib/timex.ex	/^  defdelegate diff(a, b), to: Timex.Comparable$/;"	d
diff	deps/timex/lib/timex.ex	/^  defdelegate diff(a, b, granularity), to: Timex.Comparable$/;"	d
diff	deps/timex/lib/timezone/timezone.ex	/^  def diff(%DateTime{} = dt, %TimezoneInfo{} = dest) do$/;"	f
diff	deps/timex/lib/timezone/timezone.ex	/^  def diff(%TimezoneInfo{} = origin, %TimezoneInfo{} = dest) do$/;"	f
diff_months	deps/timex/lib/comparable/diff.ex	/^  defp diff_months(a, a), do: 0$/;"	f
diff_months	deps/timex/lib/comparable/diff.ex	/^  defp diff_months(a, b) do$/;"	f
diff_years	deps/timex/lib/comparable/diff.ex	/^  defp diff_years(a, a), do: 0$/;"	f
diff_years	deps/timex/lib/comparable/diff.ex	/^  defp diff_years(a, b) do$/;"	f
diff_years	deps/timex/lib/comparable/diff.ex	/^  defp diff_years({y, _, _}, {y, _, _}, acc) do$/;"	f
diff_years	deps/timex/lib/comparable/diff.ex	/^  defp diff_years({y1, m, d}, {y2, _, _} = ed, acc) when y1 < y2 do$/;"	f
different IP	deps/coherence/test/services/trackable_service_test.exs	/^    test "different IP", %{conn: conn, user: user} do$/;"	t
digest	deps/phoenix/lib/phoenix/digester.ex	/^  defp digest(file) do$/;"	f
digest_javascript_asset_references	deps/phoenix/lib/phoenix/digester.ex	/^  defp digest_javascript_asset_references(file, manifest) do$/;"	f
digest_javascript_map_asset_references	deps/phoenix/lib/phoenix/digester.ex	/^  defp digest_javascript_map_asset_references(file, manifest) do$/;"	f
digest_stylesheet_asset_references	deps/phoenix/lib/phoenix/digester.ex	/^  defp digest_stylesheet_asset_references(file, manifest) do$/;"	f
digested_contents	deps/phoenix/lib/phoenix/digester.ex	/^  defp digested_contents(file, manifest) do$/;"	f
digested_url	deps/phoenix/lib/phoenix/digester.ex	/^  defp digested_url("\/" <> relative_path, _file, manifest, with_vsn?) do$/;"	f
digested_url	deps/phoenix/lib/phoenix/digester.ex	/^  defp digested_url(url, file, manifest, with_vsn?) do$/;"	f
digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([?9|rest], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment([head|rest], acc),$/;"	f
digits_increment	deps/decimal/lib/decimal.ex	/^  defp digits_increment(digits),$/;"	f
digits_to_integer	deps/decimal/lib/decimal.ex	/^  defp digits_to_integer([]), do: 0$/;"	f
digits_to_integer	deps/decimal/lib/decimal.ex	/^  defp digits_to_integer(digits), do: :erlang.list_to_integer(digits)$/;"	f
dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def dir!(_kind, dir) when dir in [:asc, :desc],$/;"	f
dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def dir!(kind, other),$/;"	f
direct_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def direct_broadcast(node_name, server, topic, message) when is_atom(server),$/;"	f
direct_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  def direct_broadcast(fastlane, server_name, pool_size, node_name, from_pid, topic, msg) do$/;"	f
direct_broadcast	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp direct_broadcast(state, target_node, msg) do$/;"	f
direct_broadcast!	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def direct_broadcast!(node_name, server, topic, message) do$/;"	f
direct_broadcast_from	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def direct_broadcast_from(node_name, server, from_pid, topic, message)$/;"	f
direct_broadcast_from!	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def direct_broadcast_from!(node_name, server, from_pid, topic, message)$/;"	f
direction	deps/ecto/lib/ecto/migration.ex	/^  def direction do$/;"	f
directives	deps/postgrex/lib/postgrex/type_module.ex	/^  defp directives(config) do$/;"	f
directives	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp directives() do$/;"	f
directives	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp directives() do$/;"	f
dirty_delete	deps/con_cache/lib/con_cache.ex	/^  def dirty_delete(cache_id, key), do: Operations.dirty_delete(Owner.cache(cache_id), key)$/;"	f
dirty_delete	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_delete(cache, key) do$/;"	f
dirty_get_or_store	deps/con_cache/lib/con_cache.ex	/^  def dirty_get_or_store(cache_id, key, store_fun),$/;"	f
dirty_get_or_store	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_get_or_store(cache, key, fun) do$/;"	f
dirty_insert_new	deps/con_cache/lib/con_cache.ex	/^  def dirty_insert_new(cache_id, key, value),$/;"	f
dirty_insert_new	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_insert_new(%ConCache{ets: ets, owner_pid: owner_pid, ttl: ttl} = cache, key, value) do$/;"	f
dirty_put	deps/con_cache/lib/con_cache.ex	/^  def dirty_put(cache_id, key, value),$/;"	f
dirty_put	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_put($/;"	f
dirty_put	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_put(%ConCache{ttl: ttl} = cache, key, value) do$/;"	f
dirty_update	deps/con_cache/lib/con_cache.ex	/^  def dirty_update(cache_id, key, update_fun),$/;"	f
dirty_update	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_update(cache, key, fun) do$/;"	f
dirty_update_existing	deps/con_cache/lib/con_cache.ex	/^  def dirty_update_existing(cache_id, key, update_fun),$/;"	f
dirty_update_existing	deps/con_cache/lib/con_cache/operations.ex	/^  def dirty_update_existing(cache, key, fun) do$/;"	f
disable	deps/gettext/lib/gettext/extractor.ex	/^  def disable do$/;"	f
disable	deps/gettext/lib/gettext/extractor_agent.ex	/^  def disable do$/;"	f
discard_previously_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp discard_previously_sent() do$/;"	f
disconnect	deps/connection/lib/connection.ex	/^        def disconnect(info, %{sock: sock} = s) do$/;"	f
disconnect	deps/connection/lib/connection.ex	/^      def disconnect(info, state) do$/;"	f
disconnect	deps/connection/lib/connection.ex	/^  defp disconnect(info, mod_state, %{mod: mod} = s) do$/;"	f
disconnect	deps/db_connection/lib/db_connection.ex	/^      def disconnect(_, _) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/connection.ex	/^  def disconnect({log, err}, %{mod: mod} = s) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/connection.ex	/^  def disconnect({pid, ref}, err, state, _) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/ownership.ex	/^  def disconnect(proxy, exception, state, opts) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def disconnect({proxy, ref}, exception, state, _opts) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp disconnect(reason, state) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/poolboy.ex	/^  def disconnect({pool, worker, worker_ref}, err, state, opts) do$/;"	f
disconnect	deps/db_connection/lib/db_connection/sojourn.ex	/^  defdelegate disconnect(ref, err, state, opts), to: DBConnection.Connection$/;"	d
disconnect	deps/db_connection/lib/db_connection/task.ex	/^  defdelegate disconnect(info, err, state, opts), to: DBConnection.Connection$/;"	d
disconnect	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def disconnect(err, {conn_mod, state, _in_transaction?}) do$/;"	f
disconnect	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def disconnect(owner, exception, {_conn_mod, conn_state, _in_transaction?}, opts) do$/;"	f
disconnect	deps/postgrex/lib/postgrex/protocol.ex	/^  def disconnect(_, s) do$/;"	f
disconnect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp disconnect(%{connection_id: connection_id} = s, %Postgrex.Error{} = err, buffer) do$/;"	f
disconnect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp disconnect(s, tag, action, reason) do$/;"	f
disconnect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp disconnect(s, tag, action, reason, buffer) do$/;"	f
disconnects sandbox on transaction timeouts	deps/ecto/integration_test/sql/sandbox.exs	/^  test "disconnects sandbox on transaction timeouts" do$/;"	t
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(%Message{} = msg, channels, socket) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(%{ref: ref, topic: "phoenix", event: "heartbeat"}, _channels, _socket) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def dispatch(msg, channels, socket)$/;"	f
dispatch	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def dispatch(%Plug.Conn{} = conn, endpoint, method, path_or_action, params_or_body) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def dispatch(conn, _endpoint, method, _path_or_action, _params_or_body) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def dispatch(conn, endpoint, method, path_or_action, params_or_body \\\\ nil)$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{halted: true} = conn, _, _, _, _) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "GET"} = conn, endpoint, handler, transport, opts) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "OPTIONS"} = conn, _, _, _, _) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(%{method: "POST"} = conn, endpoint, _, _, opts) do$/;"	f
dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp dispatch(conn, _, _, _, _) do$/;"	f
dispatch	deps/plug/lib/plug/router.ex	/^      def dispatch(%Plug.Conn{assigns: assigns} = conn, _opts) do$/;"	f
dispatch_endpoint	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp dispatch_endpoint(conn, endpoint, method, action, params_or_body) when is_atom(action) do$/;"	f
dispatch_endpoint	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp dispatch_endpoint(conn, endpoint, method, path, params_or_body) when is_binary(path) do$/;"	f
dispatch_for	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp dispatch_for(plug, opts) do$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: exprs}, _sources, query) when is_list(exprs) do$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: false}, _sources, _query), do: []$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(%QueryExpr{expr: true}, _sources, _query),  do: "DISTINCT "$/;"	f
distinct	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp distinct(nil, _sources, _query), do: []$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: []}, _, _), do: {[], []}$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: exprs}, sources, query) do$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: false}, _, _), do: {[], []}$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(%QueryExpr{expr: true}, _, _), do: {" DISTINCT", []}$/;"	f
distinct	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp distinct(nil, _, _), do: {[], []}$/;"	f
distinct	deps/ecto/lib/ecto/query.ex	/^  defmacro distinct(query, binding \\\\ [], expr) do$/;"	a
distinct!	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def distinct!(distinct) do$/;"	f
distinct!	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def distinct!(distinct) when is_boolean(distinct) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, coef: :inf} = num1, %Decimal{sign: sign2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{sign: sign1}, %Decimal{sign: sign2, coef: 0}) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
div	deps/decimal/lib/decimal.ex	/^  def div(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust) when coef1 < coef2,$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust) when coef1 >= coef2 * 10,$/;"	f
div_adjust	deps/decimal/lib/decimal.ex	/^  defp div_adjust(coef1, coef2, adjust),$/;"	f
div_calc	deps/decimal/lib/decimal.ex	/^  defp div_calc(coef1, coef2, coef, adjust, prec10) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{sign: sign1, coef: :inf} = num1, %Decimal{sign: sign2}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{sign: sign1, coef: coef1, exp: exp1} = num1, %Decimal{sign: sign2, coef: coef2, exp: exp2} = num2) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{sign: sign1}, %Decimal{sign: sign2, coef: 0}) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
div_int	deps/decimal/lib/decimal.ex	/^  def div_int(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
div_int_calc	deps/decimal/lib/decimal.ex	/^  defp div_int_calc(coef1, coef2, coef, adjust, precision) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, coef: :inf} = num1, %Decimal{sign: sign2}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, coef: coef1, exp: exp1} = num1, %Decimal{sign: sign2, coef: coef2, exp: exp2} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{sign: sign1}, %Decimal{sign: sign2, coef: 0}) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
div_rem	deps/decimal/lib/decimal.ex	/^  def div_rem(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
divmod	deps/timex/lib/time/duration.ex	/^  defp divmod(a, b),          do: {div(a, b), rem(a, b)}$/;"	f
divmod	deps/timex/lib/time/duration.ex	/^  defp divmod(initial, a, b), do: {initial + div(a, b), rem(a, b)}$/;"	f
dngettext	deps/gettext/lib/gettext.ex	/^  def dngettext(backend, domain, msgid, msgid_plural, n, bindings \\\\ %{})$/;"	f
dngettext	deps/gettext/lib/gettext.ex	/^  def dngettext(backend, domain, msgid, msgid_plural, n, bindings) when is_list(bindings) do$/;"	f
dngettext	deps/gettext/lib/gettext.ex	/^  def dngettext(backend, domain, msgid, msgid_plural, n, bindings)$/;"	f
dngettext	deps/gettext/lib/gettext/compiler.ex	/^      defmacro dngettext(domain, msgid, msgid_plural, n, bindings \\\\ Macro.escape(%{})) do$/;"	a
dngettext_noop	deps/gettext/lib/gettext/compiler.ex	/^      defmacro dngettext_noop(domain, msgid, msgid_plural) do$/;"	a
do_add	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp do_add(%State{delta: delta} = state, pid, topic, key, meta) do$/;"	f
do_all_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_all_config(%{all: true} = config) do$/;"	f
do_all_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_all_config(config), do: config$/;"	f
do_all_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_all_config(%{all: true} = config) do$/;"	f
do_all_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_all_config(config), do: config$/;"	f
do_apply	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_apply(_output_dir, [], _vars, acc),$/;"	f
do_apply	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_apply(output_dir, [overlay|rest], overlay_vars, acc) when is_list(acc) do$/;"	f
do_beginning_of_day	deps/timex/lib/timezone/timezone.ex	/^  defp do_beginning_of_day(%DateTime{} = dt, tz, {date, {h,_,_}} = day_start) do$/;"	f
do_bin_opts	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_bin_opts(bin_opts) do$/;"	f
do_bin_opts	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_bin_opts(bin_opts) do$/;"	f
do_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp do_broadcast(fastlane, pubsub_server, shard, from, topic, msg) do$/;"	f
do_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp do_broadcast(nil, pubsub_server, shard, from, topic, msg) do$/;"	f
do_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  defp do_broadcast(pids, fastlane, server_name, pool_size, from_pid, topic, msg)$/;"	f
do_broadcast	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  defp do_broadcast({:error, {:no_such_group, _}}, _fastlane, _server, _pool, _from, _topic, _msg) do$/;"	f
do_cancel_request	deps/postgrex/lib/postgrex/protocol.ex	/^  defp do_cancel_request(%{peer: {ip, port}, timeout: timeout} = s) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(_meta, params, struct, allowed_actions, on_cast) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(meta, params, nil, allowed_actions, on_cast) do$/;"	f
do_cast	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_cast(relation, nil, current, _allowed_actions, _on_cast) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%Ecto.DateTime{} = dt) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%Ecto.Date{} = d),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{"year" => empty, "month" => empty, "day" => empty,$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{"year" => empty, "month" => empty, "day" => empty}) when empty in ["", nil],$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{"year" => year, "month" => month, "day" => day, "hour" => hour, "min" => min} = map) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{"year" => year, "month" => month, "day" => day, "hour" => hour, "minute" => min} = map) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{"year" => year, "month" => month, "day" => day}),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{year: empty, month: empty, day: empty,$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{year: empty, month: empty, day: empty}) when empty in ["", nil],$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{year: year, month: month, day: day, hour: hour, min: min} = map) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{year: year, month: month, day: day, hour: hour, minute: min} = map) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(%{year: year, month: month, day: day}),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(<<year::4-bytes, ?-, month::2-bytes, ?-, day::2-bytes, sep,$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(<<year::4-bytes, ?-, month::2-bytes, ?-, day::2-bytes>>),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(_) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast(_),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast({year, month, day}),$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast({{year, month, day}, {hour, min, sec, usec}}) do$/;"	f
do_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp do_cast({{year, month, day}, {hour, min, sec}}) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(%{related: mod} = relation, changes, current, allowed_actions)$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(_relation, %{__struct__: _} = struct, _current, allowed_actions) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(relation, %Changeset{} = changeset, _current, allowed_actions) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(relation, %{__struct__: _} = changeset_or_struct, nil, _allowed_actions) do$/;"	f
do_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp do_change(relation, nil, current, _allowed_actions) do$/;"	f
do_clean	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_clean(config) do$/;"	f
do_clean	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_clean(config) do$/;"	f
do_clean_options	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_clean_options(config) do$/;"	f
do_clean_options	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_clean_options(config) do$/;"	f
do_compact	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp do_compact(ctx, cloud) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_config({opts, parsed, unknown}) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_config(opts, []) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_config(opts, bin_opts) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_config({opts, parsed, unknown}) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_config(opts, []) do$/;"	f
do_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_config(opts, bin_opts) do$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([], _fun, [], _did_last_match), do: []$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([], _fun, matched, _did_last_match), do: matched$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching([h|t], fun, matched, _did_last_match) do$/;"	f
do_consecutive_matching	deps/tzdata/lib/tzdata.ex	/^  defp do_consecutive_matching(_list, _fun, matched, false) when length(matched) > 0 do$/;"	f
do_create	deps/ecto/lib/ecto/migration.ex	/^  defp do_create(table, command) do$/;"	f
do_decode	deps/plug/lib/plug/conn/cookies.ex	/^  defp do_decode([], acc),$/;"	f
do_decode	deps/plug/lib/plug/conn/cookies.ex	/^  defp do_decode([h|t], acc) do$/;"	f
do_defabcast	deps/exactor/lib/exactor/operations.ex	/^  defp do_defabcast(req_def, options) do$/;"	f
do_default_config	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_default_config(config) do$/;"	f
do_default_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_default_config(config, opts) do$/;"	f
do_default_config	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_default_config(config) do$/;"	f
do_default_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_default_config(config, opts) do$/;"	f
do_definit	deps/exactor/lib/exactor/operations.ex	/^  defp do_definit(opts) do$/;"	f
do_defmulticall	deps/exactor/lib/exactor/operations.ex	/^  defp do_defmulticall(req_def, options) do$/;"	f
do_delete	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_delete(%ConCache{ets: ets, owner_pid: owner_pid} = cache, key) do$/;"	f
do_delete	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_delete(repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_delete	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_delete(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(_, _, granularity) when not granularity in @units,$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, a, type),      do: zero(type)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :calendar_weeks) do$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :days),         do: div(a - b, 1_000*1_000*60*60*24)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :duration), do: Duration.from_seconds(do_diff(a,b,:seconds))$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :hours),        do: div(a - b, 1_000*1_000*60*60)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :microseconds), do: a - b$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :milliseconds), do: div(a - b, 1_000)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :minutes),      do: div(a - b, 1_000*1_000*60)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :months) do$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :seconds),      do: div(a - b, 1_000*1_000)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :weeks),        do: div(a - b, 1_000*1_000*60*60*24*7)$/;"	f
do_diff	deps/timex/lib/comparable/diff.ex	/^  defp do_diff(a, b, :years) do$/;"	f
do_diff	deps/timex/lib/time/duration.ex	/^  defp do_diff(%Duration{} = t1, %Duration{} = t2) do$/;"	f
do_diff_months	deps/timex/lib/comparable/diff.ex	/^  defp do_diff_months({y,m,_}, {y,m,_}), do: 0$/;"	f
do_diff_months	deps/timex/lib/comparable/diff.ex	/^  defp do_diff_months({y1, m1, d1}, {y2, m2, d2}) when y1 <= y2 and m1 < m2 do$/;"	f
do_diff_months	deps/timex/lib/comparable/diff.ex	/^  defp do_diff_months({y1,m,d1}, {y2,m,d2}) when y1 < y2 do$/;"	f
do_diff_months	deps/timex/lib/comparable/diff.ex	/^  defp do_diff_months({y1,m1,d1}, {y2,m2,d2}) when y1 < y2 and m1 > m2 do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(channel_pid, msg, _socket) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(nil, %{event: "phx_join", topic: topic} = msg, base_socket) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(nil, msg, socket) do$/;"	f
do_dispatch	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp do_dispatch(pid, %{event: "phx_join"} = msg, socket) when is_pid(pid) do$/;"	f
do_down	deps/ecto/lib/ecto/migrator.ex	/^  defp do_down(repo, version, module, opts) do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(binary, list_size) when list_size <= 15 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(binary, list_size) when list_size <= 255 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(binary, list_size) when list_size <= 4_294_967_295 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(binary, list_size) when list_size <= 65_535 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(map, size) when size <= 15 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(map, size) when size <= 255 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(map, size) when size <= 4_294_967_295 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(map, size) when size <= 65_535 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(string, size) when size <= 15 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(string, size) when size <= 255 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(string, size) when size <= 4_294_967_295 do$/;"	f
do_encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_encode(string, size) when size <= 65_535 do$/;"	f
do_end_of_day	deps/timex/lib/timezone/timezone.ex	/^  defp do_end_of_day(%DateTime{} = dt, tz, {date, {h,_,_}} = day_end) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  defp do_escape(expr, params, vars, env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  defp do_escape(field, params, _vars, _env) when is_atom(field) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  defp do_escape({:^, _, [expr]}, params, _vars, _env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape(expr, params, _kind, vars, env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape(field, params, _kind, _vars, _env) when is_atom(field) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({:^, _, [expr]}, params, kind, _vars, _env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, expr}, params, kind, vars, env) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, field}, params, kind, _vars, _env) when is_atom(field) do$/;"	f
do_escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp do_escape({dir, {:^, _, [expr]}}, params, kind, _vars, _env) do$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :distinct), do: %{query | distinct: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :group_by), do: %{query | group_bys: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :having), do: %{query | havings: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :join), do: %{query | joins: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :limit), do: %{query | limit: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :lock), do: %{query | lock: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :offset), do: %{query | offset: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :order_by), do: %{query | order_bys: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :preload), do: %{query | preloads: [], assocs: []}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :select), do: %{query | select: nil}$/;"	f
do_exclude	deps/ecto/lib/ecto/query.ex	/^  defp do_exclude(%Ecto.Query{} = query, :where), do: %{query | wheres: []}$/;"	f
do_execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp do_execute(repo, _meta, {:cache, update, {id, prepared}}, params, mapper, opts) do$/;"	f
do_execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp do_execute(repo, _meta, {:cached, reset, {id, cached}}, params, mapper, opts) do$/;"	f
do_execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp do_execute(repo, _meta, {:nocache, {_id, prepared}}, params, mapper, opts) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(_locale, _date, [], result), do: {:ok, result}$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(locale, date, [%Directive{type: :literal, value: char} | dirs], result) when is_binary(char) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/default.ex	/^  defp do_format(locale, date, [%Directive{type: type, modifiers: mods, flags: flags, width: width} | dirs], result) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp do_format(_locale, _date, _relative, [], result),             do: {:ok, result}$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp do_format(locale, date, relative, [%Directive{type: :literal, value: char} | dirs], result) when is_binary(char) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp do_format(locale, date, relative, [%Directive{type: :relative} | dirs], result) do$/;"	f
do_format	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp do_format(locale, date, relative, [%Directive{type: type, modifiers: mods, flags: flags, width: width} | dirs], result) do$/;"	f
do_format	deps/timex/lib/format/duration/formatters/default.ex	/^  defp do_format([], str),    do: str$/;"	f
do_format	deps/timex/lib/format/duration/formatters/default.ex	/^  defp do_format([{unit,_} = component|rest], str) do$/;"	f
do_format	deps/timex/lib/format/duration/formatters/default.ex	/^  defp do_format(components), do: do_format(components, <<?P>>)$/;"	f
do_format	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp do_format([], str, _locale),$/;"	f
do_format	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp do_format([{unit, value}|rest], str, locale) do$/;"	f
do_format	deps/timex/lib/format/duration/formatters/humanized.ex	/^  defp do_format(components, locale),$/;"	f
do_gen_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_gen_migration(%{timestamp: current_timestamp} = config, name, fun) do$/;"	f
do_gen_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_gen_migration(%{timestamp: current_timestamp} = config, name, fun) do$/;"	f
do_get	deps/timex/lib/timezone/timezone.ex	/^  defp do_get("Etc\/GMT+" <> offset, _datetime, _utc_or_wall) do$/;"	f
do_get	deps/timex/lib/timezone/timezone.ex	/^  defp do_get("Etc\/GMT-" <> offset, _datetime, _utc_or_wall) do$/;"	f
do_get	deps/timex/lib/timezone/timezone.ex	/^  defp do_get(timezone, datetime, utc_or_wall \\\\ :wall)$/;"	f
do_get	deps/timex/lib/timezone/timezone.ex	/^  defp do_get(timezone, datetime, utc_or_wall) do$/;"	f
do_handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  defp do_handle_info(msg, %{mod: mod, state: state} = s) do$/;"	f
do_handshake	deps/postgrex/lib/postgrex/protocol.ex	/^  defp do_handshake(s, %{ssl: false} = status), do: startup(s, status)$/;"	f
do_handshake	deps/postgrex/lib/postgrex/protocol.ex	/^  defp do_handshake(s, %{ssl: true} = status), do: ssl(s, status)$/;"	f
do_init	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp do_init(opts) do$/;"	f
do_insert	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  defp do_insert(conn, cs, url, params, email) do$/;"	f
do_insert	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  defp do_insert(conn, cs, url, params, email) do$/;"	f
do_insert	deps/coherence/web/controllers/invitation_controller.ex	/^  defp do_insert(conn, cs, url, params, email) do$/;"	f
do_insert	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_insert(repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_insert	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_insert(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
do_insert_all	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_insert_all(_repo, _adapter, _schema, _prefix, _source, [], opts) do$/;"	f
do_insert_all	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_insert_all(repo, adapter, schema, prefix, source, rows, opts) when is_list(rows) do$/;"	f
do_latest_file_size_by_head	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_file_size_by_head({:error, error}), do: {:error, error}$/;"	f
do_latest_file_size_by_head	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_file_size_by_head({_tag, _resp_code, headers}) do$/;"	f
do_latest_file_size_by_head	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_file_size_by_head({_tag, resp_code, _headers}) when resp_code != 200, do: {:error, :did_not_get_ok_response}$/;"	f
do_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_remote_poll_date(_file_exists = false), do: {:unknown, nil}$/;"	f
do_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp do_latest_remote_poll_date(_file_exists = true) do$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, :any, _current),$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, _, current) when current in @always_tagged,$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, expected, _current),$/;"	f
do_literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp do_literal(value, expected, expected),$/;"	f
do_load	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_load(schema, data, loader) when is_atom(schema),$/;"	f
do_load	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_load(schema, data, loader) when is_list(data),$/;"	f
do_load	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_load(schema, {fields, values}, loader) when is_list(fields) and is_list(values),$/;"	f
do_load	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_load(types, data, loader) when is_map(types),$/;"	f
do_lockable	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp do_lockable(conn, _login_field, opts, false) do$/;"	f
do_lockable	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp do_lockable(conn, login_field, _, true) do$/;"	f
do_lockable	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp do_lockable(conn, _login_field, opts, false) do$/;"	f
do_lockable	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp do_lockable(conn, login_field, _, true) do$/;"	f
do_lockable	deps/coherence/web/controllers/session_controller.ex	/^  defp do_lockable(conn, _login_field, opts, false) do$/;"	f
do_lockable	deps/coherence/web/controllers/session_controller.ex	/^  defp do_lockable(conn, login_field, _, true) do$/;"	f
do_lookup_regulator	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp do_lookup_regulator(pool) do$/;"	f
do_match	deps/plug/lib/plug/router.ex	/^      defp do_match(unquote(conn), unquote(method), unquote(match), unquote(host)) when unquote(guards) do$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:any, _right), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:binary_id, :binary), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:decimal, type) when type in [:float, :integer], do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(:id, :integer), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(_, _), do: false$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(_left, :any),  do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?(type, type), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?({:array, :any}, {:embed, %{cardinality: :many}}), do: true$/;"	f
do_match?	deps/ecto/lib/ecto/type.ex	/^  defp do_match?({outer, left}, {outer, right}), do: match?(left, right)$/;"	f
do_merge_fuzzy	deps/gettext/lib/gettext/fuzzy.ex	/^  defp do_merge_fuzzy(%PluralTranslation{} = new, %PluralTranslation{} = existing),$/;"	f
do_merge_fuzzy	deps/gettext/lib/gettext/fuzzy.ex	/^  defp do_merge_fuzzy(%PluralTranslation{} = new, %Translation{} = existing),$/;"	f
do_merge_fuzzy	deps/gettext/lib/gettext/fuzzy.ex	/^  defp do_merge_fuzzy(%Translation{} = new, %PluralTranslation{} = existing),$/;"	f
do_merge_fuzzy	deps/gettext/lib/gettext/fuzzy.ex	/^  defp do_merge_fuzzy(%Translation{} = new, %Translation{} = existing),$/;"	f
do_new	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp do_new(name, start_type) do$/;"	f
do_new	deps/swoosh/lib/swoosh/email.ex	/^  defp do_new({key, value}, _email) do$/;"	f
do_new	deps/swoosh/lib/swoosh/email.ex	/^  defp do_new({key, value}, email)$/;"	f
do_overlay	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_overlay(_output_dir, invalid, _), do: {:error, {:invalid_overlay, invalid}}$/;"	f
do_overlay	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_overlay(output_dir, {:copy, from, to}, vars) when is_binary(from) and is_binary(to) do$/;"	f
do_overlay	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_overlay(output_dir, {:link, from, to}, vars) when is_binary(from) and is_binary(to) do$/;"	f
do_overlay	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_overlay(output_dir, {:mkdir, path}, vars) when is_binary(path) do$/;"	f
do_overlay	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  defp do_overlay(output_dir, {:template, tmpl_path, to}, vars) when is_binary(tmpl_path) and is_binary(to) do$/;"	f
do_parse	deps/decimal/lib/decimal.ex	/^  defp do_parse("+" <> bin) do$/;"	f
do_parse	deps/decimal/lib/decimal.ex	/^  defp do_parse("-" <> bin) do$/;"	f
do_parse	deps/decimal/lib/decimal.ex	/^  defp do_parse(bin) do$/;"	f
do_parse	deps/gettext/lib/gettext/po/parser.ex	/^  defp do_parse(translations) do$/;"	f
do_parse	deps/timex/lib/parse/datetime/parser.ex	/^  defp do_parse(str, [%Directive{:type => type}], _tokenizer)$/;"	f
do_parse	deps/timex/lib/parse/datetime/parser.ex	/^  defp do_parse(str, directives, tokenizer) do$/;"	f
do_parse_abbreviations	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_abbreviations(data, %Header{abbrev_length: len} = header, %Zone{transitions: transitions} = tzfile) do$/;"	f
do_parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_array(data, 0, _, acc), do: {Enum.reverse(acc), data}$/;"	f
do_parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_array(data, count, parser, acc) do$/;"	f
do_parse_flags	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_flags(data, %Header{utc_count: utc_count, wall_count: wall_count}, tzfile) do$/;"	f
do_parse_header	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_header(<<header :: bytes(24), rest :: binary>>) do$/;"	f
do_parse_leap_seconds	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_leap_seconds(data, %Header{leap_count: count} = header, tzfile) do$/;"	f
do_parse_transition_info	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_transition_info($/;"	f
do_parse_transition_times	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp do_parse_transition_times(data, %Header{transition_count: tx_count} = header) do$/;"	f
do_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp do_periods_for_zone(zone) do$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe([], state, acc), do: {:ok, acc, state}$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe([parser|parsers], %ParserState{status: :ok} = current, acc) do$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe(_parsers, %ParserState{} = state, acc), do: {:error, acc, state}$/;"	f
do_pipe	deps/combine/lib/combine/parsers/base.ex	/^  defp do_pipe(parsers, state), do: do_pipe(parsers, state, [])$/;"	f
do_precision	deps/decimal/lib/decimal.ex	/^  defp do_precision(sign, digits, num_digits, exp, precision, rounding) do$/;"	f
do_preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp do_preload(structs, repo, preloads, take, opts) do$/;"	f
do_push	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  defp do_push([], _delta, [], {_prev, acc}), do: Enum.reverse(acc)$/;"	f
do_push	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  defp do_push([gen | generations], delta, [gen_max | opts], {prev, acc}) do$/;"	f
do_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  defp do_put_layout(conn, false) do$/;"	f
do_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  defp do_put_layout(conn, layout) when is_binary(layout) or is_atom(layout) do$/;"	f
do_put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  defp do_put_layout(conn, {mod, layout}) when is_atom(mod) do$/;"	f
do_put_layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp do_put_layout(email, false) do$/;"	f
do_put_layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp do_put_layout(email, layout) when is_binary(layout) or is_atom(layout) do$/;"	f
do_put_layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp do_put_layout(email, {mod, layout}) when is_atom(mod) do$/;"	f
do_receive_data	deps/boltex/lib/boltex/bolt.ex	/^  defp do_receive_data(transport, port, chunk_size, options, old_data) do$/;"	f
do_receive_data	deps/boltex/lib/boltex/bolt.ex	/^  defp do_receive_data(transport, port, options) do$/;"	f
do_reduce	deps/decimal/lib/decimal.ex	/^  defp do_reduce(0, _exp) do$/;"	f
do_reduce	deps/decimal/lib/decimal.ex	/^  defp do_reduce(coef, exp) do$/;"	f
do_reduce	deps/timex/lib/interval/interval.ex	/^    defp do_reduce( state, {:suspend, acc},  fun), do: {:suspended, acc, &do_reduce(state, &1, fun)}$/;"	f
do_reduce	deps/timex/lib/interval/interval.ex	/^    defp do_reduce(_state, {:halt,    acc}, _fun), do: {:halted, acc}$/;"	f
do_reduce	deps/timex/lib/interval/interval.ex	/^    defp do_reduce({current_date, end_date, right_open, keywords}, {:cont, acc}, fun) do$/;"	f
do_reduce_kv	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp do_reduce_kv({key, value}) do$/;"	f
do_release	deps/distillery/lib/distillery/tasks/release.ex	/^  defp do_release(config, archive?: false) do$/;"	f
do_release	deps/distillery/lib/distillery/tasks/release.ex	/^  defp do_release(config, archive?: true) do$/;"	f
do_rememberable_callback	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def do_rememberable_callback(conn, id, series, token, opts) do$/;"	f
do_rememberable_callback	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def do_rememberable_callback(conn, id, series, token, opts) do$/;"	f
do_rememberable_callback	deps/coherence/web/controllers/session_controller.ex	/^  def do_rememberable_callback(conn, id, series, token, opts) do$/;"	f
do_remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp do_remove!(config, repo) do$/;"	f
do_remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp do_remove!(config, repo) do$/;"	f
do_render	deps/phoenix/lib/phoenix/controller.ex	/^  defp do_render(conn, template, format, assigns) do$/;"	f
do_render_body	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp do_render_body(email, template, format, assigns) do$/;"	f
do_round	deps/decimal/lib/decimal.ex	/^  defp do_round(sign, digits, exp, target_exp, rounding) do$/;"	f
do_round	deps/timex/lib/time/duration.ex	/^  defp do_round(value) when is_float(value),   do: Float.round(value, 6)$/;"	f
do_round	deps/timex/lib/time/duration.ex	/^  defp do_round(value) when is_integer(value), do: value$/;"	f
do_run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_run(%{confirm_once: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_run(%{installed_options: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_run(%{reinstall: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_run(%{with_migrations: true}), do: Mix.raise("--with-migrations only valid with --reinstall")$/;"	f
do_run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp do_run(config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_run(%{confirm_once: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_run(%{installed_options: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_run(%{reinstall: true} = config) do$/;"	f
do_run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_run(%{with_migrations: true}), do: Mix.raise("--with-migrations only valid with --reinstall")$/;"	f
do_run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp do_run(config) do$/;"	f
do_scope	deps/phoenix/lib/phoenix/router.ex	/^  defp do_scope(options, context) do$/;"	f
do_send	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp do_send(%{owner: owner, ref: ref} = state, status, headers, body) do$/;"	f
do_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp do_send(%{sock: {mod, sock}} = s, data, buffer) do$/;"	f
do_set	deps/timex/lib/datetime/erlang.ex	/^  defp do_set(date, options, datetime_type) do$/;"	f
do_set_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  defp do_set_ttl(state, key, :renew) do$/;"	f
do_set_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  defp do_set_ttl(state, key, ttl) do$/;"	f
do_shift	deps/timex/lib/datetime/erlang.ex	/^  defp do_shift(date, options, type) do$/;"	f
do_shift	deps/timex/lib/timezone/timezone.ex	/^  defp do_shift(%DateTime{:microsecond => us} = datetime, seconds) do$/;"	f
do_shift	deps/timex/lib/timezone/timezone.ex	/^  defp do_shift(secs_from_zero, microseconds, seconds)$/;"	f
do_shift_to_week_of_year	deps/timex/lib/parse/datetime/parser.ex	/^  defp do_shift_to_week_of_year(%{year: y} = datetime, weeks) do$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:load_module, _}, {:load_module, _, _}), do: true$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:load_module, _}, {:update, _, _, _}),   do: true$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:load_module, a}, {:load_module, b}),    do: a > b$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:update, _, _}, {:load_module, _, _}),   do: false$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:update, _, _}, {:update, _, _, _}),     do: true$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(_, {:update, a, _}, {:update, b, _}),        do: a > b$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(mods, a, b) do$/;"	f
do_sort_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp do_sort_instructions(mods, am, bm, ad, bd) do$/;"	f
do_stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  def do_stream(repo, _, {:cached, _, {_, cached}}, params, mapper, opts) do$/;"	f
do_stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  def do_stream(repo, _meta, {:cache, _, {_, prepared}}, params, mapper, opts) do$/;"	f
do_stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  def do_stream(repo, _meta, {:nocache, {_id, prepared}}, params, mapper, opts) do$/;"	f
do_sync_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp do_sync_recv(s, status, res, buffer) do$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(0, _parser, state, acc), do: {:ok, acc, state}$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(count, parser, %ParserState{status: :ok} = current, acc) do$/;"	f
do_times	deps/combine/lib/combine/parsers/base.ex	/^  defp do_times(count, parser, state), do: do_times(count, parser, state, [])$/;"	f
do_transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp do_transaction(pool, opts, fun) do$/;"	f
do_transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp do_transform_struct(value, keys, as, options) do$/;"	f
do_up	deps/ecto/lib/ecto/migrator.ex	/^  defp do_up(repo, version, module, opts) do$/;"	f
do_update	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_update(_, _, {:error, _} = error, _), do: error$/;"	f
do_update	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_update(_cache, _key, invalid_return_value, _exists) do$/;"	f
do_update	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_update(cache, key, {:ok, %ConCache.Item{} = new_value}, _) do$/;"	f
do_update	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_update(cache, key, {:ok, new_value}, false) do$/;"	f
do_update	deps/con_cache/lib/con_cache/operations.ex	/^  defp do_update(cache, key, {:ok, new_value}, true) do$/;"	f
do_update	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_update(repo, _adapter, %Changeset{valid?: false} = changeset, _opts) do$/;"	f
do_update	deps/ecto/lib/ecto/repo/schema.ex	/^  defp do_update(repo, adapter, %Changeset{valid?: true} = changeset, opts) do$/;"	f
do_valid_login	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp do_valid_login(nil, _conn, _parms, _opts),$/;"	f
do_valid_login	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp do_valid_login(user, conn, params, opts) do$/;"	f
do_valid_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp do_valid_login(nil, _conn, _parms, _opts),$/;"	f
do_valid_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp do_valid_login(user, conn, params, opts) do$/;"	f
do_valid_login	deps/coherence/web/controllers/session_controller.ex	/^  defp do_valid_login(nil, _conn, _parms, _opts),$/;"	f
do_valid_login	deps/coherence/web/controllers/session_controller.ex	/^  defp do_valid_login(user, conn, params, opts) do$/;"	f
doc!	deps/ecto/lib/ecto/query/api.ex	/^  defp doc!(_) do$/;"	f
docs	deps/connection/mix.exs	/^  defp docs do$/;"	f
docs	deps/db_connection/mix.exs	/^  defp docs do$/;"	f
docs	deps/distillery/mix.exs	/^  defp docs do$/;"	f
docs	deps/timex/mix.exs	/^  defp docs do$/;"	f
does not create	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "does not create <%= schema.singular %> and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not create	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "does not create <%= schema.singular %> and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not create resource and renders errors when data is invalid	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "does not create resource and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not create resource and renders errors when data is invalid	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "does not create resource and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not create site and renders errors when data is invalid	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "does not create site and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not generate files for full	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "does not generate files for full" do$/;"	t
does not generate files for full	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "does not generate files for full" do$/;"	t
does not generate for existing model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "does not generate for existing model" do$/;"	t
does not generate for existing model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "does not generate for existing model" do$/;"	t
does not require password on update	deps/coherence/test/schema_test.exs	/^  test "does not require password on update" do$/;"	t
does not update chosen	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "does not update chosen <%= schema.singular %> and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not update chosen	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "does not update chosen <%= schema.singular %> and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not update chosen resource and renders errors when data is invalid	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "does not update chosen resource and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not update chosen resource and renders errors when data is invalid	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "does not update chosen resource and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not update chosen site and renders errors when data is invalid	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "does not update chosen site and renders errors when data is invalid", %{conn: conn} do$/;"	t
does not validate invalid series login_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^    test "does not validate invalid series login_cookie", meta do$/;"	t
does not validate invalid token login_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^    test "does not validate invalid token login_cookie", meta do$/;"	t
dominates?	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def dominates?(c1, c2) do$/;"	f
dominates?	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def dominates?(c1, c2) when map_size(c1) < map_size(c2), do: false$/;"	f
dominates_or_equal?	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def dominates_or_equal?(c1, _c2) when c1 == %{}, do: false$/;"	f
dominates_or_equal?	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def dominates_or_equal?(c1, c2) do$/;"	f
dominates_or_equal?	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def dominates_or_equal?(c1, c2) when c1 == %{} and c2 == %{}, do: true$/;"	f
done_lock	deps/db_connection/lib/db_connection/connection.ex	/^  defp done_lock(_, nil), do: :ok$/;"	f
done_lock	deps/db_connection/lib/db_connection/connection.ex	/^  defp done_lock(regulator, lock) do$/;"	f
down	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp down(reason, %{client: nil} = state) do$/;"	f
down	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp down(reason, %{conn_module: nil} = state) do$/;"	f
down	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp down(reason, state) do$/;"	f
down	deps/ecto/integration_test/cases/migrator.exs	/^      def down do$/;"	f
down	deps/ecto/integration_test/cases/migrator.exs	/^    def down do$/;"	f
down	deps/ecto/integration_test/sql/alter.exs	/^    def down do$/;"	f
down	deps/ecto/integration_test/sql/migration.exs	/^    def down do$/;"	f
down	deps/ecto/lib/ecto/migration.ex	/^        def down do$/;"	f
down	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def down(repo, version, prefix) do$/;"	f
down	deps/ecto/lib/ecto/migrator.ex	/^        def down do$/;"	f
down	deps/ecto/lib/ecto/migrator.ex	/^  def down(repo, version, module, opts \\\\ []) do$/;"	f
down	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  def down(gc_server, pid) when is_atom(gc_server) do$/;"	f
down	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp down(state, remote_replica) do$/;"	f
down	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  defp down(replica), do: %Replica{replica | status: :down}$/;"	f
down	deps/postgrex/lib/postgrex/type_server.ex	/^  defp down(%{waiting: waiting} = state, ref) do$/;"	f
down_log	deps/db_connection/lib/db_connection/connection.ex	/^  defp down_log(:normal), do: :nolog$/;"	f
down_log	deps/db_connection/lib/db_connection/connection.ex	/^  defp down_log(:shutdown), do: :nolog$/;"	f
down_log	deps/db_connection/lib/db_connection/connection.ex	/^  defp down_log(_), do: :log$/;"	f
down_log	deps/db_connection/lib/db_connection/connection.ex	/^  defp down_log({:shutdown, _}), do: :nolog$/;"	f
down_replicas	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp down_replicas(%State{replicas: replicas})  do$/;"	f
downcase	deps/mime/lib/mime.ex	/^  defp downcase(<<>>, acc), do: acc$/;"	f
downcase	deps/mime/lib/mime.ex	/^  defp downcase(<<h, t::binary>>, acc) when h in ?A..?Z, do: downcase(t, <<acc::binary, h+32>>)$/;"	f
downcase	deps/mime/lib/mime.ex	/^  defp downcase(<<h, t::binary>>, acc), do: downcase(t, <<acc::binary, h>>)$/;"	f
downcase_char	deps/plug/lib/plug/conn/utils.ex	/^  defp downcase_char(char) when char in @upper, do: char + 32$/;"	f
downcase_char	deps/plug/lib/plug/conn/utils.ex	/^  defp downcase_char(char), do: char$/;"	f
download_new	deps/tzdata/lib/tzdata/data_loader.ex	/^  def download_new(url\\\\@download_url) do$/;"	f
draw_path	deps/bolt_sips/lib/bolt_sips/types.ex	/^    defp draw_path(_n, _r, _s, _i, [], acc, _ln, _nn), do: acc$/;"	f
draw_path	deps/bolt_sips/lib/bolt_sips/types.ex	/^    defp draw_path(n, r, s, i, [h|t] = _rel_index, acc, ln, _nn) do$/;"	f
drop	deps/ecto/lib/ecto/migration.ex	/^  def drop(%{} = index_or_table_or_constraint) do$/;"	f
drop_database	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^  defp drop_database(repo, opts) do$/;"	f
drop_if_exists	deps/ecto/lib/ecto/migration.ex	/^  def drop_if_exists(%{} = index_or_table) do$/;"	f
drop_meta	deps/ecto/lib/ecto.ex	/^  defp drop_meta(%{} = attrs), do: Map.drop(attrs, [:__struct__, :__meta__])$/;"	f
drop_meta	deps/ecto/lib/ecto.ex	/^  defp drop_meta([_|_] = attrs), do: Keyword.drop(attrs, [:__struct__, :__meta__])$/;"	f
drop_monitor	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp drop_monitor(%{monitors: monitors} = state, pid) do$/;"	f
drop_presence	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp drop_presence(state, pid) do$/;"	f
drop_presence	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp drop_presence(state, pid, topic, key) do$/;"	f
drop_session	deps/plug/lib/plug/session.ex	/^  defp drop_session(sid, conn, config) do$/;"	f
drop_unique	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp drop_unique(info) do$/;"	f
dry run password reset	deps/ecto/lib/ecto/multi.ex	/^      test "dry run password reset" do$/;"	t
dummy_checkpw	deps/comeonin/lib/comeonin/base.ex	/^      defdelegate dummy_checkpw(opts \\\\ []), to: module, as: :no_user_verify$/;"	d
dump	deps/ecto/integration_test/support/types.exs	/^  def dump(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^        def dump(%Date{day: day, month: month, year: year}) do$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(%DateTime{year: year, month: month, day: day, time_zone: "Etc\/UTC",$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(%Date{year: year, month: month, day: day}) do$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(%NaiveDateTime{year: year, month: month, day: day,$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(%Time{hour: hour, minute: minute, second: second, microsecond: {usec, _}}) do$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(list), do: dump(list, [])$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(value) do$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  def dump(value)$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  defp dump([], acc) do$/;"	f
dump	deps/ecto/lib/ecto/data_type.ex	/^  defp dump([h|t], acc) do$/;"	f
dump	deps/ecto/lib/ecto/date_time.ex	/^  def dump(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
dump	deps/ecto/lib/ecto/date_time.ex	/^  def dump(%Ecto.DateTime{year: year, month: month, day: day,$/;"	f
dump	deps/ecto/lib/ecto/date_time.ex	/^  def dump(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
dump	deps/ecto/lib/ecto/date_time.ex	/^  def dump(%Ecto.Time{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
dump	deps/ecto/lib/ecto/date_time.ex	/^  def dump(_), do: :error$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^        def dump(_), do: :error$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^        def dump(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:any, value, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:binary_id, value, _dumper) when is_binary(value) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:date, term, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:decimal, term, _dumper) when is_number(term) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:naive_datetime, term, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:time, term, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(:utc_datetime, term, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(_type, nil, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(type, value, _dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump(type, value, dumper \\\\ &dump\/2)$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:array, type}, value, dumper) when is_list(value) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:embed, embed}, value, dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:in, type}, value, dumper) do$/;"	f
dump	deps/ecto/lib/ecto/type.ex	/^  def dump({:map, type}, value, dumper) when is_map(value) do$/;"	f
dump	deps/ecto/lib/ecto/uuid.ex	/^  def dump(<< a1, a2, a3, a4, a5, a6, a7, a8, ?-,$/;"	f
dump	deps/ecto/lib/ecto/uuid.ex	/^  def dump(_), do: :error$/;"	f
dump	deps/gettext/lib/gettext/po.ex	/^  def dump(%PO{headers: hs, translations: ts, top_of_the_file_comments: cs}) do$/;"	f
dump	deps/gettext/lib/gettext/po.ex	/^  def dump(po)$/;"	f
dump	deps/timex_ecto/lib/types/date.ex	/^  def dump(%DateTime{} = datetime) do$/;"	f
dump	deps/timex_ecto/lib/types/date.ex	/^  def dump(datetime) do$/;"	f
dump	deps/timex_ecto/lib/types/datetime.ex	/^  def dump(%DateTime{} = datetime) do$/;"	f
dump	deps/timex_ecto/lib/types/datetime.ex	/^  def dump(datetime) do$/;"	f
dump	deps/timex_ecto/lib/types/datetimetz.ex	/^  def dump(%DateTime{microsecond: {us, _}, time_zone: tzname} = d) do$/;"	f
dump	deps/timex_ecto/lib/types/time.ex	/^  def dump(%Duration{} = d) do$/;"	f
dump	deps/timex_ecto/lib/types/time.ex	/^  def dump(_), do: :error$/;"	f
dump	deps/timex_ecto/lib/types/time.ex	/^  def dump({_mega, _sec, _micro} = timestamp) do$/;"	f
dump!	deps/ecto/lib/ecto/association.ex	/^  defp dump!(action, join_through, struct, field, _) when is_atom(join_through) do$/;"	f
dump!	deps/ecto/lib/ecto/association.ex	/^  defp dump!(action, join_through, struct, field, adapter) when is_binary(join_through) do$/;"	f
dump_changes!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp dump_changes!(action, changes, schema, extra, dumper, adapter) do$/;"	f
dump_comments	deps/gettext/lib/gettext/po.ex	/^  defp dump_comments(comments) do$/;"	f
dump_date	deps/ecto/lib/ecto/type.ex	/^  defp dump_date(%Date{year: year, month: month, day: day}),$/;"	f
dump_date	deps/ecto/lib/ecto/type.ex	/^  defp dump_date(%{__struct__: _} = struct),$/;"	f
dump_date	deps/ecto/lib/ecto/type.ex	/^  defp dump_date(_),$/;"	f
dump_embed	deps/ecto/lib/ecto/adapters/sql.ex	/^  def dump_embed(type, value) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(%{cardinality: :many, related: schema, field: field},$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(%{cardinality: :one, related: schema, field: field},$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(_embed, _value, _fun) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(_field, schema, %{__struct__: schema} = struct, types, dumper) do$/;"	f
dump_embed	deps/ecto/lib/ecto/type.ex	/^  defp dump_embed(field, _schema, value, _types, _fun) do$/;"	f
dump_field!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp dump_field!(action, schema, field, type, value, adapter) do$/;"	f
dump_fields!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp dump_fields!(action, schema, kw, dumper, adapter) do$/;"	f
dump_flags	deps/gettext/lib/gettext/po.ex	/^  defp dump_flags(flags) do$/;"	f
dump_headers	deps/gettext/lib/gettext/po.ex	/^  defp dump_headers([]) do$/;"	f
dump_headers	deps/gettext/lib/gettext/po.ex	/^  defp dump_headers([first | _] = headers) when first != "" do$/;"	f
dump_headers	deps/gettext/lib/gettext/po.ex	/^  defp dump_headers(headers) do$/;"	f
dump_kw_and_strings	deps/gettext/lib/gettext/po.ex	/^  defp dump_kw_and_strings(keyword, [first | rest]) do$/;"	f
dump_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_naive_datetime(%NaiveDateTime{year: year, month: month, day: day,$/;"	f
dump_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_naive_datetime(%{__struct__: _} = struct),$/;"	f
dump_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_naive_datetime(_),$/;"	f
dump_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp dump_param(adapter, type, v) do$/;"	f
dump_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp dump_param(kind, query, expr, v, type, adapter) do$/;"	f
dump_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp dump_param(kind, type, v, adapter) do$/;"	f
dump_plural_msgstr	deps/gettext/lib/gettext/po.ex	/^  defp dump_plural_msgstr(msgstr) do$/;"	f
dump_references	deps/gettext/lib/gettext/po.ex	/^  defp dump_references([]) do$/;"	f
dump_references	deps/gettext/lib/gettext/po.ex	/^  defp dump_references(references) do$/;"	f
dump_tagged_file	deps/gettext/lib/gettext/extractor.ex	/^  defp dump_tagged_file({path, {:new, new_po}}),$/;"	f
dump_tagged_file	deps/gettext/lib/gettext/extractor.ex	/^  defp dump_tagged_file({path, {tag, po}}) when tag in [:unmerged, :merged],$/;"	f
dump_time	deps/ecto/lib/ecto/type.ex	/^  defp dump_time(%Time{hour: hour, minute: minute, second: second, microsecond: {microsecond, _}}),$/;"	f
dump_time	deps/ecto/lib/ecto/type.ex	/^  defp dump_time(%{__struct__: _} = struct),$/;"	f
dump_time	deps/ecto/lib/ecto/type.ex	/^  defp dump_time(_),$/;"	f
dump_top_comments	deps/gettext/lib/gettext/po.ex	/^  defp dump_top_comments(top_comments) when is_list(top_comments) do$/;"	f
dump_translation	deps/gettext/lib/gettext/po.ex	/^  defp dump_translation(%PluralTranslation{} = t) do$/;"	f
dump_translation	deps/gettext/lib/gettext/po.ex	/^  defp dump_translation(%Translation{} = t) do$/;"	f
dump_translations	deps/gettext/lib/gettext/po.ex	/^  defp dump_translations(translations) do$/;"	f
dump_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_utc_datetime(%DateTime{year: year, month: month, day: day, time_zone: "Etc\/UTC",$/;"	f
dump_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_utc_datetime(%{__struct__: _} = struct),$/;"	f
dump_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp dump_utc_datetime(_),$/;"	f
dumpers	deps/ecto/lib/ecto/adapter.ex	/^      def dumpers(:binary_id, type), do: [type, Ecto.UUID]$/;"	f
dumpers	deps/ecto/lib/ecto/adapter.ex	/^      def dumpers(:boolean, type), do: [type, &bool_encode\/1]$/;"	f
dumpers	deps/ecto/lib/ecto/adapter.ex	/^      def dumpers(_primitive, type), do: [type]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def dumpers(:binary_id, type),       do: [type, Ecto.UUID]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def dumpers(_, type),                do: [type]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def dumpers({:embed, _} = type, _),  do: [&Ecto.Adapters.SQL.dump_embed(type, &1)]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def dumpers({:in, sub}, {:in, sub}), do: [{:array, sub}]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/sql.ex	/^      def dumpers(:binary_id, type),      do: [type, Ecto.UUID]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/sql.ex	/^      def dumpers(_, type),               do: [type]$/;"	f
dumpers	deps/ecto/lib/ecto/adapters/sql.ex	/^      def dumpers({:embed, _} = type, _), do: [&Ecto.Adapters.SQL.dump_embed(type, &1)]$/;"	f
duration	deps/timex/lib/interval/interval.ex	/^  def duration(%__MODULE__{from: from, until: until}, :duration) do$/;"	f
duration	deps/timex/lib/interval/interval.ex	/^  def duration(%__MODULE__{from: from, until: until}, unit) do$/;"	f
dynamic	deps/ecto/lib/ecto/query.ex	/^  defmacro dynamic(binding \\\\ [], expr) do$/;"	a
dynamic_clauses	deps/gettext/lib/gettext/compiler.ex	/^  def dynamic_clauses do$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(0),  do: ?0$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(1),  do: ?1$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(10), do: ?a$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(11), do: ?b$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(12), do: ?c$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(13), do: ?d$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(14), do: ?e$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(15), do: ?f$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(2),  do: ?2$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(3),  do: ?3$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(4),  do: ?4$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(5),  do: ?5$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(6),  do: ?6$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(7),  do: ?7$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(8),  do: ?8$/;"	f
e	deps/ecto/lib/ecto/uuid.ex	/^  defp e(9),  do: ?9$/;"	f
each_frame	deps/plug/lib/plug/debugger.ex	/^  defp each_frame(entry, index, root, editor) do$/;"	f
each_shard	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp each_shard(config, func) do$/;"	f
ecto_cast_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_cast_to_db(:id, _query), do: "unsigned"$/;"	f
ecto_cast_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_cast_to_db(:integer, _query), do: "unsigned"$/;"	f
ecto_cast_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_cast_to_db(:string, _query), do: "char"$/;"	f
ecto_cast_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_cast_to_db(type, query), do: ecto_to_db(type, query)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:bigserial, _query),      do: "bigint unsigned not null auto_increment"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:binary, _query),         do: "blob"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:binary_id, _query),      do: "binary(16)"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:float, _query),          do: "double"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:id, _query),             do: "integer"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:map, _query),            do: "text"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:naive_datetime, _query), do: "datetime"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:serial, _query),         do: "bigint unsigned not null auto_increment"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:string, _query),         do: "varchar"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:utc_datetime, _query),   do: "datetime"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(:uuid, _query),           do: "binary(16)" # MySQL does not support uuid$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(other, _query),           do: Atom.to_string(other)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db(type, query \\\\ nil)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db({:array, _}, query),$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp ecto_to_db({:map, _}, _query),       do: "text"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:bigserial),      do: "bigserial"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:binary),         do: "bytea"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:binary_id),      do: "uuid"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:id),             do: "integer"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:map),            do: Application.fetch_env!(:ecto, :postgres_map_type)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:naive_datetime), do: "timestamp"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:serial),         do: "serial"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:string),         do: "varchar"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(:utc_datetime),   do: "timestamp"$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db(other),           do: Atom.to_string(other)$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db({:array, t}),     do: [ecto_to_db(t), ?[, ?]]$/;"	f
ecto_to_db	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp ecto_to_db({:map, _}),       do: Application.fetch_env!(:ecto, :postgres_map_type)$/;"	f
edit	deps/coherence/priv/templates/coh.install/controllers/coherence/confirmation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coh.install/controllers/coherence/password_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def edit(conn, _) do$/;"	f
edit	deps/coherence/priv/templates/coh.install/controllers/coherence/unlock_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coherence.install/controllers/coherence/confirmation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coherence.install/controllers/coherence/password_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def edit(conn, _) do$/;"	f
edit	deps/coherence/priv/templates/coherence.install/controllers/coherence/unlock_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/test/support/dummy_controller.exs	/^  def edit(conn, _) do$/;"	f
edit	deps/coherence/web/controllers/confirmation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/web/controllers/invitation_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/web/controllers/password_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/coherence/web/controllers/registration_controller.ex	/^  def edit(conn, _) do$/;"	f
edit	deps/coherence/web/controllers/unlock_controller.ex	/^  def edit(conn, params) do$/;"	f
edit	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def edit(conn, %{"id" => id}) do$/;"	f
edit	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def edit(conn, %{"id" => id}) do$/;"	f
elapsed	deps/timex/lib/time/duration.ex	/^  defdelegate elapsed(duration, ref \\\\ nil, type \\\\ nil), to: __MODULE__, as: :diff$/;"	d
elixirc_paths	apps/flexcility/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	apps/flexcility/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
elixirc_paths	apps/flexcility_web/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	apps/flexcility_web/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
elixirc_paths	deps/boltex/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	deps/boltex/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
elixirc_paths	deps/coherence/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "web", "test\/support"]$/;"	f
elixirc_paths	deps/coherence/mix.exs	/^  defp elixirc_paths(_),     do: ["lib", "web"]$/;"	f
elixirc_paths	deps/phoenix_pubsub/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	deps/phoenix_pubsub/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
elixirc_paths	deps/swoosh/mix.exs	/^  defp elixirc_paths(:test), do: ["lib", "test\/support"]$/;"	f
elixirc_paths	deps/swoosh/mix.exs	/^  defp elixirc_paths(_),     do: ["lib"]$/;"	f
email	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def email() do$/;"	f
email is available in template	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "email is available in template", %{email: email} do$/;"	t
email_from	deps/coherence/lib/coherence/config.ex	/^  def email_from do$/;"	f
email_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def email_input(form, field, opts \\\\ []) do$/;"	f
email_item	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp email_item(email), do: %{email: email}$/;"	f
email_item	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp email_item({"", email}), do: %{email: email}$/;"	f
email_item	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp email_item({name, email}), do: %{email: email, name: name}$/;"	f
email_reply_to	deps/coherence/lib/coherence/config.ex	/^  def email_reply_to do$/;"	f
embed	deps/ecto/lib/ecto/schema.ex	/^  defp embed(mod, cardinality, name, schema, opts) do$/;"	f
embedded_schema	deps/ecto/lib/ecto/schema.ex	/^  defmacro embedded_schema([do: block]) do$/;"	a
embeds many	deps/ecto/integration_test/cases/type.exs	/^  test "embeds many" do$/;"	t
embeds one	deps/ecto/integration_test/cases/type.exs	/^  test "embeds one" do$/;"	t
embeds_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_many(name, schema, do: block) do$/;"	a
embeds_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_many(name, schema, opts \\\\ [])$/;"	a
embeds_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_many(name, schema, opts) do$/;"	a
embeds_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_many(name, schema, opts, do: block) do$/;"	a
embeds_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_one(name, schema, do: block) do$/;"	a
embeds_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_one(name, schema, opts \\\\ [])$/;"	a
embeds_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_one(name, schema, opts) do$/;"	a
embeds_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro embeds_one(name, schema, opts, do: block) do$/;"	a
empty	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty(%{cardinality: cardinality}), do: cardinality_to_empty(cardinality)$/;"	f
empty	deps/timex/lib/datetime/helpers.ex	/^  def empty() do$/;"	f
empty?	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def empty?(%__MODULE__{owner: nil, pending_values: pending_values}) do$/;"	f
empty?	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def empty?(_), do: false$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: :many}, []), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: :many}, changes), do: Enum.all?(changes, & &1.action in [:replace, :delete])$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: :one}, nil), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{cardinality: _}, %NotLoaded{}), do: true$/;"	f
empty?	deps/ecto/lib/ecto/changeset/relation.ex	/^  def empty?(%{}, _), do: false$/;"	f
empty_rules_map	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp empty_rules_map(from_initial_pass) do$/;"	f
empty_string_if_root	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp empty_string_if_root("\/"), do: ""$/;"	f
empty_string_if_root	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp empty_string_if_root(other), do: other$/;"	f
enable	deps/gettext/lib/gettext/extractor.ex	/^  def enable do$/;"	f
enable	deps/gettext/lib/gettext/extractor_agent.ex	/^  def enable do$/;"	f
encode	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  def encode(words), do: encode_l(words)$/;"	f
encode	deps/boltex/lib/boltex/pack_stream.ex	/^  def encode(item), do: Boltex.PackStream.Encoder.encode(item)$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(%{__struct__: _} = item) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(entitiy)$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(false), do: << 0xC2 >>$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(integer) when integer in -16..127 do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(integer) when integer in @int16_low  or integer in @int16_high do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(integer) when integer in @int32_low  or integer in @int32_high do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(integer) when integer in @int64_low  or integer in @int64_high do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(integer) when integer in @int8 do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(item) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(list) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(map) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(nil),   do: << 0xC0 >>$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(number) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(other) when is_atom(other) do$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(string), do: do_encode(string, byte_size(string))$/;"	f
encode	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  def encode(true),  do: << 0xC3 >>$/;"	f
encode	deps/db_connection/lib/db_connection.ex	/^  defp encode(call, query, params, opts) do$/;"	f
encode	deps/db_connection/lib/db_connection/query.ex	/^  def encode(query, params, opts)$/;"	f
encode	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode(_) do$/;"	f
encode	deps/ecto/lib/ecto/date_time.ex	/^    def encode(dt, _opts), do: <<?", @for.to_iso8601(dt)::binary, ?">>$/;"	f
encode	deps/ecto/lib/ecto/poison.ex	/^    def encode(%{__owner__: owner, __field__: field}, _) do$/;"	f
encode	deps/ecto/lib/ecto/poison.ex	/^    def encode(decimal, _opts), do: <<?", Decimal.to_string(decimal, :normal)::binary, ?">>$/;"	f
encode	deps/ecto/lib/ecto/uuid.ex	/^  defp encode(<< a1::4, a2::4, a3::4, a4::4,$/;"	f
encode	deps/phoenix/lib/phoenix/view.ex	/^  defp encode(content, template) do$/;"	f
encode	deps/plug/lib/plug/conn/cookies.ex	/^  def encode(key, opts \\\\ %{}) when is_map(opts) do$/;"	f
encode	deps/plug/lib/plug/conn/query.ex	/^  def encode(kv, encoder \\\\ &to_string\/1) do$/;"	f
encode	deps/plug/lib/plug/session/cookie.ex	/^  defp encode(term, :external_term_format) do$/;"	f
encode	deps/plug/lib/plug/session/cookie.ex	/^  defp encode(term, serializer) do$/;"	f
encode	deps/poison/lib/poison.ex	/^  def encode(value, options \\\\ []) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^        def encode(struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^    def encode(dict, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^    def encode(dict, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^    def encode(dict, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^    def encode(value, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode("", _), do: "\\"\\""$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(%{__struct__: _} = struct, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode([], _), do: "[]"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(atom, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(collection, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(false, _), do: "false"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(float, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(integer, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, false, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(list, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _) when map_size(map) < 1, do: "{}"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, _, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(map, true, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(nil, _),   do: "null"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(string, options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(true, _),  do: "true"$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, _options) do$/;"	f
encode	deps/poison/lib/poison/encoder.ex	/^  def encode(value, options)$/;"	f
encode	deps/postgrex/lib/postgrex/extension.ex	/^        def encode(_state) do$/;"	f
encode	deps/postgrex/lib/postgrex/extension.ex	/^      def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def encode(list, elem_oid, encoder) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp encode([], ndims, lengths, _encoder) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp encode([head|tail]=list, ndims, lengths, encoder) when is_list(head) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp encode(list, ndims, lengths, encoder) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/bit_string.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/bool.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/box.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/cidr.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/circle.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode(:elixir) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode(:postgrex) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/float4.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/float8.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/inet.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/int2.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/int4.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/int8.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/interval.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def encode({library, _}) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def encode({library, _}) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/line.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/line_segment.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/macaddr.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/name.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/oid.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/path.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/point.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/polygon.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def encode(%Postgrex.Range{lower_inclusive: lower_inc,$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def encode(_, _, <<-1::int32>>, <<-1::int32>>) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/raw.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/tid.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def encode(:elixir) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def encode(:postgrex) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def encode(:elixir) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def encode(:postgrex) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def encode(:elixir) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def encode(:postgrex) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def encode(:elixir) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def encode(:postgrex) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/uuid.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/void_binary.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^  def encode(_) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_bind(name_port: port, name_stat: stat, param_formats: param_formats,$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_cancel_request(pid: pid, key: key)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_close(type: type, name: name)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_copy_data(data: data)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_copy_done()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_copy_fail(message: msg)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_describe(type: type, name: name)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_execute(name_port: port, max_rows: rows)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_flush()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_parse(name: name, statement: statement, type_oids: oids)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_password(pass: pass)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_query(statement: statement)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_ssl_request()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_startup(params: params)) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_sync()) do$/;"	f
encode	deps/postgrex/lib/postgrex/messages.ex	/^  defp encode(msg_terminate()) do$/;"	f
encode	deps/postgrex/lib/postgrex/parameters.ex	/^  def encode(_, nil, _), do: nil$/;"	f
encode	deps/postgrex/lib/postgrex/query.ex	/^  def encode(%Postgrex.Query{types: nil} = query, _params, _) do$/;"	f
encode	deps/postgrex/lib/postgrex/query.ex	/^  def encode(query, params, _) do$/;"	f
encode	deps/postgrex/lib/postgrex/stream.ex	/^  def encode(%Copy{ref: ref}, %Postgrex.CopyData{data: data, ref: ref}, _) do$/;"	f
encode	deps/postgrex/lib/postgrex/stream.ex	/^  def encode(%Copy{ref: ref}, %Postgrex.CopyDone{ref: ref}, _) do$/;"	f
encode	deps/postgrex/lib/postgrex/stream.ex	/^  def encode(%Stream{query: query}, params, opts) do$/;"	f
encode	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode(config, define_opts) do$/;"	f
encode!	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode!(arg) do$/;"	f
encode!	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def encode!({{year, month, day}, {hour, min, sec, usec}})$/;"	f
encode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def encode!(%Message{} = msg), do: msg$/;"	f
encode!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def encode!(%Reply{} = reply), do: reply$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def encode!(%Message{} = msg), do: msg$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def encode!(%Reply{} = reply) do$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def encode!(%Message{} = msg) do$/;"	f
encode!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def encode!(%Reply{} = reply) do$/;"	f
encode!	deps/poison/lib/poison.ex	/^  def encode!(value, options \\\\ []) do$/;"	f
encode_credentials	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  def encode_credentials(user, password), do: Base.encode64("#{user}:#{password}")$/;"	f
encode_digits	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp encode_digits(coef, digits) do$/;"	f
encode_digits	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp encode_digits(coef, digits) when coef < 10000 do$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode_elixir(%Date{year: year, month: month, day: day})$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode_elixir(%Date{} = date) do$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def encode_elixir(%Time{hour: hour, minute: min, second: sec, microsecond: {usec, _}})$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def encode_elixir(%NaiveDateTime{year: year, month: month, day: day,$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def encode_elixir(%DateTime{utc_offset: 0, std_offset: 0} = datetime) do$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def encode_elixir(%DateTime{} = datetime) do$/;"	f
encode_elixir	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def encode_elixir(%Time{hour: hour, minute: min, second: sec, microsecond: {usec, _}})$/;"	f
encode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_extension(extension, clause) do$/;"	f
encode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_extension(extension, pattern, body) do$/;"	f
encode_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_extension(extension, pattern, guard, body) do$/;"	f
encode_float	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp encode_float(float, scale) do$/;"	f
encode_hstore	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def encode_hstore(hstore_map) do$/;"	f
encode_hstore_key	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp encode_hstore_key(key) when is_binary(key) do$/;"	f
encode_hstore_key	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp encode_hstore_key(key) when is_nil(key) do$/;"	f
encode_hstore_value	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp encode_hstore_value(nil) do$/;"	f
encode_hstore_value	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  defp encode_hstore_value(value) when is_binary(value) do$/;"	f
encode_inline	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_inline(extension, :super_binary) do$/;"	f
encode_inline	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_inline(extension, _) do$/;"	f
encode_key	deps/plug/lib/plug/conn/query.ex	/^  defp encode_key(item) do$/;"	f
encode_kv	deps/boltex/lib/boltex/pack_stream/encoder.ex	/^  defp encode_kv(map) do$/;"	f
encode_kv	deps/plug/lib/plug/conn/query.ex	/^  defp encode_kv(kv, parent_field, encoder) do$/;"	f
encode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp encode_l([]), do: []$/;"	f
encode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp encode_l([a,b,c|ls]) do$/;"	f
encode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp encode_l([a,b]) do$/;"	f
encode_l	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  defp encode_l([a]) do$/;"	f
encode_legacy_token	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp encode_legacy_token(sign_secret, iv, cipher_text) do$/;"	f
encode_lexemes	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_lexemes(values) do$/;"	f
encode_list	deps/postgrex/lib/postgrex/type_module.ex	/^      def encode_list(list, type) do$/;"	f
encode_list	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_list([], _, acc) do$/;"	f
encode_list	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_list([value | rest], type, acc) do$/;"	f
encode_max_age	deps/plug/lib/plug/conn/cookies.ex	/^  defp encode_max_age(max_age, opts) do$/;"	f
encode_messages	deps/boltex/lib/boltex/bolt.ex	/^  def encode_messages(messages) do$/;"	f
encode_msg	deps/postgrex/lib/postgrex/messages.ex	/^  def encode_msg(msg) do$/;"	f
encode_msg	deps/postgrex/lib/postgrex/utils.ex	/^  def encode_msg(%Postgrex.TypeInfo{type: type}, observed, expected) do$/;"	f
encode_msg	deps/postgrex/lib/postgrex/utils.ex	/^  def encode_msg(observed, expected) do$/;"	f
encode_name	deps/poison/lib/poison/encoder.ex	/^      defp encode_name(value) do$/;"	f
encode_name	deps/poison/lib/poison/encoder.ex	/^      defp encode_name(value) when is_binary(value) do$/;"	f
encode_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_null(extension, :super_binary) do$/;"	f
encode_null	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_null(extension, _) do$/;"	f
encode_numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  def encode_numeric(%Decimal{coef: coef}) when coef in [:qNaN, :sNaN] do$/;"	f
encode_numeric	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  def encode_numeric(%Decimal{sign: sign, coef: coef, exp: exp}) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, %{__struct__: struct} = map, encoder) when is_atom(struct) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, nil, _encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(field, value, encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, %{} = map, encoder) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, list, encoder) when is_list(list) and is_tuple(hd(list)) do$/;"	f
encode_pair	deps/plug/lib/plug/conn/query.ex	/^  defp encode_pair(parent_field, list, encoder) when is_list(list) do$/;"	f
encode_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def encode_param(str), do: URI.encode(str, &URI.char_unreserved?\/1)$/;"	f
encode_params	deps/postgrex/lib/postgrex/type_module.ex	/^      def encode_params(params, types) do$/;"	f
encode_params	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_params([], [], encoded), do: Enum.reverse(encoded)$/;"	f
encode_params	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_params([param | params], [type | types], encoded) do$/;"	f
encode_params	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_params(params, _, _) when is_list(params), do: :error$/;"	f
encode_params	deps/postgrex/lib/postgrex/types.ex	/^  def encode_params(params, types, {mod, _}) do$/;"	f
encode_point	deps/postgrex/lib/postgrex/extensions/point.ex	/^  def encode_point(%Postgrex.Point{x: x, y: y}, _) do$/;"	f
encode_point	deps/postgrex/lib/postgrex/extensions/point.ex	/^  def encode_point(other, wanted) do$/;"	f
encode_positions	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_positions(%Postgrex.Lexeme{word: word, positions: positions}) do$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode_postgrex(%Postgrex.Date{year: year, month: month, day: day})$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def encode_postgrex(%Postgrex.Date{} = date) do$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def encode_postgrex(%Postgrex.Time{hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def encode_postgrex(%Postgrex.Timestamp{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def encode_postgrex(%Postgrex.Timestamp{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_postgrex	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def encode_postgrex(%Postgrex.Time{hour: hour, min: min, sec: sec, usec: usec})$/;"	f
encode_reply	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp encode_reply(reply, state) do$/;"	f
encode_sign	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp encode_sign(-1), do: 0x4000$/;"	f
encode_sign	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp encode_sign(1), do: 0x0000$/;"	f
encode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_super(extension, clause) do$/;"	f
encode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_super(extension, pattern, sub_oids, sub_types, body) do$/;"	f
encode_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_super(extension, pattern, sub_oids, sub_types, guard, body) do$/;"	f
encode_to_iodata	deps/poison/lib/poison.ex	/^  def encode_to_iodata(value, options \\\\ []) do$/;"	f
encode_to_iodata!	deps/phoenix/lib/phoenix/template/html.ex	/^  def encode_to_iodata!(body) when is_binary(body), do: Plug.HTML.html_escape(body)$/;"	f
encode_to_iodata!	deps/phoenix/lib/phoenix/template/html.ex	/^  def encode_to_iodata!({:safe, body}), do: body$/;"	f
encode_to_iodata!	deps/poison/lib/poison.ex	/^  def encode_to_iodata!(value, options \\\\ []) do$/;"	f
encode_token	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp encode_token(protected, encrypted_key, iv, cipher_text, cipher_tag) do$/;"	f
encode_token	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp encode_token(plain_text, signature)$/;"	f
encode_tsvector	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  def encode_tsvector(values) do$/;"	f
encode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      def encode_tuple(tuple, oids, types) do$/;"	f
encode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_tuple(tuple, _, [], [], _) when is_tuple(tuple), do: :error$/;"	f
encode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_tuple(tuple, n, [], [], acc) when tuple_size(tuple) < n do$/;"	f
encode_tuple	deps/postgrex/lib/postgrex/type_module.ex	/^      defp encode_tuple(tuple, n, [oid | oids], [type | types], acc) do$/;"	f
encode_type	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_type(extension, :super_binary, clause) do$/;"	f
encode_type	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_type(extension, _, clause) do$/;"	f
encode_value	deps/plug/lib/plug/conn/query.ex	/^  defp encode_value(item, encoder) do$/;"	f
encode_value	deps/postgrex/lib/postgrex/type_module.ex	/^      def encode_value(value, unquote(extension)) do$/;"	f
encode_value	deps/postgrex/lib/postgrex/type_module.ex	/^      def encode_value(value, {unquote(extension), sub_oids, sub_types}) do$/;"	f
encode_value	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_value(extension, :super_binary) do$/;"	f
encode_value	deps/postgrex/lib/postgrex/type_module.ex	/^  defp encode_value(extension, _) do$/;"	f
encode_weight_binary	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_weight_binary(:A) do 3 end$/;"	f
encode_weight_binary	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_weight_binary(:B) do 2 end$/;"	f
encode_weight_binary	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_weight_binary(:C) do 1 end$/;"	f
encode_weight_binary	deps/postgrex/lib/postgrex/extensions/tsvector.ex	/^  defp encode_weight_binary(nil) do 0 end$/;"	f
encrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def encrypt(message, secret, sign_secret)$/;"	f
encrypt_and_sign	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def encrypt_and_sign(message, secret, sign_secret, cipher \\\\ nil)$/;"	f
encrypt_legacy	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp encrypt_legacy(message, cipher, secret, iv) do$/;"	f
encrypt_legacy	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp encrypt_legacy(message, cipher, secret, iv)$/;"	f
encrypt_password	deps/coherence/lib/coherence/schema.ex	/^        def encrypt_password(password) do$/;"	f
end_command	deps/ecto/lib/ecto/migration/runner.ex	/^  def end_command do$/;"	f
end_of_day	deps/timex/lib/date/date.ex	/^  def end_of_day(%Date{} = date), do: date$/;"	f
end_of_day	deps/timex/lib/datetime/datetime.ex	/^  def end_of_day(%DateTime{} = datetime) do$/;"	f
end_of_day	deps/timex/lib/datetime/erlang.ex	/^  def end_of_day(_), do: {:error, :invalid_date}$/;"	f
end_of_day	deps/timex/lib/datetime/erlang.ex	/^  def end_of_day({y,m,d} = date) when is_date(y,m,d), do: date$/;"	f
end_of_day	deps/timex/lib/datetime/erlang.ex	/^  def end_of_day({{y,m,d}=date,_}) when is_date(y,m,d),$/;"	f
end_of_day	deps/timex/lib/datetime/map.ex	/^  def end_of_day(map),                do: convert!(map, :end_of_day)$/;"	f
end_of_day	deps/timex/lib/datetime/naivedatetime.ex	/^  def end_of_day(%NaiveDateTime{microsecond: {_, _precision}} = datetime) do$/;"	f
end_of_day	deps/timex/lib/protocol.ex	/^  def end_of_day(%{__struct__: _} = d), do: Timex.end_of_day(Map.from_struct(d))$/;"	f
end_of_day	deps/timex/lib/protocol.ex	/^  def end_of_day(_datetime), do: {:error, :invalid_date}$/;"	f
end_of_day	deps/timex/lib/protocol.ex	/^  def end_of_day(datetime)$/;"	f
end_of_day	deps/timex/lib/timex.ex	/^  defdelegate end_of_day(datetime), to: Timex.Protocol$/;"	d
end_of_day	deps/timex/lib/timezone/timezone.ex	/^  def end_of_day(%DateTime{time_zone: tz} = dt) do$/;"	f
end_of_month	deps/timex/lib/date/date.ex	/^  def end_of_month(%Date{} = date),$/;"	f
end_of_month	deps/timex/lib/datetime/datetime.ex	/^  def end_of_month(%DateTime{year: year, month: month, time_zone: tz} = date),$/;"	f
end_of_month	deps/timex/lib/datetime/erlang.ex	/^  def end_of_month(_), do: {:error, :invalid_date}$/;"	f
end_of_month	deps/timex/lib/datetime/erlang.ex	/^  def end_of_month({y,m,d} = date) when is_date(y,m,d),$/;"	f
end_of_month	deps/timex/lib/datetime/erlang.ex	/^  def end_of_month({{y,m,d},_} = date) when is_date(y,m,d),$/;"	f
end_of_month	deps/timex/lib/datetime/map.ex	/^  def end_of_month(map),              do: convert!(map, :end_of_month)$/;"	f
end_of_month	deps/timex/lib/datetime/naivedatetime.ex	/^  def end_of_month(%NaiveDateTime{} = date),$/;"	f
end_of_month	deps/timex/lib/protocol.ex	/^  def end_of_month(%{__struct__: _} = d), do: Timex.end_of_month(Map.from_struct(d))$/;"	f
end_of_month	deps/timex/lib/protocol.ex	/^  def end_of_month(_datetime), do: {:error, :invalid_date}$/;"	f
end_of_month	deps/timex/lib/protocol.ex	/^  def end_of_month(datetime)$/;"	f
end_of_month	deps/timex/lib/timex.ex	/^  def end_of_month(_, _),$/;"	f
end_of_month	deps/timex/lib/timex.ex	/^  def end_of_month(year, month) when is_year(year) and is_month(month),$/;"	f
end_of_month	deps/timex/lib/timex.ex	/^  defdelegate end_of_month(datetime), to: Timex.Protocol$/;"	d
end_of_quarter	deps/timex/lib/date/date.ex	/^  def end_of_quarter(%Date{month: month} = date) do$/;"	f
end_of_quarter	deps/timex/lib/datetime/datetime.ex	/^  def end_of_quarter(%DateTime{year: year, month: month, time_zone: tz}) do$/;"	f
end_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def end_of_quarter(_), do: {:error, :invalid_date}$/;"	f
end_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def end_of_quarter({y,m,d}) when is_date(y,m,d) do$/;"	f
end_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def end_of_quarter({{y,m,d},{h,mm,s,_us}}) when is_datetime(y,m,d,h,mm,s) do$/;"	f
end_of_quarter	deps/timex/lib/datetime/erlang.ex	/^  def end_of_quarter({{y,m,d},{h,mm,s} = time}) when is_datetime(y,m,d,h,mm,s) do$/;"	f
end_of_quarter	deps/timex/lib/datetime/map.ex	/^  def end_of_quarter(map),            do: convert!(map, :end_of_quarter)$/;"	f
end_of_quarter	deps/timex/lib/datetime/naivedatetime.ex	/^  def end_of_quarter(%NaiveDateTime{month: month} = date) do$/;"	f
end_of_quarter	deps/timex/lib/protocol.ex	/^  def end_of_quarter(%{__struct__: _} = d), do: Timex.end_of_quarter(Map.from_struct(d))$/;"	f
end_of_quarter	deps/timex/lib/protocol.ex	/^  def end_of_quarter(_datetime), do: {:error, :invalid_date}$/;"	f
end_of_quarter	deps/timex/lib/protocol.ex	/^  def end_of_quarter(datetime)$/;"	f
end_of_quarter	deps/timex/lib/timex.ex	/^  def end_of_quarter(_, _), do: {:error, :invalid_year_or_month}$/;"	f
end_of_quarter	deps/timex/lib/timex.ex	/^  def end_of_quarter(year, month) when is_year(year) and is_month(month) do$/;"	f
end_of_quarter	deps/timex/lib/timex.ex	/^  defdelegate end_of_quarter(datetime), to: Timex.Protocol$/;"	d
end_of_week	deps/timex/lib/date/date.ex	/^  def end_of_week(%Date{} = date, weekstart) do$/;"	f
end_of_week	deps/timex/lib/datetime/datetime.ex	/^  def end_of_week(%DateTime{} = date, weekstart) do$/;"	f
end_of_week	deps/timex/lib/datetime/erlang.ex	/^  def end_of_week(_,_), do: {:error, :invalid_date}$/;"	f
end_of_week	deps/timex/lib/datetime/erlang.ex	/^  def end_of_week({y,m,d} = date, weekstart) when is_date(y,m,d) do$/;"	f
end_of_week	deps/timex/lib/datetime/erlang.ex	/^  def end_of_week({{y,m,d},_} = date, weekstart) when is_date(y,m,d) do$/;"	f
end_of_week	deps/timex/lib/datetime/map.ex	/^  def end_of_week(map, start),        do: convert(map, :end_of_week, [start])$/;"	f
end_of_week	deps/timex/lib/datetime/naivedatetime.ex	/^  def end_of_week(%NaiveDateTime{} = date, weekstart) do$/;"	f
end_of_week	deps/timex/lib/protocol.ex	/^  def end_of_week(%{__struct__: _} = d, weekstart), do: Timex.end_of_week(Map.from_struct(d), weekstart)$/;"	f
end_of_week	deps/timex/lib/protocol.ex	/^  def end_of_week(_datetime, _weekstart), do: {:error, :invalid_date}$/;"	f
end_of_week	deps/timex/lib/protocol.ex	/^  def end_of_week(datetime, weekstart)$/;"	f
end_of_week	deps/timex/lib/timex.ex	/^  defdelegate end_of_week(datetime, weekstart \\\\ 1), to: Timex.Protocol$/;"	d
end_of_year	deps/timex/lib/date/date.ex	/^  def end_of_year(%Date{} = date),$/;"	f
end_of_year	deps/timex/lib/datetime/datetime.ex	/^  def end_of_year(%DateTime{year: year, time_zone: tz}),$/;"	f
end_of_year	deps/timex/lib/datetime/erlang.ex	/^  def end_of_year(_), do: {:error, :invalid_date}$/;"	f
end_of_year	deps/timex/lib/datetime/erlang.ex	/^  def end_of_year({y,m,d}) when is_date(y,m,d),$/;"	f
end_of_year	deps/timex/lib/datetime/erlang.ex	/^  def end_of_year({{y,m,d},_}) when is_date(y,m,d),$/;"	f
end_of_year	deps/timex/lib/datetime/map.ex	/^  def end_of_year(map),               do: convert!(map, :end_of_year)$/;"	f
end_of_year	deps/timex/lib/datetime/naivedatetime.ex	/^  def end_of_year(%NaiveDateTime{} = date),$/;"	f
end_of_year	deps/timex/lib/protocol.ex	/^  def end_of_year(%{__struct__: _} = d), do: Timex.end_of_year(Map.from_struct(d))$/;"	f
end_of_year	deps/timex/lib/protocol.ex	/^  def end_of_year(_datetime), do: {:error, :invalid_date}$/;"	f
end_of_year	deps/timex/lib/protocol.ex	/^  def end_of_year(datetime)$/;"	f
end_of_year	deps/timex/lib/timex.ex	/^  def end_of_year(datetime), do: Timex.Protocol.end_of_year(datetime)$/;"	f
end_of_year	deps/timex/lib/timex.ex	/^  def end_of_year(year) when is_year(year),$/;"	f
endpoint	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp endpoint(config), do: config[:endpoint] || @endpoint$/;"	f
endpoint_module	deps/phoenix/lib/phoenix/controller.ex	/^  def endpoint_module(conn), do: conn.private.phoenix_endpoint$/;"	f
ends_in	deps/gettext/lib/gettext/plural.ex	/^  defmacrop ends_in(n, digits) do$/;"	a
enforces password	deps/coherence/test/schema_test.exs	/^  test "enforces password" do$/;"	t
engine_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp engine_expr(storage_engine),$/;"	f
engine_for	deps/phoenix/lib/phoenix/template/eex_engine.ex	/^  defp engine_for(name) do$/;"	f
engines	deps/phoenix/lib/phoenix/template.ex	/^  def engines do$/;"	f
ensure_accepted_mimes	deps/plug/lib/plug/parsers.ex	/^  defp ensure_accepted_mimes(conn, _type, _subtype, ["*\/*"]), do: conn$/;"	f
ensure_accepted_mimes	deps/plug/lib/plug/parsers.ex	/^  defp ensure_accepted_mimes(conn, type, subtype, pass) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection.ex	/^  def ensure_all_started(opts, type \\\\ :temporary) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection/connection.ex	/^  def ensure_all_started(_opts, _type) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection/ownership.ex	/^  def ensure_all_started(opts, type) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection/poolboy.ex	/^  def ensure_all_started(_opts, type) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection/sojourn.ex	/^  def ensure_all_started(_opts, type) do$/;"	f
ensure_all_started	deps/db_connection/lib/db_connection/task.ex	/^  def ensure_all_started(_opts, _type) do$/;"	f
ensure_all_started	deps/ecto/lib/ecto/adapters/sql.ex	/^      def ensure_all_started(repo, type) do$/;"	f
ensure_all_started	deps/ecto/lib/ecto/adapters/sql.ex	/^  def ensure_all_started(adapter, repo, type) do$/;"	f
ensure_all_started	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def ensure_all_started(_opts, _type) do$/;"	f
ensure_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp ensure_csrf_token(conn, csrf_token) do$/;"	f
ensure_dir_exists!	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp ensure_dir_exists!(path) do$/;"	f
ensure_empty_msgstr!	deps/gettext/lib/gettext/extractor.ex	/^  defp ensure_empty_msgstr!(%PluralTranslation{msgstr: %{0 => str0, 1 => str1}} = t) do$/;"	f
ensure_empty_msgstr!	deps/gettext/lib/gettext/extractor.ex	/^  defp ensure_empty_msgstr!(%PluralTranslation{} = t) do$/;"	f
ensure_empty_msgstr!	deps/gettext/lib/gettext/extractor.ex	/^  defp ensure_empty_msgstr!(%Translation{msgstr: msgstr} = t) do$/;"	f
ensure_field!	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp ensure_field!(_), do: true$/;"	f
ensure_field!	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp ensure_field!({var, _, _}) when var != :^ do$/;"	f
ensure_field_exists!	deps/ecto/lib/ecto/changeset.ex	/^  defp ensure_field_exists!(%Changeset{types: types, data: data}, field) do$/;"	f
ensure_file_exists!	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp ensure_file_exists!(path) do$/;"	f
ensure_implements	deps/ecto/lib/mix/ecto.ex	/^  def ensure_implements(module, behaviour, message) do$/;"	f
ensure_migrations_path	deps/ecto/lib/mix/ecto.ex	/^  def ensure_migrations_path(repo) do$/;"	f
ensure_no_duplication	deps/ecto/lib/ecto/migrator.ex	/^  defp ensure_no_duplication([]), do: :ok$/;"	f
ensure_no_duplication	deps/ecto/lib/ecto/migrator.ex	/^  defp ensure_no_duplication([{version, name, _} | t]) do$/;"	f
ensure_pool	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp ensure_pool(mod, opts) do$/;"	f
ensure_recycled	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def ensure_recycled(conn) do$/;"	f
ensure_repo	deps/ecto/lib/mix/ecto.ex	/^  def ensure_repo(repo, args) do$/;"	f
ensure_resp_content_type	deps/phoenix/lib/phoenix/controller.ex	/^  defp ensure_resp_content_type(%{resp_headers: resp_headers} = conn, content_type) do$/;"	f
ensure_same_origin_and_csrf_token!	deps/plug/lib/plug/csrf_protection.ex	/^  defp ensure_same_origin_and_csrf_token!(conn, csrf_token) do$/;"	f
ensure_schema_migrations_table!	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def ensure_schema_migrations_table!(repo, prefix) do$/;"	f
ensure_started	deps/ecto/lib/mix/ecto.ex	/^  def ensure_started(repo, opts) do$/;"	f
ensure_tmp	deps/plug/lib/plug/upload.ex	/^  defp ensure_tmp() do$/;"	f
enter_connect	deps/connection/lib/connection.ex	/^  defp enter_connect(mod, info, mod_state, name, opts) do$/;"	f
enter_loop	deps/connection/lib/connection.ex	/^  def enter_loop(mod, backoff, mod_state, name, opts, :hibernate) do$/;"	f
enter_loop	deps/connection/lib/connection.ex	/^  def enter_loop(mod, backoff, mod_state, name, opts, timeout) do$/;"	f
enter_loop	deps/connection/lib/connection.ex	/^  def enter_loop(mod, backoff, mod_state, name, opts, timeout)$/;"	f
enter_stop	deps/connection/lib/connection.ex	/^  defp enter_stop(_, _, _, :normal, {:stop, :normal}), do: exit(:normal)$/;"	f
enter_stop	deps/connection/lib/connection.ex	/^  defp enter_stop(_, _, _, :shutdown, {:stop, :shutdown}), do: exit(:shutdown)$/;"	f
enter_stop	deps/connection/lib/connection.ex	/^  defp enter_stop(_, _, _, {:shutdown, reason} = shutdown,$/;"	f
enter_stop	deps/connection/lib/connection.ex	/^  defp enter_stop(mod, mod_state, name, reason, {_, reason2}) do$/;"	f
enter_terminate	deps/connection/lib/connection.ex	/^  defp enter_terminate(mod, mod_state, name, reason, report_reason) do$/;"	f
entry_result	deps/db_connection/lib/db_connection.ex	/^  defp entry_result(other), do: other$/;"	f
entry_result	deps/db_connection/lib/db_connection.ex	/^  defp entry_result({kind, reason, stack})$/;"	f
env	deps/tzdata/mix.exs	/^  defp env do$/;"	f
env_run	deps/db_connection/mix.exs	/^  defp env_run(env, args) do$/;"	f
env_run	deps/ecto/mix.exs	/^  defp env_run(env, args) do$/;"	f
env_specific_deps	deps/bolt_sips/mix.exs	/^  defp env_specific_deps do$/;"	f
environment	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro environment(name, do: block) do$/;"	a
eof_impl	deps/combine/lib/combine/parsers/base.ex	/^  defp eof_impl(%ParserState{status: :ok, line: line, column: col} = state) do$/;"	f
epoch	deps/timex/lib/time/duration.ex	/^  def epoch() do$/;"	f
epoch	deps/timex/lib/time/duration.ex	/^  def epoch(type) do$/;"	f
epoch	deps/timex/lib/timex.ex	/^  def epoch(), do: %Date{year: 1970, month: 1, day: 1}$/;"	f
equal?	deps/decimal/lib/decimal.ex	/^  def equal?(num1, num2) do$/;"	f
equal?	deps/timex/lib/timex.ex	/^  def equal?(a, a, _granularity), do: true$/;"	f
equal?	deps/timex/lib/timex.ex	/^  def equal?(a, a, granularity \\\\ :seconds)$/;"	f
equal?	deps/timex/lib/timex.ex	/^  def equal?(a, b, granularity) do$/;"	f
erl_date	deps/postgrex/lib/postgrex/extensions/date.ex	/^  defp erl_date(days) do$/;"	f
erl_load	deps/ecto/lib/ecto/date_time.ex	/^  defp erl_load({{year, month, day}, {hour, min, sec, usec}}) do$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date(:max), do: :max$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date(:min), do: :min$/;"	f
erlang_datetime_to_boundary_date	deps/timex/lib/timezone/timezone.ex	/^  defp erlang_datetime_to_boundary_date({{y, m, d}, _} = date) do$/;"	f
error	deps/decimal/lib/decimal.ex	/^  defmacrop error(flags, reason, result, context \\\\ nil) do$/;"	a
error	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def error(message), do: log(:error, colorize("==> #{message}", @error_color))$/;"	f
error	deps/ecto/lib/ecto/multi.ex	/^  def error(multi, name, value) do$/;"	f
error	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp error(field) do$/;"	f
error	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  defp error(field) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp error!(nil, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp error!(query, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp error!(nil, message) do$/;"	f
error!	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp error!(query, message) do$/;"	f
error!	deps/ecto/lib/ecto/query/builder.ex	/^  def error!(message) when is_binary(message) do$/;"	f
error!	deps/ecto/lib/ecto/query/planner.ex	/^  defp error!(query, expr, message) do$/;"	f
error!	deps/ecto/lib/ecto/query/planner.ex	/^  defp error!(query, message) do$/;"	f
error_data	deps/ecto/lib/ecto/schema.ex	/^  defp error_data(%{__struct__: atom}) do$/;"	f
error_data	deps/ecto/lib/ecto/schema.ex	/^  defp error_data(other) when is_map(other) do$/;"	f
errors_on	apps/flexcility/test/support/data_case.ex	/^  def errors_on(changeset) do$/;"	f
errors_on	deps/coherence/test/support/model_case.exs	/^  def errors_on(model, data) do$/;"	f
erts_version	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def erts_version, do: "#{:erlang.system_info(:version)}"$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(binary, type, params_acc, vars, _env) when is_binary(binary),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(boolean, type, params_acc, vars, _env) when is_boolean(boolean),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(expr, type, params_acc, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(list, _type, params_acc, vars, env) when is_list(list),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(list, {:array, type}, params_acc, vars, env) when is_list(list),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(nil, _type, params_acc, _vars, _env),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(number, type, params_acc, vars, _env) when is_number(number),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape(other, _type, _params_acc, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:-, _, [number]}, type, params_acc, vars, _env) when is_number(number),$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:<<>>, _, args} = expr, type, params_acc, vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:=, _, _} = expr, _type, _params_acc, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:^, _, [arg]}, type, {params, acc}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:ago, meta, [count, interval]}, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:count, _, [arg, :distinct]}, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:date_add, _, [date, count, interval]} = expr, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:datetime_add, _, [datetime, count, interval]} = expr, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:field, _, [{var, _, context}, field]}, _type, {params, acc}, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [query]}, _type, params_acc, vars, env) when is_list(query) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [query|frags]}, _type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:fragment, _, [{:^, _, [var]} = _expr]}, _type, params_acc, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:from_now, meta, [count, interval]}, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:in, _, [left, right]} = expr, type, params_acc, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:in, _, [left, right]} = expr, type, params_acc, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({:type, _, [{:^, _, [arg]}, type]}, _type, {params, acc}, vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({comp_op, _, [left, right]} = expr, type, params_acc, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, [_, []]} = sigil, type, params_acc, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, args} = expr, type, params_acc, vars, env) when is_atom(name) and is_list(args) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({name, _, context} = var, _type, _params_acc, _vars, _env) when is_atom(name) and is_atom(context) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({op, _, _}, _type, _params_acc, _vars, _env) when op in ~w(|| && !)a do$/;"	f
escape	deps/ecto/lib/ecto/query/builder.ex	/^  def escape({{:., _, [{var, _, context}, field]}, _, []}, _type, {params, acc}, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def escape(expr, _vars, _env) when is_boolean(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def escape(expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/distinct.ex	/^  def escape({:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def escape(_kind, [], _binding, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def escape(_kind, expr, _binding, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def escape(kind, expr, binding, vars, env) when is_list(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/from.ex	/^  def escape(query) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/from.ex	/^  def escape({:in, _, [var, query]}) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def escape(expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def escape({:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape(join, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape(string, _vars, _env) when is_binary(string) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:__aliases__, _, _} = module, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:assoc, _, [{var, _, context}, field]}, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:fragment, _, [_|_]} = expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:in, _, [{var, _, context}, expr]}, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({:subquery, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({string, atom}, _vars, _env) when is_binary(string) and is_atom(atom) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/join.ex	/^  def escape({string, {:__aliases__, _, _} = module}, _vars, _env) when is_binary(string) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def escape(lock) when is_binary(lock), do: lock$/;"	f
escape	deps/ecto/lib/ecto/query/builder/lock.ex	/^  def escape(other) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def escape(kind, expr, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def escape(kind, {:^, _, [expr]}, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def escape(preloads, vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(atom, _mode, preloads, assocs, _vars) when is_atom(atom) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(list, mode, preloads, assocs, vars) when is_list(list) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape(other, _mode, _preloads, _assocs, _vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape({:^, _, [inner]}, _mode, preloads, assocs, _vars) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  def escape(other, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape(expr, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape(list, params_take, vars, env) when is_list(list) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:%, _, [name, map]}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:%{}, _, [{:|, _, [data, pairs]}]}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:%{}, _, pairs}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:merge, _, [left, right]}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:type, _, [{:fragment, _, [_ | _]} = expr, type]}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:type, _, [{agg, _, [_ | _]} = expr, type]}, params_take, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:type, _, [{{:., _, [{var, _, context}, field]}, _, []} = expr, type]},$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({:{}, _, list}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({left, right}, params_take, vars, env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({tag, _, [{var, _, context}, fields]}, {params, take}, vars, env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape({var, _, context}, params_take, vars, _env)$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape(expr, _vars, _env) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape(expr, vars, env) when is_list(expr) do$/;"	f
escape	deps/ecto/lib/ecto/query/builder/update.ex	/^  def escape({:^, _, [v]}, _vars, _env) do$/;"	f
escape	deps/gettext/lib/gettext/po.ex	/^  defp escape(str) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^    defp escape(<<unquote(char)>> <> rest, mode) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape("", _), do: []$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<?\/ :: utf8>> <> rest, :html_safe) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :html_safe) do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :javascript) when char in [0x2028, 0x2029] do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char > 0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, :unicode) when char in 0xA0..0xFFFF do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char :: utf8>> <> rest, mode) when char in 0x80..0x9F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(<<char>> <> rest, mode) when char <= 0x1F or char == 0x7F do$/;"	f
escape	deps/poison/lib/poison/encoder.ex	/^  defp escape(string, mode) do$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({bind, _ix}),$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({{var, _, context}, ix}) when is_atom(var) and is_atom(context),$/;"	f
escape_bind	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_bind({{var, _} = tuple, _}) when is_atom(var),$/;"	f
escape_binding	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_binding(_query, bind) do$/;"	f
escape_binding	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_binding(query, binding) when is_list(binding) do$/;"	f
escape_call	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_call({name, _, args}, type, params, vars, env) do$/;"	f
escape_char	deps/gettext/lib/gettext/po.ex	/^  defp escape_char(?"),   do: ~S(\\")$/;"	f
escape_char	deps/gettext/lib/gettext/po.ex	/^  defp escape_char(?\\n),  do: ~S(\\n)$/;"	f
escape_char	deps/gettext/lib/gettext/po.ex	/^  defp escape_char(?\\r),  do: ~S(\\r)$/;"	f
escape_char	deps/gettext/lib/gettext/po.ex	/^  defp escape_char(?\\t),  do: ~S(\\t)$/;"	f
escape_char	deps/gettext/lib/gettext/po.ex	/^  defp escape_char(char), do: <<char>>$/;"	f
escape_char	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp escape_char(?"), do: ?"$/;"	f
escape_char	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp escape_char(?\\\\), do: ?\\\\$/;"	f
escape_char	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp escape_char(?n), do: ?\\n$/;"	f
escape_char	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp escape_char(?r), do: ?\\r$/;"	f
escape_char	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp escape_char(?t), do: ?\\t$/;"	f
escape_char	deps/plug/lib/plug/html.ex	/^    defp escape_char(unquote(match)), do: unquote(insert)$/;"	f
escape_char	deps/plug/lib/plug/html.ex	/^  defp escape_char(char), do: char$/;"	f
escape_date	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_date(expr, params_acc, vars, env) do$/;"	f
escape_date	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_date({:^, meta, [expr]}, params_acc, vars, env) do$/;"	f
escape_datetime	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_datetime(expr, params_acc, vars, env) do$/;"	f
escape_datetime	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_datetime({:^, meta, [expr]}, params_acc, vars, env) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each(other, mode, {preloads, assocs}, vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, list}, _mode, {preloads, assocs}, vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {:^, _, [inner]}}, _mode, {preloads, assocs}, _vars) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {var, _, context}}, mode, {preloads, assocs}, vars) when is_atom(context) do$/;"	f
escape_each	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_each({key, {{var, _, context}, list}}, mode, {preloads, assocs}, vars) when is_atom(context) do$/;"	f
escape_expansion	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_expansion(expr, _type, params_take, vars, env) do$/;"	f
escape_field	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_field(var, field, vars) do$/;"	f
escape_field	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_field(key, kw, params, vars, env) do$/;"	f
escape_fields	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_fields(expr, tag, env) do$/;"	f
escape_fields	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_fields({:^, _, [interpolated]}, tag, _env) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, [{_, _}|_] = exprs}, type, params_acc, vars, env) when is_atom(key) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, _expr}, _type, _params_acc, _vars, _env) do$/;"	f
escape_fragment	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_fragment({key, expr}, type, params_acc, vars, env) when is_atom(key) do$/;"	f
escape_interval	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_interval(count, interval, params_acc, vars, env) do$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  def escape_javascript(data) when is_binary(data) do$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  def escape_javascript({:safe, data}) do$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<"<\/", t::binary>>, acc),$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<"\\r\\n", t::binary>>, acc),$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<0x2028::utf8, t::binary>>, acc),$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<0x2029::utf8, t::binary>>, acc),$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<>>, acc),$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<h, t::binary>>, acc) when h in [?", ?', ?\\\\],$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<h, t::binary>>, acc) when h in [?\\r, ?\\n],$/;"	f
escape_javascript	deps/phoenix_html/lib/phoenix_html.ex	/^  defp escape_javascript(<<h, t::binary>>, acc),$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key(atom) when is_atom(atom) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key(other) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/preload.ex	/^  defp escape_key({:^, _, [expr]}) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_key(k, params_take, _vars, _env) when is_atom(k) do$/;"	f
escape_key	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_key(k, params_take, vars, env) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([], compile, runtime, params, _vars, _env) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([{k, v}|t], compile, runtime, params, vars, env) when is_atom(k) and is_list(v) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op([{k, {:^, _, [v]}}|t], compile, runtime, params, vars, env) when is_atom(k) do$/;"	f
escape_op	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp escape_op(expr, _compile, _runtime, _params, _vars, _env) do$/;"	f
escape_options	deps/exactor/lib/exactor/operations.ex	/^  defp escape_options(options) do$/;"	f
escape_pairs	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_pairs(pairs, params_take, vars, env) do$/;"	f
escape_params	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_params(map) do$/;"	f
escape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_query(%Query{} = query),$/;"	f
escape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp escape_query(other),$/;"	f
escape_string	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp escape_string(value) when is_binary(value) do$/;"	f
escape_string	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp escape_string(value) when is_binary(value) do$/;"	f
escape_var	deps/ecto/lib/ecto/query/builder.ex	/^  def escape_var(var, vars) do$/;"	f
escape_with_type	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp escape_with_type(expr, type, params_take, vars, env) do$/;"	f
etag_for_path	deps/plug/lib/plug/static.ex	/^  defp etag_for_path(file_info, et_generation, path) do$/;"	f
ets	deps/con_cache/lib/con_cache.ex	/^  def ets(cache_id), do: Operations.ets(Owner.cache(cache_id))$/;"	f
ets	deps/con_cache/lib/con_cache/operations.ex	/^  def ets(%ConCache{ets: ets}), do: ets$/;"	f
ets_file_name_for_release_version	deps/tzdata/lib/tzdata/data_builder.ex	/^  def ets_file_name_for_release_version(release_version) do$/;"	f
ets_table_name_for_release_version	deps/tzdata/lib/tzdata/data_builder.ex	/^  def ets_table_name_for_release_version(release_version) do$/;"	f
eval_from	deps/phoenix/lib/mix/phoenix.ex	/^  def eval_from(apps, source_file_path, binding) do$/;"	f
events_to_instrumenters	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp events_to_instrumenters(instrumenters) do$/;"	f
exception	deps/boltex/lib/boltex/error.ex	/^  def exception(%{"message" => message, "code" => code}, pid, function) do$/;"	f
exception	deps/boltex/lib/boltex/error.ex	/^  def exception(message, pid, function) do$/;"	f
exception	deps/boltex/lib/boltex/error.ex	/^  def exception({:error, :closed}, pid, function) do$/;"	f
exception	deps/db_connection/lib/db_connection/connection.ex	/^  def exception(message), do: %DBConnection.ConnectionError{message: message}$/;"	f
exception	deps/db_connection/lib/db_connection/ownership.ex	/^  def exception(message), do: %DBConnection.OwnershipError{message: message}$/;"	f
exception	deps/db_connection/lib/db_connection/sojourn.ex	/^  def exception(message), do: %DBConnection.SojournError{message: message}$/;"	f
exception	deps/decimal/lib/decimal.ex	/^    def exception(opts) do$/;"	f
exception	deps/ecto/lib/ecto/exceptions.ex	/^  def exception(opts) do$/;"	f
exception	deps/gettext/lib/gettext/plural.ex	/^    def exception(locale) when is_binary(locale) do$/;"	f
exception	deps/gettext/lib/gettext/po/exceptions.ex	/^  def exception(opts) do$/;"	f
exception	deps/phoenix/lib/phoenix/exceptions.ex	/^  def exception([key: value]) do$/;"	f
exception	deps/phoenix/lib/phoenix/exceptions.ex	/^  def exception(opts) do$/;"	f
exception	deps/phoenix/lib/phoenix/router.ex	/^    def exception(opts) do$/;"	f
exception	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^    def exception(msg) do$/;"	f
exception	deps/poison/lib/poison/parser.ex	/^  def exception(opts) do$/;"	f
exception	deps/postgrex/lib/postgrex/error.ex	/^  def exception([postgres: fields]) do$/;"	f
exception	deps/postgrex/lib/postgrex/error.ex	/^  def exception(arg) do$/;"	f
exception	deps/timex/lib/format/format_error.ex	/^  def exception([message: message]) do$/;"	f
exception	deps/timex/lib/interval/interval.ex	/^    def exception([message: message]) do$/;"	f
exception	deps/timex/lib/parse/parse_error.ex	/^  def exception([message: message]) do$/;"	f
exclude	deps/ecto/lib/ecto/query.ex	/^  def exclude(%Ecto.Query{} = query, field), do: do_exclude(query, field)$/;"	f
exclude	deps/ecto/lib/ecto/query.ex	/^  def exclude(query, field), do: do_exclude(Ecto.Queryable.to_query(query), field)$/;"	f
exclusion_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def exclusion_constraint(changeset, field, opts \\\\ []) do$/;"	f
exec	deps/con_cache/lib/con_cache/lock.ex	/^  def exec(server, id, timeout \\\\ 5000, fun) do$/;"	f
execute	deps/db_connection/lib/db_connection.ex	/^  def execute(conn, query, params, opts \\\\ []) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute(conn, %{} = query, params, opts) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute(conn, sql, params, opts) when is_binary(sql) or is_list(sql) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute(conn, %{} = query, params, opts) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute(conn, sql, params, opts) when is_binary(sql) or is_list(sql) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/sql.ex	/^      def execute(repo, meta, query, params, process, opts) do$/;"	f
execute	deps/ecto/lib/ecto/adapters/sql.ex	/^  def execute(repo, meta, prepared, params, mapper, opts) do$/;"	f
execute	deps/ecto/lib/ecto/migration.ex	/^  def execute(command) when is_binary(command) or is_list(command) do$/;"	f
execute	deps/ecto/lib/ecto/migration.ex	/^  def execute(up, down) when (is_binary(up) or is_list(up)) and$/;"	f
execute	deps/ecto/lib/ecto/migration/runner.ex	/^  def execute(command) do$/;"	f
execute	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp execute(operation, repo, adapter, query, opts) when is_list(opts) do$/;"	f
execute	deps/postgrex/lib/postgrex.ex	/^  def execute(conn, query, params, opts \\\\ []) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(%{postgres: {_, _ref}} = s, %Query{} = query) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(%{postgres: {postgres, ref}}, %Query{ref: ref} = query) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(%{types: types} = s, %Query{types: types} = query) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(s, %Query{name: @reserved_prefix <> _} = query) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(s, %Query{types: nil} = query) do$/;"	f
execute	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute(s, %Query{} = query) do$/;"	f
execute statements in an open transaction	deps/bolt_sips/lib/bolt_sips/transaction.ex	/^  test "execute statements in an open transaction" do$/;"	t
execute!	deps/db_connection/lib/db_connection.ex	/^  def execute!(conn, query, params, opts \\\\ []) do$/;"	f
execute!	deps/postgrex/lib/postgrex.ex	/^  def execute!(conn, query, params, opts \\\\ []) do$/;"	f
execute_and_cache	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp execute_and_cache(repo, id, update, prepared, params, mapper, opts) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl(keyword) when is_list(keyword),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl(string) when is_binary(string), do: [string]$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:alter, %Table{} = table, changes}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create, %Constraint{check: check}}) when is_binary(check),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create, %Constraint{exclude: exclude}}) when is_binary(exclude),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create, %Index{} = index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:create_if_not_exists, %Index{}}),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:drop, %Constraint{}}),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:drop, %Index{} = index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:drop_if_exists, %Index{}}),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:rename, %Table{} = current_table, %Table{} = new_table}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({:rename, _table, _current_column, _new_column}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({command, %Table{} = table, columns}) when command in [:create, :create_if_not_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def execute_ddl({command, %Table{} = table}) when command in [:drop, :drop_if_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl(keyword) when is_list(keyword),$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl(string) when is_binary(string), do: [string]$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:alter, %Table{} = table, changes}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:create, %Constraint{} = constraint}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:create, %Index{} = index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:create_if_not_exists, %Index{} = index}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:drop, %Constraint{} = constraint}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:rename, %Table{} = current_table, %Table{} = new_table}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({:rename, %Table{} = table, current_column, new_column}) do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Index{} = index}) when command in @drops do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Table{} = table, columns}) when command in [:create, :create_if_not_exists] do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def execute_ddl({command, %Table{} = table}) when command in @drops do$/;"	f
execute_ddl	deps/ecto/lib/ecto/adapters/sql.ex	/^      def execute_ddl(repo, definition, opts) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :backward, log, %Command{down: down}) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :backward, log, command) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :forward, log, %Command{up: up}) do$/;"	f
execute_in_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  defp execute_in_direction(repo, :forward, log, command) do$/;"	f
execute_listener_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute_listener_recv(s, status, query, buffer) do$/;"	f
execute_or_reset	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp execute_or_reset(repo, id, reset, cached, params, mapper, opts) do$/;"	f
execute_portal	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute_portal(s, status, query, cursor, buffer) do$/;"	f
execute_portal_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute_portal_recv(s, status, query, cursor, rows \\\\ [], buffer) do$/;"	f
execute_ready	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute_ready(%{postgres: postgres} = s, _, query, buffer) do$/;"	f
execute_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp execute_recv(s, status, query, rows \\\\ [], buffer) do$/;"	f
exists?	deps/timex/lib/timezone/timezone.ex	/^  def exists?(zone) when is_binary(zone) do$/;"	f
exit	deps/postgrex/lib/postgrex/type_server.ex	/^  defp exit(%{connections: connections} = state, pid) do$/;"	f
exp_backoff	deps/retry/lib/retry/delay_streams.ex	/^  def exp_backoff(initial_delay \\\\ 10) do$/;"	f
expand	deps/ecto/lib/ecto/query/builder/dynamic.ex	/^  defp expand(query, %{fun: fun}, {binding, params, count}) do$/;"	f
expand	deps/ecto/lib/ecto/repo/preloader.ex	/^  def expand(schema, preloads, acc) do$/;"	f
expand_alias	deps/ecto/lib/ecto/schema.ex	/^  defp expand_alias(ast, _env),$/;"	f
expand_alias	deps/ecto/lib/ecto/schema.ex	/^  defp expand_alias({:__aliases__, _, _} = ast, env),$/;"	f
expand_and_split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp expand_and_split_binary(query, env) do$/;"	f
expand_and_split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp expand_and_split_binary(query, {env, _}) do$/;"	f
expand_create	deps/ecto/lib/ecto/migration.ex	/^  defp expand_create(object, command, block) do$/;"	f
expand_from	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp expand_from(other, env) do$/;"	f
expand_from	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp expand_from({left, right}, env) do$/;"	f
expand_keys	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp expand_keys(state, _key, _key_len, _salt, 0), do: state$/;"	f
expand_keys	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp expand_keys(state, key, key_len, salt, rounds) do$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([]), do: "\/"$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([h|t], acc) when is_binary(h),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([h|t], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments([{:|, _, [h, t]}], acc),$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments(segments) do$/;"	f
expand_segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp expand_segments(segments) when is_list(segments),$/;"	f
expand_to_binary	deps/gettext/lib/gettext/compiler.ex	/^  def expand_to_binary(term, what, gettext_module, env) when what in ~w(domain msgid msgid_plural) do$/;"	f
expected_relation_type	deps/ecto/lib/ecto/changeset.ex	/^  defp expected_relation_type(%{cardinality: :many}), do: {:array, :map}$/;"	f
expected_relation_type	deps/ecto/lib/ecto/changeset.ex	/^  defp expected_relation_type(%{cardinality: :one}), do: :map$/;"	f
expired	deps/coherence/test/controllers/rememberable_test.exs	/^    test "expired", %{conn: conn} = meta do$/;"	t
expired?	deps/coherence/web/controllers/controller_helpers.ex	/^  def expired?(datetime, opts) do$/;"	f
expired?	deps/coherence/web/controllers/controller_helpers.ex	/^  def expired?(nil, _), do: true$/;"	f
expired?	deps/coherence/web/services/confirmable_service.ex	/^  def expired?(user) do$/;"	f
expiry	deps/retry/lib/retry/delay_streams.ex	/^  def expiry(delays, time_budget) do$/;"	f
expiry_time	deps/con_cache/lib/con_cache/owner.ex	/^  defp expiry_time(%__MODULE__{current_time: current_time, ttl_check: ttl_check}, ttl) do$/;"	f
exported_interface	deps/exactor/lib/exactor/operations.ex	/^      def exported_interface(...) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Decimal{} = decimal, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: binary, type: :binary}, _sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(%Ecto.SubQuery{query: query}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(false, _sources, _query), do: "FALSE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(list, _sources, query) when is_list(list) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_binary(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_float(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(literal, _sources, _query) when is_integer(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(nil, _sources, _query),   do: "NULL"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr(true, _sources, _query),  do: "TRUE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:&, _, [idx]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:^, [], [_ix]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:date_add, _, [date, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:datetime_add, _, [datetime, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:fragment, _, [kw]}, _sources, query) when is_list(kw) or tuple_size(kw) == 3 do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:fragment, _, parts}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:ilike, _, [_, _]}, _sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [_, {:^, _, [_, 0]}]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [_left, []]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) when is_list(right) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:in, _, [left, {:^, _, [_, length]}]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:is_nil, _, [arg]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({:not, _, [expr]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({fun, _, args}, sources, query) when is_atom(fun) and is_list(args) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp expr({{:., _, [{:&, _, [idx]}, field]}, _, []}, sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Decimal{} = decimal, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: binary, type: :binary}, _sources, _query)$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Ecto.Query.Tagged{value: other, type: type}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(%Ecto.SubQuery{query: query}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(false, _sources, _query), do: "FALSE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(list, sources, query) when is_list(list) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_binary(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_float(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(literal, _sources, _query) when is_integer(literal) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(nil, _sources, _query),   do: "NULL"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr(true, _sources, _query),  do: "TRUE"$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:&, _, [idx]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:^, [], [ix]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:date_add, _, [date, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:datetime_add, _, [datetime, count, interval]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:fragment, _, [kw]}, _sources, query) when is_list(kw) or tuple_size(kw) == 3 do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:fragment, _, parts}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [_left, []]}, _sources, _query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, right]}, sources, query) when is_list(right) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:in, _, [left, {:^, _, [ix, _]}]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:is_nil, _, [arg]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({:not, _, [expr]}, sources, query) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({fun, _, args}, sources, query) when is_atom(fun) and is_list(args) do$/;"	f
expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp expr({{:., _, [{:&, _, [idx]}, field]}, _, []}, sources, _query) when is_atom(field) do$/;"	f
expr	deps/ecto/lib/ecto/query/inspect.ex	/^  def expr(expr, names, part) do$/;"	f
expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr(%{expr: expr} = part, names) do$/;"	f
expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp expr(expr) do$/;"	f
expr_to_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp expr_to_cache(%BooleanExpr{op: op, expr: expr}), do: {op, expr}$/;"	f
expr_to_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp expr_to_cache(%QueryExpr{expr: expr}), do: expr$/;"	f
expr_to_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp expr_to_cache(%SelectExpr{expr: expr}), do: expr$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(%Ecto.Query.Tagged{value: value, tag: nil}, _, _names, _) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(%Ecto.Query.Tagged{value: value, tag: tag}, _, names, part) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string(_expr, string, _, _) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:&, _, [ix]}, _, names, %{take: take}) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:&, _, [ix]}, _, names, _) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:^, _, [_ix, _len]}, _, _, _part) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:^, _, [ix]}, _, _, %{params: params}) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:fragment, _, [{_, _}|_] = parts}, _, names, part) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({:type, [], [expr, type]}, _string, names, part) do$/;"	f
expr_to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  defp expr_to_string({{:., _, [_, _]}, _, []}, string, _, _) do$/;"	f
expressions	deps/ecto/integration_test/cases/repo.exs	/^    test "expressions" do$/;"	t
exprs	deps/phoenix/lib/phoenix/router/route.ex	/^  def exprs(route) do$/;"	f
ext_to_mime	deps/mime/lib/mime.ex	/^    defp ext_to_mime(unquote(ext)), do: unquote(type)$/;"	f
ext_to_mime	deps/mime/lib/mime.ex	/^  defp ext_to_mime(_ext), do: nil$/;"	f
ext_to_mime	deps/mime/lib/mime.ex	/^  defp ext_to_mime(type)$/;"	f
extensions	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def extensions do$/;"	f
extensions	deps/mime/lib/mime.ex	/^  def extensions(type) do$/;"	f
extensions	deps/plug/lib/plug/mime.ex	/^  def extensions(type) do$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([[h|_]|t2]),   do: [h|extract(t2)]$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([[nil|_]|t2]), do: extract(t2)$/;"	f
extract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp extract([]),           do: []$/;"	f
extract	deps/gettext/lib/gettext/extractor.ex	/^  def extract(%Macro.Env{file: file, line: line} = _caller, backend, domain, id) do$/;"	f
extract	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  defp extract(app, gettext_config) do$/;"	f
extract	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp extract(stack, attr) do$/;"	f
extract	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  def extract(%State{mode: :normal} = state, generations, remote_clock) do$/;"	f
extract	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def extract(%State{values: values} = state) do$/;"	f
extract	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp extract(filename, target_dir) do$/;"	f
extract_actions	deps/phoenix/lib/phoenix/router/resource.ex	/^  defp extract_actions(opts, singleton) do$/;"	f
extract_any	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_any([], acc), do: Enum.reverse(acc)$/;"	f
extract_any	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_any([h|t], acc) do$/;"	f
extract_any	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_any(r, acc) do$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg(_, index),$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg({:=, _, [_, {:=, _, _} = submatch]}, index),$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg({:=, _, [_, {arg_name, _, _} = arg]}, _index) when var_name?(arg_name),$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg({:=, _, [{arg_name, _, _} = arg, _]}, _index) when var_name?(arg_name),$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg({:\\\\, _, [inner_arg, _]}, index),$/;"	f
extract_arg	deps/exactor/lib/exactor/operations.ex	/^  defp extract_arg({arg_name, _, _} = arg, _index) when var_name?(arg_name),$/;"	f
extract_args	deps/exactor/lib/exactor/operations.ex	/^  def extract_args(args) do$/;"	f
extract_button_options	deps/phoenix_html/lib/phoenix_html/link.ex	/^  defp extract_button_options(opts) do$/;"	f
extract_changes	deps/ecto/lib/ecto/exceptions.ex	/^  defp extract_changes(%Ecto.Changeset{changes: changes}) do$/;"	f
extract_changes	deps/ecto/lib/ecto/exceptions.ex	/^  defp extract_changes([%Ecto.Changeset{action: :delete} | tail]),$/;"	f
extract_changes	deps/ecto/lib/ecto/exceptions.ex	/^  defp extract_changes([%Ecto.Changeset{} = changeset | tail]),$/;"	f
extract_changes	deps/ecto/lib/ecto/exceptions.ex	/^  defp extract_changes(other),$/;"	f
extract_deps	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp extract_deps({:load_module, _, deps}),               do: deps$/;"	f
extract_deps	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp extract_deps({:update, _, _, deps}),                 do: deps$/;"	f
extract_deps	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp extract_deps({:update, _, _}),                       do: []$/;"	f
extract_deps	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp extract_deps({:update, _, deps}) when is_list(deps), do: deps$/;"	f
extract_endpoint	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  def extract_endpoint(endpoint_or_conn_or_socket) do$/;"	f
extract_flags	deps/gettext/lib/gettext/po/parser.ex	/^  defp extract_flags(%{__struct__: _, comments: comments} = translation) do$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<>>, acc, extracting_fractional, _) do$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<?.::utf8,rest::binary>>, acc, false, _), do: extract_float(rest, <<acc::binary, ?.::utf8>>, true, ".")$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(<<c::utf8,rest::binary>>, acc, extracting_fractional, _)$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(_, acc, false, _), do: {:error, {:incomplete_float, acc}}$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(_, acc, true, <<?.::utf8>>), do: {:error, {:incomplete_float, acc}}$/;"	f
extract_float	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_float(_, acc, true, _), do: {:ok, acc}$/;"	f
extract_header_and_fields	deps/ecto/lib/ecto/repo/schema.ex	/^  defp extract_header_and_fields(rows, schema, dumper, autogen_id, adapter) do$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, _acc, _size), do: {:error, :eof}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, acc, 0), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<>>, acc, size) when size < 0, do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<c::utf8,rest::binary>>, acc, size) when c in @digits and size < 0 do$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(<<c::utf8,rest::binary>>, acc, size) when c in @digits and size > 0 do$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, _, size) when size > 0, do: {:error, :badmatch, size}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, acc, 0), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_, acc, _), do: {:ok, acc}$/;"	f
extract_integer	deps/combine/lib/combine/parsers/text.ex	/^  defp extract_integer(_input, acc, 0), do: {:ok, acc}$/;"	f
extract_merger	deps/plug/lib/plug/router.ex	/^  defp extract_merger(options, key) when is_list(options) do$/;"	f
extract_metadata	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  defp extract_metadata(_), do: %{}$/;"	f
extract_metadata	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  defp extract_metadata(user_agent) when is_binary(user_agent) do$/;"	f
extract_migration_info	deps/ecto/lib/ecto/migrator.ex	/^  defp extract_migration_info(file) do$/;"	f
extract_module	deps/ecto/lib/ecto/migrator.ex	/^  defp extract_module(:existing_module, mod) do$/;"	f
extract_module	deps/ecto/lib/ecto/migrator.ex	/^  defp extract_module(file, _name) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([[{token, value}]|rest], acc) when is_atom(token) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([], acc), do: Enum.reverse(acc)$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([_|rest], acc) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([h|rest], acc) when is_list(h) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([{token, value}|rest], acc) when is_atom(token) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([{tokens, weight}|rest], acc) when is_list(tokens) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results([{{token, value}, weight}|rest], acc) when is_atom(token) do$/;"	f
extract_parse_results	deps/timex/lib/parse/datetime/parser.ex	/^  defp extract_parse_results(parse_results), do: extract_parse_results(parse_results, [])$/;"	f
extract_path	deps/plug/lib/plug/router.ex	/^  defp extract_path(path), do: path$/;"	f
extract_path	deps/plug/lib/plug/router.ex	/^  defp extract_path({:_, _, var}) when is_atom(var), do: "\/*_path"$/;"	f
extract_path_and_guards	deps/plug/lib/plug/router.ex	/^  defp extract_path_and_guards(path), do: {extract_path(path), true}$/;"	f
extract_path_and_guards	deps/plug/lib/plug/router.ex	/^  defp extract_path_and_guards({:when, _, [path, guards]}), do: {extract_path(path), guards}$/;"	f
extract_references	deps/gettext/lib/gettext/po/parser.ex	/^  defp extract_references(%{__struct__: _, comments: comments} = translation) do$/;"	f
extract_relfile_apps	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp extract_relfile_apps(path) do$/;"	f
extract_top_comments_and_headers	deps/gettext/lib/gettext/po/parser.ex	/^  defp extract_top_comments_and_headers([%Translation{msgid: id, msgstr: headers, comments: comments} | rest])$/;"	f
extract_top_comments_and_headers	deps/gettext/lib/gettext/po/parser.ex	/^  defp extract_top_comments_and_headers(translations) do$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types([]), do: []$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types([sig: @node, fields: fields]) do$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types([sig: @path, fields: fields]) do$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types([sig: @relationship, fields: fields]) do$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types([sig: @unbound_relationship, fields: fields]) do$/;"	f
extract_types	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp extract_types(r), do: extract_any(r, [])$/;"	f
extracting?	deps/gettext/lib/gettext/extractor.ex	/^  def extracting? do$/;"	f
extracting?	deps/gettext/lib/gettext/extractor_agent.ex	/^  def extracting? do$/;"	f
extras	deps/phoenix/mix.exs	/^  defp extras do$/;"	f
fail	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp fail(message) do$/;"	f
fail	deps/postgrex/lib/postgrex/type_server.ex	/^  def fail(server, ref) do$/;"	f
failed login	deps/coherence/test/controllers/session_controller_test.exs	/^    test "failed login", %{conn: conn, user: user} do$/;"	t
failed login	deps/coherence/test/services/trackable_service_test.exs	/^    test "failed login", %{conn: conn, user: user} do$/;"	t
failed_login	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp failed_login(conn, %{} = user, true) do$/;"	f
failed_login	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp failed_login(conn, _user, _), do: put_flash(conn, :error, @flash_invalid)$/;"	f
failed_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp failed_login(conn, %{} = user, true) do$/;"	f
failed_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp failed_login(conn, _user, _), do: put_flash(conn, :error, @flash_invalid)$/;"	f
failed_login	deps/coherence/web/controllers/session_controller.ex	/^  defp failed_login(conn, %{} = user, true) do$/;"	f
failed_login	deps/coherence/web/controllers/session_controller.ex	/^  defp failed_login(conn, _user, _), do: put_flash(conn, :error, Messages.backend().incorrect_login_or_password(login_field: Config.login_field()))$/;"	f
failure	deps/postgrex/lib/postgrex/type_server.ex	/^  defp failure(state) do$/;"	f
fastlane	deps/phoenix/lib/phoenix/channel/server.ex	/^  def fastlane(subscribers, from, %Broadcast{event: event} = msg) do$/;"	f
fastlane	deps/phoenix/lib/phoenix/channel/server.ex	/^  def fastlane(subscribers, from, msg) do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^    def fastlane!(%Broadcast{} = msg) do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/transports/long_poll_serializer.ex	/^  def fastlane!(%Broadcast{} = msg) do$/;"	f
fastlane!	deps/phoenix/lib/phoenix/transports/websocket_serializer.ex	/^  def fastlane!(%Broadcast{} = msg) do$/;"	f
fetch	deps/con_cache/lib/con_cache/operations.ex	/^  defp fetch(%ConCache{ets: ets} = cache, key) do$/;"	f
fetch	deps/db_connection/lib/db_connection.ex	/^  def fetch(conn, fun, call, query, cursor, opts) do$/;"	f
fetch	deps/db_connection/lib/db_connection.ex	/^  defp fetch(_, {:deallocate, _,  _} = state, _) do$/;"	f
fetch	deps/db_connection/lib/db_connection.ex	/^  defp fetch(conn, {:first, query, cursor}, opts) do$/;"	f
fetch	deps/db_connection/lib/db_connection.ex	/^  defp fetch(conn, {:next, query, cursor}, opts) do$/;"	f
fetch	deps/phoenix/lib/phoenix/presence.ex	/^      def fetch(_topic, entries) do$/;"	f
fetch	deps/phoenix/lib/phoenix/presence.ex	/^      def fetch(_topic, presences), do: presences$/;"	f
fetch	deps/phoenix/priv/templates/phx.gen.presence/presence.ex	/^      def fetch(_topic, entries) do$/;"	f
fetch	deps/postgrex/lib/postgrex/parameters.ex	/^  def fetch(ref) do$/;"	f
fetch	deps/postgrex/lib/postgrex/type_server.ex	/^  def fetch(server) do$/;"	f
fetch	deps/postgrex/lib/postgrex/types.ex	/^  def fetch(oid, {mod, table}) do$/;"	f
fetch empty	deps/ecto/integration_test/cases/repo.exs	/^  test "fetch empty" do$/;"	t
fetch with in	deps/ecto/integration_test/cases/repo.exs	/^  test "fetch with in" do$/;"	t
fetch with invalid prefix	deps/ecto/integration_test/cases/repo.exs	/^  test "fetch with invalid prefix" do$/;"	t
fetch without schema	deps/ecto/integration_test/cases/repo.exs	/^  test "fetch without schema" do$/;"	t
fetch_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def fetch_assign(assigns, key) do$/;"	f
fetch_assoc	deps/ecto/lib/ecto/query/planner.ex	/^  defp fetch_assoc(tag, take, assoc) do$/;"	f
fetch_by_ref	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  def fetch_by_ref(replicas, {name, vsn}) do$/;"	f
fetch_change	deps/ecto/lib/ecto/changeset.ex	/^  def fetch_change(%Changeset{changes: changes} = _changeset, key) when is_atom(key) do$/;"	f
fetch_config	deps/phoenix/lib/phoenix/config.ex	/^  defp fetch_config(otp_app, module) do$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(%Conn{req_cookies: %Unfetched{},$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(%Conn{} = conn, _opts) do$/;"	f
fetch_cookies	deps/plug/lib/plug/conn.ex	/^  def fetch_cookies(conn, opts \\\\ [])$/;"	f
fetch_decode	deps/db_connection/lib/db_connection.ex	/^  defp fetch_decode(status, call, query, cursor, meter, result, opts) do$/;"	f
fetch_field	deps/ecto/lib/ecto/changeset.ex	/^  def fetch_field(%Changeset{changes: changes, data: data, types: types}, key) do$/;"	f
fetch_flash	deps/coherence/test/plugs/authentication/session_test.exs	/^    defp fetch_flash(conn, params), do: Phoenix.Controller.fetch_flash(conn, params)$/;"	f
fetch_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def fetch_flash(conn, _opts \\\\ []) do$/;"	f
fetch_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate fetch_flash(conn), to: Phoenix.Controller$/;"	d
fetch_ids	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp fetch_ids(structs, module, assoc, opts) do$/;"	f
fetch_info	deps/db_connection/lib/db_connection.ex	/^  defp fetch_info(conn) do$/;"	f
fetch_pid	deps/db_connection/lib/db_connection/ownership/pool.ex	/^  defp fetch_pid(pool, key) do$/;"	f
fetch_query	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp fetch_query([], _assoc, _repo, _query, _prefix, _related_key, _take, _opts) do$/;"	f
fetch_query	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp fetch_query(ids, %{cardinality: card} = assoc, repo, query, prefix, related_key, take, opts) do$/;"	f
fetch_query	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp fetch_query(ids, _assoc, _repo, query, _prefix, {_, key}, _take, _opts) when is_function(query, 1) do$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(%Conn{query_params: %Unfetched{}, params: params,$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(%Conn{} = conn, _opts) do$/;"	f
fetch_query_params	deps/plug/lib/plug/conn.ex	/^  def fetch_query_params(conn, opts \\\\ [])$/;"	f
fetch_query_params	deps/plug/lib/plug/parsers.ex	/^  defp fetch_query_params(%{query_params: %Plug.Conn.Unfetched{}, query_string: query_string}) do$/;"	f
fetch_query_params	deps/plug/lib/plug/parsers.ex	/^  defp fetch_query_params(%{query_params: query_params}) do$/;"	f
fetch_session	deps/plug/lib/plug/conn.ex	/^  def fetch_session(%Conn{private: private} = conn, _opts) do$/;"	f
fetch_session	deps/plug/lib/plug/conn.ex	/^  def fetch_session(conn, opts \\\\ [])$/;"	f
fetch_session	deps/plug/lib/plug/session.ex	/^  defp fetch_session(config) do$/;"	f
fetch_string_or_atom_field	deps/ecto/lib/ecto/schema.ex	/^  defp fetch_string_or_atom_field(map, field) when is_atom(field) do$/;"	f
fetch_type_info	deps/postgrex/lib/postgrex/protocol.ex	/^  defp fetch_type_info([], _, infos) do$/;"	f
fetch_type_info	deps/postgrex/lib/postgrex/protocol.ex	/^  defp fetch_type_info([oid | oids], types, infos) do$/;"	f
fetch_type_info	deps/postgrex/lib/postgrex/protocol.ex	/^  defp fetch_type_info(oids, types, infos \\\\ [])$/;"	f
fetch_type_info	deps/postgrex/lib/postgrex/types.ex	/^  defp fetch_type_info(oid, mod, table) do$/;"	f
fetch_user_data	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp fetch_user_data({conn, _ip, valid?}, _), do: {conn, valid?, nil}$/;"	f
fetch_user_data	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp fetch_user_data({conn, ip, true}, %{store: store}), do: {conn, true, store.get_user_data(ip)}$/;"	f
field	deps/ecto/lib/ecto/query.ex	/^  defp field(ix, field) when is_integer(ix) and is_atom(field) do$/;"	f
field	deps/ecto/lib/ecto/query/api.ex	/^  def field(source, field), do: doc! [source, field]$/;"	f
field	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp field(ix, field) when is_integer(ix) and is_atom(field) do$/;"	f
field	deps/ecto/lib/ecto/schema.ex	/^  defmacro field(name, type \\\\ :string, opts \\\\ []) do$/;"	a
field source	deps/ecto/integration_test/cases/repo.exs	/^    test "field source" do$/;"	t
field!	deps/ecto/lib/ecto/association.ex	/^  defp field!(op, struct, field) do$/;"	f
field!	deps/ecto/lib/ecto/query/builder.ex	/^  def field!(atom) when is_atom(atom),$/;"	f
field!	deps/ecto/lib/ecto/query/builder.ex	/^  def field!(other),$/;"	f
field!	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def field!(field) when is_atom(field),$/;"	f
field!	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def field!(other) do$/;"	f
field!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def field!(_kind, field) when is_atom(field) do$/;"	f
field!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def field!(kind, other) do$/;"	f
field_id	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def field_id(form, field), do: input_id(form, field)$/;"	f
field_name	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def field_name(form, field), do: input_name(form, field)$/;"	f
field_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp field_source(_, field) do$/;"	f
field_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp field_source({_, schema}, field) when schema != nil do$/;"	f
field_source_and_type	deps/ecto/lib/ecto/schema.ex	/^  defp field_source_and_type({field, type}) do$/;"	f
field_source_and_type	deps/ecto/lib/ecto/schema.ex	/^  defp field_source_and_type({field, {:source, source, type}}) do$/;"	f
field_type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp field_type!(_kind, _query, _expr, type) do$/;"	f
field_type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp field_type!(kind, query, expr, {composite, {ix, field}}) when is_integer(ix) do$/;"	f
field_type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp field_type!(kind, query, expr, {ix, field}) when is_integer(ix) do$/;"	f
field_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def field_value(form, field, default \\\\ nil), do: input_value(form, field) || default$/;"	f
fields!	deps/ecto/lib/ecto/query/builder/select.ex	/^  def fields!(tag, fields) do$/;"	f
fields_to_sources	deps/ecto/lib/ecto/repo/schema.ex	/^  defp fields_to_sources(fields, dumper) do$/;"	f
fields_to_sources	deps/ecto/lib/ecto/repo/schema.ex	/^  defp fields_to_sources(fields, nil) do$/;"	f
file_encoding	deps/plug/lib/plug/static.ex	/^  defp file_encoding(conn, path, gzip?, brotli?) do$/;"	f
file_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def file_input(form, field, opts \\\\ []) do$/;"	f
files_to_clean	deps/phoenix/lib/phoenix/digester.ex	/^  defp files_to_clean(manifest, max_age, keep) do$/;"	f
filter!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def filter!(_kind, _query, bool, _binding, file, line) when is_boolean(bool) do$/;"	f
filter!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def filter!(_kind, query, %Ecto.Query.DynamicExpr{} = dynamic, _binding, _file, _line) do$/;"	f
filter!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def filter!(kind, _query, kw, binding, file, line) when is_list(kw) do$/;"	f
filter!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def filter!(kind, _query, other, _binding, _file, _line) do$/;"	f
filter!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  def filter!(kind, op, query, expr, binding, file, line) do$/;"	f
filter_clocks	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  defp filter_clocks(clockset, {node, clock}) do$/;"	f
filter_comment_lines	deps/tzdata/lib/tzdata/util.ex	/^  def filter_comment_lines(input) do$/;"	f
filter_digested_files	deps/phoenix/lib/phoenix/digester.ex	/^  defp filter_digested_files(output_path) do$/;"	f
filter_empty_lines	deps/tzdata/lib/tzdata/util.ex	/^  def filter_empty_lines(input) do$/;"	f
filter_files	deps/phoenix/lib/phoenix/digester.ex	/^  defp filter_files(input_path) do$/;"	f
filter_for_record_type	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp filter_for_record_type(list, record_type), do: Enum.filter(list, fn x -> (x[:record_type] == record_type) end)$/;"	f
filter_ignores	deps/combine/lib/combine.ex	/^  defp filter_ignores(element) when is_list(element) do$/;"	f
filter_ignores	deps/combine/lib/combine.ex	/^  defp filter_ignores(element), do: element$/;"	f
filter_values	deps/phoenix/lib/phoenix/logger.ex	/^  def filter_values(%{__struct__: mod} = struct, _filter_params) when is_atom(mod) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/logger.ex	/^  def filter_values(%{} = map, filter_params) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/logger.ex	/^  def filter_values([_|_] = list, filter_params) do$/;"	f
filter_values	deps/phoenix/lib/phoenix/logger.ex	/^  def filter_values(other, _filter_params), do: other$/;"	f
filter_values	deps/phoenix/lib/phoenix/logger.ex	/^  def filter_values(values, params \\\\ Application.get_env(:phoenix, :filter_parameters))$/;"	f
finalize_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp finalize_cache(%{assocs: assocs, prefix: prefix, lock: lock, select: select},$/;"	f
finalize_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp finalize_cache(_query, _operation, :nocache, _counter) do$/;"	f
find	deps/gettext/lib/gettext/po/translations.ex	/^  def find(translations, %{__struct__: s} = target)$/;"	f
find	deps/postgrex/lib/postgrex/type_module.ex	/^      def find(type_info, formats) do$/;"	f
find	deps/postgrex/lib/postgrex/type_module.ex	/^  defp find(config) do$/;"	f
find	deps/postgrex/lib/postgrex/types.ex	/^  defp find(type_info, formats, module, table) do$/;"	f
find_all	deps/phoenix/lib/phoenix/template.ex	/^  def find_all(root, pattern \\\\ @default_pattern) do$/;"	f
find_clause	deps/postgrex/lib/postgrex/type_module.ex	/^  defp find_clause(extension, _opts, key, value, format) do$/;"	f
find_clause	deps/postgrex/lib/postgrex/type_module.ex	/^  defp find_clause(extension, opts, key, value, :super_binary) do$/;"	f
find_clauses	deps/postgrex/lib/postgrex/type_module.ex	/^  defp find_clauses({extension, {opts, matching, format}}) do$/;"	f
find_executable	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp find_executable(exec) do$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format("*\/*", accepted),                   do: Enum.fetch!(accepted, 0)$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format(_type_range, []),                   do: nil$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format(exts, accepted) when is_list(exts), do: Enum.find(exts, &(&1 in accepted))$/;"	f
find_format	deps/phoenix/lib/phoenix/controller.ex	/^  defp find_format(type_range, [h|t]) do$/;"	f
find_fuzzy_match	deps/gettext/lib/gettext/merger.ex	/^  defp find_fuzzy_match(key, target, old_translations, threshold) do$/;"	f
find_host	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp find_host(stack) do$/;"	f
find_inputs_for_type!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp find_inputs_for_type!(changeset, field) do$/;"	f
find_matching_po	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp find_matching_po(pot_file, po_dir) do$/;"	f
find_port_number	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  defp find_port_number(config, f) do$/;"	f
find_source_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp find_source_expr(query, 0) do$/;"	f
find_source_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp find_source_expr(query, ix) do$/;"	f
find_username_and_password	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  defp find_username_and_password(config, f) do$/;"	f
find_var!	deps/ecto/lib/ecto/query/builder.ex	/^  def find_var!(var, vars) do$/;"	f
first	deps/ecto/integration_test/cases/repo.exs	/^  test "first, last and one(!)" do$/;"	t
first	deps/ecto/lib/ecto/query.ex	/^  def first(%Ecto.Query{} = query, nil) do$/;"	f
first	deps/ecto/lib/ecto/query.ex	/^  def first(queryable, key), do: first(order_by(queryable, ^key), nil)$/;"	f
first	deps/ecto/lib/ecto/query.ex	/^  def first(queryable, nil), do: first(Ecto.Queryable.to_query(queryable), nil)$/;"	f
first	deps/ecto/lib/ecto/query.ex	/^  def first(queryable, order_by \\\\ nil)$/;"	f
first login	deps/coherence/test/services/trackable_service_test.exs	/^    test "first login", %{conn: conn, user: user} do$/;"	t
first_matching_weekday_in_month	deps/tzdata/lib/tzdata/util.ex	/^  defp first_matching_weekday_in_month(year, month, weekday, [head|tail]) do$/;"	f
first_name	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  defp first_name(name) do$/;"	f
first_name	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  defp first_name(name) do$/;"	f
first_name	deps/coherence/test/support/email.exs	/^  defp first_name(name) do$/;"	f
first_period_that_ends_in_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp first_period_that_ends_in_year(zone_name, year) do$/;"	f
first_weekday_of_month_at_least	deps/tzdata/lib/tzdata/util.ex	/^  def first_weekday_of_month_at_least(year, month, weekday, minimum_date) do$/;"	f
fixed_integer_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp fixed_integer_impl(%ParserState{status: :ok, input: <<>>} = state, _size) do$/;"	f
fixed_integer_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp fixed_integer_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state, _size) do$/;"	f
fixture	apps/flexcility_web/test/admin_test.exs	/^  def fixture(:site, attrs \\\\ @create_attrs) do$/;"	f
fixture	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  def fixture(:site) do$/;"	f
fixture	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  def fixture(:<%= schema.singular %>, attrs \\\\ @create_attrs) do$/;"	f
fixture	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  def fixture(:<%= schema.singular %>) do$/;"	f
fixture	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  def fixture(:<%= schema.singular %>) do$/;"	f
flags	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp flags(),     do: map(one_of(char(), ["-", "0", "_"]), &map_flag\/1)$/;"	f
flash_key	deps/phoenix/lib/phoenix/controller.ex	/^  defp flash_key(atom) when is_atom(atom), do: Atom.to_string(atom)$/;"	f
flash_key	deps/phoenix/lib/phoenix/controller.ex	/^  defp flash_key(binary) when is_binary(binary), do: binary$/;"	f
float_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp float_decode(%Decimal{} = decimal), do: {:ok, Decimal.to_float(decimal)}$/;"	f
float_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp float_decode(x), do: {:ok, x}$/;"	f
float_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp float_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
float_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp float_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
floki_link	deps/coherence/test/support/test_helpers.exs	/^  def floki_link(safe) when is_tuple(safe) do$/;"	f
floki_link	deps/coherence/test/support/test_helpers.exs	/^  def floki_link(string) do$/;"	f
flush	deps/ecto/lib/ecto/migration.ex	/^  def flush do$/;"	f
flush	deps/ecto/lib/ecto/migration/runner.ex	/^  def flush do$/;"	f
flush_backoff	deps/connection/lib/connection.ex	/^  defp flush_backoff(backoff) do$/;"	f
flush_timer	deps/db_connection/lib/db_connection/connection.ex	/^  defp flush_timer(timer) do$/;"	f
flush_timer	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp flush_timer(timer) do$/;"	f
fmt_hash	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp fmt_hash(hash, salt, prefix, log_rounds) do$/;"	f
fmt_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  defp fmt_salt(salt, log_rounds, false), do: "$2b$#{log_rounds}$#{Base64.encode(salt)}"$/;"	f
fmt_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  defp fmt_salt(salt, log_rounds, true), do: "$2a$#{log_rounds}$#{Base64.encode(salt)}"$/;"	f
foldl	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp foldl(values, initial, func), do: :ets.foldl(func, initial, values)$/;"	f
foo	deps/combine/lib/combine.ex	/^        def foo(str) do$/;"	f
for custom model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for custom model" do$/;"	t
for custom model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for custom model" do$/;"	t
for default model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for default model" do$/;"	t
for default model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for default model" do$/;"	t
for_custom_model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_custom_model" do$/;"	t
for_custom_model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_custom_model" do$/;"	t
for_default_model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_default_model" do$/;"	t
for_default_model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_default_model" do$/;"	t
for_invitible	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_invitible" do$/;"	t
for_invitible	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_invitible" do$/;"	t
for_new_model	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_new_model" do$/;"	t
for_new_model	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_new_model" do$/;"	t
for_option	deps/coherence/web/services/confirmable_service.ex	/^  defp for_option(other \\\\ false, fun) do$/;"	f
for_rememberable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_rememberable" do$/;"	t
for_rememberable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_rememberable" do$/;"	t
for_rememberable_with_accounts_schema	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_rememberable_with_accounts_schema" do$/;"	t
for_rememberable_with_accounts_schema	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_rememberable_with_accounts_schema" do$/;"	t
for_trackable_table	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "for_trackable_table" do$/;"	t
for_trackable_table	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "for_trackable_table" do$/;"	t
force_change	deps/ecto/lib/ecto/changeset.ex	/^  def force_change(%Changeset{types: nil}, _key, _value) do$/;"	f
force_change	deps/ecto/lib/ecto/changeset.ex	/^  def force_change(%Changeset{types: types} = changeset, key, value) do$/;"	f
force_compile	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  defp force_compile do$/;"	f
force_ssl	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def force_ssl(%Plug.Conn{halted: true} = conn, _socket, _endpoint, _opts) do$/;"	f
force_ssl	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def force_ssl(conn, socket, endpoint, opts) do$/;"	f
force_ssl_config	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp force_ssl_config(socket, endpoint, opts) do$/;"	f
force_width	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp force_width(size, type, directive, opts) do$/;"	f
force_width	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp force_width(size, type, directive, opts) do$/;"	f
foreign key constraint	deps/ecto/integration_test/cases/repo.exs	/^  test "foreign key constraint" do$/;"	t
foreign_key_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def foreign_key_constraint(changeset, field, opts \\\\ []) do$/;"	f
forgot_your_password	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def forgot_your_password, do: dgettext(@domain, "Forgot your password?")$/;"	f
forgot_your_password	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def forgot_your_password, do: dgettext(@domain, "Forgot your password?")$/;"	f
forgot_your_password	deps/coherence/test/support/messages.exs	/^  def forgot_your_password, do: dgettext(@domain, "Forgot your password?")$/;"	f
form_fa	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp form_fa(nil), do: nil$/;"	f
form_fa	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp form_fa({name, arity}), do: Atom.to_string(name) <> "\/" <> Integer.to_string(arity)$/;"	f
form_for	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def form_for(form_data, action, options \\\\ [], fun) when is_function(fun, 1) do$/;"	f
form_for_errors	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_errors(%{action: nil}), do: []$/;"	f
form_for_errors	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_errors(%{errors: errors}), do: errors$/;"	f
form_for_hidden	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_hidden(%{__struct__: module} = data) do$/;"	f
form_for_hidden	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_hidden(_), do: []$/;"	f
form_for_method	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_method(%{__meta__: %{state: :loaded}}), do: "put"$/;"	f
form_for_method	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_method(_), do: "post"$/;"	f
form_for_name	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_name(%{__struct__: module}) do$/;"	f
form_for_name	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp form_for_name(_) do$/;"	f
form_options	deps/phoenix_html/lib/phoenix_html/link.ex	/^  defp form_options(opts, method, class) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, do: block) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, options, do: block) do$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, opts \\\\ [])$/;"	f
form_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def form_tag(action, opts) when is_list(opts) do$/;"	f
format	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  def format(router) do$/;"	f
format	deps/postgrex/lib/postgrex/binary_extension.ex	/^      def format(_), do: :binary$/;"	f
format	deps/postgrex/lib/postgrex/extension.ex	/^        def format(_state), do: :text$/;"	f
format	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def format(_),$/;"	f
format	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^  def format(_), do: :text$/;"	f
format	deps/postgrex/lib/postgrex/messages.ex	/^  defp format(:binary), do: 1$/;"	f
format	deps/postgrex/lib/postgrex/messages.ex	/^  defp format(:text),   do: 0$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(date, format_string, formatter \\\\ Default)$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(datetime, format_string, :relative),$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(datetime, format_string, :strftime),$/;"	f
format	deps/timex/lib/format/datetime/formatter.ex	/^  def format(datetime, format_string, formatter),$/;"	f
format	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format(date, format_string),            do: lformat(date, format_string, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format(date, format_string, tokenizer), do: lformat(date, format_string, tokenizer, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def format(date, format_string),  do: lformat(date, format_string, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def format(date, format_string),  do: lformat(date, format_string, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/duration/formatter.ex	/^  def format(duration), do: lformat(duration, Translator.default_locale, Default)$/;"	f
format	deps/timex/lib/format/duration/formatter.ex	/^  def format(duration, formatter), do: lformat(duration, Translator.default_locale, formatter)$/;"	f
format	deps/timex/lib/format/duration/formatters/default.ex	/^  def format(%Duration{} = duration), do: lformat(duration, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/duration/formatters/default.ex	/^  def format(_), do: {:error, :invalid_timestamp}$/;"	f
format	deps/timex/lib/format/duration/formatters/humanized.ex	/^  def format(%Duration{} = duration), do: lformat(duration, Translator.default_locale)$/;"	f
format	deps/timex/lib/format/duration/formatters/humanized.ex	/^  def format(_), do: {:error, :invalid_duration}$/;"	f
format	deps/timex/lib/interval/interval.ex	/^  def format(%__MODULE__{} = interval, format, formatter \\\\ nil) do$/;"	f
format	deps/timex/lib/timex.ex	/^  defdelegate format(datetime, format_string), to: Timex.Format.DateTime.Formatter$/;"	d
format	deps/timex/lib/timex.ex	/^  defdelegate format(datetime, format_string, formatter), to: Timex.Format.DateTime.Formatter$/;"	d
format!	deps/timex/lib/format/datetime/formatter.ex	/^  def format!(date, format_string, formatter \\\\ Default)$/;"	f
format!	deps/timex/lib/format/datetime/formatter.ex	/^  def format!(date, format_string, formatter),$/;"	f
format!	deps/timex/lib/format/datetime/formatters/default.ex	/^  def format!(date, format_string),           do: lformat!(date, format_string, Translator.default_locale)$/;"	f
format!	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def format!(date, format_string), do: lformat!(date, format_string, Translator.default_locale)$/;"	f
format!	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def format!(date, format_string), do: lformat!(date, format_string, Translator.default_locale)$/;"	f
format!	deps/timex/lib/interval/interval.ex	/^  def format!(%__MODULE__{} = interval, format, formatter \\\\ nil) do$/;"	f
format!	deps/timex/lib/timex.ex	/^  defdelegate format!(datetime, format_string), to: Timex.Format.DateTime.Formatter$/;"	d
format!	deps/timex/lib/timex.ex	/^  defdelegate format!(datetime, format_string, formatter), to: Timex.Format.DateTime.Formatter$/;"	d
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:days, d}, str),    do: str <> "#{d}D"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:hours, h}, str),   do: str <> "#{h}H"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:minutes, m}, str), do: str <> "#{m}M"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:months, m}, str),  do: str <> "#{m}M"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:seconds, s}, str), do: str <> "#{s}S"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({:years, y}, str),   do: str <> "#{y}Y"$/;"	f
format_component	deps/timex/lib/format/duration/formatters/default.ex	/^  defp format_component({_, 0}, str),        do: str$/;"	f
format_duration	deps/timex/lib/timex.ex	/^  defdelegate format_duration(timestamp),$/;"	d
format_duration	deps/timex/lib/timex.ex	/^  defdelegate format_duration(timestamp, formatter),$/;"	d
format_encoder	deps/phoenix/lib/phoenix/template.ex	/^  def format_encoder(template_name) when is_binary(template_name) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error(err)$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, :missing_environment}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, :missing_release}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, errors}) when is_list(errors),$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, reason}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:apps, err}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:apps, {:invalid_start_type, app, start_type}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:apps, {:missing_required_lib, app, lib_dir}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:appups, mod, {:invalid_dotapp, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:appups, {:mismatched_versions, meta}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:archiver, e}}) when is_map(e) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:archiver, {mod, reason, file}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:archiver, {mod, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, :erts_missing_for_upgrades}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, err}}) when is_binary(err) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, e}}) when is_map(e) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, reason}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {:copy_app, app_dir, target_dir, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {:copy_app, target_dir, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {:include_erts, reason, file}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {:include_erts, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {:start_clean, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, mod, {reason, file}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:bad_upgrade_spec, :doesnt_exist, version, upfrom_path}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:bad_upgrade_spec, :upfrom_is_current, current_version}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:error, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:invalid_erts_path, path, maybe_path}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:invalid_sys_config, :invalid_terms}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:invalid_sys_config, {line, mod, err}}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:invalid_sys_config, {{line,col}, mod, err}}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:make_boot_script, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:make_boot_script, {:unknown, file}}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:malformed_relfile, path, rel}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:missing_rel, name, version, path}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:missing_rels, name, v1, v2, path1, path2}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:start_clean, :unknown}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {:start_clean, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:assembler, {area, err}}}) when is_map(err) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:executable, {mod, reason}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_erts, :cannot_determine_version}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_erts, :missing_bin}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_erts, :missing_directory}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_erts, :missing_lib}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_erts, :too_many}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:invalid_overlay, overlay}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:mkdir_temp, mod, err}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:overlay_failed, mod, {reason, file, overlay}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:plugin, e}}) when is_map(e) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:plugin, {:plugin_failed, :bad_return_value, value}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:plugin, {kind, err}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:read_terms, mod, err}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:tar_generation_error, mod, errors}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:tar_generation_error, reason}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:tar_generation_warn, mod, warnings}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:template, err}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:template_str, {str, description}}}) do$/;"	f
format_error	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_error({:error, {:write_terms, mod, err}}) do$/;"	f
format_error	deps/swoosh/lib/swoosh/delivery_error.ex	/^  defp format_error(:api_error, {code, body}), do: "api error - response code: #{code}. body: #{body}"$/;"	f
format_error	deps/swoosh/lib/swoosh/delivery_error.ex	/^  defp format_error(:from_not_set, _), do: "expected \\"from\\" to be set"$/;"	f
format_error	deps/swoosh/lib/swoosh/delivery_error.ex	/^  defp format_error(:invalid_email, _), do: "expected %Swoosh.Email{}"$/;"	f
format_error	deps/swoosh/lib/swoosh/delivery_error.ex	/^  defp format_error(:smtp_error, {type, message}), do: "smtp error - type: #{type}. message: #{message}"$/;"	f
format_error	deps/swoosh/lib/swoosh/delivery_error.ex	/^  defp format_error(reason, _), do: "#{inspect reason}"$/;"	f
format_errors	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_errors([err]), do: format_error(err)$/;"	f
format_errors	deps/distillery/lib/mix/lib/releases/errors.ex	/^  def format_errors(errs) when is_list(errs) do$/;"	f
format_errors	deps/distillery/lib/mix/lib/releases/errors.ex	/^  defp format_errors([], acc), do: acc$/;"	f
format_errors	deps/distillery/lib/mix/lib/releases/errors.ex	/^  defp format_errors([err|rest], acc) do$/;"	f
format_offset	deps/timex/lib/timezone/inspect.ex	/^  defp format_offset(total_offset) do$/;"	f
format_operation	deps/ecto/lib/ecto/multi.ex	/^  defp format_operation(other),$/;"	f
format_operation	deps/ecto/lib/ecto/multi.ex	/^  defp format_operation({name, {:changeset, changeset, opts}}),$/;"	f
format_output	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defp format_output(output) do$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:error, reason, stack), do: {reason, stack}$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:exit, reason, _), do: reason$/;"	f
format_reason	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp format_reason(:throw, reason, stack), do: {{:nocatch, reason}, stack}$/;"	f
format_recipient	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp format_recipient({"", address}) do$/;"	f
format_recipient	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp format_recipient({name, address}), do: "#{name} <#{address}>"$/;"	f
format_recipient	deps/swoosh/lib/swoosh/email/format.ex	/^  def format_recipient(invalid) do$/;"	f
format_recipient	deps/swoosh/lib/swoosh/email/format.ex	/^  def format_recipient(recipient) when is_binary(recipient) and recipient != "" do$/;"	f
format_recipient	deps/swoosh/lib/swoosh/email/format.ex	/^  def format_recipient({name, address} = recipient) when is_binary(name) and is_binary(address) do$/;"	f
format_recipients	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp format_recipients(recipients) do$/;"	f
format_reply	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp format_reply({:socket_push, encoding, encoded_payload}, state) do$/;"	f
format_result	deps/bcrypt_elixir/lib/bcrypt/stats.ex	/^  defp format_result(check, encoded, exec_time) do$/;"	f
format_route	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp format_route(route, column_widths) do$/;"	f
format_status	deps/connection/lib/connection.ex	/^  def format_status(:normal, [pdict, %{mod: mod, mod_state: mod_state}]) do$/;"	f
format_status	deps/connection/lib/connection.ex	/^  def format_status(:terminate, [pdict, %{mod: mod, mod_state: mod_state}]) do$/;"	f
format_status	deps/db_connection/lib/db_connection/connection.ex	/^  def format_status(info, [_, %{client: :closed, mod: mod}]) do$/;"	f
format_status	deps/db_connection/lib/db_connection/connection.ex	/^  def format_status(info, [pdict, %{mod: mod, state: state}]) do$/;"	f
format_systools_error	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp format_systools_error(mod, errors) do$/;"	f
format_systools_warning	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp format_systools_warning(mod, warnings) do$/;"	f
format_time	deps/bcrypt_elixir/lib/bcrypt/stats.ex	/^  defp format_time(time) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :century, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :day, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :hour12, %{:hour => hour}, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :hour12, _date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :hour24, %{:hour => hour}, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :hour24, _date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :iso_weeknum, date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :iso_year2,  date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :iso_year4,  date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :min, %{:minute => min}, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :min, _date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :month, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :oday, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :sec, %{:second => sec}, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :sec, _date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :sec_epoch, date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :sec_fractional, %{microsecond: {us, precision}}, _modifiers, _flags, width) when precision > 0 do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :sec_fractional, _date, _modifiers, _flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :us, %{microsecond: {us, precision}}, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :us, _date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :wday_mon, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :wday_sun, date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :week_mon, %{:year => year} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :week_sun, %{:year => year} = date, _modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :year2, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :year4, date, _modifiers, flags, width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zabbr, %{zone_abbr: abbr}, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zabbr, _date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zname, %{time_zone: tz}, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zname, _date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zoffs, %{std_offset: std, utc_offset: utc}, _modifiers, flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zoffs, _date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, :zoffs_sec, _date, _modifiers, _flags, _width),$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(_locale, token, _, _, _, _) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :AM, %{hour: hour}, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :AM, _date, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :am, %{hour: hour}, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :am, _date, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :ansic, date, modifiers, flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :asn1_generalized_time, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :asn1_generalized_time_tz, date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :asn1_generalized_time_z, date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :asn1_utc_time, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :iso_date, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :iso_ordinal, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :iso_time, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :iso_week, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :iso_weekday, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :kitchen, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :mfull, date, _, _, _)  do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :mshort, date, _, _, _) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :slashed, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :strftime_iso_shortdate, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :strftime_kitchen, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :unix, date, modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :wdfull, date, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :wdshort, date, _modifiers, _flags, _width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :zoffs_colon, date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, :zoffs_sec, %{std_offset: std, utc_offset: utc} = date, modifiers, flags, width) do$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, token, date, modifiers, _flags, _width)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(locale, token, date, modifiers, flags, width)$/;"	f
format_token	deps/timex/lib/format/datetime/formatter.ex	/^  def format_token(token, date, modifiers, flags, width) do$/;"	f
formatted_diff	deps/plug/lib/plug/logger.ex	/^  defp formatted_diff(diff) when diff > 1000, do: [diff |> div(1000) |> Integer.to_string, "ms"]$/;"	f
formatted_diff	deps/plug/lib/plug/logger.ex	/^  defp formatted_diff(diff), do: [Integer.to_string(diff), "µs"]$/;"	f
forward	deps/phoenix/lib/phoenix/router.ex	/^  defmacro forward(path, plug, plug_opts \\\\ [], router_opts \\\\ []) do$/;"	a
forward	deps/phoenix/lib/phoenix/router/route.ex	/^  def forward(%Plug.Conn{path_info: path, script_name: script} = conn, fwd_segments, target, opts) do$/;"	f
forward	deps/plug/lib/plug/router.ex	/^  defmacro forward(path, options) when is_binary(path) do$/;"	a
forward	deps/plug/lib/plug/router/utils.ex	/^  def forward(%Plug.Conn{path_info: path, script_name: script} = conn, new_path, target, opts) do$/;"	f
forward_call	deps/exactor/lib/exactor/delegator.ex	/^  defp forward_call(target_module, fun, arity) do$/;"	f
forward_path_segments	deps/phoenix/lib/phoenix/router/route.ex	/^  def forward_path_segments(path, plug, phoenix_forwards) do$/;"	f
fragment	deps/ecto/lib/ecto/migration.ex	/^  def fragment(expr) when is_binary(expr) do$/;"	f
fragment	deps/ecto/lib/ecto/query/api.ex	/^  def fragment(fragments), do: doc! [fragments]$/;"	f
fragment array types	deps/ecto/integration_test/sql/sql.exs	/^  test "fragment array types" do$/;"	t
fragmented schemaless types	deps/ecto/integration_test/sql/sql.exs	/^  test "fragmented schemaless types" do$/;"	t
fragmented types	deps/ecto/integration_test/sql/sql.exs	/^  test "fragmented types" do$/;"	t
frames	deps/plug/lib/plug/debugger.ex	/^  defp frames(stacktrace, opts) do$/;"	f
from	deps/coherence/test/support/email.exs	/^  defp from(email, from), do: Map.put(email, :from, from)$/;"	f
from	deps/ecto/integration_test/sql/subquery.exs	/^  test "from: subqueries with aggregates" do$/;"	t
from	deps/ecto/integration_test/sql/subquery.exs	/^  test "from: subqueries with map and select expression" do$/;"	t
from	deps/ecto/integration_test/sql/subquery.exs	/^  test "from: subqueries with map update and select expression" do$/;"	t
from	deps/ecto/integration_test/sql/subquery.exs	/^  test "from: subqueries with parameters" do$/;"	t
from	deps/ecto/integration_test/sql/subquery.exs	/^  test "from: subqueries with select source" do$/;"	t
from	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp from(%{from: from} = query, sources) do$/;"	f
from	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp from(%{from: from} = query, sources) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defmacro from(expr, kw \\\\ []) do$/;"	a
from	deps/ecto/lib/ecto/query.ex	/^  defp from([], _env, _count_bind, quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{:on, _value}|_], _env, _count_bind, _quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{join, expr}|t], env, count_bind, quoted, binds) when join in @joins do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{key, _value}|_], _env, _count_bind, _quoted, _binds) do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{type, expr}|t], env, count_bind, quoted, binds) when type in @binds do$/;"	f
from	deps/ecto/lib/ecto/query.ex	/^  defp from([{type, expr}|t], env, count_bind, quoted, binds) when type in @no_binds do$/;"	f
from	deps/swoosh/lib/swoosh/email.ex	/^  def from(%__MODULE__{} = email, from) do$/;"	f
from_clock	deps/timex/lib/time/duration.ex	/^  def from_clock({hour,minute,second,usec}) do$/;"	f
from_date	deps/ecto/lib/ecto/date_time.ex	/^  def from_date(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
from_date_and_time	deps/ecto/lib/ecto/date_time.ex	/^  def from_date_and_time(%Ecto.Date{year: year, month: month, day: day},$/;"	f
from_days	deps/timex/lib/time/duration.ex	/^  def from_days(d), do: from_seconds(d * @secs_in_day)$/;"	f
from_email	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  defp from_email do$/;"	f
from_email	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  defp from_email do$/;"	f
from_email	deps/coherence/test/support/email.exs	/^  defp from_email do$/;"	f
from_env	deps/phoenix/lib/phoenix/config.ex	/^  def from_env(otp_app, module, defaults) do$/;"	f
from_erl	deps/ecto/lib/ecto/date_time.ex	/^  def from_erl({hour, min, sec}) do$/;"	f
from_erl	deps/ecto/lib/ecto/date_time.ex	/^  def from_erl({year, month, day}) do$/;"	f
from_erl	deps/ecto/lib/ecto/date_time.ex	/^  def from_erl({{year, month, day}, {hour, min, sec}}) do$/;"	f
from_erl	deps/timex/lib/time/duration.ex	/^  def from_erl({mega, sec, micro}),$/;"	f
from_files_in_dir	deps/tzdata/lib/tzdata/basic_data_map.ex	/^  def from_files_in_dir(dir_name) do$/;"	f
from_hours	deps/timex/lib/time/duration.ex	/^  def from_hours(h), do: from_seconds(h * @secs_in_hour)$/;"	f
from_iso_day	deps/timex/lib/date/date.ex	/^  def from_iso_day(%Date{year: year}, day) when is_day_of_year(day) do$/;"	f
from_iso_day	deps/timex/lib/datetime/datetime.ex	/^  def from_iso_day(%DateTime{year: year} = date, day) when is_day_of_year(day) do$/;"	f
from_iso_day	deps/timex/lib/datetime/erlang.ex	/^  def from_iso_day(_,_), do: {:error, :invalid_date}$/;"	f
from_iso_day	deps/timex/lib/datetime/erlang.ex	/^  def from_iso_day({y,m,d}, day) when is_day_of_year(day) and is_date(y,m,d) do$/;"	f
from_iso_day	deps/timex/lib/datetime/erlang.ex	/^  def from_iso_day({{y,m,d},{_,_,_,_}=time}, day) when is_day_of_year(day) and is_date(y,m,d) do$/;"	f
from_iso_day	deps/timex/lib/datetime/erlang.ex	/^  def from_iso_day({{y,m,d},{_,_,_}=time}, day) when is_day_of_year(day) and is_date(y,m,d) do$/;"	f
from_iso_day	deps/timex/lib/datetime/map.ex	/^  def from_iso_day(map, day),         do: convert(map, :from_iso_day, [day])$/;"	f
from_iso_day	deps/timex/lib/datetime/naivedatetime.ex	/^  def from_iso_day(%NaiveDateTime{year: year} = date, day) when is_day_of_year(day) do$/;"	f
from_iso_day	deps/timex/lib/protocol.ex	/^  def from_iso_day(%{__struct__: _} = d, _day), do: Timex.from_iso_day(Map.from_struct(d))$/;"	f
from_iso_day	deps/timex/lib/protocol.ex	/^  def from_iso_day(_datetime, _day), do: {:error, :invalid_date}$/;"	f
from_iso_day	deps/timex/lib/protocol.ex	/^  def from_iso_day(datetime, day)$/;"	f
from_iso_day	deps/timex/lib/timex.ex	/^  def from_iso_day(_), do: {:error, {:from_iso_day, :invalid_iso_day}}$/;"	f
from_iso_day	deps/timex/lib/timex.ex	/^  def from_iso_day(day) when is_day_of_year(day) do$/;"	f
from_iso_day	deps/timex/lib/timex.ex	/^  def from_iso_day(day, datetime), do: Timex.Protocol.from_iso_day(datetime, day)$/;"	f
from_iso_day	deps/timex/lib/timex.ex	/^  def from_iso_day(day, year) when is_day_of_year(day) and is_year(year) do$/;"	f
from_iso_triplet	deps/timex/lib/timex.ex	/^  def from_iso_triplet({_, _, _}), do: {:error, {:from_iso_triplet, :invalid_triplet}}$/;"	f
from_iso_triplet	deps/timex/lib/timex.ex	/^  def from_iso_triplet({year, week, weekday})$/;"	f
from_map!	deps/phoenix/lib/phoenix/socket/message.ex	/^  def from_map!(map) when is_map(map) do$/;"	f
from_microseconds	deps/timex/lib/time/duration.ex	/^  def from_microseconds(us) do$/;"	f
from_milliseconds	deps/timex/lib/time/duration.ex	/^  def from_milliseconds(ms), do: from_microseconds(ms * @usecs_in_msec)$/;"	f
from_minutes	deps/timex/lib/time/duration.ex	/^  def from_minutes(m), do: from_seconds(m * @secs_in_min)$/;"	f
from_named_captures	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^  defp from_named_captures(nc, opts) do$/;"	f
from_now	deps/ecto/integration_test/cases/interval.exs	/^  test "from_now" do$/;"	t
from_now	deps/ecto/lib/ecto/query/api.ex	/^  def from_now(count, interval), do: doc! [count, interval]$/;"	f
from_now	deps/timex/lib/timex.ex	/^  def from_now(datetime), do: from_now(datetime, Timex.Translator.default_locale)$/;"	f
from_now	deps/timex/lib/timex.ex	/^  def from_now(datetime, locale) when is_binary(locale) do$/;"	f
from_now	deps/timex/lib/timex.ex	/^  def from_now(datetime, reference_date),$/;"	f
from_now	deps/timex/lib/timex.ex	/^  def from_now(datetime, reference_date, locale) when is_binary(locale) do$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(_, _, _), do: :error$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(_, _, _, _),$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(_, _, _, _, _, _, _), do: :error$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(hour, min, sec, usec) when is_time(hour, min, sec, usec),$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(year, month, day) when is_date(year, month, day) do$/;"	f
from_parts	deps/ecto/lib/ecto/date_time.ex	/^  defp from_parts(year, month, day, hour, min, sec, usec)$/;"	f
from_path	deps/mime/lib/mime.ex	/^  def from_path(path) do$/;"	f
from_seconds	deps/timex/lib/time/duration.ex	/^  def from_seconds(s), do: from_microseconds(s * @usecs_in_sec)$/;"	f
from_set_to_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp from_set_to_sent(%Conn{state: :set} = conn), do: Conn.send_resp(conn)$/;"	f
from_set_to_sent	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp from_set_to_sent(conn), do: conn$/;"	f
from_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp from_sources(%Ecto.SubQuery{query: query}), do: from_sources(query.from)$/;"	f
from_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp from_sources(nil), do: "query"$/;"	f
from_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp from_sources({source, schema}), do: schema || source$/;"	f
from_string	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def from_string(string, opts \\\\ []) when is_binary(string) do$/;"	f
from_string	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^  def from_string(_, _) do$/;"	f
from_string	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^  def from_string(string, opts \\\\ [])$/;"	f
from_string	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^  def from_string(string, opts) when is_binary(string) do$/;"	f
from_time	deps/timex/lib/time/duration.ex	/^  def from_time(%Time{} = t) do$/;"	f
from_unix	deps/timex/lib/timex.ex	/^  def from_unix(secs, unit \\\\ :seconds), do: DateTime.from_unix!(secs, unit)$/;"	f
from_unix!	deps/ecto/lib/ecto/date_time.ex	/^  def from_unix!(integer, unit) do$/;"	f
from_weeks	deps/timex/lib/time/duration.ex	/^  def from_weeks(w), do: from_seconds(w * @secs_in_week)$/;"	f
fully_expand	deps/ecto/lib/ecto/query/builder/dynamic.ex	/^  def fully_expand(query, %{file: file, line: line, binding: binding} = dynamic) do$/;"	f
fuzzy_match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def fuzzy_match("*", nil), do: 0$/;"	f
fuzzy_match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def fuzzy_match(_, nil), do: nil$/;"	f
fuzzy_match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def fuzzy_match(mask, value) when is_binary(mask) and is_binary(value) do$/;"	f
fuzzy_match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def fuzzy_match(nil, _), do: nil$/;"	f
gc_name	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def gc_name(pubsub_server, shard) do$/;"	f
gen_coherence_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_config(config) do$/;"	f
gen_coherence_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_config(config) do$/;"	f
gen_coherence_controllers	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_controllers(%{controllers: true, boilerplate: true, binding: binding, web_path: web_path} = config) do$/;"	f
gen_coherence_controllers	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_controllers(config), do: config$/;"	f
gen_coherence_controllers	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_controllers(%{controllers: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_controllers	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_controllers(config), do: config$/;"	f
gen_coherence_mailer	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_mailer(%{binding: binding, use_email?: true, boilerplate: true, web_path: web_path} = config) do$/;"	f
gen_coherence_mailer	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_mailer(config), do: config$/;"	f
gen_coherence_mailer	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_mailer(%{binding: binding, use_email?: true, boilerplate: true} = config) do$/;"	f
gen_coherence_mailer	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_mailer(config), do: config$/;"	f
gen_coherence_messages	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_messages(%{messages: true, boilerplate: true, binding: binding, web_path: web_path} = config) do$/;"	f
gen_coherence_messages	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_messages(config), do: config$/;"	f
gen_coherence_messages	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_messages(%{messages: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_messages	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_messages(config), do: config$/;"	f
gen_coherence_templates	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def gen_coherence_templates(%{templates: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_templates	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def gen_coherence_templates(config), do: config$/;"	f
gen_coherence_templates	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def gen_coherence_templates(%{templates: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_templates	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def gen_coherence_templates(config), do: config$/;"	f
gen_coherence_views	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def gen_coherence_views(%{views: true, boilerplate: true, binding: binding, web_path: web_path} = config) do$/;"	f
gen_coherence_views	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def gen_coherence_views(config), do: config$/;"	f
gen_coherence_views	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def gen_coherence_views(%{views: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_views	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def gen_coherence_views(config), do: config$/;"	f
gen_coherence_web	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_web(%{web: true, boilerplate: true, binding: binding, web_path: web_path} = config) do$/;"	f
gen_coherence_web	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_coherence_web(config), do: config$/;"	f
gen_coherence_web	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_web(%{web: true, boilerplate: true, binding: binding} = config) do$/;"	f
gen_coherence_web	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_coherence_web(config), do: config$/;"	f
gen_cookie	deps/coherence/web/models/rememberable.ex	/^  def gen_cookie(user_id, series, token), do: "#{user_id} #{series} #{token}"$/;"	f
gen_invitable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_invitable_migration(%{invitable: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_invitable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_invitable_migration(config), do: config$/;"	f
gen_invitable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_invitable_migration(%{invitable: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_invitable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_invitable_migration(config), do: config$/;"	f
gen_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_migration(%{migrations: true, boilerplate: true} = config) do$/;"	f
gen_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_migration(config), do: config$/;"	f
gen_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_migration(%{migrations: true, boilerplate: true} = config) do$/;"	f
gen_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_migration(config), do: config$/;"	f
gen_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_model(%{user_schema: user_schema, boilerplate: true, models: true,$/;"	f
gen_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_model(config), do: config$/;"	f
gen_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_model(%{user_schema: user_schema, boilerplate: true, models: true,$/;"	f
gen_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_model(config), do: config$/;"	f
gen_redirects	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_redirects(%{boilerplate: true, binding: binding, web_path: web_path} = config) do$/;"	f
gen_redirects	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_redirects(config), do: config$/;"	f
gen_redirects	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_redirects(%{boilerplate: true, binding: binding} = config) do$/;"	f
gen_redirects	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_redirects(config), do: config$/;"	f
gen_reference	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_reference(table_name) do$/;"	f
gen_reference	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_reference(table_name) do$/;"	f
gen_rememberable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_rememberable_migration(%{rememberable: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_rememberable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_rememberable_migration(config), do: config$/;"	f
gen_rememberable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_rememberable_migration(%{rememberable: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_rememberable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_rememberable_migration(config), do: config$/;"	f
gen_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def gen_salt(log_rounds \\\\ @log_rounds, legacy \\\\ false)$/;"	f
gen_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def gen_salt(log_rounds, _) when not is_integer(log_rounds) do$/;"	f
gen_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def gen_salt(log_rounds, legacy) when log_rounds < 4, do: gen_salt(4, legacy)$/;"	f
gen_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def gen_salt(log_rounds, legacy) when log_rounds > 31, do: gen_salt(31, legacy)$/;"	f
gen_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def gen_salt(log_rounds, legacy) when log_rounds in 4..31 do$/;"	f
gen_series	deps/coherence/web/models/rememberable.ex	/^  defp gen_series do$/;"	f
gen_server_args	deps/exactor/lib/exactor/operations.ex	/^  defp gen_server_args(options, type, msg) do$/;"	f
gen_table_statement	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_table_statement(table_name) do$/;"	f
gen_table_statement	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_table_statement(table_name) do$/;"	f
gen_token	deps/coherence/web/models/rememberable.ex	/^  defp gen_token do$/;"	f
gen_trackable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_trackable_migration(%{trackable_table: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_trackable_migration	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp gen_trackable_migration(config), do: config$/;"	f
gen_trackable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_trackable_migration(%{trackable_table: true, migrations: true, boilerplate: true} = config) do$/;"	f
gen_trackable_migration	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp gen_trackable_migration(config), do: config$/;"	f
general	deps/ecto/lib/mix/tasks/ecto.ex	/^  defp general() do$/;"	f
generate	deps/ecto/lib/ecto/uuid.ex	/^  def generate do$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  def generate(secret, salt, opts \\\\ []) do$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp generate(_fun, _salt, _iterations, max_length, _block_index, acc, length)$/;"	f
generate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp generate(fun, salt, iterations, max_length, block_index, acc, length) do$/;"	f
generate_appups	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_appups([], _output_dir), do: :ok$/;"	f
generate_appups	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_appups([{app, v1, v2}|apps], output_dir) do$/;"	f
generate_base_config	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_base_config(base_config_path) do$/;"	f
generate_binary_message	deps/boltex/lib/boltex/bolt.ex	/^  defp generate_binary_message({messages, signature}) do$/;"	f
generate_chunks	deps/boltex/lib/boltex/bolt.ex	/^  defp generate_chunks([], chunks) do$/;"	f
generate_chunks	deps/boltex/lib/boltex/bolt.ex	/^  defp generate_chunks([message | messages], chunks) do$/;"	f
generate_chunks	deps/boltex/lib/boltex/bolt.ex	/^  defp generate_chunks([message | messages], chunks)$/;"	f
generate_chunks	deps/boltex/lib/boltex/bolt.ex	/^  defp generate_chunks(messages, chunks \\\\ [])$/;"	f
generate_funs	deps/exactor/lib/exactor/operations.ex	/^  defp generate_funs(type, req_def, options) do$/;"	f
generate_instruction	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction(:added, file),   do: {:add_module, module_name(file)}$/;"	f
generate_instruction	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction(:changed, {v1_file, v2_file}) do$/;"	f
generate_instruction	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction(:deleted, file), do: {:delete_module, module_name(file)}$/;"	f
generate_instruction_advanced	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction_advanced(m, _is_sup, false, []),       do: {:load_module, m}$/;"	f
generate_instruction_advanced	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction_advanced(m, _is_sup, false, dep_mods), do: {:load_module, m, dep_mods}$/;"	f
generate_instruction_advanced	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction_advanced(m, _is_sup, true, []),       do: {:update, m, {:advanced, []}}$/;"	f
generate_instruction_advanced	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction_advanced(m, _is_sup, true, dep_mods), do: {:update, m, {:advanced, []}, dep_mods}$/;"	f
generate_instruction_advanced	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instruction_advanced(m, true, _is_special, _dep_mods), do: {:update, m, :supervisor}$/;"	f
generate_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instructions(:changed, files) do$/;"	f
generate_instructions	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp generate_instructions(type, files) do$/;"	f
generate_letters	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_letters(sources) do$/;"	f
generate_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp generate_manifest(files, old_digests, output_path) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names([], acc, _found) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names([letter|rest], acc, found) do$/;"	f
generate_names	deps/ecto/lib/ecto/query/inspect.ex	/^  defp generate_names(letters) do$/;"	f
generate_new_digests	deps/phoenix/lib/phoenix/digester.ex	/^  defp generate_new_digests(files) do$/;"	f
generate_nodetool	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_nodetool(bin_dir) do$/;"	f
generate_overlay_vars	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_overlay_vars(release) do$/;"	f
generate_relup	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_relup(%Release{is_upgrade: false}, _rel_dir), do: :ok$/;"	f
generate_relup	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_relup(%Release{name: name, upgrade_from: upfrom, profile: %Profile{output_dir: output_dir}} = release, rel_dir) do$/;"	f
generate_request_def	deps/exactor/lib/exactor/operations.ex	/^  defp generate_request_def(type, req_def, options) do$/;"	f
generate_request_id	deps/plug/lib/plug/request_id.ex	/^  defp generate_request_id do$/;"	f
generate_secure_cookie	deps/distillery/lib/distillery/tasks/init.ex	/^  defp generate_secure_cookie do$/;"	f
generate_start_erl_data	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_start_erl_data(%Release{profile: %Profile{include_erts: path}} = release, rel_dir)$/;"	f
generate_start_erl_data	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_start_erl_data(%Release{version: version, profile: %Profile{include_erts: false}}, rel_dir) do$/;"	f
generate_start_erl_data	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_start_erl_data(release, rel_dir) do$/;"	f
generate_sys_config	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_sys_config(%Release{profile: %Profile{config: base_config_path, sys_config: config_path}} = rel, rel_dir)$/;"	f
generate_sys_config	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_sys_config(%Release{profile: %Profile{config: config_path}}, rel_dir) do$/;"	f
generate_token	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def generate_token() do$/;"	f
generate_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp generate_token do$/;"	f
generate_vm_args	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_vm_args(%Release{profile: %Profile{vm_args: nil}} = rel, rel_dir) do$/;"	f
generate_vm_args	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp generate_vm_args(%Release{profile: %Profile{vm_args: path}} = rel, rel_dir) do$/;"	f
generates files for	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates files for --full-invitable --no-registerable" do$/;"	t
generates files for	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates files for --full-invitable --no-registerable" do$/;"	t
generates files for authenticatable recoverable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates files for authenticatable recoverable" do$/;"	t
generates files for authenticatable recoverable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates files for authenticatable recoverable" do$/;"	t
generates files for authenticatable recoverable invitable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates files for authenticatable recoverable invitable" do$/;"	t
generates files for authenticatable recoverable invitable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates files for authenticatable recoverable invitable" do$/;"	t
generates files for authenticatable recoverable registerable confirmable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates files for authenticatable recoverable registerable confirmable" do$/;"	t
generates files for authenticatable recoverable registerable confirmable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates files for authenticatable recoverable registerable confirmable" do$/;"	t
generates files for authenticatable recoverable unlockable_with_token	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates files for authenticatable recoverable unlockable_with_token" do$/;"	t
generates files for authenticatable recoverable unlockable_with_token	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates files for authenticatable recoverable unlockable_with_token" do$/;"	t
generates_files_for_authenticatable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  test "generates_files_for_authenticatable" do$/;"	t
generates_files_for_authenticatable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  test "generates_files_for_authenticatable" do$/;"	t
generator_paths	deps/phoenix/lib/mix/phoenix.ex	/^  def generator_paths do$/;"	f
generic_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp generic_input(type, form, field, opts) when is_atom(field) and is_list(opts) do$/;"	f
get	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def get(resource, id) do$/;"	f
get	deps/coherence/lib/coherence/config.ex	/^  def get(key, default \\\\ nil) do$/;"	f
get	deps/con_cache/lib/con_cache.ex	/^  def get(cache_id, key), do: Operations.get(Owner.cache(cache_id), key)$/;"	f
get	deps/con_cache/lib/con_cache/operations.ex	/^  def get(cache, key) do$/;"	f
get	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def get(opts \\\\ []) do$/;"	f
get	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def get(name, env \\\\ :default, opts \\\\ [])$/;"	f
get	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def get(name, env, opts) when is_atom(name) and is_atom(env) do$/;"	f
get	deps/ecto/integration_test/cases/repo.exs	/^  test "get(!) with binary_id" do$/;"	t
get	deps/ecto/integration_test/cases/repo.exs	/^  test "get(!) with custom source" do$/;"	t
get	deps/ecto/integration_test/cases/repo.exs	/^  test "get(!)" do$/;"	t
get	deps/ecto/lib/ecto/repo.ex	/^      def get(queryable, id, opts \\\\ []) do$/;"	f
get	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get(repo, adapter, queryable, id, opts) do$/;"	f
get	deps/plug/lib/plug/conn/unfetched.ex	/^  def get(%{aspect: aspect}, key, _value) do$/;"	f
get	deps/plug/lib/plug/router.ex	/^  defmacro get(path, options, contents \\\\ []) do$/;"	a
get	deps/plug/lib/plug/session/cookie.ex	/^  def get(conn, cookie, opts) do$/;"	f
get	deps/plug/lib/plug/session/ets.ex	/^  def get(_conn, sid, table) do$/;"	f
get	deps/postgrex/lib/postgrex/type_manager.ex	/^  def get(module, key) do$/;"	f
get	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def get(id) do$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^    def get(unquote(type), directive, flags, mods, width) do$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(:asn1_generalized_time_tz, directive, flags, mods, width) do$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(type, _directive, _flags, _mods, _width),$/;"	f
get	deps/timex/lib/parse/datetime/tokenizers/directive.ex	/^  def get(type, directive, opts \\\\ []) do$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(:local, datetime), do: local(datetime)$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(:utc, _datetime),  do: %TimezoneInfo{}$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(tz, datetime \\\\ :calendar.universal_time())$/;"	f
get	deps/timex/lib/timezone/timezone.ex	/^  def get(tz, datetime) do$/;"	f
get public page	deps/coherence/test/controllers/rememberable_test.exs	/^    test "get public page", %{conn: conn} do$/;"	t
get!	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def get!(resource, id) do$/;"	f
get!	deps/ecto/lib/ecto/repo.ex	/^      def get!(queryable, id, opts \\\\ []) do$/;"	f
get!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get!(repo, adapter, queryable, id, opts) do$/;"	f
get_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "get_<%= schema.singular %>! returns the <%= schema.singular %> with given id" do$/;"	t
get_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def get_<%= schema.singular %>!(id), do: Repo.get!(<%= inspect schema.alias %>, id)$/;"	f
get_added_apps	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_added_apps(v2_apps, changed) do$/;"	f
get_added_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_added_relup_code_paths([], _output_dir, paths), do: paths$/;"	f
get_added_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_added_relup_code_paths([{app, v2}|apps], output_dir, paths) do$/;"	f
get_and_update	deps/plug/lib/plug/conn/unfetched.ex	/^  def get_and_update(%{aspect: aspect}, key, _fun) do$/;"	f
get_app	deps/plug/lib/plug/debugger.ex	/^  defp get_app(module) do$/;"	f
get_application_env	deps/coherence/lib/coherence/config.ex	/^  defp get_application_env(key, default \\\\ nil) do$/;"	f
get_apps	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def get_apps(%Release{name: name, applications: apps} = release) do$/;"	f
get_apps	deps/distillery/lib/mix/lib/releases/utils.ex	/^  defp get_apps(%App{} = app, acc) do$/;"	f
get_apps	deps/distillery/lib/mix/lib/releases/utils.ex	/^  defp get_apps(nil, acc), do: Enum.uniq(acc)$/;"	f
get_apps	deps/distillery/lib/mix/lib/releases/utils.ex	/^  defp get_apps({:error, _} = err, _acc), do: err$/;"	f
get_assoc	deps/ecto/lib/ecto/changeset.ex	/^  defp get_assoc(%{types: types}, assoc) do$/;"	f
get_attribute	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp get_attribute(module, attr) do$/;"	f
get_auth_header	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp get_auth_header(conn), do: {conn, get_first_req_header(conn, "authorization")}$/;"	f
get_authenticated_user	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def get_authenticated_user(conn, key \\\\ :current_user) do$/;"	f
get_by	deps/ecto/integration_test/cases/repo.exs	/^  test "get_by(!)" do$/;"	t
get_by	deps/ecto/lib/ecto/repo.ex	/^      def get_by(queryable, clauses, opts \\\\ []) do$/;"	f
get_by	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get_by(repo, adapter, queryable, clauses, opts) do$/;"	f
get_by!	deps/ecto/lib/ecto/repo.ex	/^      def get_by!(queryable, clauses, opts \\\\ []) do$/;"	f
get_by!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def get_by!(repo, adapter, queryable, clauses, opts) do$/;"	f
get_by_pid	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def get_by_pid(%State{pids: pids, values: values}, pid) do$/;"	f
get_by_pid	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def get_by_pid(%State{values: values}, pid, topic, key) do$/;"	f
get_by_topic	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def get_by_topic(%State{values: values} = state, topic) do$/;"	f
get_change	deps/ecto/lib/ecto/changeset.ex	/^  def get_change(%Changeset{changes: changes} = _changeset, key, default \\\\ nil) when is_atom(key) do$/;"	f
get_changed	deps/ecto/lib/ecto/changeset.ex	/^  defp get_changed(data, types, old_changes, new_changes, errors, valid?) do$/;"	f
get_changed_apps	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_changed_apps(a, b) do$/;"	f
get_changed_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_changed_relup_code_paths([], _output_dir, v1_paths, v2_paths) do$/;"	f
get_changed_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_changed_relup_code_paths([{app, v1, v2}|apps], output_dir, v1_paths, v2_paths) do$/;"	f
get_code_paths	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def get_code_paths(%__MODULE__{profile: %Profile{output_dir: output_dir}} = release) do$/;"	f
get_common_bindings	deps/distillery/lib/distillery/tasks/init.ex	/^  defp get_common_bindings(opts) do$/;"	f
get_config_and_stop_agent	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp get_config_and_stop_agent(agent) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def get_config_options([]) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def get_config_options([], _opts) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def get_config_options(config_opts, opts) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def get_config_options(opts) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def get_config_options([]) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def get_config_options([], _opts) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def get_config_options(config_opts, opts) do$/;"	f
get_config_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def get_config_options(opts) do$/;"	f
get_conn	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp get_conn(pool) do$/;"	f
get_context	deps/decimal/lib/decimal.ex	/^  def get_context do$/;"	f
get_context	deps/plug/lib/plug/debugger.ex	/^  defp get_context(_app1, _app2),             do: :all$/;"	f
get_context	deps/plug/lib/plug/debugger.ex	/^  defp get_context(app, app) when app != nil, do: :app$/;"	f
get_cookie	deps/distillery/lib/distillery/tasks/init.ex	/^  defp get_cookie do$/;"	f
get_credential_store	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def get_credential_store do$/;"	f
get_csrf_from_session	deps/plug/lib/plug/csrf_protection.ex	/^  defp get_csrf_from_session(conn) do$/;"	f
get_csrf_token	deps/phoenix/lib/phoenix/controller.ex	/^  defdelegate get_csrf_token(), to: Plug.CSRFProtection$/;"	d
get_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  def get_csrf_token do$/;"	f
get_current_options	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp get_current_options(options) do$/;"	f
get_current_options	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp get_current_options(options) do$/;"	f
get_data	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  defp get_data(credentials), do: Agent.get_user_data(credentials)$/;"	f
get_day_periods	deps/timex/lib/l10n/translator.ex	/^  def get_day_periods(locale) do$/;"	f
get_dependencies	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp get_dependencies(name) do$/;"	f
get_domain_text	deps/timex/lib/l10n/translator.ex	/^  defp get_domain_text(locale, domain, msgid) do$/;"	f
get_editor	deps/plug/lib/plug/debugger.ex	/^  defp get_editor(file, line, editor) do$/;"	f
get_entities	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp get_entities(records) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({_module, :__FILE__, 1, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({_module, :__MODULE__, 1, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({fun, arity, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, :__MODULE__, 0, location}) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, fun, args, location}) when is_list(args) do$/;"	f
get_entry	deps/plug/lib/plug/debugger.ex	/^  defp get_entry({module, fun, arity, location}) do$/;"	f
get_error_details	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defp get_error_details(output) do$/;"	f
get_erts_version	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_erts_version(%Release{profile: %Profile{include_erts: _}}),$/;"	f
get_erts_version	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_erts_version(%Release{profile: %Profile{include_erts: path}}) when is_binary(path),$/;"	f
get_field	deps/ecto/lib/ecto/changeset.ex	/^  def get_field(%Changeset{changes: changes, data: data, types: types}, key, default \\\\ nil) do$/;"	f
get_field_list	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp get_field_list(initial_fields, config) do$/;"	f
get_field_list	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp get_field_list(initial_fields, config) do$/;"	f
get_field_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_field_source(%{data: %{__struct__: schema}}, field) when is_atom(schema),$/;"	f
get_field_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_field_source(%{}, field),$/;"	f
get_first_req_header	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def get_first_req_header(conn, header), do: conn |> get_req_header(header) |> header_hd$/;"	f
get_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def get_flash(conn) do$/;"	f
get_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def get_flash(conn, key) do$/;"	f
get_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate get_flash(conn), to: Phoenix.Controller$/;"	d
get_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate get_flash(conn, key), to: Phoenix.Controller$/;"	d
get_format	deps/phoenix/lib/phoenix/controller.ex	/^  def get_format(conn) do$/;"	f
get_fractional_seconds	deps/timex/lib/format/duration/formatters/default.ex	/^  defp get_fractional_seconds(seconds, 0, components),$/;"	f
get_fractional_seconds	deps/timex/lib/format/duration/formatters/default.ex	/^  defp get_fractional_seconds(seconds, micro, components) do$/;"	f
get_hash	deps/comeonin/lib/comeonin/base.ex	/^      defp get_hash(%{encrypted_password: hash}), do: {:ok, hash}$/;"	f
get_hash	deps/comeonin/lib/comeonin/base.ex	/^      defp get_hash(%{password_hash: hash}), do: {:ok, hash}$/;"	f
get_hash	deps/comeonin/lib/comeonin/base.ex	/^      defp get_hash(_), do: {:error, "no password hash found in the user struct"}$/;"	f
get_header	deps/plug/lib/plug/parsers/multipart.ex	/^  defp get_header(headers, key) do$/;"	f
get_id	deps/boltex/lib/boltex/error.ex	/^  defp get_id(_), do: nil$/;"	f
get_id	deps/boltex/lib/boltex/error.ex	/^  defp get_id(port) when is_port(port) do$/;"	f
get_id	deps/boltex/lib/boltex/error.ex	/^  defp get_id({:sslsocket, {:gen_tcp, port, _tls, _unused_yet}, _pid}) do$/;"	f
get_idle	deps/db_connection/lib/db_connection/connection.ex	/^  defp get_idle(opts) do$/;"	f
get_info	deps/db_connection/lib/db_connection.ex	/^  defp get_info(conn), do: Process.get(key(conn), :closed)$/;"	f
get_invalid_login	deps/coherence/web/models/rememberable.ex	/^  def get_invalid_login(user_id, series, token) do$/;"	f
get_invalid_login!	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp get_invalid_login!(repo, user_id, series, token) do$/;"	f
get_invalid_login!	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp get_invalid_login!(repo, user_id, series, token) do$/;"	f
get_invalid_login!	deps/coherence/web/controllers/session_controller.ex	/^  defp get_invalid_login!(repo, user_id, series, token) do$/;"	f
get_json_encoder	deps/phoenix/lib/phoenix/controller.ex	/^  defp get_json_encoder do$/;"	f
get_key_base	deps/phoenix/lib/phoenix/token.ex	/^  defp get_key_base(%Phoenix.Socket{} = socket),$/;"	f
get_key_base	deps/phoenix/lib/phoenix/token.ex	/^  defp get_key_base(%Plug.Conn{} = conn),$/;"	f
get_key_base	deps/phoenix/lib/phoenix/token.ex	/^  defp get_key_base(endpoint) when is_atom(endpoint),$/;"	f
get_key_base	deps/phoenix/lib/phoenix/token.ex	/^  defp get_key_base(string) when is_binary(string) and byte_size(string) >= 20,$/;"	f
get_locale	deps/gettext/lib/gettext.ex	/^  def get_locale(backend) do$/;"	f
get_login_cookie	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def get_login_cookie(conn) do$/;"	f
get_login_cookie	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def get_login_cookie(conn) do$/;"	f
get_login_cookie	deps/coherence/web/controllers/session_controller.ex	/^  def get_login_cookie(conn) do$/;"	f
get_members	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  defp get_members(server_name) do$/;"	f
get_members	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  defp get_members(server_name, node_name) do$/;"	f
get_meta	deps/ecto/lib/ecto.ex	/^  def get_meta(struct, :context),$/;"	f
get_meta	deps/ecto/lib/ecto.ex	/^  def get_meta(struct, :prefix),$/;"	f
get_meta	deps/ecto/lib/ecto.ex	/^  def get_meta(struct, :source),$/;"	f
get_meta	deps/ecto/lib/ecto.ex	/^  def get_meta(struct, :state),$/;"	f
get_microseconds	deps/timex/lib/datetime/erlang.ex	/^  defp get_microseconds({_, _, _, {us, _precision}}) when is_integer(us),$/;"	f
get_microseconds	deps/timex/lib/datetime/erlang.ex	/^  defp get_microseconds({_, _, _,us}) when is_integer(us),$/;"	f
get_microseconds	deps/timex/lib/datetime/erlang.ex	/^  defp get_microseconds({_, _, _}),$/;"	f
get_microseconds	deps/timex/lib/datetime/erlang.ex	/^  defp get_microseconds({date, time}) when is_tuple(date) and is_tuple(time),$/;"	f
get_months	deps/timex/lib/l10n/translator.ex	/^  def get_months(locale) do$/;"	f
get_months_abbreviated	deps/timex/lib/l10n/translator.ex	/^  def get_months_abbreviated(locale) do$/;"	f
get_node_by_id	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def get_node_by_id(node_type, id) do$/;"	f
get_nodes_by_label	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def get_nodes_by_label(node_type) do$/;"	f
get_opt	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp get_opt(opts, key, default) do$/;"	f
get_or_store	deps/con_cache/lib/con_cache.ex	/^  def get_or_store(cache_id, key, store_fun),$/;"	f
get_or_store	deps/con_cache/lib/con_cache/operations.ex	/^  def get_or_store(cache, key, fun) do$/;"	f
get_organisation	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_organisation(id) do$/;"	f
get_organisation!	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_organisation!(id) do$/;"	f
get_plural_domain_text	deps/timex/lib/l10n/translator.ex	/^  defp get_plural_domain_text(locale, domain, msgid, msgid_plural, n) do$/;"	f
get_port	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^  def get_port(nil), do: nil$/;"	f
get_port	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^  def get_port(protocol) do$/;"	f
get_properties	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_properties(map, resource) do$/;"	f
get_protocol	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^  def get_protocol(nil), do: nil$/;"	f
get_protocol	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^  def get_protocol(port) do$/;"	f
get_protocol	deps/fuzzyurl/lib/fuzzyurl/protocols.ex	/^  def get_protocol(port) when is_integer(port) do$/;"	f
get_real_path	deps/timex/lib/timezone/timezone_local.ex	/^  defp get_real_path(path) do$/;"	f
get_recv_timeout	deps/boltex/lib/boltex/bolt.ex	/^  defp get_recv_timeout(options) do$/;"	f
get_ref	deps/ecto/lib/ecto/association.ex	/^  defp get_ref(_primary_key, references, _name), do: references$/;"	f
get_ref	deps/ecto/lib/ecto/association.ex	/^  defp get_ref(nil, nil, name) do$/;"	f
get_ref	deps/ecto/lib/ecto/association.ex	/^  defp get_ref(primary_key, nil, _name), do: elem(primary_key, 0)$/;"	f
get_release_versions	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def get_release_versions(output_dir) do$/;"	f
get_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_relup_code_paths(added, changed, removed, output_dir) do$/;"	f
get_rememberables	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def get_rememberables(id) do$/;"	f
get_rememberables	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def get_rememberables(id) do$/;"	f
get_rememberables	deps/coherence/web/controllers/session_controller.ex	/^  def get_rememberables(id) do$/;"	f
get_removed_apps	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_removed_apps(a, b) do$/;"	f
get_removed_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_removed_relup_code_paths([], _output_dir, paths), do: paths$/;"	f
get_removed_relup_code_paths	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp get_removed_relup_code_paths([{app, v1}|apps], output_dir, paths) do$/;"	f
get_req_header	deps/plug/lib/plug/conn.ex	/^  def get_req_header(%Conn{req_headers: headers}, key) when is_binary(key) do$/;"	f
get_request_id	deps/plug/lib/plug/request_id.ex	/^  defp get_request_id(conn, header) do$/;"	f
get_resource_name	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_resource_name(resource) do$/;"	f
get_resp_header	deps/plug/lib/plug/conn.ex	/^  def get_resp_header(%Conn{resp_headers: headers}, key) when is_binary(key) do$/;"	f
get_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp get_rules(btz_data, rules_name) do$/;"	f
get_schema_source	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_schema_source(resource) do$/;"	f
get_schema_source_for_each	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_schema_source_for_each(list) do$/;"	f
get_secret	deps/phoenix/lib/phoenix/token.ex	/^  defp get_secret(secret_key_base, salt, opts) do$/;"	f
get_session	deps/plug/lib/plug/conn.ex	/^  def get_session(conn, key) do$/;"	f
get_session	deps/plug/lib/plug/conn.ex	/^  defp get_session(%Conn{private: private}) do$/;"	f
get_session_data	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp get_session_data(conn) do$/;"	f
get_site	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def get_site(id) do$/;"	f
get_site!	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def get_site!(id) do$/;"	f
get_site! returns the site with given id	apps/flexcility_web/test/admin_test.exs	/^  test "get_site! returns the site with given id" do$/;"	t
get_snippet	deps/plug/lib/plug/debugger.ex	/^  defp get_snippet(file, line) do$/;"	f
get_source	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp get_source(query, sources, ix, source) do$/;"	f
get_source	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp get_source(query, sources, ix, source) do$/;"	f
get_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_source(%{data: %{__meta__: %{source: {_prefix, source}}}}) when is_binary(source),$/;"	f
get_source	deps/ecto/lib/ecto/changeset.ex	/^  defp get_source(%{data: data}), do:$/;"	f
get_source	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def get_source(repo) do$/;"	f
get_source	deps/plug/lib/plug/debugger.ex	/^  defp get_source(module, file) do$/;"	f
get_source!	deps/ecto/lib/ecto/query/planner.ex	/^  defp get_source!(where, %{sources: sources} = query, ix) do$/;"	f
get_stack	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp get_stack(module) do$/;"	f
get_standard_bindings	deps/distillery/lib/distillery/tasks/init.ex	/^  defp get_standard_bindings(opts) do$/;"	f
get_starting_date	deps/timex/lib/interval/interval.ex	/^    defp get_starting_date(%Timex.Interval{from: from, step: step, left_open: true}), do: Timex.shift(from, step)$/;"	f
get_starting_date	deps/timex/lib/interval/interval.ex	/^    defp get_starting_date(%Timex.Interval{from: from}),                              do: from$/;"	f
get_state	deps/ecto/lib/ecto/repo/schema.ex	/^  defp get_state(%Changeset{data: %{__meta__: %{state: state}}}), do: state$/;"	f
get_state	deps/ecto/lib/ecto/repo/schema.ex	/^  defp get_state(%{__struct__: _}) do$/;"	f
get_state_identifier	deps/exactor/lib/exactor/operations.ex	/^  defp get_state_identifier(:error), do: get_state_identifier({:ok, quote(do: _)})$/;"	f
get_state_identifier	deps/exactor/lib/exactor/operations.ex	/^  defp get_state_identifier({:ok, match}),$/;"	f
get_struct	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_struct(map, resource) do$/;"	f
get_struct_from_node	apps/flexcility/lib/flexcility/utils/utils.ex	/^  def get_struct_from_node(n) do$/;"	f
get_token	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def get_token(conn) do$/;"	f
get_token_from_header	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def get_token_from_header(conn, param),$/;"	f
get_token_from_params	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def get_token_from_params(conn) do$/;"	f
get_token_from_params	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def get_token_from_params(conn, param),$/;"	f
get_token_from_params_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def get_token_from_params_session(conn, param) do$/;"	f
get_token_from_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def get_token_from_session(conn, param),$/;"	f
get_umbrella_bindings	deps/distillery/lib/distillery/tasks/init.ex	/^  defp get_umbrella_bindings(opts) do$/;"	f
get_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_user(id) do$/;"	f
get_user	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def get_user(user_id) do$/;"	f
get_user!	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_user!(id) do$/;"	f
get_user_by_email	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_user_by_email(%{email: email}) do$/;"	f
get_user_by_email!	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_user_by_email!(%{email: email}) do$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/credential_store/agent.ex	/^  def get_user_data(credentials) do$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  def get_user_data({credentials, db_model, id_key}) do$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  def get_user_data({credentials, nil, _}) do$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def get_user_data(_, _, _), do: nil$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def get_user_data(resource, credentials, id_key)$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^        def get_user_data(ip) do$/;"	f
get_user_data	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^        def get_user_data(_, creds, _id_key) do$/;"	f
get_user_with_role_by_email	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def get_user_with_role_by_email(%{email: email}) do$/;"	f
get_valid_key	deps/timex/lib/convert/convert.ex	/^  defp get_valid_key(key) when is_atom(key),$/;"	f
get_valid_key	deps/timex/lib/convert/convert.ex	/^  defp get_valid_key(key),$/;"	f
get_valid_login	deps/coherence/web/models/rememberable.ex	/^  def get_valid_login(user_id, series, token) do$/;"	f
get_valid_login!	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp get_valid_login!(repo, user_id, series, token) do$/;"	f
get_valid_login!	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp get_valid_login!(repo, user_id, series, token) do$/;"	f
get_valid_login!	deps/coherence/web/controllers/session_controller.ex	/^  defp get_valid_login!(repo, user_id, series, token) do$/;"	f
get_weekdays	deps/timex/lib/l10n/translator.ex	/^  def get_weekdays(locale) do$/;"	f
get_weekdays_abbreviated	deps/timex/lib/l10n/translator.ex	/^  def get_weekdays_abbreviated(locale) do$/;"	f
gets results from GenServer	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      test "gets results from GenServer" do$/;"	t
gettext	deps/gettext/lib/gettext.ex	/^  def gettext(backend, msgid, bindings \\\\ %{}) do$/;"	f
gettext	deps/gettext/lib/gettext/compiler.ex	/^      defmacro gettext(msgid, bindings \\\\ Macro.escape(%{})) do$/;"	a
gettext_noop	deps/gettext/lib/gettext/compiler.ex	/^      defmacro gettext_noop(msgid) do$/;"	a
go	deps/postgrex/lib/postgrex/type_server.ex	/^  defp go(%{types: types} = state) do$/;"	f
graceful_permdown	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def graceful_permdown(server_name) do$/;"	f
graph	deps/bolt_sips/lib/bolt_sips/types.ex	/^    def graph(path) do$/;"	f
group	deps/phoenix/lib/phoenix/presence.ex	/^  defp group(presences) do$/;"	f
group_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp group_by(%Query{group_bys: []}, _sources), do: []$/;"	f
group_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp group_by(%Query{group_bys: group_bys} = query, sources) do$/;"	f
group_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp group_by(%Query{group_bys: []}, _sources), do: []$/;"	f
group_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp group_by(%Query{group_bys: group_bys} = query, sources) do$/;"	f
group_by	deps/ecto/lib/ecto/query.ex	/^  defmacro group_by(query, binding \\\\ [], expr) do$/;"	a
group_by!	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  def group_by!(group_by) do$/;"	f
group_by_logical_path	deps/phoenix/lib/phoenix/digester.ex	/^  defp group_by_logical_path(digests) do$/;"	f
guard	deps/exactor/lib/exactor/operations.ex	/^  def guard(options, type) do$/;"	f
h	deps/plug/lib/plug/debugger.ex	/^  defp h(string) do$/;"	f
h_calc_periods_no_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  def h_calc_periods_no_rules(_btz_data, period, _, zone_line_tl, _) when zone_line_tl == [] do$/;"	f
h_calc_periods_no_rules	deps/tzdata/lib/tzdata/period_builder.ex	/^  def h_calc_periods_no_rules(btz_data, period, until_utc, zone_line_tl, letter) do$/;"	f
h_process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp h_process_line(_matches_leap_line_regex = nil, line) do$/;"	f
h_process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp h_process_line(map, _line) do$/;"	f
halt	deps/plug/lib/plug/conn.ex	/^  def halt(%Conn{} = conn) do$/;"	f
halt_with_error	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def halt_with_error(conn, error \\\\ "unauthorized")$/;"	f
halt_with_error	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def halt_with_error(conn, error) do$/;"	f
halt_with_error	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def halt_with_error(conn, error) when is_function(error) do$/;"	f
halt_with_login	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp halt_with_login(conn, realm, error) do$/;"	f
halted?	deps/ecto/lib/ecto/association.ex	/^  defp halted?(_, %{valid?: true}, %{valid?: false}), do: true$/;"	f
halted?	deps/ecto/lib/ecto/association.ex	/^  defp halted?(_, _, _), do: false$/;"	f
halted?	deps/ecto/lib/ecto/association.ex	/^  defp halted?(true, _, _), do: true$/;"	f
handle	deps/db_connection/lib/db_connection.ex	/^  defp handle(%DBConnection{conn_mod: conn_mod} = conn, fun, args, opts) do$/;"	f
handle	deps/db_connection/lib/db_connection.ex	/^  defp handle(conn, conn_state, callback, opts, status) do$/;"	f
handle_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp handle_assign(arg), do: arg$/;"	f
handle_assign	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp handle_assign({:@, meta, [{name, _, atom}]}) when is_atom(name) and is_atom(atom) do$/;"	f
handle_async	deps/connection/lib/connection.ex	/^  defp handle_async(fun, msg, %{mod: mod, mod_state: mod_state} = s) do$/;"	f
handle_backend_result	deps/gettext/lib/gettext.ex	/^  defp handle_backend_result({:default, string}, _backend, _locale, _domain, _msgid),$/;"	f
handle_backend_result	deps/gettext/lib/gettext.ex	/^  defp handle_backend_result({:error, reason}, _backend, _locale, _domain, _msgid) do$/;"	f
handle_backend_result	deps/gettext/lib/gettext.ex	/^  defp handle_backend_result({:missing_bindings, incomplete, missing}, backend, locale, domain, msgid) do$/;"	f
handle_backend_result	deps/gettext/lib/gettext.ex	/^  defp handle_backend_result({:ok, string}, _backend, _locale, _domain, _msgid),$/;"	f
handle_begin	deps/db_connection/lib/db_connection.ex	/^      def handle_begin(_, state) do$/;"	f
handle_begin	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_begin(opts, {conn_mod, state, false}) do$/;"	f
handle_begin	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_begin(_, %{postgres: {_, _}} = s) do$/;"	f
handle_begin	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_begin(opts, s) do$/;"	f
handle_bind	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_bind(query, params, res, opts, s) do$/;"	f
handle_body	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_body(body), do: body$/;"	f
handle_broker	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_broker({:drop, queue_time}, s) do$/;"	f
handle_broker	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_broker({:go, ref, {pid, timeout}, _, _}, s) do$/;"	f
handle_call	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def handle_call(:connect, _from, opts) do$/;"	f
handle_call	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def handle_call(data, _from, opts) do$/;"	f
handle_call	deps/coherence/lib/coherence/rememberable_server.ex	/^  def handle_call({:callback, callback}, _, state) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^        def handle_call(:close, from, s) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^        def handle_call(_, _, %{sock: nil} = s) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^        def handle_call({:recv, bytes, timeout}, _, %{sock: sock} = s) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^        def handle_call({:send, data}, _, %{sock: sock} = s) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^      def handle_call(msg, _from, state) do$/;"	f
handle_call	deps/connection/lib/connection.ex	/^  def handle_call(request, from, %{mod: mod, mod_state: mod_state} = s) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_call({:checkout, ref, queue?, timeout}, {pid, _} = from, s) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_call({:stop, _, _, _}, _, s) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_call({:stop, ref, _, _} = stop, from, %{client: {ref, _}} = s) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call(:checkin, {caller, _}, state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:allow, caller, allow}, _from, %{checkouts: checkouts} = state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:checkout, opts}, {caller, _}, %{checkouts: checkouts} = state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:lookup, opts}, {pid, _},$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:mode, mode}, _from, state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:mode, {:shared, pid}}, _from, %{mode: {:shared, current}} = state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_call({:mode, {:shared, pid}}, _from, state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_call({:checkout, ref, _, timeout}, from, %{client: nil} = state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_call({:checkout, ref, queue?, timeout}, from, state) do$/;"	f
handle_call	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_call({:init, ownership_timeout}, {pid, _} = from, state) do$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^      defp handle_call(unquote(op), 2), do: {:binary_op, unquote(str)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp handle_call(fun, _arity), do: {:fun, Atom.to_string(fun)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^      defp handle_call(unquote(op), 2), do: {:binary_op, unquote(str)}$/;"	f
handle_call	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp handle_call(fun, _arity), do: {:fun, Atom.to_string(fun)}$/;"	f
handle_call	deps/ecto/lib/ecto/registry.ex	/^  def handle_call({:associate, pid, value}, _from, table) do$/;"	f
handle_call	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def handle_call(request, _from, state) do$/;"	f
handle_call	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def handle_call(_request, _from, state) do$/;"	f
handle_call	deps/exactor/lib/exactor/operations.ex	/^      def handle_call({:request, x, y}, _, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_call(:socket, _from, socket) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def handle_call(:stop, _from, output) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def handle_call(:check_symlinks, _from, checked?) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def handle_call({:reload!, endpoint}, from, state) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/config.ex	/^  def handle_call(:stop, _from, {module, defaults}) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/config.ex	/^  def handle_call({:config_change, changed, removed}, _from, {module, defaults}) do$/;"	f
handle_call	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_call(:stop, _from, state), do: {:stop, :shutdown, :ok, state}$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  def handle_call({:subscription, pid}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def handle_call({:demonitor, pid}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def handle_call({:monitor, pid, opts}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def handle_call({:subscription, pid}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call(:graceful_permdown, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call(:replicas, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call(:resubscribe, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call(:unsubscribe, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:list, _topic}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:track, pid, topic, key, meta}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:untrack, pid, topic, key}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:untrack, pid}, _from, state) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:update, pid, topic, key, meta_updater}, _from, state) when is_function(meta_updater) do$/;"	f
handle_call	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_call({:update, pid, topic, key, new_meta}, _from, state) do$/;"	f
handle_call	deps/plug/lib/plug/upload.ex	/^  def handle_call(:upload, {pid, _ref}, dirs) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/notifications.ex	/^  def handle_call({:listen, channel}, {pid, _} = from, s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/notifications.ex	/^  def handle_call({:unlisten, ref}, from, s) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/parameters.ex	/^  def handle_call({:insert, parameters}, {pid, _}, state) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_manager.ex	/^  def handle_call({:get, module, key}, {pid, _}, {keys, mons} = state) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_call(:fetch, from, %{lock: nil} = state) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_call(:fetch, from, %{lock: ref} = state) when is_reference(ref) do$/;"	f
handle_call	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_call({:update, ref, type_infos}, _, %{lock: ref} = state)$/;"	f
handle_call	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def handle_call(:all, _from, state) do$/;"	f
handle_call	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def handle_call(:delete_all, _from, _state) do$/;"	f
handle_call	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def handle_call(:pop, _from, [h|t]) do$/;"	f
handle_call	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def handle_call({:get, id}, _from, state) do$/;"	f
handle_call	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def handle_call({:push, email}, _from, state) do$/;"	f
handle_cast	deps/connection/lib/connection.ex	/^      def handle_cast(msg, state) do$/;"	f
handle_cast	deps/connection/lib/connection.ex	/^  def handle_cast(request, s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:after_connect, _}, s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:after_connect, ref}, %{client: {ref, :connect}} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:cancel, _}, %{queue: :broker}) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:cancel, ref}, %{client: {ref, _}, state: state} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:cancel, ref}, %{queue: queue} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:checkin, _, _}, s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:checkin, ref, state}, %{client: {ref, _}} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:connected, _}, %{idle: :passive} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:connected, ref}, %{client: {ref, :connect}} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:disconnect, ref, err, state}, %{client: {ref, _}} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({:stop, ref, err, state}, %{client: {ref, _}} = s) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_cast({tag, _, _, _}, s) when tag in [:disconnect, :stop] do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({:cancel, ref}, %{client: {_, ref, _}} = state) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({:cancel, ref}, %{queue: queue} = state) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({:checkin, _, _}, state) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({:checkin, ref, conn_state}, %{client: {_, ref, _}} = state) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({:stop, pid}, state) do$/;"	f
handle_cast	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_cast({tag, ref, error, conn_state}, %{client: {_, ref, _}} = state)$/;"	f
handle_cast	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def handle_cast(msg, state) do$/;"	f
handle_cast	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def handle_cast(_msg, state) do$/;"	f
handle_cast	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_cast(:close, socket) do$/;"	f
handle_cast	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  def handle_cast({:down, pid}, state) do$/;"	f
handle_cast	deps/postgrex/lib/postgrex/parameters.ex	/^  def handle_cast({:delete, ref}, state) do$/;"	f
handle_cast	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_cast({:fail, ref}, %{lock: ref} = state) when is_reference(ref) do$/;"	f
handle_cast	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def handle_cast(:new_release_has_been_downloaded, state) do$/;"	f
handle_checkin	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_checkin(state, %{mod: mod} = s) do$/;"	f
handle_checkin	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp handle_checkin(conn_state, state) do$/;"	f
handle_checkout	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_checkout({ref, _} = client, timeout, {pid, _} = from, state, s) do$/;"	f
handle_checkout	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp handle_checkout({ref, mon}, timeout, {pid, _} = from, state) do$/;"	f
handle_close	deps/db_connection/lib/db_connection.ex	/^      def handle_close(_, _, state) do$/;"	f
handle_close	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_close(query, opts, state),$/;"	f
handle_close	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_close(%Query{name: @reserved_prefix <> _} = query, _, s) do$/;"	f
handle_close	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_close(%Query{ref: ref} = query, opts, %{postgres: {postgres, ref}} = s) do$/;"	f
handle_close	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_close(%Query{} = query, _, %{postgres: {_, _}} = s) do$/;"	f
handle_close	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_close(%Query{} = query, opts, s) do$/;"	f
handle_close	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_close(%Stream{query: query}, opts, s) do$/;"	f
handle_close_portal	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_close_portal(%{portal: portal} = cursor, opts, s) do$/;"	f
handle_commit	deps/db_connection/lib/db_connection.ex	/^      def handle_commit(_, state) do$/;"	f
handle_commit	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_commit(opts, {conn_mod, state, true}) do$/;"	f
handle_commit	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_commit(_, %{postgres: {_, _}} = s) do$/;"	f
handle_commit	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_commit(opts, %{postgres: postgres} = s) do$/;"	f
handle_data	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_data(s, opts, buffer) do$/;"	f
handle_deallocate	deps/db_connection/lib/db_connection.ex	/^      def handle_deallocate(_, _, _, state) do$/;"	f
handle_deallocate	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_deallocate(query, cursor, opts, state),$/;"	f
handle_deallocate	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_deallocate(_, %Cursor{} = cursor, opts, s) do$/;"	f
handle_deallocate	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_deallocate(_, cursor, opts, %{postgres: {postgres, ref}} = s) do$/;"	f
handle_declare	deps/db_connection/lib/db_connection.ex	/^      def handle_declare(_, _, _, state) do$/;"	f
handle_declare	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_declare(query, params, opts, state),$/;"	f
handle_declare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_declare(query, params, opts, s) do$/;"	f
handle_diff	deps/phoenix/lib/phoenix/presence.ex	/^      def handle_diff(diff, state) do$/;"	f
handle_diff	deps/phoenix/lib/phoenix/presence.ex	/^  def handle_diff(module, diff, node_name, pubsub_server, sup_name) do$/;"	f
handle_diff	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^        def handle_diff(diff, state) do$/;"	f
handle_disposition	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_disposition(disposition, headers) do$/;"	f
handle_disposition_params	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_disposition_params(name, params, headers) do$/;"	f
handle_error	deps/decimal/lib/decimal.ex	/^  defp handle_error(signals, reason, result, context) do$/;"	f
handle_errors	deps/plug/lib/plug/error_handler.ex	/^        def handle_errors(conn, %{kind: _kind, reason: _reason, stack: _stack}) do$/;"	f
handle_errors	deps/plug/lib/plug/error_handler.ex	/^      def handle_errors(conn, assigns) do$/;"	f
handle_errors	deps/plug/lib/plug/router.ex	/^        defp handle_errors(conn, %{kind: _kind, reason: _reason, stack: _stack}) do$/;"	f
handle_errors	deps/swoosh/lib/plug/mailbox_preview.ex	/^    defp handle_errors(conn, %{kind: _kind, reason: _reason, stack: _stack}) do$/;"	f
handle_execute	deps/db_connection/lib/db_connection.ex	/^      def handle_execute(_, _, _, state) do$/;"	f
handle_execute	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_execute(query, params, opts, state),$/;"	f
handle_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_execute(%Copy{ref: ref} = copy, :copy_done, opts, s) do$/;"	f
handle_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_execute(%Copy{ref: ref} = copy, {:copy_data, iodata}, opts, s) do$/;"	f
handle_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_execute(%Postgrex.Parameters{}, nil, _, s) do$/;"	f
handle_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_execute(%Query{} = query, params, opts, s) do$/;"	f
handle_execute	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_execute(%Stream{query: query}, params, opts, s) do$/;"	f
handle_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_expr("", marker, expr) do # Required for Elixir < v1.3$/;"	f
handle_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_expr({:safe, buffer}, "", expr) do$/;"	f
handle_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_expr({:safe, buffer}, "=", expr) do$/;"	f
handle_first	deps/db_connection/lib/db_connection.ex	/^      def handle_first(_, _, _, state) do$/;"	f
handle_first	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_first(query, cursor, opts, state),$/;"	f
handle_first	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_first(%Query{} = query, _, _, %{postgres: {_, _}} = s) do$/;"	f
handle_first	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_first(query, cursor, opts, %{buffer: buffer} = s) do$/;"	f
handle_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_header_accept(conn, [header|_], accepted) do$/;"	f
handle_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_header_accept(conn, header, [first|_]) when header == [] or header == ["*\/*"] do$/;"	f
handle_headers	deps/plug/lib/plug/parsers/multipart.ex	/^  defp handle_headers(headers) do$/;"	f
handle_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp handle_heartbeat(state, {name, vsn}) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^        def handle_in("unwatch", %{"product_id" => id}, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^        def handle_in("watch", %{"product_id" => id}, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("create:post", attrs, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("current_rank", socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("new_msg", %{"uid" => uid, "body" => body}, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in("work", payload, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_in(_event, _message, socket) do$/;"	f
handle_in	deps/phoenix/lib/phoenix/test/channel_test.ex	/^      def handle_in("publish", %{"id" => id}, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("ping", payload, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def handle_in("shout", payload, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phx.gen.channel/channel.ex	/^  def handle_in("ping", payload, socket) do$/;"	f
handle_in	deps/phoenix/priv/templates/phx.gen.channel/channel.ex	/^  def handle_in("shout", payload, socket) do$/;"	f
handle_info	deps/connection/lib/connection.ex	/^      def handle_info(_msg, state) do$/;"	f
handle_info	deps/connection/lib/connection.ex	/^  def handle_info(msg, s) do$/;"	f
handle_info	deps/connection/lib/connection.ex	/^  def handle_info({:timeout, backoff, __MODULE__},$/;"	f
handle_info	deps/db_connection/lib/db_connection.ex	/^      def handle_info(_, state), do: {:ok, state}$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info(:timeout, %{client: nil, broker: nil} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info(msg, %{client: nil} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info(msg, %{client: {_, :connect}} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info(msg, %{mod: mod} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({:DOWN, _, :process, _, _} = msg, %{queue: :broker} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({:DOWN, mon, _, pid, reason}, %{client: {ref, mon}} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({:DOWN, ref, :process, _, _} = msg, %{queue: queue} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({:DOWN, ref, _, pid, reason},$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({:timeout, timer, {__MODULE__, pid, timeout}},$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({ref, msg}, %{client: {ref, :broker}} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/connection.ex	/^  def handle_info({ref, msg}, %{client: {ref, :regulator}} = s) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_info(_msg, state) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def handle_info({:DOWN, ref, _, _, _}, state) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_info(_msg, state) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_info({:DOWN, mon, _, pid, reason},$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_info({:DOWN, ref, _, pid, reason},$/;"	f
handle_info	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def handle_info({:timeout, timer, {__MODULE__, pid, timeout}},$/;"	f
handle_info	deps/db_connection/lib/db_connection/watcher.ex	/^  def handle_info(_, ref) do$/;"	f
handle_info	deps/db_connection/lib/db_connection/watcher.ex	/^  def handle_info({:DOWN, ref, _, _, reason}, ref) do$/;"	f
handle_info	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_info(msg, state),$/;"	f
handle_info	deps/ecto/lib/ecto/registry.ex	/^  def handle_info(_msg, state) do$/;"	f
handle_info	deps/ecto/lib/ecto/registry.ex	/^  def handle_info({:DOWN, ref, _type, pid, _reason}, table) do$/;"	f
handle_info	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def handle_info(msg, state) do$/;"	f
handle_info	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def handle_info(_msg, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^        def handle_info(:after_join, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_info(%Broadcast{topic: _, event: ev, payload: payload}, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_info(message, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_info({:work_complete, result, ref}, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Broadcast{topic: topic, event: event, payload: payload},$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Message{topic: topic, event: "phx_leave", ref: ref}, %{topic: topic} = socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(%Message{topic: topic, event: event, payload: payload, ref: ref},$/;"	f
handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def handle_info(msg, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def handle_info(msg, output) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def handle_info(_, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/presence.ex	/^        def handle_info(:after_join, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/test/channel_test.ex	/^      def handle_info(:some_message, socket) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(%Broadcast{event: "disconnect"}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(%Message{} = msg, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info(:shutdown_if_inactive, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:EXIT, channel_pid, reason}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:dispatch, client_ref, msg, ref}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:flush, client_ref, ref}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:graceful_exit, channel_pid, %Phoenix.Socket.Message{} = msg}, state) do$/;"	f
handle_info	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def handle_info({:subscribe, client_ref, ref}, state) do$/;"	f
handle_info	deps/phoenix/priv/templates/phx.gen.presence/presence.ex	/^        def handle_info(:after_join, socket) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def handle_info(_, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def handle_info({:DOWN, _ref, _type, pid, _info}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  def handle_info({:forward_to_local, fastlane, from_pid, topic, msg}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info(:heartbeat, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:EXIT, pid, _reason}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:pub, :graceful_permdown, {_name, _vsn} = ref}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:pub, :heartbeat, {name, vsn}, :empty, clocks}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:pub, :heartbeat, {name, vsn}, delta, clocks}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:pub, :transfer_ack, _ref, {name, _vsn}, remote_presences}, state) do$/;"	f
handle_info	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def handle_info({:pub, :transfer_req, ref, {name, _vsn}, {_, clocks}}, state) do$/;"	f
handle_info	deps/plug/lib/plug/upload.ex	/^  def handle_info(msg, state) do$/;"	f
handle_info	deps/plug/lib/plug/upload.ex	/^  def handle_info({:DOWN, _ref, :process, pid, _reason}, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/notifications.ex	/^  def handle_info(msg, s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/notifications.ex	/^  def handle_info({:DOWN, ref, :process, _, _}, s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/parameters.ex	/^  def handle_info({:DOWN, ref, :process, _, _}, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info(msg, _, s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info(msg, opts \\\\ [], s)$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:ssl, sock, data}, opts, %{sock: {:ssl, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:ssl_closed, sock}, _, %{sock: {:ssl, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:ssl_error, sock, reason}, _, %{sock: {:ssl, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:tcp, sock, data}, opts, %{sock: {:gen_tcp, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:tcp_closed, sock}, _, %{sock: {:gen_tcp, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_info({:tcp_error, sock, reason}, _, %{sock: {:gen_tcp, sock}} = s) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_manager.ex	/^  def handle_info({:DOWN, mref, _, _, _}, {keys, mons}) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info(:timeout, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:DOWN, ref, _, _, _}, %{lock: ref} = state)$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:DOWN, ref, _, _, _}, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:EXIT, pid, _}, state) do$/;"	f
handle_info	deps/postgrex/lib/postgrex/type_server.ex	/^  def handle_info({:go, ref}, %{lock: ref} = state)$/;"	f
handle_info	deps/tzdata/lib/tzdata/release_updater.ex	/^  def handle_info(:check_if_time_to_update, state) do$/;"	f
handle_listener	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_listener(statement, opts, s) do$/;"	f
handle_missing_bindings	deps/gettext/lib/gettext.ex	/^      def handle_missing_bindings(exception, incomplete) do$/;"	f
handle_missing_bindings	deps/gettext/lib/gettext/backend.ex	/^      def handle_missing_bindings(exception, _incomplete) do$/;"	f
handle_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_msg(s, _, msg_notice()) do$/;"	f
handle_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_msg(s, _, msg_parameter(name: name, value: value)) do$/;"	f
handle_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_msg(s, status, msg_notify(channel: channel, payload: payload)) do$/;"	f
handle_next	deps/db_connection/lib/db_connection.ex	/^      def handle_next(_, _, _, state) do$/;"	f
handle_next	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_next(state, %{client: {_, :after_connect} = client} = s) do$/;"	f
handle_next	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_next(state, %{queue: :broker} = s) do$/;"	f
handle_next	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_next(state, s) do$/;"	f
handle_next	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_next(query, cursor, opts, state),$/;"	f
handle_next	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_next(query, cursor, opts, %{buffer: buffer} = s) do$/;"	f
handle_next	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_next(query, cursor, opts, %{postgres: {postgres, ref}} = s) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("new_msg", msg, socket) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("new_msg", payload, socket) do$/;"	f
handle_out	deps/phoenix/lib/phoenix/channel.ex	/^      def handle_out("user_joined", msg, socket) do$/;"	f
handle_params_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp handle_params_accept(conn, format, accepted) do$/;"	f
handle_prepare	deps/db_connection/lib/db_connection.ex	/^      def handle_prepare(_, _, state) do$/;"	f
handle_prepare	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_prepare(query, opts, state),$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{name: @reserved_prefix <> _} = query, _, s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{types: nil} = query, opts, %{buffer: buffer} = s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{types: nil} = query, opts, %{queries: nil, buffer: buffer} = s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{types: types} = query, _, %{types: types} = s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{} = query, _, %{postgres: {_, _}} = s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Query{} = query, _, s) do$/;"	f
handle_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_prepare(%Stream{query: query} = stream, opts, s) do$/;"	f
handle_regulator	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_regulator({:drop, _}, s) do$/;"	f
handle_regulator	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_regulator({:go, lock, _, _, _}, s) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(_socket, _reply, _other) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(_socket, reply, :handle_in) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(socket, status, :handle_in) when is_atom(status) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_reply(socket, {status, payload}, :handle_in)$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:ok, new_state}) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:reply, {opcode, payload}, new_state}) do$/;"	f
handle_reply	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  defp handle_reply(req, handler, {:shutdown, new_state}) do$/;"	f
handle_resource_change	deps/con_cache/lib/con_cache/lock.ex	/^  defp handle_resource_change(state, id, resource_change_result) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result(result, :handle_in) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result(result, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:noreply, socket, timeout_or_hibernate}, _callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:noreply, socket}, _callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:reply, reply, %Socket{} = socket}, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:stop, reason, reply, socket}, callback) do$/;"	f
handle_result	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp handle_result({:stop, reason, socket}, _callback) do$/;"	f
handle_rollback	deps/db_connection/lib/db_connection.ex	/^      def handle_rollback(_, state) do$/;"	f
handle_rollback	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def handle_rollback(opts, {conn_mod, state, true}) do$/;"	f
handle_rollback	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_rollback(_, %{postgres: {_, _}} = s) do$/;"	f
handle_rollback	deps/postgrex/lib/postgrex/protocol.ex	/^  def handle_rollback(opts, s) do$/;"	f
handle_savepoint	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_savepoint(names, cmd, opts, s) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, _identifier, _expr}, t, _context, _vars, _acc) when t != [] do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, identifier, expr}, _t, context, vars, [hs|ts]) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:glob, identifier, expr}, _t, context, vars, _) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:identifier, identifier, expr}, t, context, vars, acc) do$/;"	f
handle_segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp handle_segment_match({:literal, literal}, t, context, vars, acc) do$/;"	f
handle_sigil	deps/phoenix_html/lib/phoenix_html.ex	/^  defp handle_sigil(_, _, _) do$/;"	f
handle_sigil	deps/phoenix_html/lib/phoenix_html.ex	/^  defp handle_sigil({:<<>>, _, [expr]}, [], line) do$/;"	f
handle_text	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_text("", text) do # Required for Elixir < v1.3$/;"	f
handle_text	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def handle_text({:safe, buffer}, text) do$/;"	f
handle_timeout	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_timeout(%{client: nil, idle_timeout: idle_timeout} = s) do$/;"	f
handle_timeout	deps/db_connection/lib/db_connection/connection.ex	/^  defp handle_timeout(s), do: {:noreply, s}$/;"	f
handle_tracker_result	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp handle_tracker_result(other, state) do$/;"	f
handle_tracker_result	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp handle_tracker_result({:ok, tracker_state}, state) do$/;"	f
handle_transaction	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handle_transaction(name, next_postgres, cmd, opts, s) do$/;"	f
handle_update	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp handle_update({pid, topic, key, meta_updater}, state) do$/;"	f
handler	deps/coherence/test/support/test_helpers.exs	/^  def handler(conn) do$/;"	f
handler_sig	deps/exactor/lib/exactor/operations.ex	/^  defp handler_sig(:defcall, options, msg, state_arg),$/;"	f
handler_sig	deps/exactor/lib/exactor/operations.ex	/^  defp handler_sig(:defcast, _, msg, state_arg),$/;"	f
handler_sig	deps/exactor/lib/exactor/operations.ex	/^  defp handler_sig(:definfo, _, msg, state_arg),$/;"	f
handshake	deps/boltex/lib/boltex/bolt.ex	/^  def handshake(transport, port, options \\\\ []) do$/;"	f
handshake	deps/postgrex/lib/postgrex/protocol.ex	/^  defp handshake(%{sock: {:gen_tcp, sock}, timeout: timeout} = s, status) do$/;"	f
handshake_shutdown	deps/postgrex/lib/postgrex/protocol.ex	/^  def handshake_shutdown(timeout, pid, sock) do$/;"	f
has_action?	deps/coherence/lib/coherence/config.ex	/^  def has_action?(option, action) do$/;"	f
has_action? with	deps/coherence/test/config_test.exs	/^  test "has_action? with :all" do$/;"	t
has_action? with keywords	deps/coherence/test/config_test.exs	/^  test "has_action? with keywords" do$/;"	t
has_action? with keywords and missing action	deps/coherence/test/config_test.exs	/^  test "has_action? with keywords and missing action" do$/;"	t
has_action? with list	deps/coherence/test/config_test.exs	/^  test "has_action? with list" do$/;"	t
has_action? with missing option	deps/coherence/test/config_test.exs	/^  test "has_action? with missing option" do$/;"	t
has_any_option?	deps/coherence/lib/coherence/config.ex	/^  defp has_any_option?(fun) do$/;"	f
has_delta?	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def has_delta?(%State{delta: %State{cloud: cloud}}) do$/;"	f
has_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro has_many(name, queryable, opts \\\\ []) do$/;"	a
has_many assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many assoc" do$/;"	t
has_many assoc on delete deletes all	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many assoc on delete deletes all" do$/;"	t
has_many assoc on delete does nothing	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many assoc on delete does nothing" do$/;"	t
has_many assoc on delete nilifies all	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many assoc on delete nilifies all" do$/;"	t
has_many assoc selector	deps/ecto/integration_test/cases/joins.exs	/^  test "has_many assoc selector" do$/;"	t
has_many association join	deps/ecto/integration_test/cases/joins.exs	/^  test "has_many association join" do$/;"	t
has_many changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many changeset assoc (on_replace: :delete)" do$/;"	t
has_many changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many changeset assoc (on_replace: :nilify)" do$/;"	t
has_many changeset assoc with constraints	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many changeset assoc with constraints" do$/;"	t
has_many through	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many through-through assoc leading" do$/;"	t
has_many through	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many through-through assoc trailing" do$/;"	t
has_many through	deps/ecto/integration_test/cases/joins.exs	/^  test "has_many through-through assoc selector" do$/;"	t
has_many through assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_many through assoc" do$/;"	t
has_many through assoc selector	deps/ecto/integration_test/cases/joins.exs	/^  test "has_many through assoc selector" do$/;"	t
has_many through association join	deps/ecto/integration_test/cases/joins.exs	/^  test "has_many through association join" do$/;"	t
has_modified_at?	deps/tzdata/lib/tzdata/release_reader.ex	/^  def has_modified_at? do$/;"	f
has_one	deps/ecto/lib/ecto/schema.ex	/^  defmacro has_one(name, queryable, opts \\\\ []) do$/;"	a
has_one assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_one assoc" do$/;"	t
has_one assoc selector	deps/ecto/integration_test/cases/joins.exs	/^  test "has_one assoc selector" do$/;"	t
has_one association join	deps/ecto/integration_test/cases/joins.exs	/^  test "has_one association join" do$/;"	t
has_one changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_one changeset assoc (on_replace: :delete)" do$/;"	t
has_one changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "has_one changeset assoc (on_replace: :nilify)" do$/;"	t
has_option	deps/coherence/lib/coherence/config.ex	/^  def has_option(option) do$/;"	f
has_option accepts	deps/coherence/test/config_test.exs	/^  test "has_option accepts :all" do$/;"	t
has_option checks if the option is in the opts	deps/coherence/test/config_test.exs	/^  test "has_option checks if the option is in the opts" do$/;"	t
has_option with missing option	deps/coherence/test/config_test.exs	/^  test "has_option with missing option" do$/;"	t
has_recursion_ended?	deps/timex/lib/interval/interval.ex	/^    defp has_recursion_ended?(current_date, end_date,  true), do: Timex.compare(end_date, current_date) < 1$/;"	f
has_recursion_ended?	deps/timex/lib/interval/interval.ex	/^    defp has_recursion_ended?(current_date, end_date, false), do: Timex.compare(end_date, current_date) < 0$/;"	f
has_type?	deps/mime/lib/mime.ex	/^  def has_type?(file_extension) do$/;"	f
hash	deps/coherence/web/models/rememberable.ex	/^  def hash(string) do$/;"	f
hash	deps/phoenix/lib/phoenix/template.ex	/^  def hash(root, pattern \\\\ @default_pattern) do$/;"	f
hash_password	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def hash_password(_, _) do$/;"	f
hash_password	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def hash_password(password, salt)$/;"	f
hash_pwd_salt	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def hash_pwd_salt(password, opts \\\\ []) do$/;"	f
hashpw	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp hashpw(password, salt) do$/;"	f
hashpwsalt	deps/comeonin/lib/comeonin/base.ex	/^      defdelegate hashpwsalt(password, opts \\\\ []), to: module, as: :hash_pwd_salt$/;"	d
having	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp having(%Query{havings: havings} = query, sources) do$/;"	f
having	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp having(%Query{havings: havings} = query, sources) do$/;"	f
having	deps/ecto/lib/ecto/query.ex	/^  defmacro having(query, binding \\\\ [], expr) do$/;"	a
header	deps/swoosh/lib/swoosh/email.ex	/^  def header(%__MODULE__{headers: headers} = email, name, value) when is_binary(name) and is_binary(value) do$/;"	f
header	deps/swoosh/lib/swoosh/email.ex	/^  def header(%__MODULE__{}, name, value) do$/;"	f
header_hd	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  defp header_hd([]), do: nil$/;"	f
header_hd	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  defp header_hd([head | _]), do: head$/;"	f
headers	deps/cors_plug/lib/cors_plug.ex	/^  defp headers(conn = %Plug.Conn{method: "OPTIONS"}, options) do$/;"	f
headers	deps/cors_plug/lib/cors_plug.ex	/^  defp headers(conn, options) do$/;"	f
headers_for_new_po_file	deps/gettext/lib/gettext/merger.ex	/^  defp headers_for_new_po_file(po_file) do$/;"	f
hello	deps/plug/lib/plug/builder.ex	/^        def hello(conn, opts) do$/;"	f
hex_decode	deps/boltex/lib/boltex/utils.ex	/^  def hex_decode(hex_list) do$/;"	f
hex_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp hex_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
hex_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp hex_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
hex_encode	deps/boltex/lib/boltex/utils.ex	/^  def hex_encode(bytes) do$/;"	f
hex_package	deps/gettext/mix.exs	/^  def hex_package do$/;"	f
hex_str_to_list	deps/uuid/lib/uuid.ex	/^  defp hex_str_to_list([]) do$/;"	f
hex_str_to_list	deps/uuid/lib/uuid.ex	/^  defp hex_str_to_list([x, y | tail]) do$/;"	f
hidden_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def hidden_input(form, field, opts \\\\ []) do$/;"	f
hmac_sha1_sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha1_sign(payload, key)$/;"	f
hmac_sha1_verify	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha1_verify(signed, key)$/;"	f
hmac_sha2_sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_sign(payload, key, digest_type) do$/;"	f
hmac_sha2_to_digest_type	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_digest_type("HS256"), do: :sha256$/;"	f
hmac_sha2_to_digest_type	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_digest_type("HS384"), do: :sha384$/;"	f
hmac_sha2_to_digest_type	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_digest_type("HS512"), do: :sha512$/;"	f
hmac_sha2_to_protected	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_protected(:sha256), do: "HS256"$/;"	f
hmac_sha2_to_protected	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_protected(:sha384), do: "HS384"$/;"	f
hmac_sha2_to_protected	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_to_protected(:sha512), do: "HS512"$/;"	f
hmac_sha2_verify	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp hmac_sha2_verify(signed, key)$/;"	f
host	deps/phoenix/lib/phoenix/endpoint.ex	/^      def host do$/;"	f
host	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def host(endpoint) do$/;"	f
host	deps/plug/lib/plug/ssl.ex	/^  defp host(host, _) when is_binary(host), do: host$/;"	f
host	deps/plug/lib/plug/ssl.ex	/^  defp host(nil, host), do: host$/;"	f
host	deps/plug/lib/plug/ssl.ex	/^  defp host({:system, env}, host), do: host(System.get_env(env), host)$/;"	f
host	deps/plug/lib/plug/ssl.ex	/^  defp host({mod, fun, args}, host), do: host(apply(mod, fun, args), host)$/;"	f
host_to_binary	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp host_to_binary(host), do: host$/;"	f
host_to_binary	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp host_to_binary({:system, env_var}), do: host_to_binary(System.get_env(env_var))$/;"	f
host_to_binary	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp host_to_binary(host), do: host$/;"	f
host_to_binary	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp host_to_binary({:system, env_var}), do: host_to_binary(System.get_env(env_var))$/;"	f
hour12	deps/timex/lib/parse/datetime/parsers.ex	/^  def hour12(opts \\\\ []) do$/;"	f
hour24	deps/timex/lib/parse/datetime/parsers.ex	/^  def hour24(opts \\\\ []) do$/;"	f
hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp hsts_header(opts) do$/;"	f
html	deps/phoenix/lib/phoenix/controller.ex	/^  def html(conn, data) do$/;"	f
html_body	deps/swoosh/lib/swoosh/email.ex	/^  def html_body(email, html_body), do: %{email|html_body: html_body}$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(bin) when is_binary(bin),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(list) when is_list(list),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(nil),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape(other),$/;"	f
html_escape	deps/phoenix_html/lib/phoenix_html.ex	/^  def html_escape({:safe, _} = safe),$/;"	f
html_escape	deps/plug/lib/plug/html.ex	/^  def html_escape(data) when is_binary(data) do$/;"	f
html_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def html_response(conn, status) do$/;"	f
http	deps/plug/lib/plug/adapters/cowboy.ex	/^  def http(plug, opts, cowboy_options \\\\ []) do$/;"	f
http_authentication_required	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def http_authentication_required, do: dgettext(@domain, "HTTP Authentication Required")$/;"	f
http_authentication_required	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def http_authentication_required, do: dgettext(@domain, "HTTP Authentication Required")$/;"	f
http_authentication_required	deps/coherence/test/support/messages.exs	/^  def http_authentication_required, do: dgettext(@domain, "HTTP Authentication Required")$/;"	f
https	deps/plug/lib/plug/adapters/cowboy.ex	/^  def https(plug, opts, cowboy_options \\\\ []) do$/;"	f
humanize	deps/phoenix/lib/phoenix/naming.ex	/^  def humanize(atom) when is_atom(atom),$/;"	f
humanize	deps/phoenix/lib/phoenix/naming.ex	/^  def humanize(bin) when is_binary(bin) do$/;"	f
humanize	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def humanize(atom) when is_atom(atom),$/;"	f
humanize	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def humanize(bin) when is_binary(bin) do$/;"	f
i	deps/plug/lib/plug/upload.ex	/^  defp i(integer), do: Integer.to_string(integer)$/;"	f
id	apps/flexcility_web/lib/flexcility_web/channels/user_socket.ex	/^  def id(_socket), do: nil$/;"	f
id	deps/phoenix/lib/phoenix/socket.ex	/^        def id(socket), do: "users_socket:#{socket.assigns.user_id}"$/;"	f
id	deps/phoenix/lib/phoenix/socket.ex	/^      def id(socket), do: "users_socket:#{socket.assigns.user_id}"$/;"	f
iex_running?	deps/phoenix/lib/mix/tasks/phx.server.ex	/^  defp iex_running? do$/;"	f
iex_running?	deps/swoosh/lib/mix/tasks/swoosh.mailbox.server.ex	/^  defp iex_running? do$/;"	f
if_do	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp if_do(condition, value) do$/;"	f
if_do	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp if_do(condition, value) do$/;"	f
ignore_filter	deps/combine/lib/combine.ex	/^  defp ignore_filter(:__ignore), do: false$/;"	f
ignore_filter	deps/combine/lib/combine.ex	/^  defp ignore_filter(_), do: true$/;"	f
ilike	deps/ecto/lib/ecto/query/api.ex	/^  def ilike(string, search), do: doc! [string, search]$/;"	f
img_tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def img_tag(src, opts \\\\ []) do$/;"	f
impl_defhandleinfo	deps/exactor/lib/exactor/operations.ex	/^  defp impl_defhandleinfo(msg, options) do$/;"	f
implement_handler	deps/exactor/lib/exactor/operations.ex	/^  def implement_handler(type, options, msg) do$/;"	f
implement_request	deps/exactor/lib/exactor/operations.ex	/^  def implement_request(type, req_def, options) do$/;"	f
in?	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp in?(ip, list) do$/;"	f
in?	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp in?(%State{context: ctx, cloud: cloud}, {replica, clock} = tag) do$/;"	f
in_subnet?	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp in_subnet?(source_ip, target_ip, subnet) do$/;"	f
in_tmp	deps/coherence/test/mix_helpers.exs	/^  def in_tmp(which, function) do$/;"	f
in_tmp	deps/ecto/integration_test/support/file_helpers.exs	/^  defmacro in_tmp(fun) do$/;"	a
in_transaction?	deps/ecto/lib/ecto/adapters/sql.ex	/^      def in_transaction?(repo) do$/;"	f
in_transaction?	deps/ecto/lib/ecto/adapters/sql.ex	/^  def in_transaction?(repo) do$/;"	f
in_transaction?	deps/ecto/lib/ecto/repo.ex	/^        def in_transaction? do$/;"	f
in_umbrella?	deps/phoenix/lib/mix/phoenix.ex	/^  def in_umbrella?(app_path) do$/;"	f
inc_lock	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def inc_lock($/;"	f
inc_monitor_ref	deps/con_cache/lib/con_cache/lock.ex	/^  defp inc_monitor_ref(%__MODULE__{monitors: monitors} = state, caller_pid, lock_instance) do$/;"	f
inc_ref	deps/con_cache/lib/con_cache/lock/monitors.ex	/^  def inc_ref(%__MODULE__{processes: processes} = monitors, pid, lock_instance) do$/;"	f
include link to SQL sandbox on ownership errors	deps/ecto/integration_test/sql/sandbox.exs	/^  test "include link to SQL sandbox on ownership errors" do$/;"	t
include_dep?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp include_dep?(%Mix.Dep{opts: opts}), do: include_dep?(opts)$/;"	f
include_dep?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp include_dep?(opts) when is_list(opts) do$/;"	f
include_dep?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp include_dep?({_, _, opts}),         do: include_dep?(opts)$/;"	f
include_dep?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp include_dep?({_, _}),               do: true$/;"	f
include_erts	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp include_erts(%Release{profile: %Profile{include_erts: false}, is_upgrade: false}), do: :ok$/;"	f
include_erts	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp include_erts(%Release{profile: %Profile{include_erts: false}, is_upgrade: true}) do$/;"	f
include_erts	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp include_erts(%Release{profile: %Profile{include_erts: include_erts, output_dir: output_dir}} = release) do$/;"	f
incorrect_login_or_password	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def incorrect_login_or_password(opts), do: dgettext(@domain, "Incorrect %{login_field} or password.", opts)$/;"	f
incorrect_login_or_password	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def incorrect_login_or_password(opts), do: dgettext(@domain, "Incorrect %{login_field} or password.", opts)$/;"	f
incorrect_login_or_password	deps/coherence/test/support/messages.exs	/^  def incorrect_login_or_password(opts), do: dgettext(@domain, "Incorrect %{login_field} or password.", opts)$/;"	f
increase_time	deps/con_cache/lib/con_cache/owner.ex	/^  defp increase_time(%__MODULE__{current_time: current_time} = state) do$/;"	f
increase_time	deps/con_cache/lib/con_cache/owner.ex	/^  defp increase_time(%__MODULE__{current_time: max, max_time: max} = state) do$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:ceiling, sign, _, remain),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:down, _, _, _),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:floor, sign, _, remain),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_down, _, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_even, _, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_even, _, signif, [?5|rest]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:half_up, _, _, [digit|_]),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(:up, _, _, _),$/;"	f
increment?	deps/decimal/lib/decimal.ex	/^  defp increment?(_, _, _, []),$/;"	f
indent	deps/poison/lib/poison/encoder.ex	/^      defp indent(options) do$/;"	f
index	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^  def index(conn, _params) do$/;"	f
index	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/coherence/test/plugs/authentication/basic_test.exs	/^    defp index(conn, _opts), do: send_resp(conn, 200, "Authorized")$/;"	f
index	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^    defp index(conn, _opts), do: send_resp(conn, 200, "Authorized")$/;"	f
index	deps/coherence/test/plugs/authentication/session_test.exs	/^    defp index(conn, _opts), do: send_resp(conn, 200, "Authorized")$/;"	f
index	deps/coherence/test/plugs/authentication/token_test.exs	/^    defp index(conn, _opts), do: send_resp(conn, 200, "Authorized")$/;"	f
index	deps/coherence/test/support/dummy_controller.exs	/^  def index(conn, _) do$/;"	f
index	deps/ecto/lib/ecto/migration.ex	/^  def index(table, column, opts) when is_binary(table) and is_atom(column) do$/;"	f
index	deps/ecto/lib/ecto/migration.ex	/^  def index(table, columns, opts \\\\ [])$/;"	f
index	deps/ecto/lib/ecto/migration.ex	/^  def index(table, columns, opts) when is_atom(table) do$/;"	f
index	deps/ecto/lib/ecto/migration.ex	/^  def index(table, columns, opts) when is_binary(table) and is_list(columns) and is_list(opts) do$/;"	f
index	deps/phoenix/lib/phoenix/controller.ex	/^      def index(conn, _params, user) do$/;"	f
index	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def index(conn, _params) do$/;"	f
index	deps/phoenix/priv/templates/phx.gen.json/controller.ex	/^  def index(conn, _params) do$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp index_expr(literal) when is_binary(literal),$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp index_expr(literal), do: quote_name(literal)$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp index_expr(literal) when is_binary(literal),$/;"	f
index_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp index_expr(literal),$/;"	f
indexes	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp indexes(table, assocs, uniques) do$/;"	f
indexes	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp indexes(plural, assocs, uniques) do$/;"	f
inf?	deps/decimal/lib/decimal.ex	/^  def inf?(%Decimal{coef: :inf}), do: true$/;"	f
inf?	deps/decimal/lib/decimal.ex	/^  def inf?(%Decimal{}),           do: false$/;"	f
inflect	deps/phoenix/lib/mix/phoenix.ex	/^  def inflect(singular) do$/;"	f
info	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def info(message), do: log(:info, colorize("==> #{message}", @info_color))$/;"	f
info	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  defp info(scheme, endpoint, ref) do$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:error, error),$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:exit, reason),$/;"	f
info	deps/plug/lib/plug/debugger.ex	/^  defp info(:throw, thrown),$/;"	f
info	deps/uuid/lib/uuid.ex	/^  def info(uuid) do$/;"	f
info!	deps/uuid/lib/uuid.ex	/^  def info!(<<uuid::binary>> = uuid_string) do$/;"	f
info!	deps/uuid/lib/uuid.ex	/^  def info!(_) do$/;"	f
init	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def init(options) do$/;"	f
init	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def init do$/;"	f
init	deps/bolt_sips/lib/bolt_sips.ex	/^  def init(opts) do$/;"	f
init	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def init(state) do$/;"	f
init	deps/boltex/lib/boltex/bolt.ex	/^  def init(transport, port, auth \\\\ {}, options \\\\ []) do$/;"	f
init	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  def init(opts) do$/;"	f
init	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  def init(opts) do$/;"	f
init	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  def init(opts) do$/;"	f
init	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def init(opts) do$/;"	f
init	deps/coherence/lib/coherence/plugs/require_login.ex	/^  def init(options) do$/;"	f
init	deps/coherence/lib/coherence/plugs/validate_option.ex	/^  def init(options) do$/;"	f
init	deps/coherence/lib/coherence/rememberable_server.ex	/^  def init(_) do$/;"	f
init	deps/coherence/lib/coherence/supervisor.ex	/^  def init(:ok) do$/;"	f
init	deps/connection/lib/connection.ex	/^        def init({host, port, opts, timeout}) do$/;"	f
init	deps/connection/lib/connection.ex	/^      def init(args) do$/;"	f
init	deps/connection/lib/connection.ex	/^  def init(_) do$/;"	f
init	deps/cors_plug/lib/cors_plug.ex	/^  def init(options) do$/;"	f
init	deps/db_connection/lib/db_connection/connection.ex	/^  def init({mod, opts, mode, info}) do$/;"	f
init	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def init({module, owner_opts, pool_mod, pool_opts}) do$/;"	f
init	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def init(proxy, opts) do$/;"	f
init	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def init({_manager, caller, pool, pool_opts}) do$/;"	f
init	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  def init({broker, mod, opts}) do$/;"	f
init	deps/db_connection/lib/db_connection/sojourn/regulator.ex	/^  def init(opts) do$/;"	f
init	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^  def init(args), do: {:connect, :init, args}$/;"	f
init	deps/db_connection/lib/db_connection/task.ex	/^  def init(mod, fun, ref, conn, state, opts) do$/;"	f
init	deps/db_connection/lib/db_connection/watcher.ex	/^  def init(owner) do$/;"	f
init	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    def init(opts), do: opts$/;"	f
init	deps/ecto/lib/ecto/migration/supervisor.ex	/^  def init(:ok) do$/;"	f
init	deps/ecto/lib/ecto/registry.ex	/^  def init(:ok) do$/;"	f
init	deps/ecto/lib/ecto/repo.ex	/^      def init(_type, config) do$/;"	f
init	deps/ecto/lib/ecto/repo/supervisor.ex	/^            def init(_type, config) do$/;"	f
init	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def init({repo, otp_app, adapter, opts}) do$/;"	f
init	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def init(args) do$/;"	f
init	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def init(args) do$/;"	f
init	deps/exactor/lib/exactor/operations.ex	/^          def init(unquote_splicing([opts[:arg]])) when unquote(guard), do: unquote(opts[:do])$/;"	f
init	deps/exactor/lib/exactor/operations.ex	/^          def init(unquote_splicing([opts[:arg]])), do: unquote(opts[:do])$/;"	f
init	deps/phoenix/lib/phoenix/channel/server.ex	/^  def init({socket, auth_payload, parent, ref}) do$/;"	f
init	deps/phoenix/lib/phoenix/code_reloader.ex	/^  def init(opts), do: Keyword.put_new(opts, :reloader, &Phoenix.CodeReloader.reload!\/1)$/;"	f
init	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def init(false) do$/;"	f
init	deps/phoenix/lib/phoenix/config.ex	/^  def init({module, config, defaults}) do$/;"	f
init	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      def init(opts), do: opts$/;"	f
init	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def init({transport, :http}, req, {module, opts}) when transport in [:tcp, :ssl] do$/;"	f
init	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  def init({otp_app, endpoint}) do$/;"	f
init	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def init({otp_app, mod}) do$/;"	f
init	deps/phoenix/lib/phoenix/presence.ex	/^      def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/router.ex	/^      def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/router/scope.ex	/^  def init(module) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  def init(opts) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def init([]) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def init([endpoint, handler, transport_name, transport,$/;"	f
init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def init(%Plug.Conn{method: "GET"} = conn, {endpoint, handler, transport}) do$/;"	f
init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def init(conn, _) do$/;"	f
init	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  def init(opts \\\\ []) do$/;"	f
init	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  def init(_opts), do: {:safe, ""}$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^        def init({name, options}) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  def init({server_name, local_name}) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def init({local, gc}) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub/local_supervisor.ex	/^  def init([server, pool_size, dispatch_rules]) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2.ex	/^  def init([server, opts]) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  def init({server_name, pool_size}) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^        def init(opts) do$/;"	f
init	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def init([tracker, tracker_opts, opts]) do$/;"	f
init	deps/plug/lib/plug.ex	/^        def init(opts) do$/;"	f
init	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  def init({transport, :http}, req, {plug, opts}) when transport in [:tcp, :ssl] do$/;"	f
init	deps/plug/lib/plug/builder.ex	/^        def init(opts) do$/;"	f
init	deps/plug/lib/plug/builder.ex	/^      def init(opts) do$/;"	f
init	deps/plug/lib/plug/csrf_protection.ex	/^  def init(opts), do: Keyword.get(opts, :with, :exception)$/;"	f
init	deps/plug/lib/plug/head.ex	/^  def init([]), do: []$/;"	f
init	deps/plug/lib/plug/logger.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/method_override.ex	/^  def init([]), do: []$/;"	f
init	deps/plug/lib/plug/parsers.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/request_id.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session/cookie.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/session/ets.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/ssl.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/static.ex	/^  def init(opts) do$/;"	f
init	deps/plug/lib/plug/supervisor.ex	/^  def init(:ok) do$/;"	f
init	deps/plug/lib/plug/upload.ex	/^  def init(:ok) do$/;"	f
init	deps/postgrex/lib/postgrex/binary_extension.ex	/^      def init(_), do: nil$/;"	f
init	deps/postgrex/lib/postgrex/extension.ex	/^        def init(opts) do$/;"	f
init	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def init(_), do: nil$/;"	f
init	deps/postgrex/lib/postgrex/extensions/bit_string.ex	/^  def init(opts), do: Keyword.fetch!(opts, :decode_binary)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/date.ex	/^  def init(opts), do: Keyword.fetch!(opts, :date)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/hstore.ex	/^  def init(opts), do: Keyword.fetch!(opts, :decode_binary)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def init(opts) do$/;"	f
init	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def init(opts) do$/;"	f
init	deps/postgrex/lib/postgrex/extensions/name.ex	/^  def init(opts), do: Keyword.fetch!(opts, :decode_binary)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def init(_), do: nil$/;"	f
init	deps/postgrex/lib/postgrex/extensions/raw.ex	/^  def init(opts), do: Keyword.fetch!(opts, :decode_binary)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def init(_), do: nil$/;"	f
init	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def init(opts), do: Keyword.fetch!(opts, :date)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def init(opts), do: Keyword.fetch!(opts, :date)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def init(opts), do: Keyword.fetch!(opts, :date)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def init(opts), do: Keyword.fetch!(opts, :date)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/uuid.ex	/^  def init(opts), do: Keyword.fetch!(opts, :decode_binary)$/;"	f
init	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^  def init(_), do: nil$/;"	f
init	deps/postgrex/lib/postgrex/notifications.ex	/^  def init(opts) do$/;"	f
init	deps/postgrex/lib/postgrex/parameters.ex	/^  def init(nil) do$/;"	f
init	deps/postgrex/lib/postgrex/type_manager.ex	/^  def init(nil) do$/;"	f
init	deps/postgrex/lib/postgrex/type_server.ex	/^  def init({module, starter}) do$/;"	f
init	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def init(:manager) do$/;"	f
init	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def init(:servers) do$/;"	f
init	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def init(_args) do$/;"	f
init	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def init([]) do$/;"	f
init	deps/tzdata/lib/tzdata/release_updater.ex	/^  def init([]) do$/;"	f
init_fun_plug	deps/plug/lib/plug/builder.ex	/^  defp init_fun_plug(plug, opts, guards) do$/;"	f
init_generation_state	deps/exactor/lib/exactor/helper.ex	/^  def init_generation_state(opts) do$/;"	f
init_header	deps/ecto/lib/ecto/repo/schema.ex	/^  defp init_header(nil), do: %{}$/;"	f
init_header	deps/ecto/lib/ecto/repo/schema.ex	/^  defp init_header({_, source, _}), do: %{source => true}$/;"	f
init_it	deps/connection/lib/connection.ex	/^  def init_it(starter, _, name, mod, args, opts) do$/;"	f
init_mapper	deps/ecto/lib/ecto/repo/schema.ex	/^  defp init_mapper(nil, _dumper, _adapter) do$/;"	f
init_mapper	deps/ecto/lib/ecto/repo/schema.ex	/^  defp init_mapper(schema, dumper, adapter) do$/;"	f
init_module_plug	deps/plug/lib/plug/builder.ex	/^  defp init_module_plug(plug, opts, guards) do$/;"	f
init_plug	deps/plug/lib/plug/builder.ex	/^  defp init_plug({plug, opts, guards}) do$/;"	f
init_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp init_recv(s, status, buffer) do$/;"	f
init_stop	deps/connection/lib/connection.ex	/^  defp init_stop(starter, name, reason) do$/;"	f
init_test_session	deps/plug/lib/plug/test.ex	/^  def init_test_session(conn, session) do$/;"	f
initial_state	deps/exactor/lib/exactor/responders.ex	/^  defmacro initial_state(state, timeout \\\\ nil) do$/;"	a
inject_schema_access	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  defp inject_schema_access(%Context{file: file} = context, paths, binding) do$/;"	f
inject_to_module	deps/exactor/lib/exactor/helper.ex	/^  def inject_to_module(quoted, module, env) do$/;"	f
input_id	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_id(%{id: id}, field),$/;"	f
input_id	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_id(name, field) when is_atom(name),$/;"	f
input_name	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_name(%{name: name}, field),$/;"	f
input_name	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_name(name, field) when is_atom(name),$/;"	f
input_type	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def input_type(%{types: types}, _, field) do$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_type(%{impl: impl, source: source} = form, field, mapping \\\\ @mapping) do$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_type(_conn, _form, _field), do: :text_input$/;"	f
input_type	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_type(data, form, field)$/;"	f
input_validations	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def input_validations(%{required: required, validations: validations} = changeset, _, field) do$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_validations(%{source: source, impl: impl} = form, field) do$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_validations(_conn, _form, _field), do: []$/;"	f
input_validations	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_validations(data, form, field)$/;"	f
input_value	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def input_value(%{changes: changes, data: data}, %{params: params}, field, computed \\\\ nil) do$/;"	f
input_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_value(%{source: source, impl: impl} = form, field) when is_atom(field) do$/;"	f
input_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def input_value(name, _field) when is_atom(name),$/;"	f
input_value	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_value(_conn, %{data: data, params: params}, field) do$/;"	f
input_value	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def input_value(data, form, field)$/;"	f
inputs	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp inputs(attrs) do$/;"	f
inputs	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  defp inputs(%Schema{} = schema) do$/;"	f
inputs_for	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def inputs_for(%{impl: impl} = form, field, options \\\\ [], fun) do$/;"	f
insecure_mkdir_temp	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def insecure_mkdir_temp() do$/;"	f
insert	deps/ecto/integration_test/cases/repo.exs	/^  test "insert, update and delete with associated composite pk" do$/;"	t
insert	deps/ecto/integration_test/cases/repo.exs	/^  test "insert, update and delete with composite pk" do$/;"	t
insert	deps/ecto/integration_test/cases/repo.exs	/^  test "insert, update and delete with field source" do$/;"	t
insert	deps/ecto/integration_test/cases/repo.exs	/^  test "insert, update and delete with invalid prefix" do$/;"	t
insert	deps/ecto/integration_test/cases/repo.exs	/^  test "insert, update and delete" do$/;"	t
insert	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def insert(repo, %{source: {prefix, source}} = meta, params,$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def insert(_prefix, _table, _header, _rows, _on_conflict, _returning) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def insert(prefix, table, header, rows, on_conflict, []) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def insert(prefix, table, header, rows, on_conflict, returning) do$/;"	f
insert	deps/ecto/lib/ecto/adapters/sql.ex	/^      def insert(repo, %{source: {prefix, source}}, params,$/;"	f
insert	deps/ecto/lib/ecto/multi.ex	/^  def insert(multi, name, %Changeset{} = changeset, opts) do$/;"	f
insert	deps/ecto/lib/ecto/multi.ex	/^  def insert(multi, name, changeset_or_struct, opts \\\\ [])$/;"	f
insert	deps/ecto/lib/ecto/multi.ex	/^  def insert(multi, name, struct, opts) do$/;"	f
insert	deps/ecto/lib/ecto/repo.ex	/^      def insert(struct, opts \\\\ []) do$/;"	f
insert	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
insert	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert(repo, adapter, %{__struct__: _} = struct, opts) when is_list(opts) do$/;"	f
insert	deps/postgrex/lib/postgrex/parameters.ex	/^  def insert(parameters) do$/;"	f
insert all	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all" do$/;"	t
insert all autogenerates for binary_id type	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all autogenerates for binary_id type" do$/;"	t
insert all with dumping	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all with dumping" do$/;"	t
insert all with invalid prefix	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all with invalid prefix" do$/;"	t
insert all with returning with schema	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all with returning with schema" do$/;"	t
insert all with returning with schema with field source	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all with returning with schema with field source" do$/;"	t
insert all with returning without schema	deps/ecto/integration_test/cases/repo.exs	/^  test "insert all with returning without schema" do$/;"	t
insert and fetch a schema with timestamps with usec	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and fetch a schema with timestamps with usec" do$/;"	t
insert and fetch a schema with utc timestamps	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and fetch a schema with utc timestamps" do$/;"	t
insert and update with changeset	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and update with changeset" do$/;"	t
insert and update with changeset read after writes	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and update with changeset read after writes" do$/;"	t
insert and update with empty changeset	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and update with empty changeset" do$/;"	t
insert and update with failing child foreign key	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and update with failing child foreign key" do$/;"	t
insert and update with user	deps/ecto/integration_test/cases/repo.exs	/^  test "insert and update with user-assigned primary key in changeset" do$/;"	t
insert autogenerates for custom id type	deps/ecto/integration_test/cases/repo.exs	/^  test "insert autogenerates for custom id type" do$/;"	t
insert autogenerates for custom type	deps/ecto/integration_test/cases/repo.exs	/^  test "insert autogenerates for custom type" do$/;"	t
insert with no primary key	deps/ecto/integration_test/cases/repo.exs	/^  test "insert with no primary key" do$/;"	t
insert with user	deps/ecto/integration_test/cases/repo.exs	/^  test "insert with user-assigned primary key" do$/;"	t
insert!	deps/ecto/lib/ecto/repo.ex	/^      def insert!(struct, opts \\\\ []) do$/;"	f
insert!	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert!(repo, adapter, struct_or_changeset, opts) do$/;"	f
insert_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp insert_all(rows) do$/;"	f
insert_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp insert_all(rows, counter) do$/;"	f
insert_all	deps/ecto/lib/ecto/adapters/sql.ex	/^      def insert_all(repo, %{source: {prefix, source}}, header, rows,$/;"	f
insert_all	deps/ecto/lib/ecto/multi.ex	/^  def insert_all(multi, name, schema_or_source, entries, opts \\\\ []) when is_list(opts) do$/;"	f
insert_all	deps/ecto/lib/ecto/repo.ex	/^      def insert_all(schema_or_source, entries, opts \\\\ []) do$/;"	f
insert_all	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert_all(repo, adapter, schema, rows, opts) when is_atom(schema) do$/;"	f
insert_all	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert_all(repo, adapter, table, rows, opts) when is_binary(table) do$/;"	f
insert_all	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert_all(repo, adapter, {source, schema}, rows, opts) when is_atom(schema) do$/;"	f
insert_all_value	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp insert_all_value(_),   do: '?'$/;"	f
insert_all_value	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp insert_all_value(nil), do: "DEFAULT"$/;"	f
insert_as	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp insert_as({%{from: from} = query, _, _}) do$/;"	f
insert_as	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp insert_as({_, _, _}) do$/;"	f
insert_brs	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp insert_brs(text, false) do$/;"	f
insert_brs	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp insert_brs(text, true) do$/;"	f
insert_each	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp insert_each(values, counter) do$/;"	f
insert_invitation	deps/coherence/test/support/test_helpers.exs	/^  def insert_invitation(attrs \\\\ %{}) do$/;"	f
insert_join	deps/ecto/lib/ecto/association.ex	/^  defp insert_join(repo, join_through, data, opts, _constraints) when is_binary(join_through) do$/;"	f
insert_join	deps/ecto/lib/ecto/association.ex	/^  defp insert_join(repo, join_through, data, opts, constraints) when is_atom(join_through) do$/;"	f
insert_join?	deps/ecto/lib/ecto/association.ex	/^  defp insert_join?(%{action: :insert}, _, _field, _related_key), do: true$/;"	f
insert_join?	deps/ecto/lib/ecto/association.ex	/^  defp insert_join?(%{data: owner}, %{data: related}, field, related_key) do$/;"	f
insert_join?	deps/ecto/lib/ecto/association.ex	/^  defp insert_join?(_, %{action: :insert}, _field, _related_key), do: true$/;"	f
insert_new	deps/con_cache/lib/con_cache.ex	/^  def insert_new(cache_id, key, value),$/;"	f
insert_new	deps/con_cache/lib/con_cache/operations.ex	/^  def insert_new(cache, key, value) do$/;"	f
insert_or_update	deps/ecto/lib/ecto/multi.ex	/^  def insert_or_update(multi, name, %Changeset{data: %{__meta__: %{state: :loaded}}} = changeset, opts) do$/;"	f
insert_or_update	deps/ecto/lib/ecto/multi.ex	/^  def insert_or_update(multi, name, %Changeset{} = changeset, opts) do$/;"	f
insert_or_update	deps/ecto/lib/ecto/multi.ex	/^  def insert_or_update(multi, name, changeset, opts \\\\ [])$/;"	f
insert_or_update	deps/ecto/lib/ecto/repo.ex	/^      def insert_or_update(changeset, opts \\\\ []) do$/;"	f
insert_or_update	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert_or_update(repo, adapter, changeset, opts) do$/;"	f
insert_or_update!	deps/ecto/lib/ecto/repo.ex	/^      def insert_or_update!(changeset, opts \\\\ []) do$/;"	f
insert_or_update!	deps/ecto/lib/ecto/repo/schema.ex	/^  def insert_or_update!(repo, adapter, changeset, opts) do$/;"	f
insert_periods_for_zone	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp insert_periods_for_zone(table, map, zone_name) do$/;"	f
insert_rememberable	deps/coherence/test/support/test_helpers.exs	/^  def insert_rememberable(user, attrs \\\\ %{}) do$/;"	f
insert_user	deps/coherence/test/support/test_helpers.exs	/^  def insert_user(attrs \\\\ %{}) do$/;"	f
insert_user	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      def insert_user do$/;"	f
inserting changeset with empty associations	deps/ecto/integration_test/cases/assoc.exs	/^  test "inserting changeset with empty associations" do$/;"	t
inserting struct with associations	deps/ecto/integration_test/cases/assoc.exs	/^  test "inserting struct with associations" do$/;"	t
inserting struct with empty associations	deps/ecto/integration_test/cases/assoc.exs	/^  test "inserting struct with empty associations" do$/;"	t
inside_scope?	deps/phoenix/lib/phoenix/router/scope.ex	/^  def inside_scope?(module), do: length(get_stack(module)) > 1$/;"	f
inspect	deps/decimal/lib/decimal.ex	/^  def inspect(dec, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/association.ex	/^    def inspect(not_loaded, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/changeset.ex	/^  def inspect(changeset, opts) do$/;"	f
inspect	deps/ecto/lib/ecto/date_time.ex	/^  def inspect(dt, _opts) do$/;"	f
inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  def inspect(%DynamicExpr{binding: binding} = dynamic, opts) do$/;"	f
inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  def inspect(query, opts) do$/;"	f
inspect	deps/ecto/lib/ecto/schema.ex	/^      def inspect(metadata, opts) do$/;"	f
inspect	deps/plug/lib/plug/conn.ex	/^  def inspect(conn, opts) do$/;"	f
inspect	deps/timex/lib/datetime/inspect.ex	/^    def inspect(%DateTime{} = d, _opts) do$/;"	f
inspect	deps/timex/lib/datetime/inspect.ex	/^  def inspect(%AmbiguousDateTime{:before => before, :after => aft}, _opts) do$/;"	f
inspect	deps/timex/lib/datetime/inspect.ex	/^  def inspect(datetime, %{:structs => false} = opts) do$/;"	f
inspect	deps/timex/lib/time/inspect.ex	/^  def inspect(d, %{:structs => false} = opts) do$/;"	f
inspect	deps/timex/lib/time/inspect.ex	/^  def inspect(d, _opts) do$/;"	f
inspect	deps/timex/lib/timezone/inspect.ex	/^  def inspect(%AmbiguousTimezoneInfo{:before => before, :after => aft}, _opts) do$/;"	f
inspect	deps/timex/lib/timezone/inspect.ex	/^  def inspect(date, %{:structs => false} = opts) do$/;"	f
inspect	deps/timex/lib/timezone/inspect.ex	/^  def inspect(tzinfo, _) do$/;"	f
install options authenticatable recoverable	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "install options authenticatable recoverable" do$/;"	t
install options authenticatable recoverable	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "install options authenticatable recoverable" do$/;"	t
install options default	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "install options default" do$/;"	t
install options default	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "install options default" do$/;"	t
install options many	deps/coherence/test/mix/tasks/coh.install_test.exs	/^    test "install options many" do$/;"	t
install options many	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^    test "install options many" do$/;"	t
instpect	deps/timex/lib/datetime/inspect.ex	/^    def instpect(datetime, %{:structs => false} = opts) do$/;"	f
instrument	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro instrument(endpoint_or_conn_or_socket, event, runtime \\\\ Macro.escape(%{}), fun) do$/;"	a
instrument	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^        def instrument(unquote(event), var!(compile), var!(runtime), fun)$/;"	f
instrument	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^      def instrument(event, compile, runtime, fun)$/;"	f
instrument	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^      defmacro instrument(event, runtime \\\\ Macro.escape(%{}), fun) do$/;"	a
instrumenters_and_events	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp instrumenters_and_events(instrumenters) do$/;"	f
integer	deps/timex/lib/parse/datetime/helpers.ex	/^  def integer(opts \\\\ []) do$/;"	f
integer_division	deps/decimal/lib/decimal.ex	/^  defp integer_division(div_sign, coef1, exp1, coef2, exp2) do$/;"	f
intercept	deps/phoenix/lib/phoenix/channel.ex	/^  defmacro intercept(events) do$/;"	a
interface_args	deps/exactor/lib/exactor/operations.ex	/^  defp interface_args(args, options) do$/;"	f
interpolate	deps/gettext/lib/gettext/interpolation.ex	/^  def interpolate(interpolatable, bindings)$/;"	f
interpolate	deps/gettext/lib/gettext/interpolation.ex	/^  defp interpolate([], _bindings, strings, []) do$/;"	f
interpolate	deps/gettext/lib/gettext/interpolation.ex	/^  defp interpolate([], _bindings, strings, missing) do$/;"	f
interpolate	deps/gettext/lib/gettext/interpolation.ex	/^  defp interpolate([atom | segments], bindings, strings, missing) when is_atom(atom) do$/;"	f
interpolate	deps/gettext/lib/gettext/interpolation.ex	/^  defp interpolate([string | segments], bindings, strings, missing) when is_binary(string) do$/;"	f
interpret_response	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp interpret_response(%{"status" => "queued"} = body), do: {:ok, %{id: body["_id"]}}$/;"	f
interpret_response	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp interpret_response(%{"status" => "rejected"} = body), do: {:error, body}$/;"	f
interpret_response	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp interpret_response(%{"status" => "sent"} = body), do: {:ok, %{id: body["_id"]}}$/;"	f
interpret_response	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp interpret_response(body) when is_binary(body), do: body |> Poison.decode! |> hd |> interpret_response$/;"	f
interpret_response	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp interpret_response(body), do: {:error, Poison.decode!(body)}$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp intersperse_map([], _separator, _mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp intersperse_map([elem | rest], separator, mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp intersperse_map([elem], _separator, mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp intersperse_map(list, separator, mapper, acc \\\\ [])$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_map([], _separator, _mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_map([elem | rest], separator, mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_map([elem], _separator, mapper, acc),$/;"	f
intersperse_map	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_map(list, separator, mapper, acc \\\\ [])$/;"	f
intersperse_reduce	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_reduce([], _separator, user_acc, _reducer, acc),$/;"	f
intersperse_reduce	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_reduce([elem | rest], separator, user_acc, reducer, acc) do$/;"	f
intersperse_reduce	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_reduce([elem], _separator, user_acc, reducer, acc) do$/;"	f
intersperse_reduce	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp intersperse_reduce(list, separator, user_acc, reducer, acc \\\\ [])$/;"	f
interval	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp interval(count, "millisecond", sources, query) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp interval(count, interval, sources, query) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, _sources, _query) when is_float(count) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, _sources, _query) when is_integer(count) do$/;"	f
interval	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp interval(count, interval, sources, query) do$/;"	f
interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def interval!(interval) when interval in @interval,$/;"	f
interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def interval!(other),$/;"	f
into	deps/ecto/lib/ecto/adapters/sql.ex	/^  def into(repo, statement, params, mapper, opts) do$/;"	f
into	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  def into(stream) do$/;"	f
into	deps/plug/lib/plug/conn.ex	/^  def into(conn) do$/;"	f
into	deps/postgrex/lib/postgrex/stream.ex	/^  def into(%Stream{conn: %DBConnection{}} = stream) do$/;"	f
into	deps/postgrex/lib/postgrex/stream.ex	/^  def into(_) do$/;"	f
invalid email	deps/coherence/test/schema_test.exs	/^  test "invalid email" do$/;"	t
invalid reset password token	deps/coherence/test/controllers/password_controller_test.exs	/^    test "invalid reset password token", %{conn: conn, user: user} do$/;"	t
invalid reset password token	deps/coherence/test/controllers/password_controller_test.exs	/^    test "invalid reset password token", %{conn: conn} do$/;"	t
invalid_args!	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  defp invalid_args! do$/;"	f
invalid_confirmation_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_confirmation_token, do: dgettext(@domain, "Invalid confirmation token.")$/;"	f
invalid_confirmation_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_confirmation_token, do: dgettext(@domain, "Invalid confirmation token.")$/;"	f
invalid_confirmation_token	deps/coherence/test/support/messages.exs	/^  def invalid_confirmation_token, do: dgettext(@domain, "Invalid confirmation token.")$/;"	f
invalid_current_password	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_current_password, do: dgettext(@domain, "invalid current password")$/;"	f
invalid_current_password	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_current_password, do: dgettext(@domain, "invalid current password")$/;"	f
invalid_current_password	deps/coherence/test/support/messages.exs	/^  def invalid_current_password, do: dgettext(@domain, "invalid current password")$/;"	f
invalid_email_or_password	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_email_or_password, do: dgettext(@domain, "Invalid email or password.")$/;"	f
invalid_email_or_password	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_email_or_password, do: dgettext(@domain, "Invalid email or password.")$/;"	f
invalid_email_or_password	deps/coherence/test/support/messages.exs	/^  def invalid_email_or_password, do: dgettext(@domain, "Invalid email or password.")$/;"	f
invalid_invitation	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_invitation, do: dgettext(@domain, "Invalid Invitation. Please contact the site administrator.")$/;"	f
invalid_invitation	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_invitation, do: dgettext(@domain, "Invalid Invitation. Please contact the site administrator.")$/;"	f
invalid_invitation	deps/coherence/test/support/messages.exs	/^  def invalid_invitation, do: dgettext(@domain, "Invalid Invitation. Please contact the site administrator.")$/;"	f
invalid_invitation_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_invitation_token, do: dgettext(@domain, "Invalid invitation token.")$/;"	f
invalid_invitation_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_invitation_token, do: dgettext(@domain, "Invalid invitation token.")$/;"	f
invalid_invitation_token	deps/coherence/test/support/messages.exs	/^  def invalid_invitation_token, do: dgettext(@domain, "Invalid invitation token.")$/;"	f
invalid_operation	deps/ecto/lib/ecto/multi.ex	/^  defp invalid_operation(_operation),$/;"	f
invalid_operation	deps/ecto/lib/ecto/multi.ex	/^  defp invalid_operation({name, {:changeset, %{valid?: false} = changeset, _}}),$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([], _match), do: false$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([h|_], _match) when h in [".", "..", ""], do: true$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?([h|t], match), do: String.contains?(h, match) or invalid_path?(t)$/;"	f
invalid_path?	deps/plug/lib/plug/static.ex	/^  defp invalid_path?(list) do$/;"	f
invalid_request	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_request, do: dgettext(@domain, "Invalid Request.")$/;"	f
invalid_request	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_request, do: dgettext(@domain, "Invalid Request.")$/;"	f
invalid_request	deps/coherence/test/support/messages.exs	/^  def invalid_request, do: dgettext(@domain, "Invalid Request.")$/;"	f
invalid_reset_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_reset_token, do: dgettext(@domain, "Invalid reset token.")$/;"	f
invalid_reset_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_reset_token, do: dgettext(@domain, "Invalid reset token.")$/;"	f
invalid_reset_token	deps/coherence/test/support/messages.exs	/^  def invalid_reset_token, do: dgettext(@domain, "Invalid reset token.")$/;"	f
invalid_unlock_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invalid_unlock_token, do: dgettext(@domain, "Invalid unlock token.")$/;"	f
invalid_unlock_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invalid_unlock_token, do: dgettext(@domain, "Invalid unlock token.")$/;"	f
invalid_unlock_token	deps/coherence/test/support/messages.exs	/^  def invalid_unlock_token, do: dgettext(@domain, "Invalid unlock token.")$/;"	f
invalidates incorrect password	deps/coherence/test/schema_test.exs	/^  test "invalidates incorrect password" do$/;"	t
invert	deps/timex/lib/time/duration.ex	/^  def invert(%Duration{megaseconds: mega, seconds: sec, microseconds: micro}) do$/;"	f
invitable?	deps/coherence/lib/coherence/schema.ex	/^      def invitable? do$/;"	f
invitation	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  def invitation(invitation, url) do$/;"	f
invitation	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  def invitation(invitation, url) do$/;"	f
invitation	deps/coherence/test/support/email.exs	/^  def invitation(invitation, url) do$/;"	f
invitation_already_sent	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invitation_already_sent, do: dgettext(@domain, "Invitation already sent.")$/;"	f
invitation_already_sent	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invitation_already_sent, do: dgettext(@domain, "Invitation already sent.")$/;"	f
invitation_already_sent	deps/coherence/test/support/messages.exs	/^  def invitation_already_sent, do: dgettext(@domain, "Invitation already sent.")$/;"	f
invitation_create	deps/coherence/lib/coherence/redirects.ex	/^      def invitation_create(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
invitation_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def invitation_link(conn, text \\\\ @invite_link) do$/;"	f
invitation_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def invitation_link(conn, text \\\\ @invite_link) do$/;"	f
invitation_link	deps/coherence/test/support/view_helpers.exs	/^  def invitation_link(conn, text \\\\ @invite_link) do$/;"	f
invitation_resend	deps/coherence/lib/coherence/redirects.ex	/^      def invitation_resend(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
invitation_sent	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invitation_sent, do: dgettext(@domain, "Invitation sent.")$/;"	f
invitation_sent	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invitation_sent, do: dgettext(@domain, "Invitation sent.")$/;"	f
invitation_sent	deps/coherence/test/support/messages.exs	/^  def invitation_sent, do: dgettext(@domain, "Invitation sent.")$/;"	f
invite_someone	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def invite_someone, do: dgettext(@domain, "Invite Someone")$/;"	f
invite_someone	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def invite_someone, do: dgettext(@domain, "Invite Someone")$/;"	f
invite_someone	deps/coherence/test/support/messages.exs	/^  def invite_someone, do: dgettext(@domain, "Invite Someone")$/;"	f
invoke_callback	deps/con_cache/lib/con_cache/operations.ex	/^  defp invoke_callback(%ConCache{callback: fun}, data) when is_function(fun) do$/;"	f
invoke_callback	deps/con_cache/lib/con_cache/operations.ex	/^  defp invoke_callback(%ConCache{callback: nil}, _), do: :ok$/;"	f
is_date	deps/ecto/lib/ecto/date_time.ex	/^  defmacro is_date(year, month, day) do$/;"	a
is_date	deps/timex/lib/timex/macros.ex	/^  defmacro is_date(y,m,d) do$/;"	a
is_date_timestamp	deps/timex/lib/timex/macros.ex	/^  defmacro is_date_timestamp(mega,secs,micro) do$/;"	a
is_datetime	deps/timex/lib/timex/macros.ex	/^  defmacro is_datetime(y,m,d,h,mm,s,ms\\\\0) do$/;"	a
is_day_of_month	deps/timex/lib/timex/macros.ex	/^  defmacro is_day_of_month(d) do$/;"	a
is_day_of_week	deps/timex/lib/timex/macros.ex	/^  defmacro is_day_of_week(d, :mon) do$/;"	a
is_day_of_year	deps/timex/lib/timex/macros.ex	/^  defmacro is_day_of_year(d) do$/;"	a
is_erts_lib?	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def is_erts_lib?(app_dir), do: is_erts_lib?(app_dir, "#{:code.lib_dir()}")$/;"	f
is_erts_lib?	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def is_erts_lib?(app_dir, lib_dir), do: String.starts_with?(app_dir, lib_dir)$/;"	f
is_float_in_range	deps/timex/lib/timex/macros.ex	/^  defmacro is_float_in_range(n, min, max) do$/;"	a
is_hour	deps/timex/lib/timex/macros.ex	/^  defmacro is_hour(h, :exclusive) do$/;"	a
is_hour	deps/timex/lib/timex/macros.ex	/^  defmacro is_hour(h, :inclusive) do$/;"	a
is_integer_in_range	deps/timex/lib/timex/macros.ex	/^  defmacro is_integer_in_range(n, min, max) do$/;"	a
is_iso_8601	deps/ecto/lib/ecto/date_time.ex	/^  defmacro is_iso_8601(x) do$/;"	a
is_iso_day_of_year	deps/timex/lib/timex/macros.ex	/^  defmacro is_iso_day_of_year(y, d) do$/;"	a
is_leap?	deps/timex/lib/date/date.ex	/^  def is_leap?(%Date{year: year}), do: :calendar.is_leap_year(year)$/;"	f
is_leap?	deps/timex/lib/datetime/datetime.ex	/^  def is_leap?(%DateTime{year: year}), do: :calendar.is_leap_year(year)$/;"	f
is_leap?	deps/timex/lib/datetime/erlang.ex	/^  def is_leap?(_), do: {:error, :invalid_date}$/;"	f
is_leap?	deps/timex/lib/datetime/erlang.ex	/^  def is_leap?({y,m,d}) when is_date(y,m,d), do: :calendar.is_leap_year(y)$/;"	f
is_leap?	deps/timex/lib/datetime/erlang.ex	/^  def is_leap?({{y,m,d},_}) when is_date(y,m,d), do: :calendar.is_leap_year(y)$/;"	f
is_leap?	deps/timex/lib/datetime/map.ex	/^  def is_leap?(map),                  do: convert!(map, :is_leap?)$/;"	f
is_leap?	deps/timex/lib/datetime/naivedatetime.ex	/^  def is_leap?(%NaiveDateTime{year: year}), do: :calendar.is_leap_year(year)$/;"	f
is_leap?	deps/timex/lib/protocol.ex	/^  def is_leap?(%{__struct__: _} = d), do: Timex.is_leap?(Map.from_struct(d))$/;"	f
is_leap?	deps/timex/lib/protocol.ex	/^  def is_leap?(_datetime), do: {:error, :invalid_date}$/;"	f
is_leap?	deps/timex/lib/protocol.ex	/^  def is_leap?(datetime)$/;"	f
is_leap?	deps/timex/lib/timex.ex	/^  def is_leap?(year) when is_year(year), do: :calendar.is_leap_year(year)$/;"	f
is_leap?	deps/timex/lib/timex.ex	/^  defdelegate is_leap?(date), to: Timex.Protocol$/;"	d
is_leap_year	deps/timex/lib/timex/macros.ex	/^  defmacro is_leap_year(y) do$/;"	a
is_migration_module?	deps/ecto/lib/ecto/migrator.ex	/^  defp is_migration_module?(mod), do: function_exported?(mod, :__migration__, 0)$/;"	f
is_migration_module?	deps/ecto/lib/ecto/migrator.ex	/^  defp is_migration_module?({mod, _bin}), do: function_exported?(mod, :__migration__, 0)$/;"	f
is_millisecond	deps/timex/lib/timex/macros.ex	/^  defmacro is_millisecond(ms) do$/;"	a
is_minute	deps/timex/lib/timex/macros.ex	/^  defmacro is_minute(m) do$/;"	a
is_month	deps/timex/lib/timex/macros.ex	/^  defmacro is_month(m) do$/;"	a
is_nil	deps/ecto/lib/ecto/query/api.ex	/^  def is_nil(value), do: doc! [value]$/;"	f
is_positive_integer	deps/timex/lib/timex/macros.ex	/^  defmacro is_positive_integer(n) do$/;"	a
is_positive_number	deps/timex/lib/timex/macros.ex	/^  defmacro is_positive_number(n) do$/;"	a
is_second	deps/timex/lib/timex/macros.ex	/^  defmacro is_second(s) do$/;"	a
is_special_process?	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp is_special_process?(exports) do$/;"	f
is_supervisor?	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp is_supervisor?(attributes) do$/;"	f
is_time	deps/ecto/lib/ecto/date_time.ex	/^  defmacro is_time(hour, min, sec, usec \\\\ 0) do$/;"	a
is_time	deps/timex/lib/timex/macros.ex	/^  defmacro is_time(h,m,s,ms\\\\0) do$/;"	a
is_timestamp	deps/timex/lib/timex/macros.ex	/^  defmacro is_timestamp(mega,sec,micro) do$/;"	a
is_translation	deps/gettext/lib/gettext/po/translations.ex	/^  defmacrop is_translation(module) do$/;"	a
is_valid?	deps/timex/lib/date/date.ex	/^  def is_valid?(%Date{:year => y, :month => m, :day => d}) do$/;"	f
is_valid?	deps/timex/lib/datetime/datetime.ex	/^  def is_valid?(%DateTime{:year => y, :month => m, :day => d,$/;"	f
is_valid?	deps/timex/lib/datetime/erlang.ex	/^  def is_valid?(_), do: false$/;"	f
is_valid?	deps/timex/lib/datetime/erlang.ex	/^  def is_valid?({y,m,d}) when is_date(y,m,d), do: true$/;"	f
is_valid?	deps/timex/lib/datetime/erlang.ex	/^  def is_valid?({{y,m,d},{h,mm,s,_us}}) when is_datetime(y,m,d,h,mm,s), do: true$/;"	f
is_valid?	deps/timex/lib/datetime/erlang.ex	/^  def is_valid?({{y,m,d},{h,mm,s}}) when is_datetime(y,m,d,h,mm,s), do: true$/;"	f
is_valid?	deps/timex/lib/datetime/map.ex	/^  def is_valid?(map),                 do: convert!(map, :is_valid?)$/;"	f
is_valid?	deps/timex/lib/datetime/naivedatetime.ex	/^  def is_valid?(%NaiveDateTime{:year => y, :month => m, :day => d,$/;"	f
is_valid?	deps/timex/lib/protocol.ex	/^  def is_valid?(%{__struct__: _} = d), do: Timex.is_valid?(Map.from_struct(d))$/;"	f
is_valid?	deps/timex/lib/protocol.ex	/^  def is_valid?(_datetime), do: false$/;"	f
is_valid?	deps/timex/lib/protocol.ex	/^  def is_valid?(datetime)$/;"	f
is_valid?	deps/timex/lib/timex.ex	/^  defdelegate is_valid?(datetime), to: Timex.Protocol$/;"	d
is_valid_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_constraint(c), do: {:error, "'#{inspect c}' is not a valid constraint for timezones"}$/;"	f
is_valid_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_constraint({day_of_week, {{y,m,d},{h,mm,s}}} = datetime) when day_of_week in @valid_day_names do$/;"	f
is_valid_from_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_from_constraint(:max), do: {:error, ":max is not a valid from constraint for timezones"}$/;"	f
is_valid_from_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_from_constraint(:min), do: true$/;"	f
is_valid_from_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_from_constraint(c),    do: is_valid_constraint(c)$/;"	f
is_valid_name	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_name(name) when is_binary(name), do: true$/;"	f
is_valid_name	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_name(name), do: {:error, "invalid timezone name '#{inspect name}'!"}$/;"	f
is_valid_offset	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_offset(offset) when is_integer(offset) and (offset < @max_seconds_in_day and offset > -@max_seconds_in_day),$/;"	f
is_valid_offset	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_offset(offset), do: {:error, "invalid timezone offset '#{inspect offset}'"}$/;"	f
is_valid_time?	deps/timex/lib/timex.ex	/^  def is_valid_time?(_), do: false$/;"	f
is_valid_time?	deps/timex/lib/timex.ex	/^  def is_valid_time?({hour,min,sec,ms}) when is_time(hour,min,sec,ms), do: true$/;"	f
is_valid_time?	deps/timex/lib/timex.ex	/^  def is_valid_time?({hour,min,sec}) when is_time(hour,min,sec),       do: true$/;"	f
is_valid_timezone?	deps/timex/lib/timex.ex	/^  def is_valid_timezone?(timezone) do$/;"	f
is_valid_until_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_until_constraint(:max), do: true$/;"	f
is_valid_until_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_until_constraint(:min), do: {:error, ":min is not a valid until constraint for timezones"}$/;"	f
is_valid_until_constraint	deps/timex/lib/timezone/timezone_info.ex	/^  defp is_valid_until_constraint(c),    do: is_valid_constraint(c)$/;"	f
is_week_of_year	deps/timex/lib/timex/macros.ex	/^  defmacro is_week_of_year(w) do$/;"	a
is_weekday	deps/timex/lib/parse/datetime/helpers.ex	/^  def is_weekday(name) do$/;"	f
is_year	deps/timex/lib/timex/macros.ex	/^  defmacro is_year(y) do$/;"	a
iso8601	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso8601(_opts \\\\ []), do: Timex.Parse.DateTime.Parsers.ISO8601Extended.parse$/;"	f
iso8601_basic	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso8601_basic(opts \\\\ []) do$/;"	f
iso8601_extended	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso8601_extended(_opts \\\\ []), do: Timex.Parse.DateTime.Parsers.ISO8601Extended.parse$/;"	f
iso_date	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_date(_) do$/;"	f
iso_day_to_date_tuple	deps/timex/lib/timex/helpers.ex	/^  def iso_day_to_date_tuple(_, _), do: {:error, :invalid_year_and_day}$/;"	f
iso_day_to_date_tuple	deps/timex/lib/timex/helpers.ex	/^  def iso_day_to_date_tuple(year, _) when is_year(year), do: {:error, :invalid_day}$/;"	f
iso_day_to_date_tuple	deps/timex/lib/timex/helpers.ex	/^  def iso_day_to_date_tuple(year, day) when is_iso_day_of_year(year, day) do $/;"	f
iso_day_to_date_tuple	deps/timex/lib/timex/helpers.ex	/^  def iso_day_to_date_tuple(year, day) when is_year(year) and is_iso_day_of_year(year, day) do$/;"	f
iso_ordinal	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_ordinal(_) do$/;"	f
iso_time	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_time(_) do$/;"	f
iso_triplet	deps/timex/lib/timex.ex	/^  def iso_triplet(datetime) do$/;"	f
iso_week	deps/timex/lib/date/date.ex	/^  def iso_week(%Date{:year => y, :month => m, :day => d}),$/;"	f
iso_week	deps/timex/lib/datetime/datetime.ex	/^  def iso_week(%DateTime{:year => y, :month => m, :day => d}),$/;"	f
iso_week	deps/timex/lib/datetime/erlang.ex	/^  def iso_week(_), do: {:error, :invalid_date}$/;"	f
iso_week	deps/timex/lib/datetime/erlang.ex	/^  def iso_week({y,m,d}) when is_date(y,m,d),$/;"	f
iso_week	deps/timex/lib/datetime/erlang.ex	/^  def iso_week({{y,m,d}, _}) when is_date(y,m,d),$/;"	f
iso_week	deps/timex/lib/datetime/map.ex	/^  def iso_week(map),                  do: convert!(map, :iso_week)$/;"	f
iso_week	deps/timex/lib/datetime/naivedatetime.ex	/^  def iso_week(%NaiveDateTime{:year => y, :month => m, :day => d}),$/;"	f
iso_week	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_week(_) do$/;"	f
iso_week	deps/timex/lib/protocol.ex	/^  def iso_week(%{__struct__: _} = d), do: Timex.iso_week(Map.from_struct(d))$/;"	f
iso_week	deps/timex/lib/protocol.ex	/^  def iso_week(_datetime), do: {:error, :invalid_date}$/;"	f
iso_week	deps/timex/lib/protocol.ex	/^  def iso_week(datetime)$/;"	f
iso_week	deps/timex/lib/timex.ex	/^  def iso_week(_, _, _),$/;"	f
iso_week	deps/timex/lib/timex.ex	/^  def iso_week(year, month, day) when is_date(year, month, day),$/;"	f
iso_week	deps/timex/lib/timex.ex	/^  defdelegate iso_week(datetime), to: Timex.Protocol$/;"	d
iso_weekday	deps/timex/lib/parse/datetime/parsers.ex	/^  def iso_weekday(opts \\\\ []) do$/;"	f
isolated	deps/con_cache/lib/con_cache.ex	/^  def isolated(cache_id, key, timeout \\\\ nil, fun),$/;"	f
isolated	deps/con_cache/lib/con_cache/operations.ex	/^  def isolated(cache, key, timeout \\\\ nil, fun), do:$/;"	f
isolated_get_or_store	deps/con_cache/lib/con_cache/operations.ex	/^  defp isolated_get_or_store(cache, key, fun) do$/;"	f
item_changeset	deps/ecto/integration_test/cases/repo.exs	/^      def item_changeset(item, params) do$/;"	f
item_expiry_time	deps/con_cache/lib/con_cache/owner.ex	/^  defp item_expiry_time(%__MODULE__{ttls: ttls}, key) do$/;"	f
item_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  defp item_ttl(%__MODULE__{ttls: ttls}, key) do$/;"	f
iterate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp iterate(_fun, 0, _prev, acc), do: acc$/;"	f
iterate	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp iterate(fun, iteration, prev, acc) do$/;"	f
jaro_distance	deps/gettext/lib/gettext/fuzzy.ex	/^  def jaro_distance(k1, k2) when is_binary(k1) and is_binary(k2), do: String.jaro_distance(k1, k2)$/;"	f
jaro_distance	deps/gettext/lib/gettext/fuzzy.ex	/^  def jaro_distance(k1, {k2, _}) when is_binary(k1),              do: String.jaro_distance(k1, k2)$/;"	f
jaro_distance	deps/gettext/lib/gettext/fuzzy.ex	/^  def jaro_distance(key1, key2)$/;"	f
jaro_distance	deps/gettext/lib/gettext/fuzzy.ex	/^  def jaro_distance({k1, _}, k2) when is_binary(k2),              do: String.jaro_distance(k1, k2)$/;"	f
jaro_distance	deps/gettext/lib/gettext/fuzzy.ex	/^  def jaro_distance({k1, _}, {k2, _}),                            do: String.jaro_distance(k1, k2)$/;"	f
join	deps/ecto/integration_test/sql/subquery.exs	/^  test "join: subqueries with parameters" do$/;"	t
join	deps/ecto/integration_test/sql/subquery.exs	/^  test "join: subqueries with select source" do$/;"	t
join	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join(%Query{joins: []}, _sources), do: []$/;"	f
join	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join(%Query{joins: joins} = query, sources) do$/;"	f
join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join(%Query{joins: []}, _sources), do: []$/;"	f
join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join(%Query{joins: joins} = query, sources) do$/;"	f
join	deps/ecto/lib/ecto/query.ex	/^  defmacro join(query, qual, binding \\\\ [], expr, on \\\\ nil) do$/;"	a
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, assoc: {ix, right}}, name, names) do$/;"	f
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, source: source, on: on}, name, names) do$/;"	f
join	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join(%JoinExpr{qual: qual, source: {:fragment, _, _} = source, on: on} = part, name, names) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^        def join("notification:" <> user_id, %{"ids" => ids}, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^        def join(topic, auth_msg, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^      def join("room:" <> room_id, auth_message, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel.ex	/^      def join("room:lobby", _auth_message, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/channel/server.ex	/^  def join(socket, auth_payload) do$/;"	f
join	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp join(socket, reply, parent, ref) do$/;"	f
join	deps/phoenix/lib/phoenix/presence.ex	/^        def join("some:topic", _params, socket) do$/;"	f
join	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join(module, path, alias, as, private, assigns) do$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def join(%Socket{} = socket, topic, payload)$/;"	f
join	deps/phoenix/priv/templates/phoenix.gen.channel/channel.ex	/^  def join("<%= singular %>:lobby", payload, socket) do$/;"	f
join	deps/phoenix/priv/templates/phx.gen.channel/channel.ex	/^  def join("<%= singular %>:lobby", payload, socket) do$/;"	f
join	deps/phoenix/priv/templates/phx.gen.presence/presence.ex	/^        def join("some:topic", _params, socket) do$/;"	f
join	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def join(%State{} = state, pid, topic, key, meta \\\\ %{}) do$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr) when is_atom(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr) when is_binary(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(expr),$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!(query, expr, count_bind, join_qual, join_source, join_assoc, join_params, file, line) do$/;"	f
join!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def join!({source, module}) when is_binary(source) and is_atom(module),$/;"	f
join_alias	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_alias(stack, alias) when is_atom(alias) do$/;"	f
join_as	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_as(_stack, nil), do: nil$/;"	f
join_as	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_as(stack, as) when is_atom(as) or is_binary(as) do$/;"	f
join_assigns	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_assigns(stack, assigns) do$/;"	f
join_guards	deps/plug/lib/plug/router.ex	/^  defp join_guards(fst, snd),  do: (quote do: unquote(fst) and unquote(snd))$/;"	f
join_guards	deps/plug/lib/plug/router.ex	/^  defp join_guards(fst, true), do: fst$/;"	f
join_path	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_path(stack, path) do$/;"	f
join_paths	deps/phoenix/lib/phoenix/template.ex	/^  defp join_paths([]),    do: ""$/;"	f
join_paths	deps/phoenix/lib/phoenix/template.ex	/^  defp join_paths(paths), do: Path.join(paths)$/;"	f
join_pipe_through	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_pipe_through(stack) do$/;"	f
join_private	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp join_private(stack, private) do$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:cross, _), do: " CROSS JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:full, _),  do: " FULL OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:inner, _), do: " INNER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:left, _),  do: " LEFT OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(:right, _), do: " RIGHT OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp join_qual(mode, q),   do: error!(q, "join `#{inspect mode}` not supported by MySQL")$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:cross), do: "CROSS JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:full),  do: "FULL OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:inner), do: "INNER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:inner_lateral), do: "INNER JOIN LATERAL "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:left),  do: "LEFT OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:left_lateral),  do: "LEFT OUTER JOIN LATERAL "$/;"	f
join_qual	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp join_qual(:right), do: "RIGHT OUTER JOIN "$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:cross),         do: :cross_join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:full),          do: :full_join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:inner),         do: :join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:inner_lateral), do: :join_lateral$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:left),          do: :left_join$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:left_lateral),  do: :left_join_lateral$/;"	f
join_qual	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_qual(:right),         do: :right_join$/;"	f
join_sources	deps/ecto/lib/ecto/query/inspect.ex	/^  defp join_sources(joins) do$/;"	f
joins	deps/ecto/integration_test/cases/joins.exs	/^  test "joins" do$/;"	t
joins	deps/ecto/lib/ecto/query/inspect.ex	/^  defp joins(joins, names) do$/;"	f
joins with queries	deps/ecto/integration_test/cases/joins.exs	/^  test "joins with queries" do$/;"	t
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(%{owner: owner, through: through}) do$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(%{queryable: queryable, owner: owner,$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(%{queryable: queryable, related_key: related_key,$/;"	f
joins_query	deps/ecto/lib/ecto/association.ex	/^  def joins_query(query, through, counter) do$/;"	f
js_content_type?	deps/plug/lib/plug/csrf_protection.ex	/^  defp js_content_type?(conn) do$/;"	f
json	deps/phoenix/lib/phoenix/controller.ex	/^  def json(conn, data) do$/;"	f
json_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp json_decode(x) when is_binary(x),$/;"	f
json_decode	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp json_decode(x),$/;"	f
json_header_plug	deps/plug/lib/plug.ex	/^      def json_header_plug(conn, opts) do$/;"	f
json_library	deps/ecto/lib/ecto/adapter.ex	/^  def json_library do$/;"	f
json_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def json_response(conn, status) do$/;"	f
json_response?	deps/phoenix/lib/phoenix/controller.ex	/^  defp json_response?(conn) do$/;"	f
jsonp_body	deps/phoenix/lib/phoenix/controller.ex	/^  defp jsonp_body(data, callback) do$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date(_), do: {:error, :invalid_date}$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date(_,_,_), do: {:error, :invalid_date}$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date(_,_,_,_,_,_), do: {:error, :invalid_datetime}$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date(year, month, day) when is_date(year, month, day) do$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date(year, month, day, hour, minute, second)$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date({year, month, day}),$/;"	f
julian_date	deps/timex/lib/calendar/julian.ex	/^  def julian_date({{year, month, day}, {hour, minute, second}}) do$/;"	f
key	deps/db_connection/lib/db_connection.ex	/^  defp key(%DBConnection{conn_ref: conn_ref}), do: {__MODULE__, conn_ref}$/;"	f
key	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp key(pool), do: {__MODULE__, pool}$/;"	f
key	deps/gettext/lib/gettext/po/translations.ex	/^  def key(%PluralTranslation{msgid: msgid, msgid_plural: msgid_plural}),$/;"	f
key	deps/gettext/lib/gettext/po/translations.ex	/^  def key(%Translation{msgid: msgid}),$/;"	f
key!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def key!(key) do$/;"	f
key!	deps/ecto/lib/ecto/query/builder/preload.ex	/^  def key!(key) when is_atom(key),$/;"	f
key_as_int	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp key_as_int(key_val), do: key_val$/;"	f
key_as_int	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp key_as_int({key, val}) when is_binary(key) do$/;"	f
keys	deps/gettext/lib/gettext/interpolation.ex	/^  def keys(interpolatable) when is_list(interpolatable),$/;"	f
keys	deps/gettext/lib/gettext/interpolation.ex	/^  def keys(string) when is_binary(string),$/;"	f
keys	deps/gettext/lib/gettext/interpolation.ex	/^  def keys(string_or_interpolatable)$/;"	f
keys	deps/phoenix/lib/phoenix/config.ex	/^  defp keys(data) do$/;"	f
keyword!	deps/ecto/lib/ecto/query/builder.ex	/^  def keyword!(kw) do$/;"	f
keyword_item?	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp keyword_item?(_), do: false$/;"	f
keyword_item?	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp keyword_item?({key, _}) when is_atom(key), do: true$/;"	f
kill_and_wait	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp kill_and_wait(pid) do$/;"	f
kitchen	deps/timex/lib/parse/datetime/parsers.ex	/^  def kitchen(opts) do$/;"	f
known_locales	deps/gettext/lib/gettext.ex	/^  def known_locales(backend) do$/;"	f
known_locales	deps/gettext/lib/gettext/compiler.ex	/^  defp known_locales(translations_dir) do$/;"	f
kw!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp kw!([], _binding, _counter, exprs, params, _kind, _original) do$/;"	f
kw!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp kw!([{field, nil}|_], _binding, _counter, _exprs, _params, _kind, _original) when is_atom(field) do$/;"	f
kw!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp kw!([{field, value}|t], binding, counter, exprs, params, kind, original) when is_atom(field) do$/;"	f
kw!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp kw!(_, _binding, _counter, _exprs, _params, kind, original) do$/;"	f
kw!	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp kw!(kind, kw, binding) do$/;"	f
kw_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_expr(_key, nil, _names), do: []$/;"	f
kw_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_expr(key, expr, names),  do: [{key, expr(expr, names)}]$/;"	f
kw_exprs	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_exprs(key, exprs, names) do$/;"	f
kw_inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_inspect(_key, nil), do: []$/;"	f
kw_inspect	deps/ecto/lib/ecto/query/inspect.ex	/^  defp kw_inspect(key, val),  do: [{key, inspect(val)}]$/;"	f
label	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp label(key) do$/;"	f
label	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  defp label(key) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, [do: block]) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, opts) when is_list(opts) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, opts, [do: block]) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, text) when is_binary(text) do$/;"	f
label	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def label(form, field, text, opts) when is_binary(text) and is_list(opts) do$/;"	f
last	deps/ecto/lib/ecto/query.ex	/^  def last(%Ecto.Query{} = query, nil) do$/;"	f
last	deps/ecto/lib/ecto/query.ex	/^  def last(queryable, key), do: last(order_by(queryable, ^key), nil)$/;"	f
last	deps/ecto/lib/ecto/query.ex	/^  def last(queryable, nil), do: last(Ecto.Queryable.to_query(queryable), nil)$/;"	f
last	deps/ecto/lib/ecto/query.ex	/^  def last(queryable, order_by \\\\ nil)$/;"	f
last_at_and_ip	deps/coherence/web/services/trackable_service.ex	/^  defp last_at_and_ip(conn, schema) do$/;"	f
last_insert_id	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp last_insert_id(_key, 0), do: []$/;"	f
last_insert_id	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp last_insert_id(key, last_insert_id), do: [{key, last_insert_id}]$/;"	f
last_insert_id	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp last_insert_id(nil, _last_insert_id), do: []$/;"	f
last_line_for_zone	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp last_line_for_zone(zone_name) do$/;"	f
last_modified_from_headers	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp last_modified_from_headers(headers) do$/;"	f
last_modified_of_latest_available	deps/tzdata/lib/tzdata/data_loader.ex	/^  def last_modified_of_latest_available(url\\\\@download_url) do$/;"	f
last_trackable	deps/coherence/web/services/trackable_service.ex	/^  defp last_trackable(user_id) do$/;"	f
last_weekday_of_month	deps/tzdata/lib/tzdata/util.ex	/^  def last_weekday_of_month(year, month, weekday) do$/;"	f
latest_file_size	deps/tzdata/lib/tzdata/data_loader.ex	/^  def latest_file_size(url\\\\@download_url) do$/;"	f
latest_file_size_by_get	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp latest_file_size_by_get(url) do$/;"	f
latest_file_size_by_head	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp latest_file_size_by_head(url) do$/;"	f
latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  def latest_remote_poll_date do$/;"	f
latest_remote_poll_file_exists?	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp latest_remote_poll_file_exists?, do: File.exists? remote_poll_file_name()$/;"	f
layout	deps/phoenix/lib/phoenix/controller.ex	/^  def layout(conn), do: conn.private |> Map.get(:phoenix_layout, false)$/;"	f
layout	deps/phoenix/lib/phoenix/controller.ex	/^  defp layout(conn, assigns, format) do$/;"	f
layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def layout(email), do: email.private |> Map.get(:phoenix_layout, false)$/;"	f
layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp layout(email, assigns, format) do$/;"	f
layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def layout_formats(conn) do$/;"	f
layout_view	deps/coherence/web/controllers/controller_helpers.ex	/^  def layout_view(conn, opts) do$/;"	f
leap_sec_data	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp leap_sec_data(tzdata_dir), do: LeapSecParser.read_file(tzdata_dir)$/;"	f
leap_sec_data	deps/tzdata/lib/tzdata/release_reader.ex	/^  def leap_sec_data,          do: simple_lookup(:leap_sec_data) |> hd |> elem(1)$/;"	f
leap_second_data_valid_until	deps/tzdata/lib/tzdata.ex	/^  def leap_second_data_valid_until do$/;"	f
leap_seconds	deps/tzdata/lib/tzdata.ex	/^  def leap_seconds do$/;"	f
leap_seconds_with_tai_diff	deps/tzdata/lib/tzdata.ex	/^  def leap_seconds_with_tai_diff do$/;"	f
leave	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def leave(socket) do$/;"	f
leave	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def leave(%State{pids: pids} = state, pid) do$/;"	f
leave	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def leave(%State{pids: pids} = state, pid, topic, key) do$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left != right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left < right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left <= right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left == right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left > right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left >= right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left and right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left in right, do: doc! [left, right]$/;"	f
left	deps/ecto/lib/ecto/query/api.ex	/^  def left or right, do: doc! [left, right]$/;"	f
left joins with missing entries	deps/ecto/integration_test/cases/joins.exs	/^  test "left joins with missing entries" do$/;"	t
letter_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp letter_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
letter_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp letter_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat(_, _, _, _),$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat(date, format_string, locale, formatter \\\\ Default)$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat(date, format_string, locale, formatter)$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat(datetime, format_string, locale, :relative),$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat(datetime, format_string, locale, :strftime),$/;"	f
lformat	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat({:error, _} = err, _format_string, _locale, _formatter),$/;"	f
lformat	deps/timex/lib/format/datetime/formatters/default.ex	/^  def lformat(date, format_string, locale) do$/;"	f
lformat	deps/timex/lib/format/datetime/formatters/default.ex	/^  def lformat(date, format_string, tokenizer, locale) do$/;"	f
lformat	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def lformat(date, format_string, locale) do$/;"	f
lformat	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def lformat(date, format_string, locale) do$/;"	f
lformat	deps/timex/lib/format/duration/formatter.ex	/^  def lformat(%Duration{} = duration, locale, formatter)$/;"	f
lformat	deps/timex/lib/format/duration/formatter.ex	/^  def lformat(_, _, _), do: {:error, :invalid_duration}$/;"	f
lformat	deps/timex/lib/format/duration/formatter.ex	/^  def lformat(duration, locale), do: lformat(duration, locale, Default)$/;"	f
lformat	deps/timex/lib/format/duration/formatters/default.ex	/^  def lformat(%Duration{} = duration, _locale) do$/;"	f
lformat	deps/timex/lib/format/duration/formatters/default.ex	/^  def lformat(_, _locale), do: {:error, :invalid_duration}$/;"	f
lformat	deps/timex/lib/format/duration/formatters/humanized.ex	/^  def lformat(%Duration{} = duration, locale) do$/;"	f
lformat	deps/timex/lib/format/duration/formatters/humanized.ex	/^  def lformat(_, _locale), do: {:error, :invalid_duration}$/;"	f
lformat	deps/timex/lib/timex.ex	/^  defdelegate lformat(datetime, format_string, locale), to: Timex.Format.DateTime.Formatter$/;"	d
lformat	deps/timex/lib/timex.ex	/^  defdelegate lformat(datetime, format_string, locale, formatter),$/;"	d
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!(a,b,c,d),$/;"	f
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!(date, format_string, locale, formatter \\\\ Default)$/;"	f
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!(date, format_string, locale, formatter)$/;"	f
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!(datetime, format_string, locale, :relative),$/;"	f
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!(datetime, format_string, locale, :strftime),$/;"	f
lformat!	deps/timex/lib/format/datetime/formatter.ex	/^  def lformat!({:error, _} = err, _format_string, _locale, _formatter),$/;"	f
lformat!	deps/timex/lib/format/datetime/formatters/default.ex	/^  def lformat!(date, format_string, locale) do$/;"	f
lformat!	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def lformat!(date, format_string, locale) do$/;"	f
lformat!	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  def lformat!(date, format_string, locale) do$/;"	f
lformat!	deps/timex/lib/timex.ex	/^  defdelegate lformat!(datetime, format_string, locale), to: Timex.Format.DateTime.Formatter$/;"	d
lformat!	deps/timex/lib/timex.ex	/^  defdelegate lformat!(datetime, format_string, locale, formatter),$/;"	d
lformat_duration	deps/timex/lib/timex.ex	/^  defdelegate lformat_duration(timestamp, locale),$/;"	d
lformat_duration	deps/timex/lib/timex.ex	/^  defdelegate lformat_duration(timestamp, locale, formatter),$/;"	d
lgettext	deps/gettext/lib/gettext/compiler.ex	/^        def lgettext(unquote(locale), unquote(domain), unquote(msgid), var!(bindings)) do$/;"	f
lgettext	deps/gettext/lib/gettext/compiler.ex	/^      def lgettext(locale, domain, msgid, bindings) do$/;"	f
lgettext	deps/gettext/lib/gettext/compiler.ex	/^      def lgettext(locale, domain, msgid, bindings)$/;"	f
like	deps/ecto/lib/ecto/query/api.ex	/^  def like(string, search), do: doc! [string, search]$/;"	f
limit	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp limit(%Query{limit: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
limit	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp limit(%Query{limit: nil}, _sources), do: []$/;"	f
limit	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp limit(%Query{limit: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
limit	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp limit(%Query{limit: nil}, _sources), do: []$/;"	f
limit	deps/ecto/lib/ecto/query.ex	/^  defmacro limit(query, binding \\\\ [], expr) do$/;"	a
limit	deps/ecto/lib/ecto/query.ex	/^  defp limit do$/;"	f
lin_backoff	deps/retry/lib/retry/delay_streams.ex	/^  def lin_backoff(initial_delay, factor) do$/;"	f
line_from_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp line_from_expr(_), do: nil$/;"	f
line_from_expr	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp line_from_expr({_, meta, _}) when is_list(meta), do: Keyword.get(meta, :line)$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(_text, opts) when not is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(opts) when is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(opts, do: contents) when is_list(opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(text, opts) do$/;"	f
link	deps/phoenix_html/lib/phoenix_html/link.ex	/^  def link(text, opts)$/;"	f
link_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def link_list(from_initial_pass) do$/;"	f
link_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def link_list,              do: simple_lookup(:link_list) |> hd |> elem(1)$/;"	f
links	deps/tzdata/lib/tzdata.ex	/^  def links, do: Tzdata.ReleaseReader.links$/;"	f
links	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def links(from_initial_pass) do$/;"	f
links	deps/tzdata/lib/tzdata/release_reader.ex	/^  def links,                  do: simple_lookup(:links) |> hd |> elem(1)$/;"	f
list	deps/boltex/lib/boltex/pack_stream.ex	/^  defp list(list, list_size) do$/;"	f
list	deps/phoenix/lib/phoenix/presence.ex	/^      def list(%Phoenix.Socket{topic: topic}), do: list(topic)$/;"	f
list	deps/phoenix/lib/phoenix/presence.ex	/^      def list(topic) do$/;"	f
list	deps/phoenix/lib/phoenix/presence.ex	/^  def list(module, topic) do$/;"	f
list	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def list(pubsub_server, shard) when is_atom(pubsub_server) do$/;"	f
list	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def list(server_name, topic) do$/;"	f
list	deps/plug/lib/plug/conn/utils.ex	/^  def list(binary) do$/;"	f
list_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "list_<%= schema.plural %>\/1 returns all <%= schema.plural %>" do$/;"	t
list_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def list_<%= schema.plural %> do$/;"	f
list_config_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def list_config_options(acc, opts) do$/;"	f
list_config_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def list_config_options(acc, opts) do$/;"	f
list_of_single_value_from_map_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp list_of_single_value_from_map_list(list, key), do: Enum.map(list, fn elem -> elem[key] end)$/;"	f
list_sites	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def list_sites do$/;"	f
list_sites	apps/flexcility_web/test/admin_test.exs	/^  test "list_sites\/1 returns all sites" do$/;"	t
list_to_atoms	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp list_to_atoms(list), do: Enum.map(list, &(String.to_atom(&1)))$/;"	f
list_to_atoms	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp list_to_atoms(list), do: Enum.map(list, &(String.to_atom(&1)))$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp list_to_attr([key, comp, value]) do$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp list_to_attr([key, value]), do: {String.to_atom(key), String.to_atom(value)}$/;"	f
list_to_attr	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp list_to_attr([key]), do: {String.to_atom(key), :string}$/;"	f
list_to_hex_str	deps/uuid/lib/uuid.ex	/^  defp list_to_hex_str([]) do$/;"	f
list_to_hex_str	deps/uuid/lib/uuid.ex	/^  defp list_to_hex_str([head | tail]) do$/;"	f
list_users	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def list_users do$/;"	f
listen	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp listen(conn, server_ref, endpoint, opts) do$/;"	f
listen	deps/postgrex/lib/postgrex/notifications.ex	/^  def listen(pid, channel, opts \\\\ []) do$/;"	f
listen!	deps/postgrex/lib/postgrex/notifications.ex	/^  def listen!(pid, channel, opts \\\\ []) do$/;"	f
listener	deps/postgrex/lib/postgrex/protocol.ex	/^  defp listener(s, status, statement, buffer) do$/;"	f
listener_query	deps/postgrex/lib/postgrex/notifications.ex	/^  defp listener_query(statement, result, from, s) do$/;"	f
lists all entries on index	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "lists all entries on index", %{conn: conn} do$/;"	t
lists all entries on index	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "lists all entries on index", %{conn: conn} do$/;"	t
lists all entries on index	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "lists all entries on index", %{conn: conn} do$/;"	t
lists all entries on index	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "lists all entries on index", %{conn: conn} do$/;"	t
lists all entries on index	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "lists all entries on index", %{conn: conn} do$/;"	t
literal	deps/ecto/lib/ecto/query/builder.ex	/^  defp literal(value, expected, vars),$/;"	f
literal	deps/timex/lib/parse/datetime/parsers.ex	/^  defp literal(parser), do: map(parser, fn x -> [literal: x] end)$/;"	f
lngettext	deps/gettext/lib/gettext/compiler.ex	/^        def lngettext(unquote(locale), unquote(domain), unquote(msgid), unquote(msgid_plural), n, bindings) do$/;"	f
lngettext	deps/gettext/lib/gettext/compiler.ex	/^      def lngettext(_locale, domain, msgid, msgid_plural, n, bindings) do$/;"	f
lngettext	deps/gettext/lib/gettext/compiler.ex	/^      def lngettext(locale, domain, msgid, msgid_plural, n, bindings)$/;"	f
load	deps/ecto/integration_test/sql/sql.exs	/^  test "load" do$/;"	t
load	deps/ecto/integration_test/support/types.exs	/^  def load(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load(_), do: :error$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load({_, _, _} = time) do$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load({hour, min, sec, usec}) do$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load({year, month, day}) do$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load({{_, _, _}, {_, _, _, _}} = datetime) do$/;"	f
load	deps/ecto/lib/ecto/date_time.ex	/^  def load({{_, _, _}, {_, _, _}} = datetime) do$/;"	f
load	deps/ecto/lib/ecto/repo.ex	/^      def load(schema_or_types, data) do$/;"	f
load	deps/ecto/lib/ecto/repo/schema.ex	/^  def load(adapter, schema_or_types, data) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^        def load(integer) when is_integer(integer), do: {:ok, integer}$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(:binary_id, value, _loader) when is_binary(value) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(:date, term, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(:naive_datetime, term, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(:time, term, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(:utc_datetime, term, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(_type, nil, _loader), do: {:ok, nil}$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(type, value, _loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load(type, value, loader \\\\ &load\/2)$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load({:array, type}, value, loader) when is_list(value) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load({:embed, embed}, value, loader) do$/;"	f
load	deps/ecto/lib/ecto/type.ex	/^  def load({:map, type}, value, loader) when is_map(value) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(%Ecto.Query.Tagged{type: :uuid, value: uuid}) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(<<_::128>> = uuid) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(<<_::64, ?-, _::32, ?-, _::32, ?-, _::32, ?-, _::96>> = string) do$/;"	f
load	deps/ecto/lib/ecto/uuid.ex	/^  def load(_), do: :error$/;"	f
load	deps/timex_ecto/lib/types/date.ex	/^  def load(_), do: :error$/;"	f
load	deps/timex_ecto/lib/types/date.ex	/^  def load({_year, _month, _day} = date), do: {:ok, Timex.to_date(date)}$/;"	f
load	deps/timex_ecto/lib/types/datetime.ex	/^  def load(_), do: :error$/;"	f
load	deps/timex_ecto/lib/types/datetime.ex	/^  def load({{y, m, d}, {h, mm, s, usec}}) do$/;"	f
load	deps/timex_ecto/lib/types/datetimetz.ex	/^  def load(_), do: :error$/;"	f
load	deps/timex_ecto/lib/types/datetimetz.ex	/^  def load({{{y, m, d}, {h, mm, s, usec}}, timezone}) do$/;"	f
load	deps/timex_ecto/lib/types/time.ex	/^  def load(%{:__struct__ => Postgrex.Interval, :days => days, :months => months, :secs => seconds}) do$/;"	f
load	deps/timex_ecto/lib/types/time.ex	/^  def load(_), do: :error$/;"	f
load	deps/timex_ecto/lib/types/time.ex	/^  def load({_hour, _minute, _second, _usecs} = clock) do$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(%{__meta__: %{state: :built}}, %NotLoaded{__cardinality__: cardinality}) do$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(_struct, loaded), do: loaded$/;"	f
load!	deps/ecto/lib/ecto/changeset/relation.ex	/^  def load!(struct, %NotLoaded{__field__: field}) do$/;"	f
load!	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp load!(type, value, field, struct, adapter) do$/;"	f
load!	deps/ecto/lib/ecto/schema.ex	/^  defp load!(struct, field, type, value, loader) do$/;"	f
load_and_save_table	deps/tzdata/lib/tzdata/data_builder.ex	/^  def load_and_save_table do$/;"	f
load_assoc	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp load_assoc({:assoc, assoc, ids}, struct) do$/;"	f
load_assocs	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp load_assocs({child_key, struct}, sub_dicts, refls) do$/;"	f
load_backup	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp load_backup(mod) do$/;"	f
load_changes	deps/ecto/lib/ecto/repo/schema.ex	/^  defp load_changes(%{changes: changes} = changeset,$/;"	f
load_compile_digests	deps/phoenix/lib/phoenix/digester.ex	/^  defp load_compile_digests(output_path) do$/;"	f
load_date	deps/ecto/lib/ecto/type.ex	/^  defp load_date(%Date{} = date),$/;"	f
load_date	deps/ecto/lib/ecto/type.ex	/^  defp load_date(_),$/;"	f
load_date	deps/ecto/lib/ecto/type.ex	/^  defp load_date({year, month, day}),$/;"	f
load_each	deps/ecto/lib/ecto/repo/schema.ex	/^  defp load_each(struct, [], _types, _adapter) do$/;"	f
load_each	deps/ecto/lib/ecto/repo/schema.ex	/^  defp load_each(struct, [{_, value} | kv], [{key, type} | types], adapter) do$/;"	f
load_embed	deps/ecto/lib/ecto/adapters/sql.ex	/^  def load_embed(type, value) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :many, related: schema, field: field},$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :many}, nil, _fun), do: {:ok, []}$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :one, related: schema, field: field},$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(%{cardinality: :one}, nil, _fun), do: {:ok, nil}$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(_embed, _value, _fun) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(_field, schema, value, loader) when is_map(value) do$/;"	f
load_embed	deps/ecto/lib/ecto/type.ex	/^  defp load_embed(field, _schema, value, _fun) do$/;"	f
load_ets_table	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp load_ets_table(release_name) do$/;"	f
load_from_system_env	apps/flexcility_web/lib/flexcility_web/endpoint.ex	/^  def load_from_system_env(config) do$/;"	f
load_from_system_env	deps/phoenix/lib/phoenix/endpoint.ex	/^      def load_from_system_env(config) do$/;"	f
load_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp load_manifest(output_path) do$/;"	f
load_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_naive_datetime(%NaiveDateTime{} = naive),$/;"	f
load_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_naive_datetime(_),$/;"	f
load_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_naive_datetime({{year, month, day}, {hour, minute, second, microsecond}}),$/;"	f
load_naive_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_naive_datetime({{year, month, day}, {hour, minute, second}}),$/;"	f
load_release	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp load_release do$/;"	f
load_structure	deps/ecto/lib/mix/tasks/ecto.load.ex	/^  defp load_structure(repo, opts) do$/;"	f
load_through	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp load_through({:through, assoc, throughs}, struct) do$/;"	f
load_time	deps/ecto/lib/ecto/type.ex	/^  defp load_time(%Time{} = time),$/;"	f
load_time	deps/ecto/lib/ecto/type.ex	/^  defp load_time(_),$/;"	f
load_time	deps/ecto/lib/ecto/type.ex	/^  defp load_time({hour, minute, second, microsecond}),$/;"	f
load_time	deps/ecto/lib/ecto/type.ex	/^  defp load_time({hour, minute, second}),$/;"	f
load_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_utc_datetime(%DateTime{} = dt),$/;"	f
load_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_utc_datetime(_),$/;"	f
load_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_utc_datetime({{year, month, day}, {hour, minute, second, microsecond}}),$/;"	f
load_utc_datetime	deps/ecto/lib/ecto/type.ex	/^  defp load_utc_datetime({{year, month, day}, {hour, minute, second}}),$/;"	f
loaded	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^  defp loaded(module), do: Code.ensure_loaded?(module) && module$/;"	f
loaded_tzdata_matches_iana_file_size?	deps/tzdata/lib/tzdata/release_updater.ex	/^  defp loaded_tzdata_matches_iana_file_size? do$/;"	f
loaded_tzdata_matches_newest_one?	deps/tzdata/lib/tzdata/release_updater.ex	/^  defp loaded_tzdata_matches_newest_one? do$/;"	f
loaded_tzdata_matches_remote_last_modified?	deps/tzdata/lib/tzdata/release_updater.ex	/^  defp loaded_tzdata_matches_remote_last_modified? do$/;"	f
loaders	deps/ecto/lib/ecto/adapter.ex	/^      def loaders(:binary_id, type), do: [Ecto.UUID, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapter.ex	/^      def loaders(:boolean, type), do: [&bool_decode\/1, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapter.ex	/^      def loaders(_primitive, type), do: [type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders(:binary_id, type),      do: [Ecto.UUID, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders(:boolean, type),        do: [&bool_decode\/1, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders(:float, type),          do: [&float_decode\/1, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders(:map, type),            do: [&json_decode\/1, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders(_, type),               do: [type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders({:embed, _} = type, _), do: [&json_decode\/1, &Ecto.Adapters.SQL.load_embed(type, &1)]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def loaders({:map, _}, type),       do: [&json_decode\/1, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/sql.ex	/^      def loaders(:binary_id, type),      do: [Ecto.UUID, type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/sql.ex	/^      def loaders(_, type),               do: [type]$/;"	f
loaders	deps/ecto/lib/ecto/adapters/sql.ex	/^      def loaders({:embed, _} = type, _), do: [&Ecto.Adapters.SQL.load_embed(type, &1)]$/;"	f
local	deps/timex/lib/timex.ex	/^  def local() do$/;"	f
local	deps/timex/lib/timex.ex	/^  def local(date) do$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local(), do: local(:calendar.universal_time())$/;"	f
local	deps/timex/lib/timezone/timezone.ex	/^  def local(date) do$/;"	f
local_for_shard	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp local_for_shard(shard, pubsub_server) do$/;"	f
local_name	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def local_name(pubsub_server, shard) do$/;"	f
locale_and_domain_from_path	deps/gettext/lib/gettext/compiler.ex	/^  defp locale_and_domain_from_path(path) do$/;"	f
locale_dir	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  def locale_dir(pot_dir, locale) do$/;"	f
locale_from_path	deps/gettext/lib/gettext/merger.ex	/^  defp locale_from_path(path) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:osx, date) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:unix, date) do$/;"	f
localtz	deps/timex/lib/timezone/timezone_local.ex	/^  defp localtz(:win, _date) do$/;"	f
lock	deps/coherence/lib/coherence/schema.ex	/^        def lock(user, locked_at \\\\ Ecto.DateTime.utc) do$/;"	f
lock	deps/coherence/test/controllers/session_controller_test.exs	/^    test "lock", %{conn: conn, user: user} do$/;"	t
lock	deps/coherence/test/services/trackable_service_test.exs	/^    test "lock", %{conn: conn, user: user} do$/;"	t
lock	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp lock(lock_clause), do: [?\\s | lock_clause]$/;"	f
lock	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp lock(nil), do: []$/;"	f
lock	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp lock(lock_clause), do: [?\\s | lock_clause]$/;"	f
lock	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp lock(nil), do: []$/;"	f
lock	deps/ecto/lib/ecto/query.ex	/^  defmacro lock(query, expr) do$/;"	a
lock	deps/postgrex/lib/postgrex/type_server.ex	/^  defp lock(%{connections: connections, types: types} = state, {pid, _}) do$/;"	f
lock for update	deps/ecto/integration_test/sql/lock.exs	/^  test "lock for update" do$/;"	t
lock!	deps/coherence/lib/coherence/schema.ex	/^        def lock!(user, locked_at \\\\ Ecto.DateTime.utc) do$/;"	f
lock!	deps/coherence/test/controllers/controller_helpers_test.exs	/^  test "lock!" do$/;"	t
lock!	deps/coherence/web/controllers/controller_helpers.ex	/^  def lock!(user, locked_at \\\\ Ecto.DateTime.utc) do$/;"	f
lock_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp lock_error(s, fun) do$/;"	f
lock_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp lock_error(s, fun, query) do$/;"	f
lock_pid	deps/con_cache/lib/con_cache/operations.ex	/^  defp lock_pid(cache, key), do:$/;"	f
lock_pids	deps/con_cache/lib/con_cache/lock_supervisor.ex	/^  def lock_pids(parent_pid) do$/;"	f
lockable?	deps/coherence/lib/coherence/schema.ex	/^      def lockable? do$/;"	f
lockable_failure	deps/coherence/web/controllers/controller_helpers.ex	/^  def lockable_failure(changeset) do$/;"	f
locked?	deps/coherence/lib/coherence/schema.ex	/^        def locked?(user) do$/;"	f
locked?	deps/coherence/test/schema_test.exs	/^  test "locked?" do$/;"	t
log	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def log(message) when is_binary(message) do$/;"	f
log	deps/db_connection/lib/db_connection.ex	/^  defp log(_, _, _, nil, result), do: log_result(result)$/;"	f
log	deps/db_connection/lib/db_connection.ex	/^  defp log(call, query, params, log, times, result) do$/;"	f
log	deps/db_connection/lib/db_connection.ex	/^  defp log(call, query, params, {log, times}, result) do$/;"	f
log	deps/db_connection/lib/db_connection.ex	/^  defp log(fun, entry), do: fun.(entry)$/;"	f
log	deps/db_connection/lib/db_connection.ex	/^  defp log({mod, fun, args}, entry), do: apply(mod, fun, [entry | args])$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(:debug, :normal, _message),    do: :ok$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(:debug, :quiet, _message),     do: :ok$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(:error, :silent, message),     do: IO.puts message$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(:info, :quiet, _message),      do: :ok$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(_, :verbose, message),         do: IO.puts message$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(_level, :silent, _message),    do: :ok$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(_level, _verbosity, message),  do: IO.puts message$/;"	f
log	deps/distillery/lib/mix/lib/releases/logger.ex	/^  defp log(level, message),$/;"	f
log	deps/ecto/integration_test/support/repo.exs	/^  def log(entry, key) do$/;"	f
log	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp log(repo, params, entry, opts) do$/;"	f
log	deps/ecto/lib/ecto/log_entry.ex	/^  def log(%{connection_pid: connection_pid, ansi_color: ansi_color} = entry) do$/;"	f
log	deps/ecto/lib/ecto/log_entry.ex	/^  def log(entry, level) do$/;"	f
log	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log(false, _msg), do: :ok$/;"	f
log	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log(level, msg),  do: Logger.log(level, msg)$/;"	f
log	deps/ecto/lib/ecto/migrator.ex	/^  defp log(false, _msg), do: :ok$/;"	f
log	deps/ecto/lib/ecto/migrator.ex	/^  defp log(level, msg),  do: Logger.log(level, msg)$/;"	f
log	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp log(%{log_level: false}, _msg_func), do: :ok$/;"	f
log	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp log(%{log_level: level}, msg), do: Logger.log(level, msg)$/;"	f
log	deps/plug/lib/plug/debugger.ex	/^  defp log(_status, _kind, _reason, _stack),$/;"	f
log	deps/plug/lib/plug/debugger.ex	/^  defp log(status, kind, reason, stack) when status < 500,$/;"	f
log begin	deps/ecto/integration_test/sql/transaction.exs	/^  test "log begin, commit and rollback" do$/;"	t
log entry logged on query	deps/ecto/integration_test/cases/repo.exs	/^  test "log entry logged on query" do$/;"	t
log entry not logged when log is false	deps/ecto/integration_test/cases/repo.exs	/^  test "log entry not logged when log is false" do$/;"	t
log queries inside transactions	deps/ecto/integration_test/sql/transaction.exs	/^  test "log queries inside transactions" do$/;"	t
log raises after begin	deps/ecto/integration_test/sql/transaction.exs	/^  test "log raises after begin, drops the whole transaction" do$/;"	t
log raises after begin	deps/ecto/integration_test/sql/transaction.exs	/^  test "log raises after begin, drops transaction" do$/;"	t
log raises after commit	deps/ecto/integration_test/sql/transaction.exs	/^  test "log raises after commit, does commit" do$/;"	t
log raises after rollback	deps/ecto/integration_test/sql/transaction.exs	/^  test "log raises after rollback, does rollback" do$/;"	t
log_and_execute_ddl	deps/ecto/lib/ecto/migration/runner.ex	/^  defp log_and_execute_ddl(repo, %{level: level, sql: sql}, command) do$/;"	f
log_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp log_config(%{config_string: string} = config) do$/;"	f
log_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp log_config(%{log_config?: false} = config) do$/;"	f
log_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp log_config(%{config_string: string} = config) do$/;"	f
log_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp log_config(%{log_config?: false} = config) do$/;"	f
log_cookie	deps/coherence/web/models/rememberable.ex	/^  def log_cookie(cookie) do$/;"	f
log_cypher	deps/bolt_sips/lib/mix/tasks/cypher.ex	/^  defp log_cypher(msg), do: Mix.shell.info [:green, "#{inspect(msg)}"]$/;"	f
log_error	deps/bolt_sips/lib/mix/tasks/cypher.ex	/^  defp log_error(msg), do: Mix.shell.info [:white, "#{msg}"]$/;"	f
log_halt	deps/plug/lib/plug/builder.ex	/^  defp log_halt(plug_type, plug, env, builder_opts) do$/;"	f
log_info	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp log_info("phoenix" <> _, _func), do: :noop$/;"	f
log_info	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp log_info(_topic, func), do: Logger.info(func)$/;"	f
log_invalid_options	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp log_invalid_options(current_options, options) do$/;"	f
log_invalid_options	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp log_invalid_options(current_options, options) do$/;"	f
log_join	deps/phoenix/lib/phoenix/logger.ex	/^  defp log_join("phoenix" <> _, _socket, _params), do: :ok$/;"	f
log_join	deps/phoenix/lib/phoenix/logger.ex	/^  defp log_join(topic, socket, params) do$/;"	f
log_lockable_update	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp log_lockable_update(_), do: :ok$/;"	f
log_lockable_update	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp log_lockable_update({:error, changeset}) do$/;"	f
log_lockable_update	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp log_lockable_update(_), do: :ok$/;"	f
log_lockable_update	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp log_lockable_update({:error, changeset}) do$/;"	f
log_lockable_update	deps/coherence/web/controllers/session_controller.ex	/^  defp log_lockable_update(_), do: :ok$/;"	f
log_lockable_update	deps/coherence/web/controllers/session_controller.ex	/^  defp log_lockable_update({:error, changeset}) do$/;"	f
log_receive	deps/phoenix/lib/phoenix/logger.ex	/^  defp log_receive("phoenix" <> _, _event, _socket, _params), do: :ok$/;"	f
log_receive	deps/phoenix/lib/phoenix/logger.ex	/^  defp log_receive(topic, event, socket, params) do$/;"	f
log_response	deps/bolt_sips/lib/mix/tasks/cypher.ex	/^  defp log_response(msg), do: Mix.shell.info [:yellow, "#{inspect msg}"]$/;"	f
log_result	deps/db_connection/lib/db_connection.ex	/^  defp log_result(other), do: other$/;"	f
log_result	deps/db_connection/lib/db_connection.ex	/^  defp log_result({kind, reason, stack}) when kind in [:error, :exit, :throw] do$/;"	f
log_result	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp log_result(other), do: other$/;"	f
log_result	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp log_result({:ok, _query, res}), do: {:ok, res}$/;"	f
logged_in?	deps/coherence/lib/coherence.ex	/^  def logged_in?(conn), do: !!current_user(conn)$/;"	f
logged_in?	deps/coherence/test/support/view_helpers.exs	/^  def logged_in?(conn) do$/;"	f
logged_in_url	deps/coherence/web/controllers/controller_helpers.ex	/^  def logged_in_url(_conn) do$/;"	f
logged_out_url	deps/coherence/web/controllers/controller_helpers.ex	/^  def logged_out_url(conn) do$/;"	f
login_callback	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def login_callback(conn) do$/;"	f
login_callback	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def login_callback(conn) do$/;"	f
login_callback	deps/coherence/test/support/router.exs	/^  def login_callback(conn) do$/;"	f
login_callback	deps/coherence/web/controllers/session_controller.ex	/^  def login_callback(conn) do$/;"	f
login_cookie	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def login_cookie, do: "coherence_login"$/;"	f
login_cookie	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def login_cookie, do: "coherence_login"$/;"	f
login_cookie	deps/coherence/test/controllers/rememberable_test.exs	/^  def login_cookie(%{conn: conn}) do$/;"	f
login_cookie	deps/coherence/web/controllers/session_controller.ex	/^  def login_cookie, do: "coherence_login"$/;"	f
login_user	deps/coherence/web/controllers/controller_helpers.ex	/^  def login_user(conn, user, _params \\\\ %{}) do$/;"	f
logout_user	deps/coherence/web/controllers/controller_helpers.ex	/^  def logout_user(conn) do$/;"	f
long_call	deps/exactor/lib/exactor/operations.ex	/^      def long_call(..., some_variable)$/;"	f
lookup	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def lookup(manager, opts) do$/;"	f
lookup	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def lookup(manager, opts) when is_atom(manager) do$/;"	f
lookup	deps/ecto/lib/ecto/registry.ex	/^  def lookup(repo_name) do$/;"	f
lookup	deps/timex/lib/timezone/timezone_local.ex	/^  def lookup(), do: lookup(:calendar.datetime_to_gregorian_seconds(:calendar.universal_time()))$/;"	f
lookup	deps/timex/lib/timezone/timezone_local.ex	/^  def lookup(secs) when is_integer(secs) and secs > 0 do$/;"	f
lookup_conn_sup	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  def lookup_conn_sup(sup) do$/;"	f
lookup_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp lookup_periods_for_zone(_), do: []$/;"	f
lookup_periods_for_zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp lookup_periods_for_zone(zone) when is_binary(zone), do: simple_lookup(String.to_atom zone)$/;"	f
lookup_pool	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp lookup_pool(repo) do$/;"	f
lookup_posix	deps/timex/lib/timezone/timezone.ex	/^  defp lookup_posix(_), do: nil$/;"	f
lookup_posix	deps/timex/lib/timezone/timezone.ex	/^  defp lookup_posix(timezone) when is_binary(timezone) do$/;"	f
lookup_regulator	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp lookup_regulator(pool) do$/;"	f
lookup_regulator	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  def lookup_regulator(sup) do$/;"	f
lookup_timezone_by_abbreviation	deps/timex/lib/timezone/timezone.ex	/^  defp lookup_timezone_by_abbreviation(abbr, secs, utc_or_wall) do$/;"	f
lower_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp lower_impl(%ParserState{status: :ok} = state) do$/;"	f
lowerbound	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def lowerbound(c1, c2) do$/;"	f
ls_locale_dirs	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp ls_locale_dirs(dir) do$/;"	f
mac_fun	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp mac_fun(digest, secret) do$/;"	f
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render both html and text body with assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render both html and text body with layout and assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render both html and text body with layout" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render both html and text body" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body with assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body with layout and assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body with layout without assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body with layout" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body without assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render html body" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body with assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body with layout and assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body with layout without assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body with layout" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body without assigns" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: render text body" do$/;"	t
macro	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "macro: use layout when provided via `use` macro " do$/;"	t
macros	deps/gettext/lib/gettext/compiler.ex	/^  defp macros do$/;"	f
make	deps/db_connection/lib/db_connection/task.ex	/^  defp make(fun) when is_function(fun, 1) do$/;"	f
make	deps/db_connection/lib/db_connection/task.ex	/^  defp make(mfargs) do$/;"	f
make	deps/distillery/lib/mix/lib/releases/appups.ex	/^  def make(application, v1, v2, v1_path, v2_path) do$/;"	f
make_appup	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp make_appup(v1, v1_path, _v1_props, v2, v2_path, _v2_props) do$/;"	f
make_args	deps/exactor/lib/exactor/delegator.ex	/^  defp make_args(arity) when arity > 0 do$/;"	f
make_boot_script	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp make_boot_script(%Release{profile: %Profile{output_dir: output_dir}} = release, rel_dir) do$/;"	f
make_delegate	deps/exactor/lib/exactor/delegator.ex	/^  defp make_delegate(type, fun, arity, code) do$/;"	f
make_empty_if_unfetched	deps/plug/lib/plug/parsers.ex	/^  defp make_empty_if_unfetched(%Plug.Conn.Unfetched{}), do: %{}$/;"	f
make_empty_if_unfetched	deps/plug/lib/plug/parsers.ex	/^  defp make_empty_if_unfetched(params), do: params$/;"	f
make_into	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  defp make_into(fun, stream) do$/;"	f
make_into	deps/postgrex/lib/postgrex/stream.ex	/^  defp make_into(conn, stream, %Postgrex.Copy{ref: ref} = copy, opts) do$/;"	f
make_map	deps/tzdata/lib/tzdata/basic_data_map.ex	/^  def make_map(all_files_read) do$/;"	f
make_old_if_exists	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  defp make_old_if_exists(path) do$/;"	f
make_portal	deps/postgrex/lib/postgrex/protocol.ex	/^  defp make_portal() do$/;"	f
make_sure_a_release_dir_exists	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp make_sure_a_release_dir_exists do$/;"	f
make_sure_a_release_is_on_file	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp make_sure_a_release_is_on_file do$/;"	f
make_tar	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp make_tar(release) do$/;"	f
make_tmp_dir	deps/plug/lib/plug/upload.ex	/^  defp make_tmp_dir(path) do$/;"	f
manifest_join	deps/phoenix/lib/phoenix/digester.ex	/^  defp manifest_join(".", filename),  do: filename$/;"	f
manifest_join	deps/phoenix/lib/phoenix/digester.ex	/^  defp manifest_join(path, filename), do: Path.join(path, filename)$/;"	f
manifest_stale?	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  defp manifest_stale?(manifest, pos) do$/;"	f
manual rollback bubbles up on nested transaction	deps/ecto/integration_test/sql/transaction.exs	/^  test "manual rollback bubbles up on nested transaction" do$/;"	t
manual rollback doesn	deps/ecto/integration_test/sql/transaction.exs	/^  test "manual rollback doesn't bubble up" do$/;"	t
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(0, _, _, %ParserState{status: :error} = err, _parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(_, acc, s, %ParserState{status: :error}, _parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, _last, %ParserState{status: :ok, results: [:__ignore|rs]} = s, parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, _last, %ParserState{status: :ok, results: []} = s, parser),$/;"	f
many1_loop	deps/combine/lib/combine/parsers/base.ex	/^  defp many1_loop(iteration, acc, _last, %ParserState{status: :ok, results: [h|rs]} = s, parser),$/;"	f
many_assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp many_assoc_map([], [], map) do$/;"	f
many_assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp many_assoc_map([id|ids], [struct|structs], map) do$/;"	f
many_to_many	deps/ecto/lib/ecto/schema.ex	/^  defmacro many_to_many(name, queryable, opts \\\\ []) do$/;"	a
many_to_many assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "many_to_many assoc" do$/;"	t
many_to_many assoc on delete deletes all	deps/ecto/integration_test/cases/assoc.exs	/^  test "many_to_many assoc on delete deletes all" do$/;"	t
many_to_many assoc selector	deps/ecto/integration_test/cases/joins.exs	/^  test "many_to_many assoc selector" do$/;"	t
many_to_many association join	deps/ecto/integration_test/cases/joins.exs	/^  test "many_to_many association join" do$/;"	t
many_to_many changeset assoc	deps/ecto/integration_test/cases/assoc.exs	/^  test "many_to_many changeset assoc" do$/;"	t
many_to_many changeset assoc with schema	deps/ecto/integration_test/cases/assoc.exs	/^  test "many_to_many changeset assoc with schema" do$/;"	t
many_to_many changeset assoc with self	deps/ecto/integration_test/cases/assoc.exs	/^  test "many_to_many changeset assoc with self-referential binary_id" do$/;"	t
map	deps/boltex/lib/boltex/pack_stream.ex	/^  defp map(map, entries) do$/;"	f
map	deps/ecto/lib/ecto/query/api.ex	/^  def map(source, fields), do: doc! [source, fields]$/;"	f
map	deps/ecto/lib/ecto/type.ex	/^  defp map([], _type, _fun, acc) do$/;"	f
map	deps/ecto/lib/ecto/type.ex	/^  defp map([{key, value} | t], type, fun, acc) do$/;"	f
map	deps/ecto/lib/ecto/type.ex	/^  defp map(_, _, _, _), do: :error$/;"	f
map type on update	deps/ecto/integration_test/cases/type.exs	/^  test "map type on update" do$/;"	t
map update	deps/ecto/integration_test/cases/repo.exs	/^    test "map update" do$/;"	t
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes([], _new_pks, fun, current, acc, valid?, skip?, _acc_pk_values) do$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes([changes | rest], new_pks, fun, current, acc, valid?, skip?, acc_pk_values)$/;"	f
map_changes	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp map_changes(_params, _new_pks, _fun, _current, _acc, _valid?, _skip?, _acc_pk_values) do$/;"	f
map_dep	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp map_dep(%Mix.Dep{app: a}), do: a$/;"	f
map_dep	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp map_dep({a, _, _opts}),    do: a$/;"	f
map_dep	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  defp map_dep({a, _}),           do: a$/;"	f
map_digested_file	deps/phoenix/lib/phoenix/digester.ex	/^  defp map_digested_file(file_path, output_path) do$/;"	f
map_directive	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp map_directive("relative"),$/;"	f
map_directive	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_directive(directive, opts) do$/;"	f
map_directive	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_directive(directive, opts) do$/;"	f
map_file	deps/phoenix/lib/phoenix/digester.ex	/^  defp map_file(file_path, input_path) do$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag("0"), do: [padding: :zeroes]$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag("_"), do: [padding: :spaces]$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_flag(_),   do: []$/;"	f
map_flag	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_flag(flag) do$/;"	f
map_literal	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp map_literal([]),      do: nil$/;"	f
map_literal	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp map_literal(literal), do: %Directive{type: :literal, value: literal, parser: char(literal)}$/;"	f
map_literal	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp map_literal(literals)$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal([]),        do: nil$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal(literal),   do: %Directive{type: :literal, value: literal, parser: char(literal)}$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp map_literal(literals)$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal([]),        do: nil$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal(literal),   do: %Directive{type: :literal, value: literal, parser: char(literal)}$/;"	f
map_literal	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_literal(literals)$/;"	f
map_modifier	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp map_modifier(modifier) do$/;"	f
map_params	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp map_params(params) do$/;"	f
map_params	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp map_params(params) do$/;"	f
map_with_name_key	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def map_with_name_key(from_initial_pass, record_type) do$/;"	f
mark_as_fuzzy	deps/gettext/lib/gettext/po/translations.ex	/^  def mark_as_fuzzy(%{__struct__: s, flags: flags} = t) when is_translation(s) do$/;"	f
mask	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def mask(), do: new("*", "*", "*", "*", "*", "*", "*", "*")$/;"	f
mask	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def mask(params), do: mask |> Fuzzyurl.with(params)$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  def mask(left, right) do$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  defp mask(<<>>, <<>>, acc) do$/;"	f
mask	deps/plug/lib/plug/crypto.ex	/^  defp mask(<<x, left::binary>>, <<y, right::binary>>, acc) do$/;"	f
mask	deps/plug/lib/plug/csrf_protection.ex	/^  defp mask(token) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  def masked_compare(left, right, mask) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  defp masked_compare(<<>>, <<>>, <<>>, acc) do$/;"	f
masked_compare	deps/plug/lib/plug/crypto.ex	/^  defp masked_compare(<<x, left::binary>>, <<y, right::binary>>, <<z, mask::binary>>, acc) do$/;"	f
match	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def match(mask, url) do$/;"	f
match	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def match(%Fuzzyurl{}=mask, %Fuzzyurl{}=url) do$/;"	f
match	deps/phoenix/lib/phoenix/router.ex	/^  defmacro match(verb, path, plug, plug_opts, options \\\\ []) do$/;"	a
match	deps/plug/lib/plug/router.ex	/^      def match(conn, _opts) do$/;"	f
match	deps/plug/lib/plug/router.ex	/^      defp match("GET", ["foo", "bar"], conn) do$/;"	f
match	deps/plug/lib/plug/router.ex	/^  defmacro match(path, options, contents \\\\ []) do$/;"	a
match?	deps/ecto/lib/ecto/type.ex	/^  def match?(schema_type, query_type) do$/;"	f
match_dispatch	deps/phoenix/lib/phoenix/router.ex	/^  defp match_dispatch() do$/;"	f
match_scores	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def match_scores(mask, url) do$/;"	f
match_scores	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def match_scores(%Fuzzyurl{}=mask, %Fuzzyurl{}=url) do$/;"	f
match_topic_to_channel!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defp match_topic_to_channel!(socket, topic) do$/;"	f
matcher	deps/gettext/lib/gettext/fuzzy.ex	/^  def matcher(threshold) do$/;"	f
matches?	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp matches?([item, subnet], ip), do: in_subnet?(to_tuple(item), ip, subnet)$/;"	f
matches?	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp matches?([item], ip), do: Utils.to_string(ip) == item$/;"	f
matches?	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def matches?(mask, url) do$/;"	f
matches?	deps/fuzzyurl/lib/fuzzyurl/match.ex	/^  def matches?(%Fuzzyurl{}=mask, %Fuzzyurl{}=url) do$/;"	f
matching	deps/postgrex/lib/postgrex/binary_extension.ex	/^      def matching(_), do: unquote(matching)$/;"	f
matching	deps/postgrex/lib/postgrex/extension.ex	/^        def matching(_state), do: [type: "ltree"]$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/json.ex	/^  def matching({nil, _}),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/jsonb.ex	/^  def matching({nil, _}),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def matching(_),$/;"	f
matching	deps/postgrex/lib/postgrex/extensions/void_text.ex	/^  def matching(_), do: [output: "void_out"]$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{coef: :qNaN}, %Decimal{} = num2) do$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{sign: sign1, exp: exp1} = num1, %Decimal{sign: sign2, exp: exp2} = num2) do$/;"	f
max	deps/decimal/lib/decimal.ex	/^  def max(%Decimal{} = num1, %Decimal{coef: :qNaN}) do$/;"	f
max	deps/ecto/lib/ecto/query/api.ex	/^  def max(value), do: doc! [value]$/;"	f
max_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp max_for(type, opts) do$/;"	f
maximum_login_attempts_exceeded	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def maximum_login_attempts_exceeded, do: dgettext(@domain, "Maximum Login attempts exceeded. Your account has been locked.")$/;"	f
maximum_login_attempts_exceeded	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def maximum_login_attempts_exceeded, do: dgettext(@domain, "Maximum Login attempts exceeded. Your account has been locked.")$/;"	f
maximum_login_attempts_exceeded	deps/coherence/test/support/messages.exs	/^  def maximum_login_attempts_exceeded, do: dgettext(@domain, "Maximum Login attempts exceeded. Your account has been locked.")$/;"	f
maybe_add_error_on_pk	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp maybe_add_error_on_pk(%{data: %{__struct__: schema}} = changeset, pk_values, acc_pk_values) do$/;"	f
maybe_add_vary	deps/plug/lib/plug/static.ex	/^  defp maybe_add_vary(conn, gzip?, brotli?) do$/;"	f
maybe_encode_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp maybe_encode_msg(msg) when is_binary(msg) or is_list(msg), do: msg$/;"	f
maybe_encode_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp maybe_encode_msg(msg) when is_tuple(msg), do: encode_msg(msg)$/;"	f
maybe_fetch_format	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp maybe_fetch_format(conn, opts) do$/;"	f
maybe_fetch_query_params	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp maybe_fetch_query_params(conn) do$/;"	f
maybe_fetch_query_params	deps/plug/lib/plug/debugger.ex	/^  defp maybe_fetch_query_params(conn) do$/;"	f
maybe_fetch_session	deps/plug/lib/plug/debugger.ex	/^  defp maybe_fetch_session(conn) do$/;"	f
maybe_first	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp maybe_first(list, :one), do: List.first(list)$/;"	f
maybe_first	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp maybe_first(list, _), do: list$/;"	f
maybe_first	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp maybe_first(list, :one), do: List.first(list)$/;"	f
maybe_first	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp maybe_first(list, _), do: list$/;"	f
maybe_flush	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp maybe_flush() do$/;"	f
maybe_html_escape	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp maybe_html_escape(string, false), do: string$/;"	f
maybe_html_escape	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp maybe_html_escape(string, true),  do: Plug.HTML.html_escape(string)$/;"	f
maybe_mark_for_deletion	deps/ecto/lib/ecto/changeset.ex	/^        defp maybe_mark_for_deletion(changeset) do$/;"	f
maybe_merge	deps/phoenix/lib/phoenix/router/route.ex	/^  defp maybe_merge(key, data) do$/;"	f
maybe_notify_caller	deps/con_cache/lib/con_cache/lock.ex	/^  defp maybe_notify_caller({:not_acquired, resource}), do: resource$/;"	f
maybe_notify_caller	deps/con_cache/lib/con_cache/lock.ex	/^  defp maybe_notify_caller({{:acquired, from}, resource}) do$/;"	f
maybe_pmap	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp maybe_pmap(assocs, repo, opts, fun) do$/;"	f
maybe_render	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp maybe_render(conn, kind, reason, stack, opts) do$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/association.ex	/^  defp maybe_replace_one!(%{field: field, __struct__: mod} = meta, current, parent,$/;"	f
maybe_replace_one!	deps/ecto/lib/ecto/association.ex	/^  defp maybe_replace_one!(_, _, _, _, _), do: :ok$/;"	f
maybe_rewrite	deps/postgrex/lib/postgrex/type_module.ex	/^  defp maybe_rewrite(ast, extension, cases, opts) do$/;"	f
maybe_savepoint	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    defp maybe_savepoint(opts, {_, _, in_transaction?}) do$/;"	f
maybe_secure_cookie	deps/plug/lib/plug/conn.ex	/^  defp maybe_secure_cookie(cookie, :https), do: Map.put_new(cookie, :secure, true)$/;"	f
maybe_secure_cookie	deps/plug/lib/plug/conn.ex	/^  defp maybe_secure_cookie(cookie, _),      do: cookie$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{state: :set} = conn, _plug), do: Plug.Conn.send_resp(conn)$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{state: :unset}, _plug),      do: raise Plug.Conn.NotSentError$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(%Plug.Conn{} = conn, _plug),            do: conn$/;"	f
maybe_send	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp maybe_send(other, plug) do$/;"	f
mdivmod	deps/timex/lib/time/duration.ex	/^  defp mdivmod(a),          do: divmod(a, 1_000_000)$/;"	f
mdivmod	deps/timex/lib/time/duration.ex	/^  defp mdivmod(initial, a), do: divmod(initial, a, 1_000_000)$/;"	f
measure	deps/timex/lib/time/duration.ex	/^  def measure(fun) when is_function(fun) do$/;"	f
measure	deps/timex/lib/time/duration.ex	/^  def measure(fun, args) when is_function(fun) and is_list(args) do$/;"	f
measure	deps/timex/lib/time/duration.ex	/^  def measure(module, fun, args)$/;"	f
media_type	deps/plug/lib/plug/conn/utils.ex	/^  def media_type(binary) do$/;"	f
member?	deps/db_connection/lib/db_connection.ex	/^  def member?(_, _), do: {:error, __MODULE__}$/;"	f
member?	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  def member?(_, _), do: {:error, __MODULE__}$/;"	f
member?	deps/postgrex/lib/postgrex/stream.ex	/^  def member?(_, _) do$/;"	f
member?	deps/timex/lib/interval/interval.ex	/^    def member?(%Timex.Interval{} = interval, value) do$/;"	f
merge	deps/ecto/integration_test/cases/repo.exs	/^    test "merge" do$/;"	t
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(%Changeset{data: data} = cs1, %Changeset{data: data} = cs2) do$/;"	f
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(%Changeset{}, %Changeset{}) do$/;"	f
merge	deps/ecto/lib/ecto/changeset.ex	/^  def merge(changeset1, changeset2)$/;"	f
merge	deps/ecto/lib/ecto/multi.ex	/^  def merge(%Multi{} = multi, merge) when is_function(merge, 1) do$/;"	f
merge	deps/ecto/lib/ecto/multi.ex	/^  def merge(%Multi{} = multi, mod, fun, args)$/;"	f
merge	deps/ecto/lib/ecto/query/api.ex	/^  def merge(left_map, right_map), do: doc! [left_map, right_map]$/;"	f
merge	deps/ecto/lib/ecto/query/builder/select.ex	/^  def merge(%Ecto.Query{select: nil} = query, new_select) do$/;"	f
merge	deps/ecto/lib/ecto/query/builder/select.ex	/^  def merge(%Ecto.Query{select: old_select} = query, new_select) do$/;"	f
merge	deps/ecto/lib/ecto/query/builder/select.ex	/^  def merge(query, expr) do$/;"	f
merge	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge(query, select, old_expr, old_params, old_take, new_select) do$/;"	f
merge	deps/ecto/lib/ecto/repo/assoc.ex	/^  defp merge([struct|sub_structs], {keys, dict, sub_dicts}, parent_key) do$/;"	f
merge	deps/gettext/lib/gettext/fuzzy.ex	/^  def merge(new, existing) do$/;"	f
merge	deps/gettext/lib/gettext/merger.ex	/^  def merge(%PO{} = old, %PO{} = new, opts) do$/;"	f
merge	deps/phoenix/lib/phoenix/config.ex	/^  def merge(config1, config2) do$/;"	f
merge	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def merge(%State{} = local, %State{mode: :delta} = remote) do$/;"	f
merge	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def merge(%State{} = local, {%State{} = remote, remote_map}) do$/;"	f
merge_all_locale_dirs	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp merge_all_locale_dirs(pot_dir, opts) do$/;"	f
merge_autogen	deps/ecto/lib/ecto/repo/schema.ex	/^  defp merge_autogen(data, autogen),$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(:from, _query, expr, {cache, params}, _adapter) do$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(:join, query, exprs, {cache, params}, adapter) do$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(_left, :nocache, true), do: :nocache$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(_left, _right, false),  do: :nocache$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(kind, query, expr, {cache, params}, adapter)$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(kind, query, exprs, {cache, params}, adapter)$/;"	f
merge_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_cache(left, right, true),     do: [left|right]$/;"	f
merge_changes	deps/ecto/lib/ecto/repo/schema.ex	/^  defp merge_changes(data, changes),$/;"	f
merge_deltas	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def merge_deltas(%State{mode: :delta} = local, %State{mode: :delta, values: remote_values} = remote) do$/;"	f
merge_dirs	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp merge_dirs(po_dir, pot_dir, opts) do$/;"	f
merge_error_keys	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_error_keys(errors, msg_func, _) when is_function(msg_func, 1)  do$/;"	f
merge_error_keys	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_error_keys(errors, msg_func, changeset) when is_function(msg_func, 3)  do$/;"	f
merge_existing_and_extracted	deps/gettext/lib/gettext/extractor.ex	/^  defp merge_existing_and_extracted(path, :existing, extracted, gettext_config) do$/;"	f
merge_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_expr(_op, left, true), do: left$/;"	f
merge_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_expr(_op, true, right), do: right$/;"	f
merge_expr	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_expr(op, left, right), do: {op, [], [left, right]}$/;"	f
merge_expr_and_params	deps/ecto/lib/ecto/query/planner.ex	/^  defp merge_expr_and_params(op, %QueryExpr{expr: left_expr, params: left_params} = struct,$/;"	f
merge_files	deps/gettext/lib/gettext/merger.ex	/^  def merge_files(po_file, pot_file, opts) do$/;"	f
merge_fragments	deps/ecto/lib/ecto/query/builder.ex	/^  defp merge_fragments([h1], []),$/;"	f
merge_fragments	deps/ecto/lib/ecto/query/builder.ex	/^  defp merge_fragments([h1|t1], [h2|t2]),$/;"	f
merge_from	deps/ecto/lib/ecto/association.ex	/^  defp merge_from(from, _assoc_source), do: from$/;"	f
merge_from	deps/ecto/lib/ecto/association.ex	/^  defp merge_from({"join expression", _}, assoc_source), do: assoc_source$/;"	f
merge_headers	deps/plug/lib/plug/conn.ex	/^  defp merge_headers(headers, cookies) do$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(lhs, rhs, thing) do$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(nil, object, _thing), do: object$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(object, nil, _thing), do: object$/;"	f
merge_identical	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_identical(object, object, _thing), do: object$/;"	f
merge_locale_dir	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp merge_locale_dir(pot_dir, locale, opts) do$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def merge_maps_in_list(list), do: merge_maps_in_list(list, %{})$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp merge_maps_in_list([], map), do: map$/;"	f
merge_maps_in_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  defp merge_maps_in_list([head|tail], map) do$/;"	f
merge_or_create	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp merge_or_create({pot_file, po_file}, opts) do$/;"	f
merge_or_unchanged	deps/gettext/lib/gettext/extractor.ex	/^  defp merge_or_unchanged(existing_path, new_po, gettext_config) do$/;"	f
merge_params	deps/plug/lib/plug/parsers.ex	/^  defp merge_params(%{params: params, path_params: path_params} = conn, body_params) do$/;"	f
merge_po_with_pot	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp merge_po_with_pot(po_file, pot_file, opts) do$/;"	f
merge_pot_files	deps/gettext/lib/gettext/extractor.ex	/^  def merge_pot_files(po_structs, pot_files, gettext_config) do$/;"	f
merge_preloads	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp merge_preloads(_preload, {info, _, nil, left}, {info, take, query, right}),$/;"	f
merge_preloads	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp merge_preloads(_preload, {info, take, query, left}, {info, _, nil, right}),$/;"	f
merge_preloads	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp merge_preloads(preload, {info, _, left, _}, {info, _, right, _}) do$/;"	f
merge_related_keys	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_related_keys(_, _, nil, _) do$/;"	f
merge_related_keys	deps/ecto/lib/ecto/changeset.ex	/^  defp merge_related_keys(map, changes, types, msg_func) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(%Conn{resp_headers: current} = conn, headers) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(%Conn{state: :sent}, _headers) do$/;"	f
merge_resp_headers	deps/plug/lib/plug/conn.ex	/^  def merge_resp_headers(conn, headers) when headers == %{} do$/;"	f
merge_results	deps/ecto/lib/ecto/multi.ex	/^  defp merge_results(changes, new_changes, names) do$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(schema, query)$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(struct, _query) do$/;"	f
merge_source	deps/ecto/lib/ecto/association.ex	/^  def merge_source(struct, {source, _}) do$/;"	f
merge_structs	deps/ecto/lib/ecto/multi.ex	/^  defp merge_structs(%Multi{} = lhs, %Multi{} = rhs, joiner) do$/;"	f
merge_take	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take(%{} = old_take, %{} = new_take) do$/;"	f
merge_take_kind	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take_kind(_, :any, kind), do: kind$/;"	f
merge_take_kind	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take_kind(_, kind, :any), do: kind$/;"	f
merge_take_kind	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take_kind(_, kind, kind), do: kind$/;"	f
merge_take_kind	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take_kind(binding, old, new) do$/;"	f
merge_take_kind_and_fields	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp merge_take_kind_and_fields(binding, {old_kind, old_fields}, {new_kind, new_fields}) do$/;"	f
merge_template	deps/gettext/lib/gettext/extractor.ex	/^  def merge_template(existing, new, gettext_config) do$/;"	f
merge_translations	deps/gettext/lib/gettext/extractor.ex	/^  defp merge_translations(%PluralTranslation{} = old, %PluralTranslation{comments: []} = new) do$/;"	f
merge_translations	deps/gettext/lib/gettext/extractor.ex	/^  defp merge_translations(%Translation{} = old, %Translation{comments: []} = new) do$/;"	f
merge_translations	deps/gettext/lib/gettext/extractor_agent.ex	/^  defp merge_translations(t1, t2) do$/;"	f
merge_translations	deps/gettext/lib/gettext/merger.ex	/^  defp merge_translations(old, new, opts) do$/;"	f
merge_two_translations	deps/gettext/lib/gettext/merger.ex	/^  defp merge_two_translations(%PluralTranslation{} = old, %PluralTranslation{} = new) do$/;"	f
merge_two_translations	deps/gettext/lib/gettext/merger.ex	/^  defp merge_two_translations(%Translation{} = old, %Translation{} = new) do$/;"	f
merger	deps/phoenix/lib/phoenix/config.ex	/^  defp merger(_k, v1, v2) do$/;"	f
message	deps/boltex/lib/boltex/pack_stream/encode_error.ex	/^  def message(%{item: item, message: nil}) do$/;"	f
message	deps/distillery/lib/mix/lib/releases/config/load_error.ex	/^  def message(%__MODULE__{file: file, error: error}) do$/;"	f
message	deps/ecto/lib/ecto/changeset.ex	/^  defp message(opts, key \\\\ :message, default) do$/;"	f
message	deps/ecto/lib/ecto/exceptions.ex	/^  def message(%{action: action, changeset: changeset}) do$/;"	f
message	deps/gettext/lib/gettext.ex	/^    def message(%{backend: backend, domain: domain, locale: locale, msgid: msgid, missing: missing}) do$/;"	f
message	deps/phoenix/lib/phoenix/template.ex	/^    def message(exception) do$/;"	f
message	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def message(%{kind: kind, reason: reason, stack: stack}) do$/;"	f
message	deps/plug/lib/plug/parsers.ex	/^    def message(%{exception: exception}) do$/;"	f
message	deps/plug/lib/plug/parsers.ex	/^    def message(exception) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{message: message}) do$/;"	f
message	deps/poison/lib/poison/encoder.ex	/^  def message(%{value: value, message: nil}) do$/;"	f
message	deps/postgrex/lib/postgrex/error.ex	/^  def message(e) do$/;"	f
message	deps/swoosh/lib/swoosh/delivery_error.ex	/^  def message(exception) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(:hadshake, other) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(:handshake, "HTTP") do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(:handshake, bin) when is_binary(bin) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(_function, {:error, error}) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(_function, {:ignored, []}) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(function, message) do$/;"	f
message_for	deps/boltex/lib/boltex/error.ex	/^  defp message_for(nil, message) do$/;"	f
metadata	deps/ecto/lib/ecto/migration/runner.ex	/^  def metadata(runner, opts) do$/;"	f
metadata	deps/ecto/lib/ecto/repo/schema.ex	/^  defp metadata(%{__struct__: schema, __meta__: %{context: context, source: {prefix, source}}},$/;"	f
metadata	deps/ecto/lib/ecto/repo/schema.ex	/^  defp metadata(schema, prefix, source, autogen_id, context, opts) do$/;"	f
metadata_for	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  def metadata_for(repo_or_repos, pid) when is_pid(pid) do$/;"	f
meters	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp meters(opts) do$/;"	f
method	deps/plug/lib/plug/debugger.ex	/^  defp method(%Plug.Conn{method: method}), do:$/;"	f
microsecond_to_elixir	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def microsecond_to_elixir(microsec) do$/;"	f
microsecond_to_elixir	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def microsecond_to_elixir(microsecs) do$/;"	f
microsecond_to_elixir	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def microsecond_to_elixir(microsecs) do$/;"	f
microsecond_to_elixir	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def microsecond_to_elixir(microsec, tz) do$/;"	f
microsecond_to_elixir	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  defp microsecond_to_elixir(microsec) do$/;"	f
microsecond_to_postgrex	deps/postgrex/lib/postgrex/extensions/time.ex	/^  def microsecond_to_postgrex(microsecs) do$/;"	f
microsecond_to_postgrex	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  def microsecond_to_postgrex(microsecs) do$/;"	f
microsecond_to_postgrex	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  def microsecond_to_postgrex(microsecs) do$/;"	f
microsecond_to_postgrex	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  def microsecond_to_postgrex(microsec, tz) do$/;"	f
microsecond_to_postgrex	deps/postgrex/lib/postgrex/extensions/timetz.ex	/^  defp microsecond_to_postgrex(microsecs) do$/;"	f
microseconds	deps/timex/lib/parse/datetime/parsers.ex	/^  def microseconds(_) do$/;"	f
migrate	deps/ecto/lib/ecto/migrator.ex	/^  defp migrate([], direction, _repo, opts) do$/;"	f
migrate	deps/ecto/lib/ecto/migrator.ex	/^  defp migrate(migrations, direction, repo, opts) do$/;"	f
migrate_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp migrate_instructions(%{migrations: true, boilerplate: true}) do$/;"	f
migrate_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp migrate_instructions(_), do: ""$/;"	f
migrate_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp migrate_instructions(%{migrations: true, boilerplate: true}) do$/;"	f
migrate_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp migrate_instructions(_), do: ""$/;"	f
migrate_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp migrate_manifest(%{"version" => 1} = manifest, _output_path), do: manifest$/;"	f
migrate_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp migrate_manifest(latest, output_path) do$/;"	f
migrated_versions	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def migrated_versions(repo, prefix) do$/;"	f
migrated_versions	deps/ecto/lib/ecto/migrator.ex	/^  def migrated_versions(repo, opts \\\\ []) do$/;"	f
migration	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp migration(_, path) do$/;"	f
migration	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp migration(false, _path), do: []$/;"	f
migration_defaults	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp migration_defaults(attrs) do$/;"	f
migration_defaults	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp migration_defaults(attrs) do$/;"	f
migrations	deps/ecto/lib/ecto/migrator.ex	/^  def migrations(repo, directory) do$/;"	f
migrations up and down	deps/ecto/integration_test/cases/migrator.exs	/^  test "migrations up and down" do$/;"	t
migrations_for	deps/ecto/lib/ecto/migrator.ex	/^  defp migrations_for(migration_source) when is_binary(migration_source) do$/;"	f
migrations_for	deps/ecto/lib/ecto/migrator.ex	/^  defp migrations_for(migration_source) when is_list(migration_source) do$/;"	f
migrations_path	deps/ecto/lib/mix/ecto.ex	/^  def migrations_path(repo) do$/;"	f
migrator_direction	deps/ecto/lib/ecto/migration/runner.ex	/^  def migrator_direction do$/;"	f
millisecond_to_microsecond	deps/timex_ecto/lib/helpers.ex	/^  def millisecond_to_microsecond(ms) do$/;"	f
milliseconds	deps/timex/lib/parse/datetime/parsers.ex	/^  def milliseconds(_) do$/;"	f
mime_to_ext	deps/mime/lib/mime.ex	/^    defp mime_to_ext(unquote(type)), do: unquote(List.wrap(exts))$/;"	f
mime_to_ext	deps/mime/lib/mime.ex	/^    defp mime_to_ext(unquote(type)), do: unquote(exts)$/;"	f
mime_to_ext	deps/mime/lib/mime.ex	/^  defp mime_to_ext(_type), do: nil$/;"	f
mime_to_ext	deps/mime/lib/mime.ex	/^  defp mime_to_ext(type)$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{coef: :qNaN}, %Decimal{} = num2) do$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{sign: sign1, exp: exp1} = num1, %Decimal{sign: sign2, exp: exp2} = num2) do$/;"	f
min	deps/decimal/lib/decimal.ex	/^  def min(%Decimal{} = num1, %Decimal{coef: :qNaN}) do$/;"	f
min	deps/ecto/lib/ecto/query/api.ex	/^  def min(value), do: doc! [value]$/;"	f
min_age	deps/ecto/lib/ecto.ex	/^      def min_age(min) do$/;"	f
min_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp min_for(type, opts) do$/;"	f
min_max	deps/db_connection/lib/db_connection/backoff.ex	/^  defp min_max(opts) do$/;"	f
min_width	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp min_width(), do: integer()$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{coef: :qNaN} = num) do$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{coef: :sNaN} = num) do$/;"	f
minus	deps/decimal/lib/decimal.ex	/^  def minus(%Decimal{sign: sign} = num) do$/;"	f
minute	deps/timex/lib/parse/datetime/parsers.ex	/^  def minute(opts \\\\ []) do$/;"	f
missing?	deps/ecto/lib/ecto/changeset.ex	/^  defp missing?(_changeset, field) do$/;"	f
missing?	deps/ecto/lib/ecto/changeset.ex	/^  defp missing?(changeset, field) when is_atom(field) do$/;"	f
missing_pks?	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp missing_pks?(pk_values) do$/;"	f
missing_relation	deps/ecto/lib/ecto/changeset.ex	/^  defp missing_relation(%{changes: changes, errors: errors} = changeset,$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile(compilers) do$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile({:error, _reason}, _) do$/;"	f
mix_compile	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile({:module, Mix.Task}, compilers) do$/;"	f
mix_compile_unless_stale_config	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp mix_compile_unless_stale_config(compilers) do$/;"	f
mix_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp mix_instructions(%{base: base}), do: """$/;"	f
mix_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp mix_instructions(%{base: base}), do: """$/;"	f
mixfile_loc	deps/ecto/lib/mix/tasks/ecto.gen.repo.ex	/^  defp mixfile_loc(app) do$/;"	f
mk_web_path	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  def mk_web_path(path \\\\ @web_path) do$/;"	f
mod	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  def mod(number, modulus) when is_integer(number) and is_integer(modulus) do$/;"	f
mod	deps/timex/lib/calendar/julian.ex	/^  defp mod(a, b), do: rem(rem(a, b) + b, b)$/;"	f
mod	deps/timex/lib/timex/helpers.ex	/^  defp mod(a, b), do: rem(rem(a, b) + b, b)$/;"	f
mode	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def mode(manager, mode, opts)$/;"	f
mode	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def mode(repo, mode)$/;"	f
mode	deps/postgrex/lib/postgrex/protocol.ex	/^  defp mode(opts) do$/;"	f
model	deps/coherence/web/web.ex	/^  def model do$/;"	f
model	deps/timex_ecto/lib/model.ex	/^  def model do$/;"	f
model_exists?	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp model_exists?(model, path) do$/;"	f
model_exists?	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp model_exists?(model, path) do$/;"	f
modified_at	deps/tzdata/lib/tzdata/release_reader.ex	/^  def modified_at,            do: simple_lookup(:modified_at) |> hd |> elem(1)$/;"	f
modifiers	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp modifiers(), do: map(one_of(char(), ["E", "O"]), &map_modifier\/1)$/;"	f
modify	deps/ecto/lib/ecto/migration.ex	/^  def modify(column, :datetime, opts) when is_atom(column) do$/;"	f
modify	deps/ecto/lib/ecto/migration.ex	/^  def modify(column, type, opts \\\\ [])$/;"	f
modify	deps/ecto/lib/ecto/migration.ex	/^  def modify(column, type, opts) when is_atom(column) and is_list(opts) do$/;"	f
modify column	deps/ecto/integration_test/sql/migration.exs	/^  test "modify column" do$/;"	t
modify foreign key	deps/ecto/integration_test/sql/migration.exs	/^  test "modify foreign key's on_delete constraint" do$/;"	t
modify foreign key	deps/ecto/integration_test/sql/migration.exs	/^  test "modify foreign key's on_update constraint" do$/;"	t
modify_default	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp modify_default(name, type, opts) do$/;"	f
modify_null	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp modify_null(name, opts) do$/;"	f
module_name	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp module_name(file) do$/;"	f
module_to_string	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp module_to_string(module) when is_atom(module) do$/;"	f
module_to_string	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp module_to_string(module) when is_binary(module) do$/;"	f
module_to_string	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp module_to_string(module) when is_atom(module) do$/;"	f
module_to_string	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp module_to_string(module) when is_binary(module) do$/;"	f
module_to_template_root	deps/phoenix/lib/phoenix/template.ex	/^  def module_to_template_root(module, base, suffix) do$/;"	f
modules	deps/phoenix/lib/mix/phoenix.ex	/^  def modules do$/;"	f
modules_for_recompilation	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp modules_for_recompilation(modules) do$/;"	f
modules_to_file_paths	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp modules_to_file_paths(modules) do$/;"	f
month2	deps/timex/lib/parse/datetime/parsers.ex	/^  def month2(opts \\\\ []) do$/;"	f
month_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def month_full(_) do$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(1),  do: "Jan"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(10), do: "Oct"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(11), do: "Nov"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(12), do: "Dec"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(2),  do: "Feb"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(3),  do: "Mar"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(4),  do: "Apr"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(5),  do: "May"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(6),  do: "Jun"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(7),  do: "Jul"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(8),  do: "Aug"$/;"	f
month_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp month_name(9),  do: "Sep"$/;"	f
month_name	deps/timex/lib/timex.ex	/^  def month_name(_), do: {:error, :invalid_month_number}$/;"	f
month_name	deps/timex/lib/timex.ex	/^  def month_name(num) when num in 1..12 do$/;"	f
month_number_for_month_name	deps/tzdata/lib/tzdata/util.ex	/^  def month_number_for_month_name(string) do$/;"	f
month_short	deps/timex/lib/parse/datetime/parsers.ex	/^  def month_short(_) do$/;"	f
month_shortname	deps/timex/lib/timex.ex	/^  def month_shortname(_), do: {:error, :invalid_month_number}$/;"	f
month_shortname	deps/timex/lib/timex.ex	/^  def month_shortname(num) when num in 1..12 do$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(abbr_cased)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(abbr_chars)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(abbr_lower)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(full_chars)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(lower)),      do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(month_name)), do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^          def month_to_num(unquote(symbol)),     do: unquote(month_num)$/;"	f
month_to_num	deps/timex/lib/timex.ex	/^  def month_to_num(_), do: {:error, :invalid_month_name}$/;"	f
months	deps/timex/lib/parse/datetime/helpers.ex	/^  def months, do: @month_names$/;"	f
msg_decode	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_decode(<<type :: int8, size :: int32, rest :: binary>>) do$/;"	f
msg_decode	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_decode(bin) when byte_size(bin) < 5 do$/;"	f
msg_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_recv(%{sock: {:gen_tcp, sock}} = s, timeout, :active_once) do$/;"	f
msg_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_recv(%{sock: {:ssl, sock}} = s, timeout, :active_once) do$/;"	f
msg_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_recv(%{sock: {mod, sock}} = s, timeout, buffer, more) do$/;"	f
msg_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_recv(s, timeout, buffer) do$/;"	f
msg_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_send(s, msg, buffer) do$/;"	f
msg_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp msg_send(s, msgs, buffer) when is_list(msgs) do$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<?\/, t :: binary>>, acc) when acc != "",$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<h, t :: binary>>, acc) when h in @lower or h in @alpha or h == ?-,$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(<<h, t :: binary>>, acc) when h in @upper,$/;"	f
mt_first	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_first(_, _acc),$/;"	f
mt_params	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_params(t, first, second) do$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(<<h, t :: binary>>, acc, first) when h in @lower or h in @alpha or h in @other,$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(<<h, t :: binary>>, acc, first) when h in @upper,$/;"	f
mt_second	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_second(t, acc, first),$/;"	f
mt_wildcard	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_wildcard(<<?*, t :: binary>>, first),$/;"	f
mt_wildcard	deps/plug/lib/plug/conn/utils.ex	/^  defp mt_wildcard(t, first),$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: 0}, %Decimal{coef: :inf}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :inf}, %Decimal{coef: 0}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, coef: :inf, exp: exp1}, %Decimal{sign: sign2, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, coef: coef1, exp: exp1}, %Decimal{sign: sign2, coef: coef2, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{sign: sign1, exp: exp1}, %Decimal{sign: sign2, coef: :inf, exp: exp2}) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
mult	deps/decimal/lib/decimal.ex	/^  def mult(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
multiple_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def multiple_select(form, field, options, opts \\\\ []) do$/;"	f
my_datetime_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def my_datetime_select(form, field, opts \\\\ []) do$/;"	f
mysql_dump	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp mysql_dump(config) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("A"),    do: name_of(1)$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("M"),    do: name_of(12)$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("N"),    do: name_of(-1)$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("UT"),   do: "Etc\/UTC"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("UTC"),  do: "Etc\/UTC"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("Y"),    do: name_of(-12)$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of("Z"),    do: "Etc\/UTC"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(%TimezoneInfo{:full_name => name}), do: name$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(0),      do: "Etc\/UTC"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(:local) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(:utc),   do: "Etc\/UTC"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<"GMT", ?+, offset::binary>>), do: "Etc\/GMT+#{offset}"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<"GMT", ?-, offset::binary>>), do: "Etc\/GMT-#{offset}"$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?+, ?0, ?0, ?:, ?0, ?0>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?+, h1::utf8, h2::utf8, ?:, ?0, ?0>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?+, h1::utf8, h2::utf8, ?:, m1::utf8, m2::utf8>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?+, offset :: binary>> = tz) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?-, ?0, ?0, ?:, ?0, ?0>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?-, h1::utf8, h2::utf8, ?:, ?0, ?0>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?-, h1::utf8, h2::utf8, ?:, m1::utf8, m2::utf8>>) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(<<?-, offset :: binary>> = tz) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(offset) when is_float(offset) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(offset) when is_integer(offset) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(tz) when is_binary(tz) do$/;"	f
name_of	deps/timex/lib/timezone/timezone.ex	/^  def name_of(tz), do: {:error, {:invalid_timezone, tz}}$/;"	f
name_opts	deps/db_connection/lib/db_connection/poolboy.ex	/^  defp name_opts(opts) do$/;"	f
name_to_code	deps/postgrex/lib/postgrex/error_code.ex	/^        def name_to_code(unquote(name)), do: unquote(code)$/;"	f
name_to_code	deps/postgrex/lib/postgrex/error_code.ex	/^  def name_to_code(name)$/;"	f
namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp namebased_uuid(:md5, data) do$/;"	f
namebased_uuid	deps/uuid/lib/uuid.ex	/^  defp namebased_uuid(:sha1, data) do$/;"	f
namespaced_topic	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp namespaced_topic(server_name) do$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{coef: :qNaN}), do: true$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{coef: :sNaN}), do: true$/;"	f
nan?	deps/decimal/lib/decimal.ex	/^  def nan?(%Decimal{}),            do: false$/;"	f
nb_ask	deps/db_connection/lib/db_connection/sojourn.ex	/^  defp nb_ask(broker, info) do$/;"	f
need_an_account	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def need_an_account, do: dgettext(@domain, "Need An Account?")$/;"	f
need_an_account	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def need_an_account, do: dgettext(@domain, "Need An Account?")$/;"	f
need_an_account	deps/coherence/test/support/messages.exs	/^  def need_an_account, do: dgettext(@domain, "Need An Account?")$/;"	f
negate!	deps/ecto/lib/ecto/query/builder.ex	/^  def negate!(%Decimal{} = decimal) do$/;"	f
negate!	deps/ecto/lib/ecto/query/builder.ex	/^  def negate!(number) when is_number(number) do$/;"	f
nest	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest(elems, 0, _, acc) do$/;"	f
nest	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest(elems, [len | lengths]) do$/;"	f
nest	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest(elems, [len]) do$/;"	f
nest	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest(elems, n, lengths, acc) do$/;"	f
nest_inner	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest_inner([elem | elems], n, acc) do$/;"	f
nest_inner	deps/postgrex/lib/postgrex/extensions/array.ex	/^  defp nest_inner(elems, 0, acc) do$/;"	f
nested assoc	deps/ecto/integration_test/cases/joins.exs	/^  test "nested assoc" do$/;"	t
nested assoc with child preload	deps/ecto/integration_test/cases/joins.exs	/^  test "nested assoc with child preload" do$/;"	t
nested assoc with missing entries	deps/ecto/integration_test/cases/joins.exs	/^  test "nested assoc with missing entries" do$/;"	t
nested assoc with sibling preload	deps/ecto/integration_test/cases/joins.exs	/^  test "nested assoc with sibling preload" do$/;"	t
nested transaction partial rollback	deps/ecto/integration_test/sql/transaction.exs	/^  test "nested transaction partial rollback" do$/;"	t
nested_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp nested_attrs(attr, dict, acc) do$/;"	f
new	deps/bolt_sips/lib/bolt_sips/error.ex	/^  def new(%Boltex.Error{code: code, connection_id: cid, function: f, message: message, type: t}) do$/;"	f
new	deps/bolt_sips/lib/bolt_sips/error.ex	/^  def new(r), do: r$/;"	f
new	deps/bolt_sips/lib/bolt_sips/error.ex	/^  def new({:failure, %{"code" => code, "message" => message}} = _r) do$/;"	f
new	deps/bolt_sips/lib/bolt_sips/error.ex	/^  def new({:ignored, f} = _r), do: new({:error, f})$/;"	f
new	deps/bolt_sips/lib/bolt_sips/success.ex	/^  def new(r) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/confirmation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/password_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coh.install/controllers/coherence/unlock_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/confirmation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/password_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/priv/templates/coherence.install/controllers/coherence/unlock_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/test/support/dummy_controller.exs	/^  def new(conn, _) do$/;"	f
new	deps/coherence/web/controllers/confirmation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/web/controllers/invitation_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/web/controllers/password_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/web/controllers/registration_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/web/controllers/session_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/coherence/web/controllers/unlock_controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/con_cache/lib/con_cache/lock/monitors.ex	/^  def new, do: %__MODULE__{}$/;"	f
new	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def new, do: %__MODULE__{}$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  def new(opts) do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(:rand, min, max) do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(_, _, max) when not (is_integer(max) and max >= 0) do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(_, min, _) when not (is_integer(min) and min >= 0) do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(_, min, max) when min > max do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(type, _, _) do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(type, min, max) when type in [:jitter, :rand_exp] do$/;"	f
new	deps/db_connection/lib/db_connection/backoff.ex	/^  defp new(type, min, max) when type in [:normal, :exp] do$/;"	f
new	deps/db_connection/lib/db_connection/log_entry.ex	/^  def new(call, query, params, times, result) do$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(%Decimal{} = num),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(binary) when is_binary(binary) do$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(float) when is_float(float),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(int) when is_integer(int),$/;"	f
new	deps/decimal/lib/decimal.ex	/^  def new(sign, coefficient, exponent) do$/;"	f
new	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  def new(name), do: new(name, nil)$/;"	f
new	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  def new(name, start_type)$/;"	f
new	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  def new(name, start_type), do: {:error, {:apps, {:invalid_start_type, name, start_type}}}$/;"	f
new	deps/distillery/lib/mix/lib/releases/models/environment.ex	/^  def new(name) do$/;"	f
new	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def new(name, version, apps \\\\ []) do$/;"	f
new	deps/ecto/lib/ecto/multi.ex	/^  def new do$/;"	f
new	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def new(), do: %Fuzzyurl{}$/;"	f
new	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def new(params), do: new |> Fuzzyurl.with(params)$/;"	f
new	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def new(protocol, username, password, hostname, port, path, query, fragment) do$/;"	f
new	deps/phoenix/lib/mix/phoenix/context.ex	/^  def new(context_name, %Schema{} = schema, opts) do$/;"	f
new	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def new(schema_name, schema_plural, cli_attrs, opts) do$/;"	f
new	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def new(conn, _params) do$/;"	f
new	deps/phoenix_html/lib/phoenix_html/form.ex	/^      def new(conn, _params) do$/;"	f
new	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  def new(name) do$/;"	f
new	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def new(replica) do$/;"	f
new	deps/postgrex/lib/postgrex/types.ex	/^  def new(module) do$/;"	f
new	deps/swoosh/lib/swoosh/email.ex	/^  def new(opts \\\\ []) do$/;"	f
new	deps/timex/lib/interval/interval.ex	/^  def new(options \\\\ []) do$/;"	f
new	deps/timex/lib/timezone/ambiguous_timezone_info.ex	/^  def new(%TimezoneInfo{} = before_tz, %TimezoneInfo{} = after_tz) do$/;"	f
new_constraint_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp new_constraint_expr(%Constraint{check: check} = constraint) when is_binary(check) do$/;"	f
new_constraint_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp new_constraint_expr(%Constraint{exclude: exclude} = constraint) when is_binary(exclude) do$/;"	f
new_po_file	deps/gettext/lib/gettext/merger.ex	/^  def new_po_file(po_file, pot_file) do$/;"	f
new_pot_comment	deps/gettext/lib/gettext/extractor.ex	/^  defp new_pot_comment do$/;"	f
new_release_has_been_downloaded	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def new_release_has_been_downloaded do$/;"	f
new_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp new_session(conn, endpoint, handler, transport, opts) do$/;"	f
new_state	deps/exactor/lib/exactor/responders.ex	/^  defmacro new_state(state, timeout \\\\ nil) do$/;"	a
newest_release_on_file	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp newest_release_on_file do$/;"	f
newline	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def newline() do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, input: <<?\\r::utf8>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, line: line, column: col, input: <<?\\r::utf8,c::utf8,_::binary>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
newline_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp newline_impl(%ParserState{status: :ok, line: line, input: <<?\\r::utf8,?\\n::utf8,rest::binary>>, results: results} = state) do$/;"	f
next	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp next(%{queue: queue} = state) do$/;"	f
next_word	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp next_word(binary), do: Regex.run(~r\/\\w+\/u, binary) |> List.first$/;"	f
ngettext	deps/gettext/lib/gettext.ex	/^  def ngettext(backend, msgid, msgid_plural, n, bindings \\\\ %{}) do$/;"	f
ngettext	deps/gettext/lib/gettext/compiler.ex	/^      defmacro ngettext(msgid, msgid_plural, n, bindings \\\\ Macro.escape(%{})) do$/;"	a
ngettext_noop	deps/gettext/lib/gettext/compiler.ex	/^      defmacro ngettext_noop(msgid, msgid_plural) do$/;"	a
nilify_all	deps/ecto/lib/ecto/association.ex	/^  def nilify_all(%{related_key: related_key} = refl, parent, repo, opts) do$/;"	f
no assoc constraint error	deps/ecto/integration_test/cases/repo.exs	/^  test "no assoc constraint error" do$/;"	t
no assoc constraint with changeset match	deps/ecto/integration_test/cases/repo.exs	/^  test "no assoc constraint with changeset match" do$/;"	t
no assoc constraint with changeset mismatch	deps/ecto/integration_test/cases/repo.exs	/^  test "no assoc constraint with changeset mismatch" do$/;"	t
no_assoc_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def no_assoc_constraint(changeset, assoc, opts \\\\ []) do$/;"	f
no_assoc_message	deps/ecto/lib/ecto/changeset.ex	/^  defp no_assoc_message(:many), do: "are still associated with this entry"$/;"	f
no_assoc_message	deps/ecto/lib/ecto/changeset.ex	/^  defp no_assoc_message(:one), do: "is still associated with this entry"$/;"	f
no_name_error!	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  defp no_name_error! do$/;"	f
no_umbrella!	deps/ecto/lib/mix/ecto.ex	/^  def no_umbrella!(task) do$/;"	f
no_user_verify	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def no_user_verify(opts \\\\ []) do$/;"	f
node_name	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def node_name(server) do$/;"	f
node_name	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2.ex	/^  def node_name(configured_name), do: configured_name$/;"	f
node_name	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2.ex	/^  def node_name(nil), do: node()$/;"	f
node_name	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  test "node_name\/1 returns the node name", config do$/;"	t
non_500_exception?	deps/plug/lib/plug/adapters/translator.ex	/^  defp non_500_exception?(_),$/;"	f
non_500_exception?	deps/plug/lib/plug/adapters/translator.ex	/^  defp non_500_exception?({%{__exception__: true} = exception, _}),$/;"	f
none_of_impl	deps/combine/lib/combine/parsers/base.ex	/^  defp none_of_impl(%ParserState{status: :ok} = state, parser, %Range{} = items),$/;"	f
noreply	deps/exactor/lib/exactor/responders.ex	/^  defmacro noreply(timeout \\\\ nil) do$/;"	a
normal_status	deps/db_connection/lib/db_connection/connection.ex	/^  defp normal_status(mod, pdict, state) do$/;"	f
normal_status_default	deps/db_connection/lib/db_connection/connection.ex	/^  defp normal_status_default(mod, state) do$/;"	f
normalize	deps/bcrypt_elixir/lib/bcrypt/base64.ex	/^  def normalize(salt) do$/;"	f
normalize	deps/ecto/lib/ecto/query/planner.ex	/^  def normalize(query, operation, adapter, counter) do$/;"	f
normalize	deps/ecto/lib/ecto/repo/preloader.ex	/^  def normalize(preload, take, original) do$/;"	f
normalize	deps/timex/lib/time/duration.ex	/^  def normalize(%Duration{megaseconds: mega, seconds: sec, microseconds: micro}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:date, {year, month, day}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:day, {year, month, day}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:hour, hour) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:microsecond, {us, p}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:millisecond, ms) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:minute, min) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:month, month) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:second, sec) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:time, {hour,min,sec,ms}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:time, {hour,min,sec}) do$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:year, year) when year < 0, do: 0$/;"	f
normalize	deps/timex/lib/timex.ex	/^  def normalize(:year, year), do: year$/;"	f
normalize_cowboy_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_cowboy_options(cowboy_options, :http) do$/;"	f
normalize_cowboy_options	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_cowboy_options(cowboy_options, :https) do$/;"	f
normalize_date_tuple	deps/timex/lib/timex/helpers.ex	/^  def normalize_date_tuple({year, month, day}) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each(atom, acc, take, _original) when is_atom(atom) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each(other, acc, take, original) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each({atom, list}, acc, take, original) when is_atom(atom) do$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each({atom, query}, acc, take, _original)$/;"	f
normalize_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp normalize_each({atom, {query, list}}, acc, take, original)$/;"	f
normalize_method	deps/plug/lib/plug/router/utils.ex	/^  def normalize_method(method) do$/;"	f
normalize_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_param(_kind, type, _value) do$/;"	f
normalize_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_param(_kind, {:out, :any}, _value) do$/;"	f
normalize_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_param(_kind, {:out, {:array, type}}, _value) do$/;"	f
normalize_param	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_param(kind, {:out, other}, value) do$/;"	f
normalize_pending	deps/con_cache/lib/con_cache/owner.ex	/^  defp normalize_pending(%__MODULE__{current_time: current_time, pending: pending}) do$/;"	f
normalize_pool	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp normalize_pool(pool) do$/;"	f
normalize_port	deps/postgrex/lib/postgrex/utils.ex	/^  defp normalize_port(port) when is_binary(port), do: String.to_integer(port)$/;"	f
normalize_port	deps/postgrex/lib/postgrex/utils.ex	/^  defp normalize_port(port), do: port$/;"	f
normalize_query	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_query(query, operation, adapter, counter) do$/;"	f
normalize_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_select(%{select: nil} = query) do$/;"	f
normalize_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp normalize_select(query) do$/;"	f
normalize_source	deps/ecto/lib/ecto/query/inspect.ex	/^  defp normalize_source("Elixir." <> _ = source),$/;"	f
normalize_source	deps/ecto/lib/ecto/query/inspect.ex	/^  defp normalize_source(source),$/;"	f
normalize_ssl_file	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp normalize_ssl_file(key, cowboy_options) do$/;"	f
normalize_ttls	deps/con_cache/lib/con_cache/owner.ex	/^  defp normalize_ttls(%__MODULE__{current_time: current_time, ttls: ttls}) do$/;"	f
not	deps/ecto/lib/ecto/query/api.ex	/^  def not(value), do: doc! [value]$/;"	f
not_blank?	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp not_blank?(" " <> rest),  do: not_blank?(rest)$/;"	f
not_blank?	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp not_blank?(""),           do: false$/;"	f
not_blank?	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp not_blank?("\\n" <> rest), do: not_blank?(rest)$/;"	f
not_blank?	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp not_blank?(_),            do: true$/;"	f
not_found	deps/plug/lib/plug/static.ex	/^        def not_found(conn, _) do$/;"	f
not_in	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp not_in(_pos, []), do: []$/;"	f
not_in	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp not_in(pos, replicas), do: [not: ors(pos, replicas)]$/;"	f
not_locked	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def not_locked, do: dgettext(@domain, "not locked")$/;"	f
not_locked	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def not_locked, do: dgettext(@domain, "not locked")$/;"	f
not_locked	deps/coherence/test/support/messages.exs	/^  def not_locked, do: dgettext(@domain, "not locked")$/;"	f
not_nil!	deps/ecto/lib/ecto/query/builder.ex	/^  def not_nil!(nil) do$/;"	f
not_nil!	deps/ecto/lib/ecto/query/builder.ex	/^  def not_nil!(not_nil) do$/;"	f
notice	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def notice(message),  do: log(:notice, colorize(message, @warn_color))$/;"	f
notify	deps/postgrex/lib/postgrex/protocol.ex	/^  defp notify(opts) do$/;"	f
notify_graceful_exit	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def notify_graceful_exit(%Socket{topic: topic, join_ref: ref} = socket) do$/;"	f
notify_listeners	deps/postgrex/lib/postgrex/notifications.ex	/^  defp notify_listeners(channels, listeners, channel, payload) do$/;"	f
notify_transport_of_graceful_exit	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp notify_transport_of_graceful_exit(socket) do$/;"	f
now	deps/coherence/test/models/rememberable_test.exs	/^  def now, do: Timex.now$/;"	f
now	deps/phoenix/lib/phoenix/digester.ex	/^  defp now() do$/;"	f
now	deps/plug/lib/plug/session/ets.ex	/^  defp now() do$/;"	f
now	deps/timex/lib/datetime/naivedatetime.ex	/^  def now() do$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:days),         do: :os.system_time(:seconds) |> from_seconds |> to_days$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:hours),        do: :os.system_time(:seconds) |> from_seconds |> to_hours$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:microseconds), do: :os.system_time(:micro_seconds)$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:milliseconds), do: :os.system_time(:milli_seconds)$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:minutes),      do: :os.system_time(:seconds) |> from_seconds |> to_minutes$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:seconds),      do: :os.system_time(:seconds)$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(:weeks),        do: :os.system_time(:seconds) |> from_seconds |> to_weeks$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(nil),           do: :os.system_time(:micro_seconds) |> from_microseconds$/;"	f
now	deps/timex/lib/time/duration.ex	/^  def now(type \\\\ nil)$/;"	f
now	deps/timex/lib/timex.ex	/^  def now(), do: from_unix(:os.system_time, :native)$/;"	f
now	deps/timex/lib/timex.ex	/^  def now(tz), do: Timezone.convert(now(), tz)$/;"	f
now_ms	deps/phoenix/lib/phoenix/token.ex	/^  defp now_ms, do: System.system_time(:milliseconds)$/;"	f
now_ms	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp now_ms, do: System.system_time(:milliseconds)$/;"	f
now_ms	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  defp now_ms, do: System.system_time(:milli_seconds)$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^        def nplurals("elv"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^        def nplurals(locale), do: Gettext.Plural.nplurals(locale)$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^    def nplurals(unquote(l)), do: 1$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^    def nplurals(unquote(l)), do: 2$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^    def nplurals(unquote(l)), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("ar"), do: 6$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("csb"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("cy"), do: 4$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("ga"), do: 5$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("gd"), do: 4$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("is"), do: 2$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("jv"), do: 2$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("kw"), do: 4$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("lt"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("lv"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("mk"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("mnk"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("mt"), do: 4$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("pl"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("ro"), do: 3$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals("sl"), do: 4$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals(locale) do$/;"	f
nplurals	deps/gettext/lib/gettext/plural.ex	/^  def nplurals(locale)$/;"	f
ntp_to_unix_timestamp	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp ntp_to_unix_timestamp(ntp_timestamp) do$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(_), do: []$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(false), do: " NOT NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp null_expr(true), do: " NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(_), do: []$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(false), do: " NOT NULL"$/;"	f
null_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp null_expr(true), do: " NULL"$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, false) do$/;"	f
number_complete	deps/poison/lib/poison/parser.ex	/^  defp number_complete(iolist, true) do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(<<char>> <> rest = string, pos) when char in '0123456789' do$/;"	f
number_digits	deps/poison/lib/poison/parser.ex	/^  defp number_digits(other, pos), do: syntax_error(other, pos)$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(<<char>> <> rest, acc) when char in '0123456789' do$/;"	f
number_digits_count	deps/poison/lib/poison/parser.ex	/^  defp number_digits_count(_, acc), do: acc$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(<<e>> <> rest, frac, pos, acc) when e in 'eE' do$/;"	f
number_exp	deps/poison/lib/poison/parser.ex	/^  defp number_exp(string, frac, pos, acc) do$/;"	f
number_exp_continue	deps/poison/lib/poison/parser.ex	/^  defp number_exp_continue(rest, pos, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac("." <> rest, pos, acc) do$/;"	f
number_frac	deps/poison/lib/poison/parser.ex	/^  defp number_frac(string, pos, acc) do$/;"	f
number_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def number_input(form, field, opts \\\\ []) do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(<<char, _ :: binary>> = string, pos, acc) when char in '123456789' do$/;"	f
number_int	deps/poison/lib/poison/parser.ex	/^  defp number_int(other, pos, _), do: syntax_error(other, pos)$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("-" <> rest, pos) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start("0" <> rest, pos) do$/;"	f
number_start	deps/poison/lib/poison/parser.ex	/^  defp number_start(string, pos) do$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms!), do: String.to_existing_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, :atoms),  do: String.to_atom(name)$/;"	f
object_name	deps/poison/lib/poison/parser.ex	/^  defp object_name(name, _keys),   do: name$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("\\"" <> rest, pos, keys, acc) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs("}" <> rest, pos, _, []) do$/;"	f
object_pairs	deps/poison/lib/poison/parser.ex	/^  defp object_pairs(other, pos, _, _), do: syntax_error(other, pos)$/;"	f
observe_removes	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp observe_removes(%State{pids: pids, values: values} = local, remote, remote_map) do$/;"	f
octal_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp octal_digit_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
octal_digit_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp octal_digit_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:any, _),           do: true$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:binary, term),     do: is_binary(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:boolean, term),    do: is_boolean(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:decimal, value),   do: Kernel.match?(%{__struct__: Decimal}, value)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:float, term),      do: is_float(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:id, term),         do: is_integer(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:integer, term),    do: is_integer(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:map, term),        do: is_map(term) and not Map.has_key?(term, :__struct__)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(:string, term),     do: is_binary(term)$/;"	f
of_base_type?	deps/ecto/lib/ecto/type.ex	/^  defp of_base_type?(_, _),              do: false$/;"	f
offset	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp offset(%Query{offset: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
offset	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp offset(%Query{offset: nil}, _sources), do: []$/;"	f
offset	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp offset(%Query{offset: %QueryExpr{expr: expr}} = query, sources) do$/;"	f
offset	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp offset(%Query{offset: nil}, _sources), do: []$/;"	f
offset	deps/ecto/lib/ecto/query.ex	/^  defmacro offset(query, binding \\\\ [], expr) do$/;"	a
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options) do$/;"	f
offset	deps/poison/lib/poison/encoder.ex	/^      defp offset(options, value) do$/;"	f
oids	deps/postgrex/lib/postgrex/extensions/array.ex	/^  def oids(%Postgrex.TypeInfo{array_elem: elem_oid}, _),$/;"	f
oids	deps/postgrex/lib/postgrex/extensions/range.ex	/^  def oids(%Postgrex.TypeInfo{base_type: base_oid}, _) do$/;"	f
oids	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def oids(%Postgrex.TypeInfo{comp_elems: []}, _),$/;"	f
oids	deps/postgrex/lib/postgrex/extensions/record.ex	/^  def oids(%Postgrex.TypeInfo{comp_elems: comp_oids}, _),$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %ArgumentError{} = err, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %Postgrex.Copy{} = copy, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %Postgrex.Cursor{} = cursor, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %Postgrex.Error{} = err, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %Postgrex.Query{} = query, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, %Postgrex.Result{} = res, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, :active_once, postgres, buffer) do$/;"	f
ok	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ok(s, nil, postgres, buffer) do$/;"	f
ok_error	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_error({:error, _}), do: "ERROR"$/;"	f
ok_error	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_error({:ok, _}),    do: "OK"$/;"	f
ok_source	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_source(nil),    do: ""$/;"	f
ok_source	deps/ecto/lib/ecto/log_entry.ex	/^  defp ok_source(source), do: " source=#{inspect(source)}"$/;"	f
olson_to_win	deps/timex/lib/timezone/utils.ex	/^      def olson_to_win(unquote(key)), do: unquote(value)$/;"	f
olson_to_win	deps/timex/lib/timezone/utils.ex	/^  def olson_to_win(_tz), do: nil$/;"	f
on conflict and associations	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict and associations" do$/;"	t
on conflict ignore	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict ignore" do$/;"	t
on conflict ignore and conflict target	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict ignore and conflict target" do$/;"	t
on conflict ignore and returning	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict ignore and returning" do$/;"	t
on conflict keyword list	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list" do$/;"	t
on conflict keyword list and conflict target	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list and conflict target" do$/;"	t
on conflict keyword list and conflict target and returning	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list and conflict target and returning" do$/;"	t
on conflict keyword list and conflict target and returning and field source	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list and conflict target and returning and field source" do$/;"	t
on conflict keyword list and conflict target and returning and source field	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list and conflict target and returning and source field" do$/;"	t
on conflict keyword list and conflict target on constraint	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict keyword list and conflict target on constraint" do$/;"	t
on conflict query	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict query" do$/;"	t
on conflict query and conflict target	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict query and conflict target" do$/;"	t
on conflict query and conflict target and returning	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict query and conflict target and returning" do$/;"	t
on conflict raise	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict raise" do$/;"	t
on conflict replace_all	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict replace_all" do$/;"	t
on conflict replace_all and conflict target	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict replace_all and conflict target" do$/;"	t
on conflict replace_all and conflict_target	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict replace_all and conflict_target" do$/;"	t
on conflict with inc	deps/ecto/integration_test/cases/repo.exs	/^    test "on conflict with inc" do$/;"	t
on_cast_default	deps/ecto/lib/ecto/changeset.ex	/^  defp on_cast_default(type, module) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp on_conflict({:nothing, _, []}, [field | _]) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp on_conflict({:raise, _, []}, _header) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp on_conflict({:replace_all, _, []}, header) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp on_conflict({_, _, [_ | _]}, _header) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp on_conflict({query, _, []}, _header) do$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp on_conflict({:nothing, _, targets}, _header),$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp on_conflict({:raise, _, []}, _header),$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp on_conflict({:replace_all, _, targets}, header),$/;"	f
on_conflict	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp on_conflict({query, _, targets}, _header),$/;"	f
on_conflict	deps/ecto/lib/ecto/repo/schema.ex	/^  defp on_conflict(on_conflict, conflict_target,$/;"	f
on_conflict_query	deps/ecto/lib/ecto/repo/schema.ex	/^  defp on_conflict_query(query, from, prefix, changes, adapter, conflict_target) do$/;"	f
on_delete_query	deps/ecto/lib/ecto/association.ex	/^  defp on_delete_query(%{owner_key: owner_key, related_key: related_key,$/;"	f
on_exit_message	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def on_exit_message(topic, join_ref, _reason) do$/;"	f
on_exit_message	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def on_exit_message(topic, reason) do$/;"	f
on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_replace(%{on_replace: :mark_as_invalid}, _changeset_or_struct) do$/;"	f
on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_replace(%{on_replace: :raise, field: name, owner: owner}, _) do$/;"	f
on_replace	deps/ecto/lib/ecto/changeset/relation.ex	/^  def on_replace(_relation, changeset_or_struct) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{data: struct}, [], _opts) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{field: field, join_through: join_through, join_keys: join_keys},$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{field: name}, _, _, _) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{join_keys: join_keys, join_through: join_through},$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{on_replace: :delete} = refl, parent_changeset,$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{on_replace: :nilify}, _parent_changeset, %{action: :replace}, _opts) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(%{on_replace: on_replace} = refl, %{data: parent} = parent_changeset,$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(_refl, %{data: parent, repo: repo}, %{action: action} = changeset, opts) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(assoc, parent_changeset, changeset, opts) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  def on_repo_change(changeset, assocs, opts) do$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  defp on_repo_change(%{cardinality: :many, field: field, __struct__: mod} = meta,$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  defp on_repo_change(%{cardinality: :one, field: field, __struct__: mod} = meta,$/;"	f
on_repo_change	deps/ecto/lib/ecto/association.ex	/^  defp on_repo_change(%{cardinality: :one, field: field} = meta, nil, parent_changeset,$/;"	f
on_repo_change_unless_halted	deps/ecto/lib/ecto/association.ex	/^  defp on_repo_change_unless_halted(false, mod, meta, parent, changeset, opts) do$/;"	f
on_repo_change_unless_halted	deps/ecto/lib/ecto/association.ex	/^  defp on_repo_change_unless_halted(true, _mod, _meta, _parent, changeset, _opts) do$/;"	f
one	deps/ecto/lib/ecto/repo.ex	/^      def one(queryable, opts \\\\ []) do$/;"	f
one	deps/ecto/lib/ecto/repo/queryable.ex	/^  def one(repo, adapter, queryable, opts) do$/;"	f
one!	deps/ecto/lib/ecto/repo.ex	/^      def one!(queryable, opts \\\\ []) do$/;"	f
one!	deps/ecto/lib/ecto/repo/queryable.ex	/^  def one!(repo, adapter, queryable, opts) do$/;"	f
one_assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp one_assoc_map([], [], map) do$/;"	f
one_assoc_map	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp one_assoc_map([id|ids], [struct|structs], map) do$/;"	f
online_list	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def online_list(%State{values: values} = state) do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp op_to_binary(expr, sources, query) do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp op_to_binary({op, _, [_, _]} = expr, sources, query) when op in @binary_ops do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp op_to_binary(expr, sources, query) do$/;"	f
op_to_binary	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp op_to_binary({op, _, [_, _]} = expr, sources, query) when op in @binary_ops do$/;"	f
open?	deps/ecto/lib/mix/ecto.ex	/^  def open?(file) do$/;"	f
open_random_file	deps/plug/lib/plug/upload.ex	/^  defp open_random_file(_prefix, tmp, attempts, _paths) do$/;"	f
open_random_file	deps/plug/lib/plug/upload.ex	/^  defp open_random_file(prefix, tmp, attempts, paths) when attempts < @max_attempts do$/;"	f
open_to_byte	deps/postgrex/lib/postgrex/extensions/path.ex	/^  def open_to_byte(false), do: 0$/;"	f
open_to_byte	deps/postgrex/lib/postgrex/extensions/path.ex	/^  def open_to_byte(true), do: 1$/;"	f
operator_to_boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp operator_to_boolean(:and), do: " AND "$/;"	f
operator_to_boolean	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp operator_to_boolean(:or), do: " OR "$/;"	f
operator_to_boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp operator_to_boolean(:and), do: " AND "$/;"	f
operator_to_boolean	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp operator_to_boolean(:or), do: " OR "$/;"	f
opt_etls	deps/bolt_sips/mix.exs	/^  defp opt_etls() do$/;"	f
optimistic locking in update	deps/ecto/integration_test/cases/repo.exs	/^  test "optimistic locking in update\/delete operations" do$/;"	t
optimistic_lock	deps/ecto/lib/ecto/changeset.ex	/^  def optimistic_lock(data_or_changeset, field, incrementer \\\\ &(&1 + 1)) do$/;"	f
option	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp option(group_label, group_values, value, acc) when is_list(group_values) or is_map(group_values) do$/;"	f
option	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp option(option_key, option_value, value, acc) do$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce(opt, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({:default, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({:full, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({:full_confirmable, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({:full_invitable, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({:trackable_table, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({name, false}, {acc_bin, acc}) when name in @all_options_atoms,$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp option_reduce({name, true}, {acc_bin, acc}) when name in @all_options_atoms,$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce(opt, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({:default, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({:full, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({:full_confirmable, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({:full_invitable, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({:trackable_table, true}, {acc_bin, acc}),$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({name, false}, {acc_bin, acc}) when name in @all_options_atoms,$/;"	f
option_reduce	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp option_reduce({name, true}, {acc_bin, acc}) when name in @all_options_atoms,$/;"	f
option_string	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp option_string(options) do$/;"	f
option_string	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp option_string(options) do$/;"	f
options	deps/plug/lib/plug/router.ex	/^  defmacro options(path, options, contents \\\\ []) do$/;"	a
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(keyword) when is_list(keyword),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(nil),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp options_expr(options),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(keyword) when is_list(keyword),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(nil),$/;"	f
options_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp options_expr(options),$/;"	f
options_fields	deps/coherence/lib/coherence/schema.ex	/^  defp options_fields(fields, key) do$/;"	f
options_for_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp options_for_select(values, options, value) do$/;"	f
or_having	deps/ecto/lib/ecto/query.ex	/^  defmacro or_having(query, binding \\\\ [], expr) do$/;"	a
or_use_url_if_present	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  defp or_use_url_if_present(config) do$/;"	f
or_where	deps/ecto/lib/ecto/query.ex	/^  defmacro or_where(query, binding \\\\ [], expr) do$/;"	a
order_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp order_by(%Query{order_bys: []}, _sources), do: []$/;"	f
order_by	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp order_by(%Query{order_bys: order_bys} = query, sources) do$/;"	f
order_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp order_by(%Query{order_bys: []}, _distinct, _sources), do: []$/;"	f
order_by	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp order_by(%Query{order_bys: order_bys} = query, distinct, sources) do$/;"	f
order_by	deps/ecto/lib/ecto/query.ex	/^  defmacro order_by(query, binding \\\\ [], expr)  do$/;"	a
order_by!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def order_by!(kind, exprs) do$/;"	f
order_by_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp order_by_expr({dir, expr}, sources, query) do$/;"	f
order_by_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp order_by_expr({dir, expr}, sources, query) do$/;"	f
order_by_pk	deps/ecto/lib/ecto/query.ex	/^  defp order_by_pk(query, dir) do$/;"	f
organisation_changeset	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def organisation_changeset(organisation, attrs) do$/;"	f
organisation_changeset	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def organisation_changeset(organisation, attrs) do$/;"	f
organization_url	deps/phoenix/lib/phoenix/controller.ex	/^      def organization_url(conn, org, params \\\\ %{}) do$/;"	f
organize_into_map	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp organize_into_map([expiry_element = %{expires_at: _} | tail]) do$/;"	f
origin	deps/cors_plug/lib/cors_plug.ex	/^  defp origin(%Regex{} = regex, conn) do$/;"	f
origin	deps/cors_plug/lib/cors_plug.ex	/^  defp origin(["*"], _conn) do$/;"	f
origin	deps/cors_plug/lib/cors_plug.ex	/^  defp origin([:self], conn) do$/;"	f
origin	deps/cors_plug/lib/cors_plug.ex	/^  defp origin(key, conn) when not is_list(key) do$/;"	f
origin	deps/cors_plug/lib/cors_plug.ex	/^  defp origin(origins, conn) when is_list(origins) do$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(_check_origin, %URI{host: nil}, _endpoint),$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(check_origin, uri, _endpoint) when is_list(check_origin),$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(true, uri, endpoint),$/;"	f
origin_allowed?	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp origin_allowed?(uri, allowed_origins) do$/;"	f
ors	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp ors(pos, [rep | rest]), do: {:or, {:"==", pos, {rep}}, ors(pos, rest)}$/;"	f
ors	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp ors(pos, [rep]), do: {:"==", pos, {rep}}$/;"	f
os_specific_error_msg	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp os_specific_error_msg(:default) do$/;"	f
os_specific_error_msg	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp os_specific_error_msg(msg) when is_binary(msg) do$/;"	f
os_specific_executable	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp os_specific_executable(:default) do$/;"	f
os_specific_executable	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp os_specific_executable(exec) when is_binary(exec) do$/;"	f
os_symlink	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp os_symlink(_),$/;"	f
os_symlink	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp os_symlink({:win32, _}),$/;"	f
otp_app	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp otp_app do$/;"	f
otp_app	deps/phoenix/lib/mix/phoenix.ex	/^  def otp_app do$/;"	f
otp_app	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp otp_app(cowboy_options) do$/;"	f
overload_meters	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp overload_meters(opts) do$/;"	f
override_method	deps/plug/lib/plug/method_override.ex	/^  defp override_method(conn, %Plug.Conn.Unfetched{}) do$/;"	f
override_method	deps/plug/lib/plug/method_override.ex	/^  defp override_method(conn, body_params) do$/;"	f
owner	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def owner(%__MODULE__{owner: owner}), do: owner$/;"	f
owner	deps/postgrex/lib/postgrex/types.ex	/^  def owner({_, table}) do$/;"	f
owner_allow	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp owner_allow(%{ets: ets, log: log} = state, allow, ref, proxy) do$/;"	f
owner_down	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp owner_down(%{ets: ets, log: log} = state, ref) do$/;"	f
owner_sup_pid	deps/db_connection/lib/db_connection/ownership/pool.ex	/^  def owner_sup_pid(pool) do$/;"	f
ownership_allow	deps/db_connection/lib/db_connection/ownership.ex	/^  defdelegate ownership_allow(manager, owner, allow, opts), to: Manager, as: :allow$/;"	d
ownership_checkin	deps/db_connection/lib/db_connection/ownership.ex	/^  defdelegate ownership_checkin(manager, opts), to: Manager, as: :checkin$/;"	d
ownership_checkout	deps/db_connection/lib/db_connection/ownership.ex	/^  def ownership_checkout(manager, opts) do$/;"	f
ownership_mode	deps/db_connection/lib/db_connection/ownership.ex	/^  defdelegate ownership_mode(manager, mode, opts), to: Manager, as: :mode$/;"	d
package	deps/bcrypt_elixir/mix.exs	/^  defp package do$/;"	f
package	deps/bolt_sips/mix.exs	/^  defp package() do$/;"	f
package	deps/boltex/mix.exs	/^  defp package do$/;"	f
package	deps/coherence/mix.exs	/^  defp package do$/;"	f
package	deps/combine/mix.exs	/^  defp package do$/;"	f
package	deps/comeonin/mix.exs	/^  defp package do$/;"	f
package	deps/connection/mix.exs	/^  defp package do$/;"	f
package	deps/cors_plug/mix.exs	/^  defp package do$/;"	f
package	deps/db_connection/mix.exs	/^  defp package do$/;"	f
package	deps/decimal/mix.exs	/^  defp package() do$/;"	f
package	deps/distillery/mix.exs	/^  defp package do$/;"	f
package	deps/ecto/mix.exs	/^  defp package do$/;"	f
package	deps/elixir_make/mix.exs	/^  defp package do$/;"	f
package	deps/mime/mix.exs	/^  def package do$/;"	f
package	deps/phoenix/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_ecto/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_html/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_pubsub/mix.exs	/^  defp package do$/;"	f
package	deps/phoenix_swoosh/mix.exs	/^  defp package do$/;"	f
package	deps/plug/mix.exs	/^  defp package do$/;"	f
package	deps/poison/mix.exs	/^  defp package do$/;"	f
package	deps/postgrex/mix.exs	/^  defp package do$/;"	f
package	deps/retry/mix.exs	/^  defp package do$/;"	f
package	deps/swoosh/mix.exs	/^  defp package do$/;"	f
package	deps/timex/mix.exs	/^  defp package do$/;"	f
package	deps/timex_ecto/mix.exs	/^  defp package do$/;"	f
package	deps/tzdata/mix.exs	/^  defp package do$/;"	f
package	deps/uuid/mix.exs	/^  defp package do$/;"	f
pad	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  defp pad(i) when i < 10, do: << ?0, ?0 + i >>$/;"	f
pad	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  defp pad(i), do: to_string(i)$/;"	f
pad	deps/plug/lib/plug/conn/cookies.ex	/^  defp pad(number) when number in 0..9, do: <<?0, ?0 + number>>$/;"	f
pad	deps/plug/lib/plug/conn/cookies.ex	/^  defp pad(number), do: Integer.to_string(number)$/;"	f
pad_char	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_char(:spaces), do: <<32>>$/;"	f
pad_char	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_char(:zeroes), do: <<?0>>$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(<<?-, number_str::binary>>, flags, width) do$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number, flags, width) when is_integer(number), do: pad_numeric("#{number}", flags, width)$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number_str, [], _width), do: number_str$/;"	f
pad_numeric	deps/timex/lib/format/datetime/formatter.ex	/^  defp pad_numeric(number_str, flags, [min: min_width, max: max_width]) do$/;"	f
pad_numeric	deps/timex/lib/timezone/inspect.ex	/^  defp pad_numeric(<<?-, number_str::binary>>) do$/;"	f
pad_numeric	deps/timex/lib/timezone/inspect.ex	/^  defp pad_numeric(number) when is_integer(number), do: pad_numeric("#{number}")$/;"	f
pad_numeric	deps/timex/lib/timezone/inspect.ex	/^  defp pad_numeric(number_str) do$/;"	f
paginate	deps/ecto/lib/ecto/query.ex	/^      def paginate(query, page, size) do$/;"	f
param_key	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def param_key, do: @param_key$/;"	f
param_pk	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp param_pk(mod, pks) do$/;"	f
parameters	deps/postgrex/lib/postgrex.ex	/^  def parameters(conn, opts \\\\ []) do$/;"	f
params	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def params(attrs, action \\\\ :create) when action in [:create, :update] do$/;"	f
params	deps/phoenix/lib/phoenix/logger.ex	/^  defp params(%Plug.Conn.Unfetched{}), do: "[UNFETCHED]"$/;"	f
params	deps/phoenix/lib/phoenix/logger.ex	/^  defp params(params) do$/;"	f
params	deps/plug/lib/plug/conn/utils.ex	/^  def params(t) do$/;"	f
params	deps/plug/lib/plug/conn/utils.ex	/^  defp params(param, acc) do$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<>>, _acc),$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<?=, t :: binary>>, acc) when acc != "",$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<h, _ :: binary>>, _acc) when h in @specials or h in @space or h < 32 or h === 127,$/;"	f
params_key	deps/plug/lib/plug/conn/utils.ex	/^  defp params_key(<<h, t :: binary>>, acc),$/;"	f
params_value	deps/plug/lib/plug/conn/utils.ex	/^  defp params_value(token, key) do$/;"	f
paren_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp paren_expr(expr, sources, query) do$/;"	f
paren_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp paren_expr(expr, sources, query) do$/;"	f
parent_key	deps/ecto/lib/ecto/association.ex	/^  defp parent_key(%{owner_key: owner_key, related_key: related_key}, owner) do$/;"	f
parent_key	deps/ecto/lib/ecto/association.ex	/^  defp parent_key(%{related_key: related_key}, nil) do$/;"	f
parent_process	deps/con_cache/lib/con_cache/owner.ex	/^  defp parent_process() do$/;"	f
parse	deps/combine/lib/combine.ex	/^  def parse(input, parser, options \\\\ []) do$/;"	f
parse	deps/db_connection/lib/db_connection.ex	/^  defp parse(call, query, params, opts) do$/;"	f
parse	deps/db_connection/lib/db_connection/query.ex	/^  def parse(query, opts)$/;"	f
parse	deps/decimal/lib/decimal.ex	/^  def parse(binary) when is_binary(binary) do$/;"	f
parse	deps/ecto/lib/ecto/date_time.ex	/^  defp parse(<<h, t::binary>>, acc) when h in ?0..?9, do: parse(t, <<acc::binary, h>>)$/;"	f
parse	deps/ecto/lib/ecto/date_time.ex	/^  defp parse(rest, acc), do: {acc, rest}$/;"	f
parse	deps/gettext/lib/gettext/po/parser.ex	/^  def parse(tokens) do$/;"	f
parse	deps/plug/lib/plug/parsers/json.ex	/^  def parse(conn, "application", subtype, _headers, opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/json.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/multipart.ex	/^  def parse(conn, "multipart", subtype, _headers, opts) when subtype in ["form-data", "mixed"] do$/;"	f
parse	deps/plug/lib/plug/parsers/multipart.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/urlencoded.ex	/^  def parse(conn, "application", "x-www-form-urlencoded", _headers, opts) do$/;"	f
parse	deps/plug/lib/plug/parsers/urlencoded.ex	/^  def parse(conn, _type, _subtype, _headers, _opts) do$/;"	f
parse	deps/poison/lib/poison/parser.ex	/^  def parse(iodata, options \\\\ []) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<_ :: uint16, rest :: binary>>, ?D, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<len :: uint16, rest :: binary(len, 32)>>, ?t, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<len :: uint16, rest :: binary>>, ?T, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<overflow_len :: uint16, _ :: binary>>, ?t, size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<pg_pid :: int32, rest :: binary>>, ?A, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<pid :: int32, key :: int32>>, ?K, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<status :: int8>>, ?Z, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(<<type :: int32, rest :: binary>>, ?R, size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?1, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?2, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?3, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?I, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?c, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?n, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(_rest, ?s, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(data, ?d, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(message, ?f, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?C, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?E, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?G, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?H, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?N, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?S, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/messages.ex	/^  def parse(rest, ?W, _size) do$/;"	f
parse	deps/postgrex/lib/postgrex/parameters.ex	/^  def parse(query, _), do: query$/;"	f
parse	deps/postgrex/lib/postgrex/query.ex	/^  def parse(%{name: name} = query, _) do$/;"	f
parse	deps/postgrex/lib/postgrex/stream.ex	/^  def parse(%Stream{query: query} = stream, opts) do$/;"	f
parse	deps/postgrex/lib/postgrex/stream.ex	/^  def parse(copy, _) do$/;"	f
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(_, _),$/;"	f
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(_, _, _), do: {:error, :badarg}$/;"	f
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(date_string, format_string)$/;"	f
parse	deps/timex/lib/parse/datetime/parser.ex	/^  def parse(date_string, format_string, tokenizer)$/;"	f
parse	deps/timex/lib/parse/duration/parser.ex	/^  def parse(str) when is_binary(str) do$/;"	f
parse	deps/timex/lib/parse/duration/parser.ex	/^  def parse(str, parser) when is_binary(str) and is_atom(parser) do$/;"	f
parse	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  def parse(<<>>), do: {:error, "input string cannot be empty"}$/;"	f
parse	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  def parse(<<?P, rest::binary>>) do$/;"	f
parse	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  def parse(<<c::utf8, _::binary>>), do: {:error, "expected P, got #{<<c::utf8>>}"}$/;"	f
parse	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  def parse(s) when is_binary(s), do: {:error, "unexpected end of input"}$/;"	f
parse	deps/timex/lib/parse/posix/parser.ex	/^  def parse(tz) when is_binary(tz) do$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(<<?T, ?Z, ?i, ?f, _reserved :: bytes(16), rest :: binary>>) do$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(_) do$/;"	f
parse	deps/timex/lib/parse/zoneinfo/parser.ex	/^  def parse(path) when is_binary(path) do$/;"	f
parse	deps/timex/lib/time/duration.ex	/^  defdelegate parse(str), to: Timex.Parse.Duration.Parser$/;"	d
parse	deps/timex/lib/time/duration.ex	/^  defdelegate parse(str, module), to: Timex.Parse.Duration.Parser$/;"	d
parse	deps/timex/lib/timex.ex	/^  defdelegate parse(datetime_string, format_string), to: Timex.Parse.DateTime.Parser$/;"	d
parse	deps/timex/lib/timex.ex	/^  defdelegate parse(datetime_string, format_string, tokenizer), to: Timex.Parse.DateTime.Parser$/;"	d
parse!	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  defp parse!(int) do$/;"	f
parse!	deps/poison/lib/poison/parser.ex	/^  def parse!(iodata, options \\\\ []) do$/;"	f
parse!	deps/timex/lib/parse/datetime/parser.ex	/^  def parse!(date_string, format_string, :strftime),$/;"	f
parse!	deps/timex/lib/parse/datetime/parser.ex	/^  def parse!(date_string, format_string, tokenizer \\\\ Default)$/;"	f
parse!	deps/timex/lib/parse/datetime/parser.ex	/^  def parse!(date_string, format_string, tokenizer)$/;"	f
parse!	deps/timex/lib/parse/duration/parser.ex	/^  def parse!(str) when is_binary(str) do$/;"	f
parse!	deps/timex/lib/parse/duration/parser.ex	/^  def parse!(str, parser) when is_binary(str) and is_atom(parser) do$/;"	f
parse!	deps/timex/lib/time/duration.ex	/^  defdelegate parse!(str), to: Timex.Parse.Duration.Parser$/;"	d
parse!	deps/timex/lib/time/duration.ex	/^  defdelegate parse!(str, module), to: Timex.Parse.Duration.Parser$/;"	d
parse!	deps/timex/lib/timex.ex	/^  defdelegate parse!(datetime_string, format_string), to: Timex.Parse.DateTime.Parser$/;"	d
parse!	deps/timex/lib/timex.ex	/^  defdelegate parse!(datetime_string, format_string, tokenizer), to: Timex.Parse.DateTime.Parser$/;"	d
parse_args	deps/distillery/lib/distillery/tasks/clean.ex	/^  defp parse_args(argv) do$/;"	f
parse_args	deps/distillery/lib/distillery/tasks/init.ex	/^  defp parse_args(argv) do$/;"	f
parse_args	deps/distillery/lib/distillery/tasks/release.ex	/^  defp parse_args(argv) do$/;"	f
parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_array(data, 0, _parser), do: {[], data}$/;"	f
parse_array	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_array(data, count, parser) when is_binary(data) and is_function(parser) do$/;"	f
parse_char	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_char(<<val :: signed_char_be, rest :: binary>>),    do: {val, rest}$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8, _::binary>>, _acc), do: {:error, "unexpected token #{<<c::utf8>>}"}$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8, rest::binary>>, acc) when c in 'YMDHS' do$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8, rest::binary>>, acc) when c in @numeric do$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8>>, _acc) when c in @numeric,$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8>>, _acc),            do: {:error, "unexpected token #{<<c::utf8>>}"}$/;"	f
parse_component	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_component(<<c::utf8>>, acc) when c in 'YMDHS' do$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<>>, acc),$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<?T, rest::binary>>, acc),$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<?T>>, _acc),$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<c::utf8, _::binary>>, _acc),$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<c::utf8, rest::binary>>, acc) when c in @numeric do$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<c::utf8>>, _acc) when c in @numeric,$/;"	f
parse_components	deps/timex/lib/parse/duration/parsers/iso8601.ex	/^  defp parse_components(<<c::utf8>>, _acc),$/;"	f
parse_config	deps/swoosh/lib/swoosh/mailer.ex	/^  def parse_config(mailer, opts) do$/;"	f
parse_content_type	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp parse_content_type(header) do$/;"	f
parse_describe	deps/postgrex/lib/postgrex/protocol.ex	/^  defp parse_describe(s, status, query, buffer, next) do$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(<< digit, rest :: binary >>, acc) when digit in ?0..?9 do$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(bin), do: parse_digits(bin, [])$/;"	f
parse_digits	deps/decimal/lib/decimal.ex	/^  defp parse_digits(rest, acc) do$/;"	f
parse_error	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_error({:error, {line, _module, reason}}) do$/;"	f
parse_error_reason	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_error_reason('syntax error before: ' = prefix, "<<" <> rest),$/;"	f
parse_error_reason	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_error_reason([error, token]) do$/;"	f
parse_error_reason	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_error_reason(error, token),$/;"	f
parse_ets_options	deps/con_cache/lib/con_cache/owner.ex	/^  defp parse_ets_options(input_options) do$/;"	f
parse_exp	deps/decimal/lib/decimal.ex	/^  defp parse_exp(<< ?e, rest :: binary >>) do$/;"	f
parse_exp	deps/decimal/lib/decimal.ex	/^  defp parse_exp(bin) do$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<>>), do: {:error, "Expected year, but got end of input."}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<d1::utf8,d2::utf8,sep::utf8,rest::binary>>, :day, acc, count) when$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h1::utf8,h2::utf8,rest::binary>>, :hour, acc, count) when$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :day, _acc, count), do: {:error, "Expected 2 digit day, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :hour, _acc, count), do: {:error, "Expected 2 digit hour, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :minute, _acc, count), do: {:error, "Expected 2 digit minute, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :month, _acc, count), do: {:error, "Expected 2 digit month, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :second, _acc, count), do: {:error, "Expected valid value for seconds, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<h::utf8,_::binary>>, :year, _acc, count), do: {:error, "Expected 4 digit year, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<m1::utf8,m2::utf8,"-",rest::binary>>, :month, acc, count) when$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<m1::utf8,m2::utf8,rest::binary>>, :minute, acc, count) when$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<s1::utf8,s2::utf8,".",rest::binary>>, :second, acc, count) when # Has fractional seconds$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<s1::utf8,s2::utf8,rest::binary>>, :second, acc, count) when # No fractional seconds$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(<<y1::utf8,y2::utf8,y3::utf8,y4::utf8,"-",rest::binary>>, :year, acc, count) when$/;"	f
parse_extended	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_extended(input), do: parse_extended(input, :year, [], 0)$/;"	f
parse_exts	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_exts("*", "*"),      do: "*\/*"$/;"	f
parse_exts	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_exts(type, "*"),     do: type$/;"	f
parse_exts	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_exts(type, subtype), do: MIME.extensions(type <> "\/" <> subtype)$/;"	f
parse_file	deps/combine/lib/combine.ex	/^  def parse_file(path, parser) do$/;"	f
parse_file	deps/gettext/lib/gettext/po.ex	/^  def parse_file(path) do$/;"	f
parse_file!	deps/gettext/lib/gettext/po.ex	/^  def parse_file!(path) do$/;"	f
parse_flags	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_flags(flag_comments) do$/;"	f
parse_float	deps/decimal/lib/decimal.ex	/^  defp parse_float("." <> rest), do: parse_digits(rest)$/;"	f
parse_float	deps/decimal/lib/decimal.ex	/^  defp parse_float(bin), do: {[], bin}$/;"	f
parse_fractional_seconds	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_fractional_seconds(<<digit::utf8,rest::binary>>, count, acc) when$/;"	f
parse_fractional_seconds	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_fractional_seconds(_rest, count, "") do$/;"	f
parse_fractional_seconds	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_fractional_seconds(rest, count, acc) do$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, [], acc, accepted) do$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, [h|t], acc, accepted) do$/;"	f
parse_header_accept	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_header_accept(conn, {_, _, exts}, accepted) do$/;"	f
parse_instruction	deps/exactor/lib/exactor/delegator.ex	/^  defp parse_instruction(target_module, {:init, _, _}) do$/;"	f
parse_instruction	deps/exactor/lib/exactor/delegator.ex	/^  defp parse_instruction(target_module, {:query, _, [{:\/, _, [{fun, _, _}, arity]}]}) do$/;"	f
parse_instruction	deps/exactor/lib/exactor/delegator.ex	/^  defp parse_instruction(target_module, {:trans, _, [{:\/, _, [{fun, _, _}, arity]}]}) do$/;"	f
parse_int	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_int(<<val :: integer_32bit_be, rest :: binary>>),   do: {val, rest}$/;"	f
parse_json	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp parse_json(conn) do$/;"	f
parse_metadata	deps/phoenix_ecto/lib/phoenix_ecto/sql/sandbox.ex	/^  defp parse_metadata(encoded_metadata) do$/;"	f
parse_microseconds	deps/timex/lib/parse/datetime/helpers.ex	/^  def parse_microseconds(us) do$/;"	f
parse_milliseconds	deps/timex/lib/parse/datetime/helpers.ex	/^  def parse_milliseconds(ms) do$/;"	f
parse_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp parse_model(_, base, _) do$/;"	f
parse_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp parse_model(model, _base, opts) when is_binary(model) do$/;"	f
parse_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp parse_model(_, base, _) do$/;"	f
parse_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp parse_model(model, _base, opts) when is_binary(model) do$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:done, req}, limit, _opts, _headers_opts, acc, _callback) do$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:ok, _headers, req}, limit, _opts, _headers_opts, acc, _callback) do$/;"	f
parse_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart({:ok, headers, req}, limit, opts, headers_opts, acc, callback) when limit >= 0 do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:more, tail, req}, limit, _opts, body) do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:more, tail, req}, limit, opts, body) when limit >= byte_size(tail) do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:ok, tail, req}, limit, _opts, body) do$/;"	f
parse_multipart_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_body({:ok, tail, req}, limit, _opts, body) when limit >= byte_size(tail) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:more, tail, req}, limit, _opts, _file) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:more, tail, req}, limit, opts, file) when limit >= byte_size(tail) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:ok, tail, req}, limit, _opts, _file) do$/;"	f
parse_multipart_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp parse_multipart_file({:ok, tail, req}, limit, _opts, file) when limit >= byte_size(tail) do$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset("", acc, count), do: {:ok, acc, count, ""}$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(<<"Z",rest::binary>>, acc, count), do: {:ok, [{:zname, "Etc\/UTC"}|acc], count+1, rest}$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(<<dir::utf8,rest::binary>>, acc, count) when dir in [?+,?-] do$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(_, <<h::utf8,_rest::binary>>, _acc, count), do: {:error, "Expected valid offset, but got `#{<<h::utf8>>}` instead.", count}$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(dir, <<h1::utf8,h2::utf8,":",m1::utf8,m2::utf8,":",s1::utf8,s2::utf8,rest::binary>>, acc, count) when$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(dir, <<h1::utf8,h2::utf8,":",m1::utf8,m2::utf8,rest::binary>>, acc, count) when$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(dir, <<h1::utf8,h2::utf8,m1::utf8,m2::utf8,rest::binary>>, acc, count) when$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(dir, <<h1::utf8,h2::utf8,rest::binary>>, acc, count) when$/;"	f
parse_offset	deps/timex/lib/parse/datetime/parsers/iso8601_extended.ex	/^  def parse_offset(str, _acc, count), do: {:error, "Expected either Z or a valid timezone offset, but got `#{str}`", count}$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset("0"), do: {"0", 0}$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<?0, h2::utf8, ?:, m1::utf8, m2::utf8, ?:, s1::utf8, s2::utf8>>) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<?0, h2::utf8, ?:, m1::utf8, m2::utf8>>) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<?0, h2::utf8>>) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h1::utf8, h2::utf8, ?., rest::binary>>) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h1::utf8, h2::utf8, ?:, m1::utf8, m2::utf8, ?:, s1::utf8, s2::utf8>> = suffix) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h1::utf8, h2::utf8, ?:, m1::utf8, m2::utf8>> = suffix) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h1::utf8, h2::utf8>> = suffix) do$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h1::utf8>> = suffix), do: {suffix, String.to_integer(<<h1::utf8>>) * 60 * 60}$/;"	f
parse_offset	deps/timex/lib/timezone/timezone.ex	/^  defp parse_offset(<<h2::utf8, ?., rest::binary>>) do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids("{" <> rest) do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids("{}") do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids(bin, acc) do$/;"	f
parse_oids	deps/postgrex/lib/postgrex/types.ex	/^  defp parse_oids(nil) do$/;"	f
parse_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp parse_options(opts) do$/;"	f
parse_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp parse_options(opts) do$/;"	f
parse_origin	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp parse_origin(origin) do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<>>, :dst_end, result),  do: {:ok, result}$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<>>, :dst_name, result), do: {:ok, result}$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<>>, _, _result), do: {:error, :not_posix}$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<?,, ?M, ?1, c::utf8, rest::binary>>, :dst_name, result) when c in ?0..?2 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<?,, ?M, ?1, c::utf8, rest::binary>>, :dst_start, result) when c in ?0..?2 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<?,, ?M, c::utf8, rest::binary>>, :dst_name, result) when c in ?1..?9 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<?,, ?M, c::utf8, rest::binary>>, :dst_start, result) when c in ?1..?9 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<_c::utf8, _rest::binary>>, _, _result), do: {:error, :not_posix}$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<c::utf8, rest::binary>>, :diff, %TZ{:diff => acc} = result) when c in ?0..?9 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<c::utf8, rest::binary>>, :diff, %TZ{:diff => diff, :dst_name => acc} = result) when c in ?A..?Z do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<c::utf8, rest::binary>>, :dst_name, %{:dst_name => acc} = result) when c in ?A..?Z do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<c::utf8, rest::binary>>, :std_name, %TZ{:diff => acc} = result) when c in ?0..?9 do$/;"	f
parse_posix	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_posix(<<c::utf8, rest::binary>>, :std_name, %TZ{:std_name => acc} = result) when c in ?A..?Z do$/;"	f
parse_q	deps/phoenix/lib/phoenix/controller.ex	/^  defp parse_q(args) do$/;"	f
parse_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp parse_recv(s, status, query, buffer, recv) do$/;"	f
parse_reference_part	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_reference_part(part) do$/;"	f
parse_references	deps/gettext/lib/gettext/po/parser.ex	/^  defp parse_references("#:" <> comment) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  def parse_repo(args) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  defp parse_repo([], []) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  defp parse_repo([], acc) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  defp parse_repo([_|t], acc) do$/;"	f
parse_repo	deps/ecto/lib/mix/ecto.ex	/^  defp parse_repo([key, value|t], acc) when key in ~w(--repo -r) do$/;"	f
parse_req_def	deps/exactor/lib/exactor/operations.ex	/^  defp parse_req_def(req_name) when is_atom(req_name), do: {req_name, []}$/;"	f
parse_req_def	deps/exactor/lib/exactor/operations.ex	/^  defp parse_req_def({_, _, _} = definition) do$/;"	f
parse_req_multipart	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def parse_req_multipart(req, opts, callback) do$/;"	f
parse_req_multipart	deps/plug/lib/plug/adapters/test/conn.ex	/^  def parse_req_multipart(%{params: multipart} = state, _limit, _callback) do$/;"	f
parse_runtime_config	deps/swoosh/lib/swoosh/mailer.ex	/^  def parse_runtime_config(config) do$/;"	f
parse_string	deps/gettext/lib/gettext/po.ex	/^  def parse_string(str) do$/;"	f
parse_string!	deps/gettext/lib/gettext/po.ex	/^  def parse_string!(str) do$/;"	f
parse_time	deps/db_connection/lib/db_connection/log_entry.ex	/^  defp parse_time({:checkout, checkout} = time, {{:start, start}, entry}) do$/;"	f
parse_time	deps/db_connection/lib/db_connection/log_entry.ex	/^  defp parse_time({:start, start} = time, {{:stop, stop}, entry}) do$/;"	f
parse_time	deps/db_connection/lib/db_connection/log_entry.ex	/^  defp parse_time({:stop, stop} = time, {{:decode, decode}, entry}) do$/;"	f
parse_time	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_time(<<?\/, h1::utf8, h2::utf8, ?:, m1::utf8, m2::utf8, ?:, s1::utf8, s2::utf8, rest::binary>>, state, result)$/;"	f
parse_time	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_time(<<?\/, h::utf8, ?:, m1::utf8, m2::utf8, ?:, s1::utf8, s2::utf8, rest::binary>>, state, result)$/;"	f
parse_time	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_time(_rest, _state, _result), do: {:error, :not_posix}$/;"	f
parse_time	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_time(hs, ms, ss, rest, state, result) do$/;"	f
parse_times	deps/db_connection/lib/db_connection/log_entry.ex	/^  defp parse_times([], entry), do: entry$/;"	f
parse_times	deps/db_connection/lib/db_connection/log_entry.ex	/^  defp parse_times([first | times], entry) do$/;"	f
parse_tzfile	deps/timex/lib/timezone/timezone_local.ex	/^  def parse_tzfile(tzdata),$/;"	f
parse_tzfile	deps/timex/lib/timezone/timezone_local.ex	/^  def parse_tzfile(tzdata, reference_date) when tzdata != nil and is_integer(reference_date) do$/;"	f
parse_uchar	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp parse_uchar(<<val :: unsigned_char_be, rest :: binary>>), do: {val, rest}$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("inf") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("infinity") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("nan") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign("snan") do$/;"	f
parse_unsign	deps/decimal/lib/decimal.ex	/^  defp parse_unsign(bin) do$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url(""), do: []$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url(url) when is_binary(url) do$/;"	f
parse_url	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def parse_url({:system, env}) when is_binary(env) do$/;"	f
parse_version	deps/distillery/lib/mix/lib/releases/utils.ex	/^  defp parse_version(ver) do$/;"	f
parse_version	deps/postgrex/lib/postgrex/utils.ex	/^  def parse_version(version) do$/;"	f
parse_week	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_week(<<?., c::utf8, rest::binary>>, :dst_end, %{:dst_end => dst_end} = result) when c in ?1..?5 do$/;"	f
parse_week	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_week(<<?., c::utf8, rest::binary>>, :dst_start, %{:dst_start => start} = result) when c in ?1..?5 do$/;"	f
parse_week	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_week(_rest, state, _result), do: {:error, :"invalid_#{state}_week"}$/;"	f
parse_weekday	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_weekday(<<?., c::utf8, rest::binary>>, :dst_end, %{:dst_end => dst_end} = result) when c in ?0..?6 do$/;"	f
parse_weekday	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_weekday(<<?., c::utf8, rest::binary>>, :dst_start, %{:dst_start => start} = result) when c in ?0..?6 do$/;"	f
parse_weekday	deps/timex/lib/parse/posix/parser.ex	/^  defp parse_weekday(_rest, state, _result), do: {:error, :"invalid_#{state}_weekday"}$/;"	f
partially_expand	deps/ecto/lib/ecto/query/builder/dynamic.ex	/^  def partially_expand(query, %{binding: binding} = dynamic, params, count) do$/;"	f
partition_attrs_and_assocs	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp partition_attrs_and_assocs(schema_module, attrs) do$/;"	f
partition_attrs_and_assocs	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp partition_attrs_and_assocs(attrs) do$/;"	f
password	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  def password(user, url) do$/;"	f
password	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  def password(user, url) do$/;"	f
password	deps/coherence/test/support/email.exs	/^  def password(user, url) do$/;"	f
password reset	deps/coherence/test/services/trackable_service_test.exs	/^    test "password reset", %{conn: conn, user: user} do$/;"	t
password_create	deps/coherence/lib/coherence/redirects.ex	/^      def password_create(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
password_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def password_input(form, field, opts \\\\ []) do$/;"	f
password_reset no login	deps/coherence/test/services/trackable_service_test.exs	/^    test "password_reset no login", %{conn: conn, user: user} do$/;"	t
password_reset_token_expired	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def password_reset_token_expired, do: dgettext(@domain, "Password reset token expired.")$/;"	f
password_reset_token_expired	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def password_reset_token_expired, do: dgettext(@domain, "Password reset token expired.")$/;"	f
password_reset_token_expired	deps/coherence/test/support/messages.exs	/^  def password_reset_token_expired, do: dgettext(@domain, "Password reset token expired.")$/;"	f
password_update	deps/coherence/lib/coherence/redirects.ex	/^      def password_update(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
password_updated_successfully	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def password_updated_successfully, do: dgettext(@domain, "Password updated successfully.")$/;"	f
password_updated_successfully	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def password_updated_successfully, do: dgettext(@domain, "Password updated successfully.")$/;"	f
password_updated_successfully	deps/coherence/test/support/messages.exs	/^  def password_updated_successfully, do: dgettext(@domain, "Password updated successfully.")$/;"	f
patch	deps/plug/lib/plug/router.ex	/^  defmacro patch(path, options, contents \\\\ []) do$/;"	a
path	deps/phoenix/lib/phoenix/endpoint.ex	/^      def path(path) do$/;"	f
path	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def path(endpoint) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def path(data, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, %Socket{endpoint: endpoint}, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, %URI{} = uri, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(_router, endpoint, path) when is_atom(endpoint) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(router, %Conn{} = conn, path) do$/;"	f
path	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def path(router, other, _path) do$/;"	f
path	deps/plug/lib/plug/mime.ex	/^  def path(path) do$/;"	f
path	deps/plug/lib/plug/static.ex	/^  defp path(from, segments),$/;"	f
path	deps/plug/lib/plug/static.ex	/^  defp path({app, from}, segments) when is_atom(app) and is_binary(from),$/;"	f
path	deps/plug/lib/plug/upload.ex	/^  defp path(prefix, tmp) do$/;"	f
path_to_iodata	deps/plug/lib/plug/adapters/translator.ex	/^  defp path_to_iodata(path, ""), do: path$/;"	f
path_to_iodata	deps/plug/lib/plug/adapters/translator.ex	/^  defp path_to_iodata(path, qs), do: [path, ??, qs]$/;"	f
path_with_script	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp path_with_script(path, []) do$/;"	f
path_with_script	deps/phoenix/lib/phoenix/router/helpers.ex	/^  defp path_with_script(path, script) do$/;"	f
paths	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp paths do$/;"	f
paths	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phoenix.gen.presence.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phx.gen.channel.ex	/^  defp paths do$/;"	f
paths	deps/phoenix/lib/mix/tasks/phx.gen.presence.ex	/^  defp paths do$/;"	f
peer	deps/plug/lib/plug/debugger.ex	/^  defp peer(%Plug.Conn{peer: {host, port}}), do:$/;"	f
pending_in_direction	deps/ecto/lib/ecto/migrator.ex	/^  defp pending_in_direction(versions, migration_source, :down) do$/;"	f
pending_in_direction	deps/ecto/lib/ecto/migrator.ex	/^  defp pending_in_direction(versions, migration_source, :up) do$/;"	f
pending_scale	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp pending_scale(0, scale), do: scale$/;"	f
pending_scale	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp pending_scale(num, scale), do: pending_scale(div(num, 10), scale - 1)$/;"	f
period_abbrevation	deps/tzdata/lib/tzdata/util.ex	/^  def period_abbrevation(zone_abbr, std_off, letter) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:no_slash, zone_abbr, _, "-") do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:no_slash, zone_abbr, _, letter) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:slash, zone_abbr, 0, _) do$/;"	f
period_abbrevation_h	deps/tzdata/lib/tzdata/util.ex	/^  defp period_abbrevation_h(:slash, zone_abbr, _, _) do$/;"	f
period_to_tuple	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp period_to_tuple(key, period) do$/;"	f
periods	deps/tzdata/lib/tzdata.ex	/^  def periods(zone_name) do$/;"	f
periods_for_point_in_time	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def periods_for_point_in_time(gregorian_seconds, zone_name) do$/;"	f
periods_for_point_in_time	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def periods_for_point_in_time({{year, _month, _day}, _}, zone_name) do$/;"	f
periods_for_time	deps/tzdata/lib/tzdata.ex	/^  def periods_for_time(zone_name, time_point, time_type) do$/;"	f
periods_for_zone_or_link	deps/tzdata/lib/tzdata/release_reader.ex	/^  def periods_for_zone_or_link(zone) do$/;"	f
periods_until_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp periods_until_year(prev_periods, from, utc_off, zone_line, rules, year, rules_per_year) do$/;"	f
permdown	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp permdown(state, %Replica{name: name} = remote_replica) do$/;"	f
permdown	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  defp permdown(replica), do: %Replica{replica | status: :permdown}$/;"	f
persist_flash	deps/phoenix/lib/phoenix/controller.ex	/^  defp persist_flash(conn, value) do$/;"	f
pg2_namespace	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  defp pg2_namespace(server_name), do: {:phx, server_name}$/;"	f
pg_dump	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp pg_dump(default, config) do$/;"	f
phoenix_channel_join	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_channel_join(:start, _compile, %{socket: socket, params: params}) do$/;"	f
phoenix_channel_join	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_channel_join(:stop, _compile, :ok), do: :ok$/;"	f
phoenix_channel_receive	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_channel_receive(:start, _compile, meta) do$/;"	f
phoenix_channel_receive	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_channel_receive(:stop, _compile, :ok), do: :ok$/;"	f
phoenix_controller_call	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_controller_call(:start, %{module: module}, %{log_level: level, conn: conn}) do$/;"	f
phoenix_controller_call	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_controller_call(:start, _compile, %{log_level: false}), do: :ok$/;"	f
phoenix_controller_call	deps/phoenix/lib/phoenix/logger.ex	/^  def phoenix_controller_call(:stop, _time_diff, :ok), do: :ok$/;"	f
phoenix_controller_pipeline	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^      defp phoenix_controller_pipeline(unquote(conn), var!(action)) do$/;"	f
ping	deps/db_connection/lib/db_connection.ex	/^      def ping(state), do: {:ok, state}$/;"	f
ping	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def ping(state), do: proxy(:ping, state, [])$/;"	f
ping	deps/postgrex/lib/postgrex/protocol.ex	/^  def ping(%{buffer: buffer} = s) do$/;"	f
ping	deps/postgrex/lib/postgrex/protocol.ex	/^  def ping(%{postgres: :transaction, transactions: :strict} = s) do$/;"	f
ping replies with status ok	deps/phoenix/priv/templates/phoenix.gen.channel/channel_test.exs	/^  test "ping replies with status ok", %{socket: socket} do$/;"	t
ping replies with status ok	deps/phoenix/priv/templates/phx.gen.channel/channel_test.exs	/^  test "ping replies with status ok", %{socket: socket} do$/;"	t
ping_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ping_recv(s, status, res, buffer) do$/;"	f
pipe_through	deps/phoenix/lib/phoenix/router.ex	/^  defmacro pipe_through(pipes) do$/;"	a
pipe_through	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pipe_through(module, pipes) do$/;"	f
pipeline	deps/phoenix/lib/phoenix/router.ex	/^  defmacro pipeline(plug, do: block) do$/;"	a
pipeline	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pipeline(module, pipe) when is_atom(pipe) do$/;"	f
pk_definition	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp pk_definition(columns, prefix) do$/;"	f
pk_definitions	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp pk_definitions(columns, prefix) do$/;"	f
pk_fields_and_values	deps/ecto/lib/ecto/changeset.ex	/^  defp pk_fields_and_values(changeset, struct) do$/;"	f
pkcs7_pad	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp pkcs7_pad(message) do$/;"	f
pkcs7_unpad	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp pkcs7_unpad(<<>>) do$/;"	f
pkcs7_unpad	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  defp pkcs7_unpad(message) do$/;"	f
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug)$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, opts)$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, opts), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug(plug, {:when, _, [opts, guards]}), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defmacro plug({:when, _, [plug, guards]}), do:$/;"	a
plug	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  defp plug(plug, opts, guards) do$/;"	f
plug	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp plug() do$/;"	f
plug	deps/phoenix/lib/phoenix/router.ex	/^  defmacro plug(plug, opts \\\\ []) do$/;"	a
plug	deps/plug/lib/plug/builder.ex	/^  defmacro plug(plug, opts \\\\ []) do$/;"	a
plug_builder_call	deps/plug/lib/plug/builder.ex	/^      defp plug_builder_call(unquote(conn), _), do: unquote(body)$/;"	f
plug_server	deps/plug/lib/plug/upload.ex	/^  defp plug_server do$/;"	f
plugin	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro plugin(name, opts \\\\ []) do$/;"	a
plural	deps/gettext/lib/gettext/plural.ex	/^        def plural("elv", 0), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^        def plural("elv", 1), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^        def plural("elv", _), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^        def plural(locale, n), do: Gettext.Plural.plural(locale, n)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), _n), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), _n), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), _n), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), _n),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), n) when n in 2..4, do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), n) when n in [0, 1], do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^    def plural(unquote(l), n)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", 0), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", 1), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", 2), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", _n), do: 5$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", n) when rem(n, 100) >= 11, do: 4$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ar", n) when rem(n, 100) >= 3 and rem(n, 100) <= 10, do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("csb", 1),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("csb", _n),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("csb", n)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("cy", 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("cy", 2), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("cy", _n), do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("cy", n) when n != 8 and n != 11, do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ga", 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ga", 2), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ga", _n), do: 4$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ga", n) when n in 3..6, do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ga", n) when n in 7..10, do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("gd", _n), do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("gd", n) when n == 1 or n == 11, do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("gd", n) when n == 2 or n == 12, do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("gd", n) when n > 2 and n < 20, do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("is", _n), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("is", n) when ends_in(n, 1) and rem(n, 100) != 11, do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("jv", 0), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("jv", _), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("kw", 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("kw", 2), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("kw", 3), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("kw", _), do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("lt", _),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("lt", n)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("lv", _), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("lv", n) when ends_in(n, 1) and rem(n, 100) != 11, do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("lv", n) when n != 0, do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mk", _), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mk", n) when ends_in(n, 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mk", n) when ends_in(n, 2), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mnk", 0), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mnk", 1), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mnk", _), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mt", 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mt", _), do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mt", n) when n == 0 or (rem(n, 100) > 1 and rem(n, 100) < 11), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("mt", n) when rem(n, 100) > 10 and rem(n, 100) < 20, do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("pl", 1),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("pl", _),$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("pl", n)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("pt_BR", _n), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("pt_BR", n) when n in [0, 1], do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ro", 1), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ro", _), do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("ro", n) when n == 0 or (rem(n, 100) > 0 and rem(n, 100) < 20), do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("sl", _), do: 0$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("sl", n) when rem(n, 100) == 1, do: 1$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("sl", n) when rem(n, 100) == 2, do: 2$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural("sl", n) when rem(n, 100) == 3, do: 3$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural(locale, count)$/;"	f
plural	deps/gettext/lib/gettext/plural.ex	/^  def plural(locale, n) do$/;"	f
plus	deps/decimal/lib/decimal.ex	/^  def plus(%Decimal{coef: :sNaN} = num) do$/;"	f
plus	deps/decimal/lib/decimal.ex	/^  def plus(%Decimal{} = num) do$/;"	f
po_files_in_dir	deps/gettext/lib/gettext/compiler.ex	/^  defp po_files_in_dir(dir) do$/;"	f
po_has_matching_pot?	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp po_has_matching_pot?(po_file, pot_dir) do$/;"	f
po_struct_from_translations	deps/gettext/lib/gettext/extractor.ex	/^  defp po_struct_from_translations(translations) do$/;"	f
poll_for_update	deps/tzdata/lib/tzdata/release_updater.ex	/^  def poll_for_update do$/;"	f
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: broadcast\/3 and broadcast!\/3 publishes message to each subscriber", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: broadcast\/3 does not publish message to other topic subscribers", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: broadcast_from\/4 and broadcast_from!\/4 skips sender", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: direct_broadcast is defined by adapter", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: direct_broadcast_from is defined by adapter", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: subscribe and unsubscribe", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: subscribe\/3 with link does not down adapter", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: subscribe\/3 with link downs subscriber", config do$/;"	t
pool	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^    test "pool #{size}: unsubscribe on not subcribed topic noops", config do$/;"	t
pool_args	deps/db_connection/lib/db_connection/poolboy.ex	/^  defp pool_args(mod, opts) do$/;"	f
pool_config	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp pool_config(repo, opts) do$/;"	f
pool_name	deps/bolt_sips/lib/bolt_sips.ex	/^  def pool_name, do: @pool_name$/;"	f
pool_name	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp pool_name(repo, config) do$/;"	f
pool_pid	deps/db_connection/lib/db_connection/ownership/pool.ex	/^  def pool_pid(pool) do$/;"	f
pool_server	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  defp pool_server(connection, query, params) do$/;"	f
pools_for_shard	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp pools_for_shard(shard, pubsub_server) do$/;"	f
pop	deps/phoenix/lib/phoenix/router/scope.ex	/^  def pop(module) do$/;"	f
pop	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def pop() do$/;"	f
pop_assocs	deps/ecto/lib/ecto/repo/schema.ex	/^  defp pop_assocs(%{changes: changes, types: types} = changeset, assocs) do$/;"	f
pop_assocs	deps/ecto/lib/ecto/repo/schema.ex	/^  defp pop_assocs(changeset, []) do$/;"	f
pop_backends	deps/gettext/lib/gettext/extractor_agent.ex	/^  def pop_backends(app) do$/;"	f
pop_current	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp pop_current(current, pk_values) do$/;"	f
pop_required_option!	deps/phoenix_html/lib/phoenix_html/link.ex	/^  defp pop_required_option!(opts, key, error_message) do$/;"	f
pop_translations	deps/gettext/lib/gettext/extractor_agent.ex	/^  def pop_translations(backends) do$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp port_to_integer(port) when is_binary(port), do: String.to_integer(port)$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp port_to_integer(port) when is_integer(port), do: port$/;"	f
port_to_integer	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp port_to_integer({:system, env_var}), do: port_to_integer(System.get_env(env_var))$/;"	f
possible_periods_for_zone_and_time	deps/tzdata/lib/tzdata.ex	/^  defp possible_periods_for_zone_and_time(zone_name, _time_point) do$/;"	f
possible_periods_for_zone_and_time	deps/tzdata/lib/tzdata.ex	/^  defp possible_periods_for_zone_and_time(zone_name, time_point) when time_point >= @point_from_which_to_use_dynamic_periods do$/;"	f
post	deps/plug/lib/plug/router.ex	/^  defmacro post(path, options, contents \\\\ []) do$/;"	a
postprocess	deps/ecto/lib/ecto/repo/schema.ex	/^  defp postprocess(nil, [], _adapter, _schema, _metadata) do$/;"	f
postprocess	deps/ecto/lib/ecto/repo/schema.ex	/^  defp postprocess(rows, fields, _adapter, nil, _metadata) do$/;"	f
postprocess	deps/ecto/lib/ecto/repo/schema.ex	/^  defp postprocess(rows, types, adapter, schema, %{source: {prefix, source}}) do$/;"	f
postprocessor	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocessor(postprocess, _take, prefix, adapter) do$/;"	f
postprocessor	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocessor({:from, :any, postprocess}, _take, prefix, adapter) do$/;"	f
postprocessor	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp postprocessor({:from, :map, postprocess}, take, prefix, adapter) do$/;"	f
pot_files	deps/gettext/lib/gettext/extractor.ex	/^  def pot_files(app, gettext_config) do$/;"	f
pot_files_for_backends	deps/gettext/lib/gettext/extractor.ex	/^  defp pot_files_for_backends(backends) do$/;"	f
pot_path	deps/gettext/lib/gettext/extractor.ex	/^  defp pot_path(backend, domain) do$/;"	f
pow10	deps/decimal/lib/decimal.ex	/^    defp pow10(unquote(x)), do: unquote(acc)$/;"	f
pow10	deps/decimal/lib/decimal.ex	/^  defp pow10(num) when num > 104, do: pow10(104) * pow10(num-104)$/;"	f
pow10	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^    defp pow10(unquote(x)), do: unquote(acc)$/;"	f
pow10	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp pow10(num) when num > 100, do: pow10(100) * pow10(num-100)$/;"	f
pre_log	deps/db_connection/lib/db_connection.ex	/^  defp pre_log(call, query, params, opts, kind, reason, stack) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :inf} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :qNaN} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{coef: :sNaN} = num, _precision, _rounding) do$/;"	f
precision	deps/decimal/lib/decimal.ex	/^  defp precision(%Decimal{sign: sign, coef: coef, exp: exp} = num, precision, rounding) do$/;"	f
precision	deps/timex/lib/datetime/helpers.ex	/^  defp precision(0), do: 0$/;"	f
precision	deps/timex/lib/datetime/helpers.ex	/^  defp precision(n) when is_integer(n) do$/;"	f
preferred_cli_env	deps/boltex/mix.exs	/^  defp preferred_cli_env do$/;"	f
prefix	deps/ecto/integration_test/sql/migration.exs	/^  test "prefix" do$/;"	t
prefix	deps/ecto/lib/ecto/migration.ex	/^  def prefix do$/;"	f
prefix	deps/ecto/lib/ecto/migration/runner.ex	/^  def prefix do$/;"	f
prefix_model	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp prefix_model(model, opts) do$/;"	f
prefix_model	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp prefix_model(model, opts) do$/;"	f
preload	deps/ecto/lib/ecto/query.ex	/^  defmacro preload(query, bindings \\\\ [], expr) do$/;"	a
preload	deps/ecto/lib/ecto/repo.ex	/^      def preload(struct_or_structs_or_nil, preloads, opts \\\\ []) do$/;"	f
preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  def preload(nil, _repo, _preloads, _opts) do$/;"	f
preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  def preload(struct, repo, preloads, opts) when is_map(struct) do$/;"	f
preload	deps/ecto/lib/ecto/repo/preloader.ex	/^  def preload(structs, repo, preloads, opts) when is_list(structs) do$/;"	f
preload belongs_to	deps/ecto/integration_test/cases/preload.exs	/^  test "preload belongs_to" do$/;"	t
preload belongs_to with no associated entry	deps/ecto/integration_test/cases/preload.exs	/^  test "preload belongs_to with no associated entry" do$/;"	t
preload belongs_to with shared assocs	deps/ecto/integration_test/cases/preload.exs	/^  test "preload belongs_to with shared assocs" do$/;"	t
preload custom prefix from options	deps/ecto/integration_test/cases/preload.exs	/^  test "preload custom prefix from options" do$/;"	t
preload custom prefix from schema	deps/ecto/integration_test/cases/preload.exs	/^  test "preload custom prefix from schema" do$/;"	t
preload empty	deps/ecto/integration_test/cases/preload.exs	/^  test "preload empty" do$/;"	t
preload has_many	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_many" do$/;"	t
preload has_many through	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_many through" do$/;"	t
preload has_many through	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_many through-through" do$/;"	t
preload has_many through many_to_many	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_many through many_to_many" do$/;"	t
preload has_many with no associated entries	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_many with no associated entries" do$/;"	t
preload has_one	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_one" do$/;"	t
preload has_one through	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_one through" do$/;"	t
preload has_one with no associated entries	deps/ecto/integration_test/cases/preload.exs	/^  test "preload has_one with no associated entries" do$/;"	t
preload keyword query	deps/ecto/integration_test/cases/preload.exs	/^  test "preload keyword query" do$/;"	t
preload many assocs	deps/ecto/integration_test/cases/preload.exs	/^  test "preload many assocs" do$/;"	t
preload many_to_many	deps/ecto/integration_test/cases/preload.exs	/^  test "preload many_to_many" do$/;"	t
preload many_to_many with no associated entries	deps/ecto/integration_test/cases/preload.exs	/^  test "preload many_to_many with no associated entries" do$/;"	t
preload nested	deps/ecto/integration_test/cases/preload.exs	/^  test "preload nested" do$/;"	t
preload nested via custom query	deps/ecto/integration_test/cases/preload.exs	/^  test "preload nested via custom query" do$/;"	t
preload skips already loaded for cardinality many	deps/ecto/integration_test/cases/preload.exs	/^  test "preload skips already loaded for cardinality many" do$/;"	t
preload skips already loaded for cardinality one	deps/ecto/integration_test/cases/preload.exs	/^  test "preload skips already loaded for cardinality one" do$/;"	t
preload skips with association set but without id	deps/ecto/integration_test/cases/preload.exs	/^  test "preload skips with association set but without id" do$/;"	t
preload through with query	deps/ecto/integration_test/cases/preload.exs	/^  test "preload through with query" do$/;"	t
preload through with take	deps/ecto/integration_test/cases/preload.exs	/^  test "preload through with take" do$/;"	t
preload with binary_id	deps/ecto/integration_test/cases/preload.exs	/^  test "preload with binary_id" do$/;"	t
preload with function	deps/ecto/integration_test/cases/preload.exs	/^  test "preload with function" do$/;"	t
preload with query	deps/ecto/integration_test/cases/preload.exs	/^  test "preload with query" do$/;"	t
preload with take	deps/ecto/integration_test/cases/preload.exs	/^  test "preload with take" do$/;"	t
preload_assoc	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_assoc(structs, module, repo, prefix, %{cardinality: card} = assoc,$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each([], _repo, _preloads, _opts), do: []$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each([sample|_] = structs, repo, preloads, opts) do$/;"	f
preload_each	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_each(structs, _repo, [], _opts),   do: structs$/;"	f
preload_info	deps/ecto/lib/ecto/association.ex	/^  def preload_info(%{join_keys: [{_, owner_key}, {_, _}]} = refl) do$/;"	f
preload_info	deps/ecto/lib/ecto/association.ex	/^  def preload_info(%{related_key: related_key} = refl) do$/;"	f
preload_info	deps/ecto/lib/ecto/association.ex	/^  def preload_info(%{through: through} = refl) do$/;"	f
preload_prefix	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp preload_prefix(opts, sample) do$/;"	f
preloads	deps/ecto/lib/ecto/query/inspect.ex	/^  defp preloads([]),       do: []$/;"	f
preloads	deps/ecto/lib/ecto/query/inspect.ex	/^  defp preloads(preloads), do: [preload: inspect(preloads)]$/;"	f
prelude	deps/phoenix/lib/phoenix/router.ex	/^  defp prelude() do$/;"	f
prepare	deps/db_connection/lib/db_connection.ex	/^  def prepare(conn, query, opts \\\\ []) do$/;"	f
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:all, query),$/;"	f
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:delete_all, query),$/;"	f
prepare	deps/ecto/lib/ecto/adapters/sql.ex	/^      def prepare(:update_all, query),$/;"	f
prepare	deps/ecto/lib/ecto/embedded.ex	/^  def prepare(changeset, adapter, repo_action) do$/;"	f
prepare	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare(%{types: types} = changeset, embeds, adapter, repo_action) do$/;"	f
prepare	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare(changeset, embeds, _adapter, _repo_action) when embeds == %{} do$/;"	f
prepare	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare(query, operation, adapter, counter) do$/;"	f
prepare	deps/phoenix/lib/phoenix/router.ex	/^      defp prepare(conn) do$/;"	f
prepare	deps/postgrex/lib/postgrex.ex	/^  def prepare(conn, name, statement, opts \\\\ []) do$/;"	f
prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp prepare(%{sync: :flush}) do$/;"	f
prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp prepare(%{sync: :sync}) do$/;"	f
prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp prepare(opts) when is_list(opts) do$/;"	f
prepare!	deps/db_connection/lib/db_connection.ex	/^  def prepare!(conn, query, opts \\\\ []) do$/;"	f
prepare!	deps/postgrex/lib/postgrex.ex	/^  def prepare!(conn, name, statement, opts \\\\ []) do$/;"	f
prepare_additional_headers	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_additional_headers(headers, %Email{headers: additional_headers}) do$/;"	f
prepare_assigns	deps/phoenix/lib/phoenix/controller.ex	/^  defp prepare_assigns(conn, assigns, format) do$/;"	f
prepare_assigns	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp prepare_assigns(email, assigns, format) do$/;"	f
prepare_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare_assocs(query) do$/;"	f
prepare_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_assocs(_query, _ix, []), do: :ok$/;"	f
prepare_assocs	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_assocs(query, ix, assocs) do$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_bcc(body, %Email{bcc: []}), do: body$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_bcc(body, %Email{bcc: bcc}), do: Map.put(body, :bcc, prepare_recipients(bcc))$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_bcc(body, %Email{bcc: []}), do: body$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_bcc(body, %Email{bcc: bcc}), do: prepare_recipients(body, bcc, "bcc")$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_bcc(body, %Email{bcc: []}), do: body$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_bcc(body, %Email{bcc: bcc}), do: Map.put(body, "Bcc", prepare_recipients(bcc))$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_bcc(personalizations, %Email{bcc: []}), do: personalizations$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_bcc(personalizations, %Email{bcc: bcc}), do: Map.put(personalizations, :bcc, bcc |> Enum.map(&email_item(&1)))$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_bcc(headers, %Email{bcc: []}), do: headers$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_bcc(headers, %Email{bcc: bcc}), do: [{"Bcc", render_recipient(bcc)} | headers]$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_bcc(body, %{bcc: []}), do: body$/;"	f
prepare_bcc	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_bcc(body, %{bcc: bcc, to: to}) do$/;"	f
prepare_body	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_body(email) do$/;"	f
prepare_body	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_body(email, config) do$/;"	f
prepare_body	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_body(email) do$/;"	f
prepare_body	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_body(%Email{} = email) do$/;"	f
prepare_body	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_body(%{$/;"	f
prepare_cache	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare_cache(query, operation, adapter, counter) do$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_cc(body, %Email{cc: []}), do: body$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_cc(body, %Email{cc: cc}), do: Map.put(body, :cc, prepare_recipients(cc))$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_cc(body, %Email{cc: []}), do: body$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_cc(body, %Email{cc: cc}), do: prepare_recipients(body, cc, "cc")$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_cc(body, %Email{cc: []}), do: body$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_cc(body, %Email{cc: cc}), do: Map.put(body, "Cc", prepare_recipients(cc))$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_cc(personalizations, %Email{cc: []}), do: personalizations$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_cc(personalizations, %Email{cc: cc}), do: Map.put(personalizations, :cc, cc |> Enum.map(&email_item(&1)))$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_cc(headers, %Email{cc: []}), do: headers$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_cc(headers, %Email{cc: cc}), do: [{"Cc", render_recipient(cc)} | headers]$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_cc(body, %{cc: []}), do: body$/;"	f
prepare_cc	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_cc(body, %{cc: cc, to: to}) do$/;"	f
prepare_cfg	deps/cors_plug/lib/cors_plug.ex	/^  defp prepare_cfg(options, env) do$/;"	f
prepare_cfg	deps/cors_plug/lib/cors_plug.ex	/^  defp prepare_cfg(options, nil), do: Keyword.merge(defaults(), options)$/;"	f
prepare_changes	deps/ecto/lib/ecto/changeset.ex	/^  def prepare_changes(%Changeset{prepare: prepare} = changeset, function) when is_function(function, 1) do$/;"	f
prepare_content	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_content(body, %Email{html_body: html, text_body: text}) do$/;"	f
prepare_content	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_content(body, %Email{html_body: html}), do: Map.put(body, :content, [%{type: "text\/html", value: html}])$/;"	f
prepare_content	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_content(body, %Email{text_body: text}), do: Map.put(body, :content, [%{type: "text\/plain", type: text}])$/;"	f
prepare_custom_vars	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_custom_vars(body, %Email{provider_options: %{custom_vars: my_vars}}) do$/;"	f
prepare_custom_vars	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_custom_vars(body, _email), do: body$/;"	f
prepare_custom_vars	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_custom_vars(personalizations, %Email{provider_options: %{custom_args: my_vars}}) do$/;"	f
prepare_custom_vars	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_custom_vars(personalizations, _email), do: personalizations$/;"	f
prepare_declare	deps/db_connection/lib/db_connection.ex	/^  defp prepare_declare(conn, query, params, opts) do$/;"	f
prepare_declare_log	deps/db_connection/lib/db_connection.ex	/^  defp prepare_declare_log(conn, query, params, meter, cursor, opts) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :many} = embed, changesets, adapter, repo_action) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :one} = embed, changeset, adapter, repo_action) do$/;"	f
prepare_each	deps/ecto/lib/ecto/embedded.ex	/^  defp prepare_each(%{cardinality: :one}, nil, _adapter, _repo_action) do$/;"	f
prepare_execute	deps/db_connection/lib/db_connection.ex	/^  def prepare_execute(conn, query, params, opts \\\\ []) do$/;"	f
prepare_execute	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def prepare_execute(conn, name, sql, params, opts) do$/;"	f
prepare_execute	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def prepare_execute(conn, name, sql, params, opts) do$/;"	f
prepare_execute!	deps/db_connection/lib/db_connection.ex	/^  def prepare_execute!(conn, query, params, opts \\\\ []) do$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_from(body, %Email{from: from}), do: Map.put(body, :from, prepare_recipient(from))$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_from(body, %Email{from: {name, address}}) do$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_from(body, %Email{from: {nil, address}}), do: Map.put(body, :from_email, address)$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_from(body, %Email{from: from}), do: Map.put(body, "From", prepare_recipient(from))$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_from(body, %Email{from: from}), do: Map.put(body, :from, from |> email_item)$/;"	f
prepare_from	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_from(headers, %Email{from: from}), do: [{"From", render_recipient(from)} | headers]$/;"	f
prepare_headers	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_headers(email, config) do$/;"	f
prepare_headers	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_headers(config) do$/;"	f
prepare_headers	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_headers(%Email{} = email) do$/;"	f
prepare_headers	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_headers(_email, config) do$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_html(body, %{html_body: html_body}), do: Map.put(body, :html, html_body)$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_html(body, %{html_body: nil}), do: body$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_html(body, %{html_body: html_body}), do: Map.put(body, :html, html_body)$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_html(body, %{html_body: nil}), do: body$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_html(body, %Email{html_body: html_body}), do: Map.put(body, "HtmlBody", html_body)$/;"	f
prepare_html	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_html(body, %Email{html_body: nil}), do: body$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{assoc: {ix, assoc}, qual: qual, on: on} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{source: %Ecto.Query{from: source} = join_query, qual: qual, on: on} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([%JoinExpr{source: source} = join|t],$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins([], _query, joins, sources, tail_sources, _counter, _offset, _adapter) do$/;"	f
prepare_joins	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_joins(query, sources, offset, adapter) do$/;"	f
prepare_keys	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp prepare_keys(_, _) do$/;"	f
prepare_keys	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp prepare_keys(salt, log_rounds) when log_rounds in 4..31 do$/;"	f
prepare_message	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_message(email) do$/;"	f
prepare_message	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    def prepare_message(email) do$/;"	f
prepare_mime_version	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_mime_version(headers), do: [{"Mime-Version", "1.0"} | headers]$/;"	f
prepare_options	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    def prepare_options(config) do$/;"	f
prepare_part	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_part(subtype, content) do$/;"	f
prepare_parts	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_parts(headers, %Email{html_body: html_body, text_body: nil}) do$/;"	f
prepare_parts	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_parts(headers, %Email{html_body: html_body, text_body: text_body}) do$/;"	f
prepare_parts	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_parts(headers, %Email{html_body: nil, text_body: text_body}) do$/;"	f
prepare_personalizations	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_personalizations(body, email) do$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_recipient({"", address}), do: address$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_recipient({name, address}), do: "#{name} <#{address}>"$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_recipient({"", email}, type), do: %{email: email, type: type}$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_recipient({name, email}, type), do: %{email: email, name: name, type: type}$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_recipient({"", address}), do: address$/;"	f
prepare_recipient	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_recipient({name, address}), do: "\\"#{name}\\" <#{address}>"$/;"	f
prepare_recipients	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_recipients(recipients) do$/;"	f
prepare_recipients	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_recipients(body, recipients, type \\\\ "to") do$/;"	f
prepare_recipients	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_recipients(recipients) do$/;"	f
prepare_recipients	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_recipients(recipients, to) do$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_reply_to(body, %Email{reply_to: nil}), do: body$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_reply_to(body, %Email{reply_to: {_name, address}}), do: Map.put(body, "h:Reply-To", address)$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_reply_to(body, %Email{reply_to: nil}), do: body$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_reply_to(body, %Email{reply_to: {_name, address}}) do$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_reply_to(body, %Email{reply_to: nil}), do: body$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_reply_to(body, %Email{reply_to: {_name, address}}), do: Map.put(body, "ReplyTo", address)$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_reply_to(body, %Email{reply_to: nil}), do: body$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_reply_to(body, %Email{reply_to: reply_to}), do: Map.put(body, :reply_to, reply_to |> email_item)$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_reply_to(headers, %Email{reply_to: nil}), do: headers$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_reply_to(headers, %Email{reply_to: reply_to}), do: [{"Reply-To", render_recipient(reply_to)} | headers]$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_reply_to(body, %{reply_to: nil}), do: body$/;"	f
prepare_reply_to	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp prepare_reply_to(body, %{reply_to: reply_to}) do$/;"	f
prepare_send_download	deps/phoenix/lib/phoenix/controller.ex	/^  defp prepare_send_download(conn, filename, opts) do$/;"	f
prepare_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_source(_query, {:fragment, _, _} = source, _adapter),$/;"	f
prepare_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_source(_query, {nil, schema}, _adapter) when is_atom(schema) and schema != nil,$/;"	f
prepare_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_source(_query, {source, schema}, _adapter) when is_binary(source) and is_atom(schema),$/;"	f
prepare_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepare_source(query, %Ecto.SubQuery{query: inner_query} = subquery, adapter) do$/;"	f
prepare_sources	deps/ecto/lib/ecto/query/planner.ex	/^  def prepare_sources(%{from: from} = query, adapter) do$/;"	f
prepare_start_interface	deps/exactor/lib/exactor/operations.ex	/^  def prepare_start_interface(fun, interface_matches, options, global_options) do$/;"	f
prepare_stream	deps/db_connection/lib/db_connection.ex	/^  def prepare_stream(%DBConnection{} = conn, query, params, opts) do$/;"	f
prepare_stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp prepare_stream(repo, prepared, params, mapper, opts) do$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_subject(body, %Email{subject: subject}), do: Map.put(body, :subject, subject)$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_subject(body, %Email{subject: subject}), do: Map.put(body, :subject, subject)$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_subject(body, %Email{subject: ""}), do: body$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_subject(body, %Email{subject: subject}), do: Map.put(body, "Subject", subject)$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_subject(body, %Email{subject: subject}), do: Map.put(body, :subject, subject)$/;"	f
prepare_subject	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_subject(headers, %Email{subject: subject}), do: [{"Subject", subject} | headers]$/;"	f
prepare_substitutions	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_substitutions(personalizations, %Email{provider_options: %{substitutions: substitutions}}) do$/;"	f
prepare_substitutions	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_substitutions(personalizations, _email), do: personalizations$/;"	f
prepare_template	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_template(body, %Email{provider_options: provider_options}),$/;"	f
prepare_template	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_template(body, _email), do: body$/;"	f
prepare_template_id	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_template_id(body, %Email{provider_options: %{template_id: template_id}}) do$/;"	f
prepare_template_id	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_template_id(body, _email), do: body$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_text(body, %{text_body: nil}), do: body$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_text(body, %{text_body: text_body}), do: Map.put(body, :text, text_body)$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_text(body, %{text_body: nil}), do: body$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_text(body, %{text_body: text_body}), do: Map.put(body, :text, text_body)$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_text(body, %Email{text_body: nil}), do: body$/;"	f
prepare_text	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_text(body, %Email{text_body: text_body}), do: Map.put(body, "TextBody", text_body)$/;"	f
prepare_to	deps/swoosh/lib/swoosh/adapters/mailgun.ex	/^  defp prepare_to(body, %Email{to: to}), do: Map.put(body, :to, prepare_recipients(to))$/;"	f
prepare_to	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp prepare_to(body, %Email{to: to}), do: prepare_recipients(body, to)$/;"	f
prepare_to	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp prepare_to(body, %Email{to: to}), do: Map.put(body, "To", prepare_recipients(to))$/;"	f
prepare_to	deps/swoosh/lib/swoosh/adapters/sendgrid.ex	/^  defp prepare_to(personalizations, %Email{to: to}), do: Map.put(personalizations, :to, to |> Enum.map(&email_item(&1)))$/;"	f
prepare_to	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    defp prepare_to(headers, %Email{to: to}), do: [{"To", render_recipient(to)} | headers]$/;"	f
prepend	deps/ecto/lib/ecto/multi.ex	/^  def prepend(lhs, rhs) do$/;"	f
prepend_if	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepend_if(cache, false, _prepend), do: cache$/;"	f
prepend_if	deps/ecto/lib/ecto/query/planner.ex	/^  defp prepend_if(cache, true, prepend), do: prepend ++ cache$/;"	f
prepend_if_not_empty	deps/gettext/lib/gettext/interpolation.ex	/^  defp prepend_if_not_empty("", list), do: list$/;"	f
prepend_if_not_empty	deps/gettext/lib/gettext/interpolation.ex	/^  defp prepend_if_not_empty(string, list), do: [string | list]$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(row, [], _all_nil?, _prefix, _adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(row, [source | sources], all_nil?, prefix, adapter) do$/;"	f
preprocess	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp preprocess(row, [{:source, source_schema, fields} | sources], all_nil?, prefix, adapter) do$/;"	f
pretty	deps/ecto/lib/ecto/exceptions.ex	/^  defp pretty(term) do$/;"	f
pretty	deps/poison/lib/poison/encoder.ex	/^      defp pretty(options) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk(%Ecto.Query.Tagged{value: v, type: type} = tagged, kind, query, expr, acc, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk(:update, query, expr, counter, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk(kind, query, expr, counter, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk(list, kind, query, expr, acc, adapter) when is_list(list) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk(other, _kind, _query, _expr, acc, _adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({:^, meta, [ix]}, _kind, _query, _expr, acc, _adapter) when is_integer(ix) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({:in, in_meta, [left, {:^, meta, [param]}]}, kind, query, expr, acc, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({:type, _, [arg, type]}, kind, query, expr, acc, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({left, meta, args}, kind, query, expr, acc, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({left, right}, kind, query, expr, acc, adapter) do$/;"	f
prewalk	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk({{:., dot_meta, [{:&, amp_meta, [ix]}, field]}, meta, []},$/;"	f
prewalk_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk_source(%Ecto.SubQuery{query: inner_query} = subquery, _kind, query, _expr, counter, adapter) do$/;"	f
prewalk_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk_source(source, _kind, _query, _expr, acc, _adapter) do$/;"	f
prewalk_source	deps/ecto/lib/ecto/query/planner.ex	/^  defp prewalk_source({:fragment, meta, fragments}, kind, query, expr, acc, adapter) do$/;"	f
primary_key	deps/ecto/lib/ecto.ex	/^  def primary_key(%{__struct__: schema} = struct) do$/;"	f
primary_key!	deps/ecto/lib/ecto.ex	/^  def primary_key!(%{__struct__: schema} = struct) do$/;"	f
primary_key!	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp primary_key!(%{autogenerate_id: {key, :id}}, [key]), do: key$/;"	f
primary_key!	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp primary_key!(%{schema: schema}, returning) do$/;"	f
primary_key!	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp primary_key!(_, []), do: nil$/;"	f
primary_key!	deps/ecto/lib/ecto/association.ex	/^  defp primary_key!(nil), do: []$/;"	f
primary_key!	deps/ecto/lib/ecto/association.ex	/^  defp primary_key!(struct), do: Ecto.primary_key!(struct)$/;"	f
primitive types	deps/ecto/integration_test/cases/type.exs	/^  test "primitive types" do$/;"	t
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?(_), do: false$/;"	f
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?(base) when base in @base, do: true$/;"	f
primitive?	deps/ecto/lib/ecto/type.ex	/^  def primitive?({composite, _}) when composite in @composite, do: true$/;"	f
print_installed_options	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def print_installed_options(_config) do$/;"	f
print_installed_options	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def print_installed_options(_config) do$/;"	f
print_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp print_instructions(%{instructions: instructions} = config) do$/;"	f
print_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp print_instructions(%{silent: true} = config), do: config$/;"	f
print_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp print_instructions(%{instructions: instructions} = config) do$/;"	f
print_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp print_instructions(%{silent: true} = config), do: config$/;"	f
print_shell_instructions	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  def print_shell_instructions(%Context{schema: schema}) do$/;"	f
print_shell_instructions	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  def print_shell_instructions(%Context{schema: schema} = context) do$/;"	f
print_shell_instructions	deps/phoenix/lib/mix/tasks/phx.gen.json.ex	/^  def print_shell_instructions(%Context{schema: schema} = context) do$/;"	f
print_shell_instructions	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def print_shell_instructions(%Schema{} = schema) do$/;"	f
print_success	deps/distillery/lib/distillery/tasks/release.ex	/^  defp print_success(%Release{profile: %Profile{output_dir: output_dir, executable: executable?}}, app) do$/;"	f
print_verbose_info	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp print_verbose_info(exec, args) do$/;"	f
priv_prefix	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  defp priv_prefix(path, app_dir) do$/;"	f
private page protected	deps/coherence/test/controllers/rememberable_test.exs	/^    test "private page protected", %{conn: conn} do$/;"	t
problem_confirming_user_account	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def problem_confirming_user_account, do: dgettext(@domain, "Problem confirming user account. Please contact the system administrator.")$/;"	f
problem_confirming_user_account	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def problem_confirming_user_account, do: dgettext(@domain, "Problem confirming user account. Please contact the system administrator.")$/;"	f
problem_confirming_user_account	deps/coherence/test/support/messages.exs	/^  def problem_confirming_user_account, do: dgettext(@domain, "Problem confirming user account. Please contact the system administrator.")$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process([value | row], {:value, :any}, _from, _prefix, _adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process([value | row], {:value, type}, _from, _prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, value, _from, _prefix, _adapter)$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:list, args}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:map, args}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:map, data, args}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:merge, left, right}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:source, :from}, from, _prefix, _adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:source, source_schema, fields}, _from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:struct, struct, args}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:struct, struct, data, args}, from, prefix, adapter) do$/;"	f
process	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process(row, {:tuple, args}, from, prefix, adapter) do$/;"	f
process_args	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process_args(args, row, from, prefix, adapter) do$/;"	f
process_children	deps/ecto/lib/ecto/repo/schema.ex	/^  defp process_children(changeset, assocs, user_changeset, opts) do$/;"	f
process_current	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp process_current(current, get_pks) do$/;"	f
process_current	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp process_current(nil, _get_pks),$/;"	f
process_dumpers	deps/ecto/lib/ecto/type.ex	/^  defp process_dumpers([], {:ok, _} = acc, _adapter),$/;"	f
process_dumpers	deps/ecto/lib/ecto/type.ex	/^  defp process_dumpers([fun|t], {:ok, value}, adapter) when is_function(fun),$/;"	f
process_dumpers	deps/ecto/lib/ecto/type.ex	/^  defp process_dumpers([type|t], {:ok, value}, adapter),$/;"	f
process_dumpers	deps/ecto/lib/ecto/type.ex	/^  defp process_dumpers(_, :error, _adapter),$/;"	f
process_file	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp process_file(file_stream) do$/;"	f
process_file	deps/tzdata/lib/tzdata/parser.ex	/^  def process_file(file_stream) do$/;"	f
process_file	deps/tzdata/lib/tzdata/table_parser.ex	/^  def process_file(file_stream) do$/;"	f
process_kv	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process_kv(kv, row, from, prefix, adapter) do$/;"	f
process_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp process_line(line) do$/;"	f
process_line	deps/tzdata/lib/tzdata/table_parser.ex	/^  defp process_line(line) do$/;"	f
process_link	deps/tzdata/lib/tzdata/parser.ex	/^  def process_link(line) do$/;"	f
process_loaders	deps/ecto/lib/ecto/type.ex	/^  defp process_loaders([], {:ok, _} = acc, _adapter),$/;"	f
process_loaders	deps/ecto/lib/ecto/type.ex	/^  defp process_loaders([fun|t], {:ok, value}, adapter) when is_function(fun),$/;"	f
process_loaders	deps/ecto/lib/ecto/type.ex	/^  defp process_loaders([type|t], {:ok, value}, adapter),$/;"	f
process_loaders	deps/ecto/lib/ecto/type.ex	/^  defp process_loaders(_, :error, _adapter),$/;"	f
process_param	deps/ecto/lib/ecto/changeset.ex	/^  defp process_param(key, params, types, data, empty_values, defaults, {changes, errors, valid?}) do$/;"	f
process_parents	deps/ecto/lib/ecto/repo/schema.ex	/^  defp process_parents(%{changes: changes} = changeset, assocs, opts) do$/;"	f
process_rule	deps/tzdata/lib/tzdata/parser.ex	/^  def process_rule(line) do$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to("max"), do: :max$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to("only"), do: :only$/;"	f
process_rule_to	deps/tzdata/lib/tzdata/parser.ex	/^  defp process_rule_to(val), do: val |> to_int$/;"	f
process_source	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process_source({source, schema}, types, row, all_nil?, prefix, adapter) do$/;"	f
process_tz_list	deps/tzdata/lib/tzdata/parser.ex	/^  def process_tz_list([ head | tail ]) do$/;"	f
process_tz_list	deps/tzdata/lib/tzdata/parser.ex	/^  def process_tz_list([]), do: []$/;"	f
process_update	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp process_update(data, args, row, from, prefix, adapter) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_no_until, captured, zone_name, zone_lines, []) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_no_until, captured, zone_name, zone_lines, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:continuation_with_until, captured, zone_name, zone_lines, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_no_until, captured, []) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_no_until, captured, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone(:head_with_until, captured, [head|tail]) do$/;"	f
process_zone	deps/tzdata/lib/tzdata/parser.ex	/^  def process_zone([head|tail]) do$/;"	f
profile_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  defp profile_link(current_user, conn) do$/;"	f
profile_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  defp profile_link(current_user, conn) do$/;"	f
profile_link	deps/coherence/test/support/view_helpers.exs	/^  defp profile_link(current_user, conn) do$/;"	f
project	apps/flexcility/mix.exs	/^  def project do$/;"	f
project	apps/flexcility_web/mix.exs	/^  def project do$/;"	f
project	deps/bcrypt_elixir/mix.exs	/^  def project do$/;"	f
project	deps/bolt_sips/mix.exs	/^  def project do$/;"	f
project	deps/boltex/mix.exs	/^  def project do$/;"	f
project	deps/coherence/mix.exs	/^  def project do$/;"	f
project	deps/combine/mix.exs	/^  def project do$/;"	f
project	deps/comeonin/mix.exs	/^  def project do$/;"	f
project	deps/con_cache/mix.exs	/^  def project do$/;"	f
project	deps/connection/mix.exs	/^  def project do$/;"	f
project	deps/cors_plug/mix.exs	/^  def project do$/;"	f
project	deps/db_connection/mix.exs	/^  def project do$/;"	f
project	deps/decimal/mix.exs	/^  def project() do$/;"	f
project	deps/distillery/mix.exs	/^  def project do$/;"	f
project	deps/ecto/mix.exs	/^  def project do$/;"	f
project	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^      def project() do$/;"	f
project	deps/elixir_make/mix.exs	/^  def project do$/;"	f
project	deps/exactor/mix.exs	/^  def project do$/;"	f
project	deps/fuzzyurl/mix.exs	/^  def project do$/;"	f
project	deps/gettext/lib/gettext.ex	/^      def project do$/;"	f
project	deps/gettext/lib/gettext.ex	/^      def project() do$/;"	f
project	deps/gettext/mix.exs	/^  def project do$/;"	f
project	deps/mime/mix.exs	/^  def project do$/;"	f
project	deps/phoenix/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_ecto/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_html/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_pubsub/mix.exs	/^  def project do$/;"	f
project	deps/phoenix_swoosh/mix.exs	/^  def project do$/;"	f
project	deps/plug/mix.exs	/^  def project do$/;"	f
project	deps/poison/mix.exs	/^  def project do$/;"	f
project	deps/postgrex/mix.exs	/^  def project do$/;"	f
project	deps/retry/mix.exs	/^  def project do$/;"	f
project	deps/swoosh/mix.exs	/^  def project do$/;"	f
project	deps/timex/mix.exs	/^  def project do$/;"	f
project	deps/timex_ecto/mix.exs	/^  def project do$/;"	f
project	deps/tzdata/mix.exs	/^  def project do$/;"	f
project	deps/uuid/mix.exs	/^  def project do$/;"	f
project	mix.exs	/^  def project do$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(_value), do: "'null'"$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(boolean_value), do: boolean_value$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(float_value), do: float_value$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(integer_value), do: integer_value$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(string_value), do: "'#{string_value}'"$/;"	f
property_from_value	apps/flexcility/lib/flexcility/graph/property.ex	/^    def property_from_value(value)$/;"	f
protect_from_forgery	deps/phoenix/lib/phoenix/controller.ex	/^  def protect_from_forgery(conn, opts \\\\ []) do$/;"	f
protected?	deps/gettext/lib/gettext/po/translations.ex	/^  def protected?(%{__struct__: s, references: []}, _pattern) when is_translation(s),$/;"	f
protected?	deps/gettext/lib/gettext/po/translations.ex	/^  def protected?(%{__struct__: s, references: refs}, pattern) when is_translation(s),$/;"	f
protected?	deps/gettext/lib/gettext/po/translations.ex	/^  def protected?(_t, nil),$/;"	f
protector_meters	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp protector_meters(opts) do$/;"	f
protocol_version	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def protocol_version, do: @protocol_version$/;"	f
proxy	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    defp proxy(fun, {conn_mod, state, in_transaction?}, args) do$/;"	f
proxy_io	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp proxy_io(fun) do$/;"	f
proxy_pool	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp proxy_pool(repo) do$/;"	f
prune	deps/plug/lib/plug/conn/query.ex	/^  defp prune([?&|t]), do: t$/;"	f
prune	deps/plug/lib/plug/conn/query.ex	/^  defp prune([]), do: []$/;"	f
prune_bom	deps/gettext/lib/gettext/po.ex	/^  defp prune_bom(@bom <> str, file) do$/;"	f
prune_bom	deps/gettext/lib/gettext/po.ex	/^  defp prune_bom(str, _) when is_binary(str) do$/;"	f
prune_bom	deps/gettext/lib/gettext/po.ex	/^  defp prune_bom(str, file)$/;"	f
prune_unmerged	deps/gettext/lib/gettext/extractor.ex	/^  defp prune_unmerged(path, gettext_config) do$/;"	f
publish	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp publish(conn, server_ref, endpoint, opts) do$/;"	f
publish_reply	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp publish_reply(msg, state) do$/;"	f
published	deps/ecto/lib/ecto/query.ex	/^      def published(query) do$/;"	f
published_multi	deps/ecto/lib/ecto/query.ex	/^      def published_multi(query) do$/;"	f
pubsub	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp pubsub() do$/;"	f
pubsub_children	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp pubsub_children(mod, conf) do$/;"	f
purge	deps/con_cache/lib/con_cache/owner.ex	/^  defp purge(%__MODULE__{current_time: current_time, pending: pending, ttls: ttls, on_expire: on_expire} = state) do$/;"	f
purge	deps/ecto/integration_test/cases/migrator.exs	/^  defp purge(modules) do$/;"	f
push	deps/phoenix/lib/phoenix/channel.ex	/^  def push(socket, event, message) do$/;"	f
push	deps/phoenix/lib/phoenix/channel/server.ex	/^  def push(_, _, _, _, _), do: raise_invalid_message()$/;"	f
push	deps/phoenix/lib/phoenix/channel/server.ex	/^  def push(pid, topic, event, payload, serializer)$/;"	f
push	deps/phoenix/lib/phoenix/router/scope.ex	/^  def push(module, opts) when is_list(opts) do$/;"	f
push	deps/phoenix/lib/phoenix/router/scope.ex	/^  def push(module, path) when is_binary(path) do$/;"	f
push	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def push(socket, event, payload \\\\ %{}) do$/;"	f
push	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  def push(%State{mode: :normal} = _parent, generations, %State{mode: :delta} = delta, opts) do$/;"	f
push	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  def push(%State{mode: :normal} = parent, [] = _generations, %State{mode: :delta} = delta, opts) do$/;"	f
push	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def push(email) do$/;"	f
push_delta_generation	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp push_delta_generation(%{deltas: deltas} = state, %State{mode: :delta} = delta) do$/;"	f
push_delta_generation	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp push_delta_generation(state, {%State{mode: :normal}, _}) do$/;"	f
put	deps/con_cache/lib/con_cache.ex	/^  def put(cache_id, key, value),$/;"	f
put	deps/con_cache/lib/con_cache/operations.ex	/^  def put(cache, key, value) do$/;"	f
put	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  defp put(state, topic, join_ref, channel_pid) do$/;"	f
put	deps/plug/lib/plug/router.ex	/^  defmacro put(path, options, contents \\\\ []) do$/;"	a
put	deps/plug/lib/plug/session/cookie.ex	/^  def put(conn, _sid, term, opts) do$/;"	f
put	deps/plug/lib/plug/session/ets.ex	/^  def put(_conn, nil, data, table) do$/;"	f
put	deps/plug/lib/plug/session/ets.ex	/^  def put(_conn, sid, data, table) do$/;"	f
put	deps/postgrex/lib/postgrex/parameters.ex	/^  def put(ref, name, value) do$/;"	f
put_action	deps/ecto/lib/ecto/multi.ex	/^  defp put_action(%{action: action} = changeset, action) do$/;"	f
put_action	deps/ecto/lib/ecto/multi.ex	/^  defp put_action(%{action: nil} = changeset, action) do$/;"	f
put_action	deps/ecto/lib/ecto/multi.ex	/^  defp put_action(%{action: original}, action) do$/;"	f
put_assoc	deps/ecto/lib/ecto/changeset.ex	/^  def put_assoc(%Changeset{} = changeset, name, value, opts \\\\ []) do$/;"	f
put_bcc	deps/swoosh/lib/swoosh/email.ex	/^  def put_bcc(%__MODULE__{} = email, recipient) do$/;"	f
put_bcc	deps/swoosh/lib/swoosh/email.ex	/^  def put_bcc(%__MODULE__{} = email, recipients) when is_list(recipients) do$/;"	f
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(%Conn{query_string: "vsn=" <> _} = conn, qs_cache, _et_cache, _et_generation, _file_info, _path)$/;"	f
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(conn, _, _, _, _, _) do$/;"	f
put_cache_header	deps/plug/lib/plug/static.ex	/^  defp put_cache_header(conn, _qs_cache, et_cache, et_generation, file_info, path) when is_binary(et_cache) do$/;"	f
put_cc	deps/swoosh/lib/swoosh/email.ex	/^  def put_cc(%__MODULE__{} = email, recipient) do$/;"	f
put_cc	deps/swoosh/lib/swoosh/email.ex	/^  def put_cc(%__MODULE__{} = email, recipients) when is_list(recipients) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  def put_change(%Changeset{types: nil}, _key, _value) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  def put_change(%Changeset{types: types} = changeset, key, value) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  defp put_change(data, changes, errors, valid?, key, value, _type) do$/;"	f
put_change	deps/ecto/lib/ecto/changeset.ex	/^  defp put_change(data, changes, errors, valid?, key, value, {tag, relation})$/;"	f
put_chars	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  defp put_chars(from, reply, chars, output) do$/;"	f
put_conn	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp put_conn(pool, conn) do$/;"	f
put_context	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp put_context(%State{delta: delta, replica: rep} = state, new_ctx) do$/;"	f
put_cookie	deps/plug/lib/plug/session.ex	/^  defp put_cookie(value, conn, %{cookie_opts: cookie_opts, key: key}),$/;"	f
put_credentials	deps/coherence/lib/coherence/plugs/authorization/credential_store/agent.ex	/^  def put_credentials(credentials, user_data) do$/;"	f
put_credentials	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  def put_credentials({credentials, user_data, id_key}) do$/;"	f
put_credentials	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def put_credentials(_, _, _), do: nil$/;"	f
put_credentials	deps/coherence/lib/coherence/plugs/authorization/db_store.ex	/^  def put_credentials(resource, credentials, id_key)$/;"	f
put_credentials	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^        def put_credentials(user, creds , _) do$/;"	f
put_embed	deps/ecto/lib/ecto/changeset.ex	/^  def put_embed(%Changeset{} = changeset, name, value, opts \\\\ []) do$/;"	f
put_flash	deps/phoenix/lib/phoenix/controller.ex	/^  def put_flash(conn, key, message) do$/;"	f
put_flash	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate put_flash(conn, key, value), to: Phoenix.Controller$/;"	d
put_format	deps/phoenix/lib/phoenix/controller.ex	/^  def put_format(conn, format), do: put_private(conn, :phoenix_format, format)$/;"	f
put_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  def put_heartbeat(replicas, {name, vsn}) do$/;"	f
put_hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp put_hsts_header(conn, _), do: conn$/;"	f
put_hsts_header	deps/plug/lib/plug/ssl.ex	/^  defp put_hsts_header(conn, hsts_header) when is_binary(hsts_header) do$/;"	f
put_in_body	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp put_in_body(_, body_acc), do: body_acc$/;"	f
put_in_body	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp put_in_body({:template_id, val}, body_acc),$/;"	f
put_in_body	deps/swoosh/lib/swoosh/adapters/postmark.ex	/^  defp put_in_body({:template_model, val}, body_acc),$/;"	f
put_info	deps/db_connection/lib/db_connection.ex	/^  defp put_info(conn, status, conn_state) do$/;"	f
put_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout(%Plug.Conn{state: state} = conn, layout) do$/;"	f
put_layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def put_layout(email, layout) do$/;"	f
put_layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "put_layout\/2", %{email: email} do$/;"	t
put_layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout_formats(%Plug.Conn{state: state} = conn, formats)$/;"	f
put_layout_formats	deps/phoenix/lib/phoenix/controller.ex	/^  def put_layout_formats(_conn, _formats) do$/;"	f
put_locale	deps/gettext/lib/gettext.ex	/^  def put_locale(_, locale),$/;"	f
put_locale	deps/gettext/lib/gettext.ex	/^  def put_locale(backend, locale) when is_binary(locale),$/;"	f
put_meta	deps/ecto/lib/ecto.ex	/^  def put_meta(struct, opts) do$/;"	f
put_new	deps/plug/lib/plug/session/ets.ex	/^  defp put_new(data, table, counter \\\\ 0)$/;"	f
put_new_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp put_new_action(%{action: action} = changeset, new_action) when is_nil(action),$/;"	f
put_new_action	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp put_new_action(changeset, _new_action),$/;"	f
put_new_layout	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_layout(%Plug.Conn{state: state} = conn, layout)$/;"	f
put_new_layout	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def put_new_layout(email, layout)$/;"	f
put_new_monitor	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  defp put_new_monitor(%{monitors: monitors} = state, pid) do$/;"	f
put_new_topics	deps/phoenix/lib/phoenix/channel.ex	/^        defp put_new_topics(socket, topics) do$/;"	f
put_new_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_view(%Plug.Conn{state: state} = conn, module)$/;"	f
put_new_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_new_view(_conn, _module) do$/;"	f
put_new_view	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def put_new_view(email, module) do$/;"	f
put_pass_hash	deps/comeonin/lib/comeonin/base.ex	/^          defp put_pass_hash(%Ecto.Changeset{valid?: true, changes:$/;"	f
put_pass_hash	deps/comeonin/lib/comeonin/base.ex	/^          defp put_pass_hash(changeset), do: changeset$/;"	f
put_pending_clock	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp put_pending_clock(state, clocks) do$/;"	f
put_presence	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp put_presence(state, pid, topic, key, meta, prev_meta \\\\ nil) do$/;"	f
put_presences	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp put_presences(state, %State{} = presences), do: %{state | presences: presences}$/;"	f
put_private	deps/plug/lib/plug/conn.ex	/^  def put_private(%Conn{private: private} = conn, key, value) when is_atom(key) do$/;"	f
put_private	deps/swoosh/lib/swoosh/email.ex	/^  def put_private(%__MODULE__{private: private} = email, key, value) when is_atom(key) do$/;"	f
put_provider_option	deps/swoosh/lib/swoosh/email.ex	/^  def put_provider_option(%__MODULE__{provider_options: provider_options} = email, key, value) when is_atom(key) do$/;"	f
put_relation	deps/ecto/lib/ecto/changeset.ex	/^  defp put_relation(_tag, %{types: nil}, _name, _value, _opts) do$/;"	f
put_relation	deps/ecto/lib/ecto/changeset.ex	/^  defp put_relation(tag, changeset, name, value, _opts) do$/;"	f
put_repo_and_action	deps/ecto/lib/ecto/repo/schema.ex	/^  defp put_repo_and_action(%{action: :ignore, valid?: valid?} = changeset, action, repo) do$/;"	f
put_repo_and_action	deps/ecto/lib/ecto/repo/schema.ex	/^  defp put_repo_and_action(%{action: given}, action, repo) when given != nil and given != action,$/;"	f
put_repo_and_action	deps/ecto/lib/ecto/repo/schema.ex	/^  defp put_repo_and_action(changeset, action, repo),$/;"	f
put_req_cookie	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defdelegate put_req_cookie(conn, key, value), to: Plug.Test$/;"	d
put_req_cookie	deps/plug/lib/plug/test.ex	/^  def put_req_cookie(conn, key, value) when is_binary(key) and is_binary(value) do$/;"	f
put_req_header	deps/plug/lib/plug/conn.ex	/^  def put_req_header(%Conn{adapter: adapter, req_headers: headers} = conn, key, value) when$/;"	f
put_req_header	deps/plug/lib/plug/conn.ex	/^  def put_req_header(%Conn{state: :sent}, _key, _value) do$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, charset \\\\ "utf-8")$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, charset) when$/;"	f
put_resp_content_type	deps/plug/lib/plug/conn.ex	/^  def put_resp_content_type(conn, content_type, nil) when is_binary(content_type) do$/;"	f
put_resp_cookie	deps/plug/lib/plug/conn.ex	/^  def put_resp_cookie(%Conn{resp_cookies: resp_cookies, scheme: scheme} = conn, key, value, opts \\\\ []) when$/;"	f
put_resp_header	deps/plug/lib/plug/conn.ex	/^  def put_resp_header(%Conn{adapter: adapter, resp_headers: headers} = conn, key, value) when$/;"	f
put_resp_header	deps/plug/lib/plug/conn.ex	/^  def put_resp_header(%Conn{state: :sent}, _key, _value) do$/;"	f
put_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^      def put_secret_key_base(conn, _) do$/;"	f
put_secure_browser_headers	deps/phoenix/lib/phoenix/controller.ex	/^  def put_secure_browser_headers(conn, []) do$/;"	f
put_secure_browser_headers	deps/phoenix/lib/phoenix/controller.ex	/^  def put_secure_browser_headers(conn, headers \\\\ %{})$/;"	f
put_secure_browser_headers	deps/phoenix/lib/phoenix/controller.ex	/^  def put_secure_browser_headers(conn, headers) when is_map(headers) do$/;"	f
put_secure_defaults	deps/phoenix/lib/phoenix/controller.ex	/^  defp put_secure_defaults(conn) do$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  def put_session(%Conn{state: state}, _key, _value) when not state in @unsent,$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  def put_session(conn, key, value) do$/;"	f
put_session	deps/plug/lib/plug/conn.ex	/^  defp put_session(conn, fun) do$/;"	f
put_session	deps/plug/lib/plug/session.ex	/^  defp put_session(sid, conn, %{store: store, store_config: store_config}),$/;"	f
put_source	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp put_source(opts, %{sources: sources}) when tuple_size(elem(sources, 0)) == 2 do$/;"	f
put_source	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp put_source(opts, _) do$/;"	f
put_ssl_file	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp put_ssl_file(cowboy_options, key, value) do$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{state: :sent}, _status),$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{} = conn, nil),$/;"	f
put_status	deps/plug/lib/plug/conn.ex	/^  def put_status(%Conn{} = conn, status),$/;"	f
put_struct_field	deps/ecto/lib/ecto/schema.ex	/^  defp put_struct_field(mod, name, assoc) do$/;"	f
put_to	deps/swoosh/lib/swoosh/email.ex	/^  def put_to(%__MODULE__{} = email, recipient) do$/;"	f
put_to	deps/swoosh/lib/swoosh/email.ex	/^  def put_to(%__MODULE__{} = email, recipients) when is_list(recipients) do$/;"	f
put_uniq	deps/decimal/lib/decimal.ex	/^  defp put_uniq(list, elem) do$/;"	f
put_uniq	deps/decimal/lib/decimal.ex	/^  defp put_uniq(list, elems) when is_list(elems) do$/;"	f
put_update	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp put_update(state, pid, topic, key, meta, %{phx_ref: ref} = prev_meta) do$/;"	f
put_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_view(%Plug.Conn{state: state} = conn, module) when state in @unsent do$/;"	f
put_view	deps/phoenix/lib/phoenix/controller.ex	/^  def put_view(_conn, _module), do: raise AlreadySentError$/;"	f
put_view	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def put_view(email, module) do$/;"	f
qs	deps/plug/lib/plug/ssl.ex	/^  defp qs(""), do: ""$/;"	f
qs	deps/plug/lib/plug/ssl.ex	/^  defp qs(qs), do: "?" <> qs$/;"	f
qual!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def qual!(qual) do$/;"	f
qual!	deps/ecto/lib/ecto/query/builder/join.ex	/^  def qual!(qual) when qual in @qualifiers, do: qual$/;"	f
quarter	deps/timex/lib/date/date.ex	/^  def quarter(%Date{month: month}), do: Timex.quarter(month)$/;"	f
quarter	deps/timex/lib/datetime/datetime.ex	/^  def quarter(%DateTime{month: month}), do: Timex.quarter(month)$/;"	f
quarter	deps/timex/lib/datetime/erlang.ex	/^  def quarter(_), do: {:error, :invalid_date}$/;"	f
quarter	deps/timex/lib/datetime/erlang.ex	/^  def quarter({y,m,d}) when is_date(y,m,d), do: Timex.quarter(m)$/;"	f
quarter	deps/timex/lib/datetime/erlang.ex	/^  def quarter({{y,m,d},_}) when is_date(y,m,d), do: Timex.quarter(m)$/;"	f
quarter	deps/timex/lib/datetime/map.ex	/^  def quarter(map),                   do: convert!(map, :quarter)$/;"	f
quarter	deps/timex/lib/datetime/naivedatetime.ex	/^  def quarter(%NaiveDateTime{month: month}), do: Timex.quarter(month)$/;"	f
quarter	deps/timex/lib/protocol.ex	/^  def quarter(%{__struct__: _} = d), do: Timex.quarter(Map.from_struct(d))$/;"	f
quarter	deps/timex/lib/protocol.ex	/^  def quarter(_datetime), do: {:error, :invalid_date}$/;"	f
quarter	deps/timex/lib/protocol.ex	/^  def quarter(datetime)$/;"	f
quarter	deps/timex/lib/timex.ex	/^  def quarter(datetime), do: Timex.Protocol.quarter(datetime)$/;"	f
quarter	deps/timex/lib/timex.ex	/^  def quarter(m) when is_integer(m),         do: {:error, :invalid_month}$/;"	f
quarter	deps/timex/lib/timex.ex	/^  def quarter(month) when is_month(month) do$/;"	f
queries periodically	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^      test "queries periodically" do$/;"	t
queries_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp queries_delete(%{queries: nil}), do: true$/;"	f
queries_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp queries_delete(%{queries: queries}), do: :ets.delete(queries)$/;"	f
queries_new	deps/postgrex/lib/postgrex/protocol.ex	/^  defp queries_new(), do: :ets.new(__MODULE__, [:set, :public])$/;"	f
query	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate query(conn, statement), to: Query$/;"	d
query	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate query(conn, statement, params), to: Query$/;"	d
query	deps/bolt_sips/lib/bolt_sips/query.ex	/^  def query(conn, statement), do: query(conn, statement, %{})$/;"	f
query	deps/bolt_sips/lib/bolt_sips/query.ex	/^  def query(conn, statement, params) when is_map(params) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^      def query(sql, params \\\\ [], opts \\\\ []) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  def query(repo, sql, params \\\\ [], opts \\\\ []) do$/;"	f
query	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query(repo, sql, params, mapper, opts) do$/;"	f
query	deps/ecto/lib/ecto/query/builder/from.ex	/^  defp query(prefix, source, schema) do$/;"	f
query	deps/ecto/lib/ecto/query/planner.ex	/^  def query(query, operation, repo, adapter, counter) do$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query([], _assocs, _sources), do: []$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, [], _sources), do: rows$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, assocs, sources) do$/;"	f
query	deps/ecto/lib/ecto/repo/assoc.ex	/^  def query(rows, assocs, sources)$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query([], _repo, _preloads, _take, _fun, _opts), do: []$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query(rows, _repo, [], _take, fun, _opts), do: Enum.map(rows, fun)$/;"	f
query	deps/ecto/lib/ecto/repo/preloader.ex	/^  def query(rows, repo, preloads, take, fun, opts) do$/;"	f
query	deps/postgrex/lib/postgrex.ex	/^  def query(conn, statement, params, opts \\\\ []) do$/;"	f
query count distinct	deps/ecto/integration_test/cases/repo.exs	/^  test "query count distinct" do$/;"	t
query where interpolation	deps/ecto/integration_test/cases/repo.exs	/^  test "query where interpolation" do$/;"	t
query!	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate query!(conn, statement), to: Query$/;"	d
query!	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate query!(conn, statement, params), to: Query$/;"	d
query!	deps/bolt_sips/lib/bolt_sips/query.ex	/^  def query!(conn, statement),  do: query!(conn,statement, %{})$/;"	f
query!	deps/bolt_sips/lib/bolt_sips/query.ex	/^  def query!(conn, statement, params) when is_map(params) do$/;"	f
query!	deps/ecto/integration_test/sql/sql.exs	/^  test "query!\/4 with iodata" do$/;"	t
query!	deps/ecto/integration_test/sql/sql.exs	/^  test "query!\/4" do$/;"	t
query!	deps/ecto/lib/ecto/adapters/sql.ex	/^      def query!(sql, params \\\\ [], opts \\\\ []) do$/;"	f
query!	deps/ecto/lib/ecto/adapters/sql.ex	/^  def query!(repo, sql, params \\\\ [], opts \\\\ []) do$/;"	f
query!	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp query!(repo, sql, params, mapper, opts) do$/;"	f
query!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp query!(%Ecto.Query{} = query), do: query$/;"	f
query!	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp query!(query) when is_function(query, 1), do: query$/;"	f
query!	deps/postgrex/lib/postgrex.ex	/^  def query!(conn, statement, params, opts \\\\ []) do$/;"	f
query_commit	deps/bolt_sips/lib/bolt_sips/query.ex	/^  defp query_commit(conn, statement, params) do$/;"	f
query_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_delete(%{queries: nil}, _), do: :ok$/;"	f
query_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_delete(%{queries: queries}, %Query{name: name}) do$/;"	f
query_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_error(s, msg) do$/;"	f
query_for_aggregate	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_aggregate(queryable, aggregate, field) do$/;"	f
query_for_get	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get(repo, _queryable, nil) do$/;"	f
query_for_get	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get(repo, queryable, id) do$/;"	f
query_for_get_by	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp query_for_get_by(_repo, queryable, clauses) do$/;"	f
query_lookup	deps/ecto/lib/ecto/query/planner.ex	/^  defp query_lookup(query, operation, repo, adapter, counter, key) do$/;"	f
query_prepare	deps/ecto/lib/ecto/query/planner.ex	/^  defp query_prepare(query, operation, adapter, counter, repo, key) do$/;"	f
query_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_prepare(%{queries: nil}, query) do$/;"	f
query_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_prepare(%{queries: queries}, query) when queries != nil do$/;"	f
query_put	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_put(%{queries: nil}, _), do: :ok$/;"	f
query_put	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_put(%{queries: queries}, %Query{name: name, ref: ref}) do$/;"	f
query_put	deps/postgrex/lib/postgrex/protocol.ex	/^  defp query_put(_, %Query{ref: nil}), do: nil$/;"	f
query_to_joins	deps/ecto/lib/ecto/query/planner.ex	/^  def query_to_joins(qual, %{from: from, wheres: wheres, joins: joins}, position) do$/;"	f
query_with_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp query_with_cache(query, operation, repo, adapter, counter, key, params) do$/;"	f
query_without_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp query_without_cache(query, operation, adapter, counter) do$/;"	f
queue_check	deps/con_cache/lib/con_cache/owner.ex	/^  defp queue_check(%__MODULE__{ttl_check: ttl_check} = state) do$/;"	f
queue_ttl_set	deps/con_cache/lib/con_cache/owner.ex	/^  defp queue_ttl_set(_, new_ttl), do: new_ttl$/;"	f
queue_ttl_set	deps/con_cache/lib/con_cache/owner.ex	/^  defp queue_ttl_set(existing, :renew), do: existing$/;"	f
quote_if_buffer	deps/plug/lib/plug/router/utils.ex	/^  defp quote_if_buffer(identifier, "", context, _fun) do$/;"	f
quote_if_buffer	deps/plug/lib/plug/router/utils.ex	/^  defp quote_if_buffer(identifier, _buffer, context, fun) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name) when is_atom(name),$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_name(name)$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_name(name) do$/;"	f
quote_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_name(name) when is_atom(name) do$/;"	f
quote_name	deps/ecto/lib/ecto/migration/runner.ex	/^  defp quote_name(name) when is_atom(name), do: quote_name(Atom.to_string(name))$/;"	f
quote_name	deps/ecto/lib/ecto/migration/runner.ex	/^  defp quote_name(name), do: name$/;"	f
quote_name	deps/ecto/lib/ecto/migration/runner.ex	/^  defp quote_name(nil, name), do: quote_name(name)$/;"	f
quote_name	deps/ecto/lib/ecto/migration/runner.ex	/^  defp quote_name(prefix, name), do: quote_name(prefix) <> "." <> quote_name(name)$/;"	f
quote_plug	deps/plug/lib/plug/builder.ex	/^  defp quote_plug({plug_type, plug, opts, guards}, acc, env, builder_opts) do$/;"	f
quote_plug_call	deps/plug/lib/plug/builder.ex	/^  defp quote_plug_call(:function, plug, opts) do$/;"	f
quote_plug_call	deps/plug/lib/plug/builder.ex	/^  defp quote_plug_call(:module, plug, opts) do$/;"	f
quote_qualified_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_qualified_name(name, sources, ix) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(name) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(name) when is_atom(name),$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(nil, name),    do: quote_table(name)$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp quote_table(prefix, name), do: [quote_table(prefix), ?., quote_table(name)]$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(name) do$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(name) when is_atom(name),$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(nil, name),    do: quote_table(name)$/;"	f
quote_table	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp quote_table(prefix, name), do: [quote_table(prefix), ?., quote_table(name)]$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!(_kind, dir) when dir in [:asc, :desc],$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!(kind, other),$/;"	f
quoted_dir!	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  def quoted_dir!(kind, {:^, _, [expr]}),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!(atom) when is_atom(atom),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!(other),$/;"	f
quoted_field!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_field!({:^, _, [expr]}),$/;"	f
quoted_interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_interval!(other),$/;"	f
quoted_interval!	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_interval!({:^, _, [expr]}),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<>>, _acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<?", t :: binary>>, acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<?\\\\, h, t :: binary>>, acc),$/;"	f
quoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp quoted_token(<<h, t :: binary>>, acc),$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(_, _vars), do: :any$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(list, vars) when is_list(list) do$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_binary(literal),  do: :string$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_boolean(literal), do: :boolean$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_float(literal),   do: :float$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type(literal, _vars) when is_integer(literal), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:-, _, [number]}, _vars) when is_float(number), do: :float$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:-, _, [number]}, _vars) when is_integer(number), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:<<>>, _, _}, _vars), do: :binary$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:count, _, [_, _]}, _vars), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:count, _, [_]}, _vars), do: :integer$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:date_add, _, [_, _, __]}, _vars), do: :date$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:datetime_add, _, [_, _, __]}, _vars), do: :naive_datetime$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:field, _, [{var, _, context}, field]}, vars)$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:field, _, [{var, _, context}, {:^, _, [code]}]}, vars)$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({:type, _, [_, type]}, _vars), do: type$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({agg, _, [_]}, _vars) when agg in [:avg, :sum], do: :any # TODO: Support the number type$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({agg, _, [expr]}, vars) when agg in [:max, :min, :sum] do$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({name, _, args}, _vars) when is_atom(name) and is_list(args) do$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({sigil, _, [_, []]}, _vars) when sigil in ~w(sigil_s sigil_S)a, do: :string$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({sigil, _, [_, []]}, _vars) when sigil in ~w(sigil_w sigil_W)a, do: {:array, :string}$/;"	f
quoted_type	deps/ecto/lib/ecto/query/builder.ex	/^  def quoted_type({{:., _, [{var, _, context}, field]}, _, []}, vars)$/;"	f
radio_button	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def radio_button(form, field, value, opts \\\\ []) do$/;"	f
raise_build_error	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  defp raise_build_error(exec, exit_status, error_msg) do$/;"	f
raise_ets_type	deps/con_cache/lib/con_cache/operations.ex	/^  defp raise_ets_type(%ConCache{ets: ets}) do$/;"	f
raise_invalid_assoc	deps/ecto/lib/ecto/changeset.ex	/^  defp raise_invalid_assoc(types, assoc) do$/;"	f
raise_invalid_message	deps/phoenix/lib/phoenix/channel/server.ex	/^  defp raise_invalid_message do$/;"	f
raise_invalid_url	deps/phoenix/lib/phoenix/controller.ex	/^  defp raise_invalid_url(url) do$/;"	f
raise_missing_migrations	deps/ecto/lib/mix/ecto.ex	/^  defp raise_missing_migrations(path, repo) do$/;"	f
raise_missing_parsers	deps/plug/lib/plug/parsers.ex	/^  defp raise_missing_parsers do$/;"	f
raise_no_migration_in_file	deps/ecto/lib/ecto/migrator.ex	/^  defp raise_no_migration_in_file(file) do$/;"	f
raise_no_migration_in_module	deps/ecto/lib/ecto/migrator.ex	/^  defp raise_no_migration_in_module(mod) do$/;"	f
raise_on_missing_config	deps/swoosh/lib/swoosh/adapter.ex	/^      defp raise_on_missing_config([], _config), do: :ok$/;"	f
raise_on_missing_config	deps/swoosh/lib/swoosh/adapter.ex	/^      defp raise_on_missing_config(key, config) do$/;"	f
raise_option_errors	deps/coherence/lib/mix/mix_utils.ex	/^  def raise_option_errors(list) do$/;"	f
raise_options_error!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp raise_options_error!(list, all_options) do$/;"	f
raise_options_error!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp raise_options_error!(list, all_options) do$/;"	f
raise_route_error	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp raise_route_error(unquote(helper), suffix, arity, action) do$/;"	f
raise_route_error	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def raise_route_error(mod, fun, arity, action, routes) do$/;"	f
raise_template_not_found	deps/phoenix/lib/phoenix/template.ex	/^  def raise_template_not_found(view_module, template, assigns) do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phx.gen.channel.ex	/^  defp raise_with_help do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  def raise_with_help(msg) do$/;"	f
raise_with_help	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def raise_with_help(msg) do$/;"	f
raised_close	deps/db_connection/lib/db_connection.ex	/^  defp raised_close(conn, query, opts, raised) do$/;"	f
raises on NoSQL migrations	deps/ecto/integration_test/sql/migration.exs	/^  test "raises on NoSQL migrations" do$/;"	t
raises when primary key is not unique on struct operation	deps/ecto/integration_test/sql/sql.exs	/^  test "raises when primary key is not unique on struct operation" do$/;"	t
rand	deps/db_connection/lib/db_connection/backoff.ex	/^  defp rand({mod, state}, min, max) do$/;"	f
rand_module	deps/db_connection/lib/db_connection/backoff.ex	/^  defp rand_module() do$/;"	f
random_file	deps/plug/lib/plug/upload.ex	/^  def random_file(prefix) do$/;"	f
random_file!	deps/plug/lib/plug/upload.ex	/^  def random_file!(prefix) do$/;"	f
random_id	deps/bolt_sips/lib/bolt_sips/utils.ex	/^  def random_id, do: :rand.uniform |> Float.to_string |> String.slice(2..10)$/;"	f
random_ref	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp random_ref() do$/;"	f
random_seed	deps/db_connection/lib/db_connection/backoff.ex	/^  defp random_seed() do$/;"	f
random_string	deps/coherence/web/controllers/controller_helpers.ex	/^  def random_string(length) do$/;"	f
random_string	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  defp random_string(_), do: Mix.raise "The secret should be at least 32 characters long"$/;"	f
random_string	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  defp random_string(length) when length > 31 do$/;"	f
randomize	deps/retry/lib/retry/delay_streams.ex	/^  def randomize(delays, proportion \\\\ 0.1) do$/;"	f
range_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def range_input(form, field, opts \\\\ []) do$/;"	f
ratio	deps/decimal/lib/decimal.ex	/^  defp ratio(coef, exp) when exp < 0, do: {coef, pow10(-exp)}$/;"	f
ratio	deps/decimal/lib/decimal.ex	/^  defp ratio(coef, exp) when exp >= 0, do: {coef * pow10(exp), 1}$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw(nil), do: {:safe, ""}$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw(value) when is_binary(value) or is_list(value), do: {:safe, value}$/;"	f
raw	deps/phoenix_html/lib/phoenix_html.ex	/^  def raw({:safe, value}), do: {:safe, value}$/;"	f
raw_config	deps/phoenix/lib/phoenix/template.ex	/^  defp raw_config(name) do$/;"	f
raw_email_addresses	deps/swoosh/lib/swoosh/adapters/sparkpost.ex	/^  defp raw_email_addresses(mailboxes) do$/;"	f
read!	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def read!(file) do$/;"	f
read_backup	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp read_backup(_path), do: :error$/;"	f
read_backup	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp read_backup(path) when is_list(path) do$/;"	f
read_body	deps/plug/lib/plug/conn.ex	/^  def read_body(%Conn{adapter: {adapter, state}} = conn, opts \\\\ []) do$/;"	f
read_contents_and_parse	deps/gettext/lib/gettext/extractor.ex	/^  defp read_contents_and_parse(path) do$/;"	f
read_file	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  def read_file(dir_prepend \\\\ "source_data", file_name \\\\ @file_name) do$/;"	f
read_file	deps/tzdata/lib/tzdata/parser.ex	/^  def read_file(file_name, dir_prepend) do$/;"	f
read_file	deps/tzdata/lib/tzdata/table_parser.ex	/^  def read_file(dir_prepend, file_name \\\\ @file_name) do$/;"	f
read_manifest	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  defp read_manifest(manifest) do$/;"	f
read_req_body	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def read_req_body(req, opts \\\\ []) do$/;"	f
read_req_body	deps/plug/lib/plug/adapters/test/conn.ex	/^  def read_req_body(%{req_body: body} = state, opts \\\\ []) do$/;"	f
read_string!	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def read_string!(contents) do$/;"	f
read_terms	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def read_terms(path) do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, @_ETC_TIMEZONE, date) do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, file, _date) when file == @_ETC_SYS_CLOCK or file == @_ETC_CONF_CLOCK do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(_, file, date) when file == @_ETC_LOCALTIME or file == @_USR_ETC_LOCALTIME do$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data(result \\\\ nil, file, date)$/;"	f
read_timezone_data	deps/timex/lib/timezone/timezone_local.ex	/^  defp read_timezone_data({:ok, _} = result, _, _),$/;"	f
read_touch	deps/con_cache/lib/con_cache/operations.ex	/^  defp read_touch(%ConCache{touch_on_read: false}, _), do: :ok$/;"	f
read_touch	deps/con_cache/lib/con_cache/operations.ex	/^  defp read_touch(%ConCache{touch_on_read: true} = cache, key) do$/;"	f
reason_phrase	deps/plug/lib/plug/conn/status.ex	/^    def reason_phrase(unquote(code)), do: unquote(phrase)$/;"	f
reason_phrase	deps/plug/lib/plug/conn/status.ex	/^  def reason_phrase(code) do$/;"	f
reason_phrase	deps/plug/lib/plug/conn/status.ex	/^  def reason_phrase(integer)$/;"	f
recall_if_country_or_raise	deps/gettext/lib/gettext/plural.ex	/^  defp recall_if_country_or_raise(locale, fun) do$/;"	f
receive_data	deps/boltex/lib/boltex/bolt.ex	/^  def receive_data(transport, port, options \\\\ [], previous \\\\ []) do$/;"	f
receive_loop	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp receive_loop() do$/;"	f
receive_resp	deps/plug/lib/plug/test.ex	/^  defp receive_resp(ref) do$/;"	f
receive_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp receive_response({:error, {exception, stack}}, expected_status) do$/;"	f
receive_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp receive_response({:ok, conn}, expected_status) do$/;"	f
recover_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(_conn, _user_schema, false), do: []$/;"	f
recover_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(conn, text \\\\ @recover_link), do:$/;"	f
recover_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(conn, user_schema, text) do$/;"	f
recover_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(_conn, _user_schema, false), do: []$/;"	f
recover_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(conn, text \\\\ @recover_link), do:$/;"	f
recover_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def recover_link(conn, user_schema, text) do$/;"	f
recover_link	deps/coherence/test/support/view_helpers.exs	/^  def recover_link(_conn, _user_schema, false), do: []$/;"	f
recover_link	deps/coherence/test/support/view_helpers.exs	/^  def recover_link(conn, text \\\\ @recover_link), do:$/;"	f
recover_link	deps/coherence/test/support/view_helpers.exs	/^  def recover_link(conn, user_schema, text) do$/;"	f
recoverable?	deps/coherence/lib/coherence/schema.ex	/^      def recoverable? do$/;"	f
recovery_link	deps/coherence/test/support/views.exs	/^  defp recovery_link(conn, user_schema) do$/;"	f
recur_through	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp recur_through(field, {structs, owner}) do$/;"	f
recv	deps/connection/lib/connection.ex	/^        def recv(conn, bytes, timeout \\\\\\\\ 3000) do$/;"	f
recv_buffer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp recv_buffer(%{sock: {:gen_tcp, sock}} = s) do$/;"	f
recv_buffer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp recv_buffer(%{sock: {:ssl, sock}} = s) do$/;"	f
recycle	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def recycle(conn) do$/;"	f
recycle_cookies	deps/plug/lib/plug/test.ex	/^  def recycle_cookies(new_conn, old_conn) do$/;"	f
redirect	deps/phoenix/lib/phoenix/controller.ex	/^  def redirect(conn, opts) when is_list(opts) do$/;"	f
redirect_logged_in	deps/coherence/web/controllers/controller_helpers.ex	/^  def redirect_logged_in(conn, _params) do$/;"	f
redirect_or_login	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  defp redirect_or_login(conn, _user, params, 0) do$/;"	f
redirect_or_login	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  defp redirect_or_login(conn, user, params, _) do$/;"	f
redirect_or_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  defp redirect_or_login(conn, _user, params, 0) do$/;"	f
redirect_or_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  defp redirect_or_login(conn, user, params, _) do$/;"	f
redirect_or_login	deps/coherence/web/controllers/registration_controller.ex	/^  defp redirect_or_login(conn, _user, params, 0) do$/;"	f
redirect_or_login	deps/coherence/web/controllers/registration_controller.ex	/^  defp redirect_or_login(conn, user, params, _) do$/;"	f
redirect_to	deps/coherence/web/controllers/controller_helpers.ex	/^  def redirect_to(conn, path, params) do$/;"	f
redirect_to	deps/coherence/web/controllers/controller_helpers.ex	/^  def redirect_to(conn, path, params, user) do$/;"	f
redirect_to_https	deps/plug/lib/plug/ssl.ex	/^  defp redirect_to_https(%Conn{host: host} = conn, custom_host) do$/;"	f
redirected_params	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_params(%Plug.Conn{} = conn) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(%Conn{state: :unset}, _status) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(%Conn{status: status} = conn, status) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(conn, status \\\\ 302)$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(conn, status) do$/;"	f
redirected_to	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def redirected_to(conn, status) when is_atom(status) do$/;"	f
reduce	deps/db_connection/lib/db_connection.ex	/^  def reduce(%DBConnection.PrepareStream{} = stream, acc, fun) do$/;"	f
reduce	deps/db_connection/lib/db_connection.ex	/^  def reduce(%DBConnection.Stream{} = stream, acc, fun) do$/;"	f
reduce	deps/db_connection/lib/db_connection.ex	/^  def reduce(stream, acc, fun), do: DBConnection.reduce(stream, acc, fun)$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :inf} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :qNaN} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{coef: :sNaN} = num) do$/;"	f
reduce	deps/decimal/lib/decimal.ex	/^  def reduce(%Decimal{sign: sign, coef: coef, exp: exp}) do$/;"	f
reduce	deps/ecto/lib/ecto/adapters/sql.ex	/^  def reduce(repo, statement, params, mapper, opts, acc, fun) do$/;"	f
reduce	deps/ecto/lib/ecto/adapters/sql/stream.ex	/^  def reduce(stream, acc, fun) do$/;"	f
reduce	deps/plug/lib/plug/parsers.ex	/^  defp reduce(conn, [], %{type: type, subtype: subtype}, options) do$/;"	f
reduce	deps/plug/lib/plug/parsers.ex	/^  defp reduce(conn, [parser | rest], %{type: type, subtype: subtype, params: params} = content_type, options) do$/;"	f
reduce	deps/postgrex/lib/postgrex/stream.ex	/^  def reduce(%Postgrex.Stream{query: %Query{} = query} = stream, acc, fun) do$/;"	f
reduce	deps/postgrex/lib/postgrex/stream.ex	/^  def reduce(%Postgrex.Stream{query: statement} = stream, acc, fun) do$/;"	f
reduce	deps/timex/lib/interval/interval.ex	/^    def reduce(interval, acc, fun) do$/;"	f
reduce_delete_changesets	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp reduce_delete_changesets([], _fun, _acc, _valid?, true) do$/;"	f
reduce_delete_changesets	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp reduce_delete_changesets([], _fun, acc, valid?, false) do$/;"	f
reduce_delete_changesets	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp reduce_delete_changesets([struct | rest], fun, acc, valid?, _skip?) do$/;"	f
reduce_to_binary	deps/boltex/lib/boltex/utils.ex	/^  def reduce_to_binary(enumerable, transform) do$/;"	f
ref	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  def ref(%Replica{name: name, vsn: vsn}), do: {name, vsn}$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_column_type(:bigserial, _opts), do: "BIGINT UNSIGNED"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_column_type(:serial, _opts), do: "BIGINT UNSIGNED"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_column_type(type, opts), do: column_type(type, opts)$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_column_type(:bigserial, _opts), do: "bigint"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_column_type(:serial, _opts), do: "integer"$/;"	f
reference_column_type	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_column_type(type, opts), do: column_type(type, opts)$/;"	f
reference_expr	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_expr(%Reference{} = ref, table, name),$/;"	f
reference_expr	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_expr(%Reference{} = ref, table, name),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_name(%Reference{name: name}, _table, _column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_name(%Reference{name: nil}, table, column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_name(%Reference{name: name}, _table, _column),$/;"	f
reference_name	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_name(%Reference{name: nil}, table, column),$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(:delete_all), do: " ON DELETE CASCADE"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(:nilify_all), do: " ON DELETE SET NULL"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_delete(_), do: []$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(:delete_all), do: " ON DELETE CASCADE"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(:nilify_all), do: " ON DELETE SET NULL"$/;"	f
reference_on_delete	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_delete(_), do: []$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_update(:nilify_all), do: " ON UPDATE SET NULL"$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_update(:update_all), do: " ON UPDATE CASCADE"$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp reference_on_update(_), do: []$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_update(:nilify_all), do: " ON UPDATE SET NULL"$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_update(:update_all), do: " ON UPDATE CASCADE"$/;"	f
reference_on_update	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp reference_on_update(_), do: []$/;"	f
references	deps/ecto/lib/ecto/migration.ex	/^  def references(table, opts \\\\ [])$/;"	f
references	deps/ecto/lib/ecto/migration.ex	/^  def references(table, opts) when is_atom(table) do$/;"	f
references	deps/ecto/lib/ecto/migration.ex	/^  def references(table, opts) when is_binary(table) and is_list(opts) do$/;"	f
refuse	deps/phoenix/lib/phoenix/controller.ex	/^  defp refuse(_conn, given, accepted) do$/;"	f
refute_broadcast	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro refute_broadcast(event, payload, timeout \\\\ 100) do$/;"	a
refute_file	deps/coherence/test/mix_helpers.exs	/^  def refute_file(file) do$/;"	f
refute_push	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro refute_push(event, payload, timeout \\\\ 100) do$/;"	a
refute_reply	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro refute_reply(ref, status, payload \\\\ Macro.escape(%{}), timeout \\\\ 100) do$/;"	a
register_before_send	deps/plug/lib/plug/conn.ex	/^  def register_before_send(%Conn{before_send: before_send} = conn, callback)$/;"	f
register_before_send	deps/plug/lib/plug/conn.ex	/^  def register_before_send(%Conn{state: state}, _callback)$/;"	f
register_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(_conn, _user_schema, false), do: []$/;"	f
register_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(conn, text \\\\ @register_link), do:$/;"	f
register_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(conn, user_schema, text) do$/;"	f
register_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(_conn, _user_schema, false), do: []$/;"	f
register_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(conn, text \\\\ @register_link), do:$/;"	f
register_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def register_link(conn, user_schema, text) do$/;"	f
register_link	deps/coherence/test/support/view_helpers.exs	/^  def register_link(_conn, _user_schema, false), do: []$/;"	f
register_link	deps/coherence/test/support/view_helpers.exs	/^  def register_link(conn, text \\\\ @register_link), do:$/;"	f
register_link	deps/coherence/test/support/view_helpers.exs	/^  def register_link(conn, user_schema, text) do$/;"	f
register_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def register_user(attrs \\\\ %{}) do$/;"	f
register_user_with_org	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def register_user_with_org(registration_params, org_params) do$/;"	f
registerable?	deps/coherence/lib/coherence/schema.ex	/^      def registerable? do$/;"	f
registration_changeset	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def registration_changeset(user, attrs) do$/;"	f
registration_changeset	deps/ecto/lib/ecto.ex	/^      def registration_changeset(user, params) do$/;"	f
registration_create	deps/coherence/lib/coherence/redirects.ex	/^      def registration_create(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
registration_create	deps/coherence/lib/coherence/redirects.ex	/^      def registration_create(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
registration_create	deps/coherence/priv/templates/coh.install/controllers/coherence/redirects.ex	/^      def registration_create(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
registration_create	deps/coherence/priv/templates/coherence.install/controllers/coherence/redirects.ex	/^      def registration_create(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
registration_create	deps/coherence/test/support/redirect.exs	/^      def registration_create(conn, _), do: redirect(conn, session_path(conn, :new))$/;"	f
registration_created_successfully	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def registration_created_successfully, do: dgettext(@domain, "Registration created successfully.")$/;"	f
registration_created_successfully	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def registration_created_successfully, do: dgettext(@domain, "Registration created successfully.")$/;"	f
registration_created_successfully	deps/coherence/test/support/messages.exs	/^  def registration_created_successfully, do: dgettext(@domain, "Registration created successfully.")$/;"	f
registration_delete	deps/coherence/lib/coherence/redirects.ex	/^      def registration_delete(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
registration_update	deps/coherence/lib/coherence/redirects.ex	/^      def registration_update(conn, _, user) do$/;"	f
regular_file_info	deps/plug/lib/plug/static.ex	/^  defp regular_file_info(path) do$/;"	f
regulator	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  defp regulator(opts) do$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query(atom) when is_atom(atom), do: atom$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query(queryable) do$/;"	f
related_from_query	deps/ecto/lib/ecto/association.ex	/^  def related_from_query({source, schema}) when is_binary(source) and is_atom(schema), do: schema$/;"	f
related_key_pos	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp related_key_pos(_query, pos) when pos >= 0, do: pos$/;"	f
related_key_pos	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp related_key_pos(query, pos), do: Ecto.Query.Builder.count_binds(query) + pos$/;"	f
related_key_to_field	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp related_key_to_field(query, {pos, key}) do$/;"	f
relation!	deps/ecto/lib/ecto/changeset.ex	/^  defp relation!(_op, type, _name, {type, relation}),$/;"	f
relation!	deps/ecto/lib/ecto/changeset.ex	/^  defp relation!(op, type, name, nil),$/;"	f
relation!	deps/ecto/lib/ecto/changeset.ex	/^  defp relation!(op, type, name, schema_type),$/;"	f
relation!	deps/ecto/lib/ecto/changeset.ex	/^  defp relation!(op, type, name, {other, _}) when other in @relations,$/;"	f
relative_digested_path	deps/phoenix/lib/phoenix/digester.ex	/^  defp relative_digested_path(digested_path), do: "\/" <> digested_path$/;"	f
relative_digested_path	deps/phoenix/lib/phoenix/digester.ex	/^  defp relative_digested_path(digested_path, false), do: relative_digested_path(digested_path)$/;"	f
relative_digested_path	deps/phoenix/lib/phoenix/digester.ex	/^  defp relative_digested_path(digested_path, true), do: relative_digested_path(digested_path) <> "?vsn=d"$/;"	f
relative_parser	deps/timex/lib/format/datetime/formatters/relative.ex	/^  defp relative_parser do$/;"	f
relative_to	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def relative_to(date, relative_to, format_string) do$/;"	f
relative_to	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def relative_to(date, relative_to, format_string, locale) do$/;"	f
release	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro release(name, do: block) do$/;"	a
release_dir	deps/tzdata/lib/tzdata/data_builder.ex	/^  defp release_dir do$/;"	f
release_dir	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp release_dir do$/;"	f
release_files	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp release_files do$/;"	f
release_owner	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp release_owner(%__MODULE__{owner: pid} = resource, pid) do$/;"	f
release_owner	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp release_owner(resource, _), do: resource$/;"	f
release_pending	deps/con_cache/lib/con_cache/lock/resource.ex	/^  defp release_pending($/;"	f
release_version	deps/tzdata/lib/tzdata/release_reader.ex	/^  def release_version,        do: simple_lookup(:release_version) |> hd |> elem(1)$/;"	f
release_version_for_dir	deps/tzdata/lib/tzdata/data_loader.ex	/^  def release_version_for_dir(dir_name) do$/;"	f
reload!	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defdelegate reload!(endpoint), to: Phoenix.CodeReloader.Server$/;"	d
reload!	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def reload!(endpoint) do$/;"	f
reload_close	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_close(s, %{sync: :flush} = prep_status, query, oid, buffer) do$/;"	f
reload_close	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_close(s, %{sync: :sync} = status, query, oid, buffer) do$/;"	f
reload_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_error(s, msg, buffer) do$/;"	f
reload_fetch	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_fetch(%{types: types} = s, status, query, oid, buffer) do$/;"	f
reload_lock	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_lock(%{types: types} = s, status, exit_ref, buffer) do$/;"	f
reload_prepare	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_prepare(%{queries: queries} = s, status, query, buffer) do$/;"	f
reload_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_send(s, status, types, buffer) do$/;"	f
reload_skip	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_skip(s, status, query, oid, buffer) do$/;"	f
reload_spawn	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_spawn(s, status, %Query{ref: ref} = query, oid, buffer) do$/;"	f
reload_sync	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reload_sync(s, status, query, oid, buffer) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{coef: 0}, %Decimal{coef: 0}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{coef: :inf}, %Decimal{coef: :inf}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{coef: :qNaN} = num1, %Decimal{}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{coef: :sNaN} = num1, %Decimal{}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{sign: sign1, coef: :inf}, %Decimal{}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{sign: sign1, coef: coef1, exp: exp1} = num1, %Decimal{sign: sign2, coef: coef2, exp: exp2} = num2) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{sign: sign1}, %Decimal{coef: 0}) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{sign: sign1}, %Decimal{coef: :inf} = num2) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{}, %Decimal{coef: :qNaN} = num2) do$/;"	f
rem	deps/decimal/lib/decimal.ex	/^  def rem(%Decimal{}, %Decimal{coef: :sNaN} = num2) do$/;"	f
rememberable?	deps/coherence/lib/coherence/schema.ex	/^      def rememberable? do$/;"	f
rememberable_callback	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def rememberable_callback(conn, id, series, token, opts) do$/;"	f
rememberable_callback	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def rememberable_callback(conn, id, series, token, opts) do$/;"	f
rememberable_callback	deps/coherence/web/controllers/session_controller.ex	/^  def rememberable_callback(conn, id, series, token, opts) do$/;"	f
rememberable_enabled?	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp rememberable_enabled? do$/;"	f
rememberable_enabled?	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp rememberable_enabled? do$/;"	f
rememberable_enabled?	deps/coherence/web/controllers/session_controller.ex	/^  defp rememberable_enabled? do$/;"	f
rememberables	deps/coherence/test/models/rememberable_test.exs	/^  def rememberables, do: [$/;"	f
remote_poll_file_name	deps/tzdata/lib/tzdata/data_loader.ex	/^  def remote_poll_file_name do$/;"	f
remove	deps/con_cache/lib/con_cache/lock/monitors.ex	/^  def remove(%__MODULE__{processes: processes} = monitors, pid) do$/;"	f
remove	deps/ecto/lib/ecto/migration.ex	/^  def remove(column) when is_atom(column) do$/;"	f
remove	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp remove(%State{pids: pids, values: values} = state, pid, topic, key) do$/;"	f
remove column	deps/ecto/integration_test/sql/migration.exs	/^  test "remove column" do$/;"	t
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{config: true} = config, :config) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{controllers: true} = config, :controllers) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{emails: true} = config, :emails) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{messages: true} = config, :messages) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{migrations: true} = config, :migrations) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{models: true} = config, :models) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{options: options} = config, :options) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{templates: true} = config, :templates) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{views: true} = config, :views) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(%{web: true} = config, :web) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove!(config, _), do: config$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{config: true} = config, :config) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{controllers: true} = config, :controllers) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{emails: true} = config, :emails) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{messages: true} = config, :messages) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{migrations: true} = config, :migrations) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{models: true} = config, :models) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{options: options} = config, :options) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{templates: true} = config, :templates) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{views: true} = config, :views) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(%{web: true} = config, :web) do$/;"	f
remove!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove!(config, _), do: config$/;"	f
remove_caller	deps/con_cache/lib/con_cache/lock/resource.ex	/^  def remove_caller(resource, pid) do$/;"	f
remove_caller_from_all_resources	deps/con_cache/lib/con_cache/lock.ex	/^  defp remove_caller_from_all_resources(%__MODULE__{resources: resources} = state, caller_pid) do$/;"	f
remove_caller_from_resource	deps/con_cache/lib/con_cache/lock.ex	/^  defp remove_caller_from_resource(resource, caller_pid) do$/;"	f
remove_config_options!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_config_options!(config, contents, options, opts_string) do$/;"	f
remove_config_options!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_config_options!(options, config) do$/;"	f
remove_config_options!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_config_options!(config, contents, options, opts_string) do$/;"	f
remove_config_options!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_config_options!(options, config) do$/;"	f
remove_controller_files!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_controller_files!(option, config) do$/;"	f
remove_controller_files!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_controller_files!(option, config) do$/;"	f
remove_credentials	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  def remove_credentials(ip, store \\\\ Coherence.CredentialStore.Agent) do$/;"	f
remove_credentials	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def remove_credentials(token, store \\\\ Coherence.CredentialStore.Agent) do$/;"	f
remove_delta_tag	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp remove_delta_tag(%State{mode: :delta, values: values, cloud: cloud} = delta, tag) do$/;"	f
remove_down_replicas	deps/phoenix_pubsub/lib/phoenix/tracker/delta_generation.ex	/^  def remove_down_replicas(generations, replica_ref) do$/;"	f
remove_down_replicas	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def remove_down_replicas(%State{mode: :delta, range: range} = delta, replica) do$/;"	f
remove_down_replicas	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def remove_down_replicas(%State{mode: :normal, context: ctx, values: values, pids: pids} = state, replica) do$/;"	f
remove_files	deps/phoenix/lib/phoenix/digester.ex	/^  defp remove_files(files, output_path) do$/;"	f
remove_files_from_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp remove_files_from_manifest(manifest, files, output_path) do$/;"	f
remove_if_exists	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp remove_if_exists(path) do$/;"	f
remove_monitored_listener	deps/postgrex/lib/postgrex/notifications.ex	/^  defp remove_monitored_listener(s, ref, channel) do$/;"	f
remove_option!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_option!(config, option) do$/;"	f
remove_option!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_option!(config, option) do$/;"	f
remove_pending	deps/con_cache/lib/con_cache/owner.ex	/^  defp remove_pending(%__MODULE__{pending: pending} = state, key) do$/;"	f
remove_symlink_or_dir!	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp remove_symlink_or_dir!(path) do$/;"	f
remove_template_files!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_template_files!(option, config) do$/;"	f
remove_template_files!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_template_files!(option, config) do$/;"	f
remove_view_file!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp remove_view_file!(option, config) do$/;"	f
remove_view_file!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp remove_view_file!(option, config) do$/;"	f
rename	deps/ecto/lib/ecto/migration.ex	/^  def rename(%Table{} = table, current_column, to: new_column) when is_atom(current_column) and is_atom(new_column) do$/;"	f
rename	deps/ecto/lib/ecto/migration.ex	/^  def rename(%Table{} = table_current, to: %Table{} = table_new) do$/;"	f
rename column	deps/ecto/integration_test/sql/migration.exs	/^  test "rename column" do$/;"	t
rename table	deps/ecto/integration_test/sql/migration.exs	/^  test "rename table" do$/;"	t
render	apps/flexcility_web/lib/flexcility_web/views/changeset_view.ex	/^  def render("error.json", %{changeset: changeset}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/changeset_view.ex	/^  def render("multiple_errors.json", %{changesets: [head|tail] = changesets}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/error_view.ex	/^  def render("404.json", _assigns) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/error_view.ex	/^  def render("500.json", _assigns) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/error_view.ex	/^  def render("error.json", assigns) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/registration_view.ex	/^  def render("index.json", %{users: users}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/registration_view.ex	/^  def render("registration.json", %{registration: registration}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/registration_view.ex	/^  def render("show.json", %{registration: registration}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/session_view.ex	/^  def render("session.json", %{session: session}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/session_view.ex	/^  def render("show.json", %{session: session}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/site_view.ex	/^  def render("delete.json", %{message: message}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/site_view.ex	/^  def render("index.json", %{sites: sites}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/site_view.ex	/^  def render("show.json", %{site: site}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/site_view.ex	/^  def render("site.json", %{site: site}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/user_view.ex	/^  def render("index.json", %{users: users}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/user_view.ex	/^  def render("show.json", %{user: user}) do$/;"	f
render	apps/flexcility_web/lib/flexcility_web/views/user_view.ex	/^  def render("user.json", %{user: user}) do$/;"	f
render	deps/coherence/test/support/views.exs	/^  def render("400.html", _changeset), do: "400.html"$/;"	f
render	deps/coherence/test/support/views.exs	/^  def render("500.html", _changeset), do: "500.html"$/;"	f
render	deps/coherence/test/support/views.exs	/^  def render("new.html", _params), do: "new session"$/;"	f
render	deps/coherence/test/support/views.exs	/^  def render("new.html", params) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template) when is_binary(template) or is_atom(template) do$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template, assigns)$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, template_or_assigns \\\\ [])$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, view, template)$/;"	f
render	deps/phoenix/lib/phoenix/controller.ex	/^  def render(conn, view, template, assigns)$/;"	f
render	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  def render(conn, kind, reason, stack, opts) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^        def render("foo.html", %{name: name}) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(module, template) when is_atom(module) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, _assigns) when not is_binary(template) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns \\\\ %{})$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/template.ex	/^      def render(template, assigns) when not is_map(assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^        def render("show.json", %{user: user}) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.index.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^      def render("scripts.show.html", _assigns) do$/;"	f
render	deps/phoenix/lib/phoenix/view.ex	/^  def render(module, template, assigns) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/changeset_view.ex	/^  def render("error.json", %{changeset: changeset}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("<%= singular %>.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("index.json", %{<%= plural %>: <%= plural %>}) do$/;"	f
render	deps/phoenix/priv/templates/phoenix.gen.json/view.ex	/^  def render("show.json", %{<%= singular %>: <%= singular %>}) do$/;"	f
render	deps/phoenix/priv/templates/phx.gen.json/changeset_view.ex	/^  def render("error.json", %{changeset: changeset}) do$/;"	f
render	deps/phoenix/priv/templates/phx.gen.json/view.ex	/^  def render("<%= schema.singular %>.json", %{<%= schema.singular %>: <%= schema.singular %>}) do$/;"	f
render	deps/phoenix/priv/templates/phx.gen.json/view.ex	/^  def render("index.json", %{<%= schema.plural %>: <%= schema.plural %>}) do$/;"	f
render	deps/phoenix/priv/templates/phx.gen.json/view.ex	/^  def render("show.json", %{<%= schema.singular %>: <%= schema.singular %>}) do$/;"	f
render	deps/plug/lib/plug/debugger.ex	/^  def render(conn, status, kind, reason, stack, opts) do$/;"	f
render	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render(false, email) do$/;"	f
render	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render(true, email) do$/;"	f
render 500	apps/flexcility_web/test/views/error_view_test.exs	/^  test "render 500.json" do$/;"	t
render any other	apps/flexcility_web/test/views/error_view_test.exs	/^  test "render any other" do$/;"	t
render both html and text body	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render both html and text body", %{email: email} do$/;"	t
render both html and text body with assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render both html and text body with assigns", %{email: email} do$/;"	t
render both html and text body with layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render both html and text body with layout", %{email: email} do$/;"	t
render both html and text body with layout and assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render both html and text body with layout and assigns", %{email: email} do$/;"	t
render html body	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render html body", %{email: email} do$/;"	t
render html body with assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render html body with assigns", %{email: email} do$/;"	t
render html body with layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render html body with layout", %{email: email} do$/;"	t
render html body with layout and assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render html body with layout and assigns", %{email: email} do$/;"	t
render text body	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render text body", %{email: email} do$/;"	t
render text body with assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render text body with assigns", %{email: email} do$/;"	t
render text body with layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render text body with layout", %{email: email} do$/;"	t
render text body with layout and assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "render text body with layout and assigns", %{email: email} do$/;"	t
render_bodies	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render_bodies(email) do$/;"	f
render_body	deps/coherence/test/support/email.exs	/^  defp render_body(email, template, params), do: struct(email, template: template, params: params)$/;"	f
render_body	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^      def render_body(email, template, assigns \\\\ %{}) do$/;"	f
render_body	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def render_body(email, template, assigns) when is_atom(template) do$/;"	f
render_body	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  def render_body(email, template, assigns) when is_binary(template) do$/;"	f
render_errors	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp render_errors(module) do$/;"	f
render_existing	deps/phoenix/lib/phoenix/view.ex	/^  def render_existing(module, template, assigns \\\\ []) do$/;"	f
render_headers	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render_headers(email) do$/;"	f
render_layout	deps/phoenix/lib/phoenix/view.ex	/^  defp render_layout(layout_mod, layout_tpl, assigns) do$/;"	f
render_many	deps/phoenix/lib/phoenix/view.ex	/^  def render_many(collection, view, template, assigns \\\\ %{}) do$/;"	f
render_one	deps/phoenix/lib/phoenix/view.ex	/^  def render_one(nil, _view, _template, _assigns), do: nil$/;"	f
render_one	deps/phoenix/lib/phoenix/view.ex	/^  def render_one(resource, view, template, assigns \\\\ %{})$/;"	f
render_one	deps/phoenix/lib/phoenix/view.ex	/^  def render_one(resource, view, template, assigns) do$/;"	f
render_recipient	deps/swoosh/lib/plug/mailbox_preview.ex	/^    defp render_recipient(recipient) do$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient([]), do: ""$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient(list) when is_list(list) do$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient(nil), do: ""$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient({"", address}), do: address$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient({name, address}), do: "#{name} <#{address}>"$/;"	f
render_recipient	deps/swoosh/lib/swoosh/email/render.ex	/^  def render_recipient({nil, address}), do: address$/;"	f
render_recipients	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render_recipients(email) do$/;"	f
render_subject	deps/swoosh/lib/swoosh/adapters/logger.ex	/^  defp render_subject(email), do: "Subject: #{email.subject}"$/;"	f
render_template	deps/phoenix/lib/phoenix/template.ex	/^      defp render_template(template, %{render_existing: {__MODULE__, template}}) do$/;"	f
render_template	deps/phoenix/lib/phoenix/template.ex	/^      defp render_template(template, %{template_not_found: __MODULE__} = assigns) do$/;"	f
render_template	deps/phoenix/lib/phoenix/template.ex	/^      defp render_template(template, assigns) do$/;"	f
render_template	deps/phoenix/lib/phoenix/template.ex	/^      defp render_template(unquote(name), assigns) do$/;"	f
render_to_iodata	deps/phoenix/lib/phoenix/view.ex	/^  def render_to_iodata(module, template, assign) do$/;"	f
render_to_string	deps/phoenix/lib/phoenix/view.ex	/^  def render_to_string(module, template, assign) do$/;"	f
render_within	deps/phoenix/lib/phoenix/view.ex	/^  defp render_within({false, assigns}, module, template) do$/;"	f
render_within	deps/phoenix/lib/phoenix/view.ex	/^  defp render_within({{layout_mod, layout_tpl}, assigns}, inner_mod, inner_tpl) do$/;"	f
renders 404	apps/flexcility_web/test/views/error_view_test.exs	/^  test "renders 404.json" do$/;"	t
renders form for editing chosen	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "renders form for editing chosen <%= schema.singular %>", %{conn: conn} do$/;"	t
renders form for editing chosen resource	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "renders form for editing chosen resource", %{conn: conn} do$/;"	t
renders form for new	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "renders form for new <%= schema.plural %>", %{conn: conn} do$/;"	t
renders form for new resources	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "renders form for new resources", %{conn: conn} do$/;"	t
renders page not found when id is nonexistent	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "renders page not found when id is nonexistent", %{conn: conn} do$/;"	t
renders page not found when id is nonexistent	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "renders page not found when id is nonexistent", %{conn: conn} do$/;"	t
renew_session	deps/plug/lib/plug/session.ex	/^  defp renew_session(sid, conn, config) do$/;"	f
replace_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp replace_all(header) do$/;"	f
replaceable?	deps/ecto/lib/ecto/association.ex	/^  defp replaceable?(%Ecto.Association.NotLoaded{}), do: false$/;"	f
replaceable?	deps/ecto/lib/ecto/association.ex	/^  defp replaceable?(%{__meta__: %{state: :built}}), do: false$/;"	f
replaceable?	deps/ecto/lib/ecto/association.ex	/^  defp replaceable?(_), do: true$/;"	f
replaceable?	deps/ecto/lib/ecto/association.ex	/^  defp replaceable?(nil), do: false$/;"	f
replica_down	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def replica_down(%State{replicas: replicas} = state, replica) do$/;"	f
replica_up	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def replica_up(%State{replicas: replicas} = state, replica) do$/;"	f
replica_users	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp replica_users(%State{values: values}, replica) do$/;"	f
reply	deps/connection/lib/connection.ex	/^  defdelegate reply(from, response), to: :gen_server$/;"	d
reply	deps/exactor/lib/exactor/responders.ex	/^  defmacro reply(response, timeout \\\\ nil) do$/;"	a
reply	deps/phoenix/lib/phoenix/channel.ex	/^  def reply({transport_pid, serializer, topic, ref}, {status, payload}) do$/;"	f
reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  def reply(_, _, _, _, _), do: raise_invalid_message()$/;"	f
reply	deps/phoenix/lib/phoenix/channel/server.ex	/^  def reply(pid, ref, topic, {status, payload}, serializer)$/;"	f
reply	deps/postgrex/lib/postgrex/type_server.ex	/^  defp reply(%{waiting: waiting} = state, resp) do$/;"	f
reply_ignore	deps/phoenix/lib/phoenix/socket/transport.ex	/^  defp reply_ignore(msg, socket) do$/;"	f
reply_to	deps/coherence/test/support/email.exs	/^  defp reply_to(email, address), do: Map.put(email, :reply_to, address)$/;"	f
reply_to	deps/swoosh/lib/swoosh/email.ex	/^  def reply_to(%__MODULE__{} = email, reply_to) do$/;"	f
repo_config	deps/ecto/lib/ecto/migration/runner.ex	/^  def repo_config(key, default) do$/;"	f
repo_init	deps/ecto/lib/ecto/repo/supervisor.ex	/^  defp repo_init(type, repo, config) do$/;"	f
report	deps/bcrypt_elixir/lib/bcrypt/stats.ex	/^  def report(opts \\\\ []) do$/;"	f
report	deps/comeonin/lib/comeonin/base.ex	/^      def report(opts \\\\ []) do$/;"	f
report_diff	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp report_diff(state, [], []), do: state$/;"	f
report_diff	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp report_diff(state, joined, left) do$/;"	f
report_diff_join	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp report_diff_join(state, topic, key, meta, nil = _prev_meta) do$/;"	f
report_diff_join	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp report_diff_join(state, topic, key, meta, prev_meta) do$/;"	f
report_name	deps/connection/lib/connection.ex	/^  defp report_name(name) when name === self(), do: name$/;"	f
report_name	deps/connection/lib/connection.ex	/^  defp report_name({:global, name}), do: name$/;"	f
report_name	deps/connection/lib/connection.ex	/^  defp report_name({:local, name}), do: name$/;"	f
report_name	deps/connection/lib/connection.ex	/^  defp report_name({:via, _, name}), do: name$/;"	f
report_reason	deps/connection/lib/connection.ex	/^  defp report_reason(reason) do$/;"	f
report_reason	deps/connection/lib/connection.ex	/^  defp report_reason({:undef, [{mod, fun, args, _} | _] = stack} = reason) do$/;"	f
req_args	deps/exactor/lib/exactor/operations.ex	/^  defp req_args(req_def) do$/;"	f
req_id	deps/exactor/lib/exactor/operations.ex	/^  defp req_id(req_name, options) when is_atom(req_name) do$/;"	f
req_id	deps/exactor/lib/exactor/operations.ex	/^  defp req_id({_, _, _} = definition, options) do$/;"	f
request	deps/exactor/lib/exactor/operations.ex	/^      def request(server, x, y) do$/;"	f
request in allow subnet	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request in allow subnet" do$/;"	t
request in deny subnet	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request in deny subnet" do$/;"	t
request not in allow subnet	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request not in allow subnet" do$/;"	t
request not in deny subnet	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request not in deny subnet" do$/;"	t
request with IP in deny	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request with IP in deny" do$/;"	t
request with invalid IP	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request with invalid IP" do$/;"	t
request with invalid credentials using header	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with invalid credentials using header-based auth and error handler" do$/;"	t
request with invalid credentials using header	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with invalid credentials using header-based auth" do$/;"	t
request with invalid credentials using params	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with invalid credentials using params-based auth and error handler" do$/;"	t
request with invalid credentials using params	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with invalid credentials using params-based auth" do$/;"	t
request with invalid password	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request with invalid password" do$/;"	t
request with invalid user	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request with invalid user" do$/;"	t
request with malformed credentials	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request with malformed credentials" do$/;"	t
request with valid IP	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request with valid IP" do$/;"	t
request with valid credentials	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request with valid credentials" do$/;"	t
request with valid credentials using header	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with valid credentials using header-based auth" do$/;"	t
request with valid credentials using params	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request with valid credentials using params-based auth" do$/;"	t
request with wrong scheme	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request with wrong scheme" do$/;"	t
request without credentials	deps/coherence/test/plugs/authentication/basic_test.exs	/^  test "request without credentials" do$/;"	t
request without credentials	deps/coherence/test/plugs/authentication/ip_address_test.exs	/^  test "request without credentials" do$/;"	t
request without credentials	deps/coherence/test/plugs/authentication/session_test.exs	/^  test "request without credentials" do$/;"	t
request without credentials using header	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request without credentials using header-based auth and error handler" do$/;"	t
request without credentials using header	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request without credentials using header-based auth" do$/;"	t
request without credentials using params	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request without credentials using params-based auth and error handler" do$/;"	t
request without credentials using params	deps/coherence/test/plugs/authentication/token_test.exs	/^  test "request without credentials using params-based auth" do$/;"	t
request_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp request_info(%Plug.Conn{method: method, query_string: query_string} = conn) do$/;"	f
request_origin	deps/cors_plug/lib/cors_plug.ex	/^  defp request_origin(%Plug.Conn{req_headers: headers}) do$/;"	f
request_transfer	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp request_transfer(state, {name, _vsn}) do$/;"	f
request_transfer_from_replicas_needing_synced	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp request_transfer_from_replicas_needing_synced(%{current_sample_count: 1} = state) do$/;"	f
request_transfer_from_replicas_needing_synced	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp request_transfer_from_replicas_needing_synced(state) do$/;"	f
required	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def required, do: dgettext(@domain, "required")$/;"	f
required	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def required, do: dgettext(@domain, "required")$/;"	f
required	deps/coherence/test/support/messages.exs	/^  def required, do: dgettext(@domain, "required")$/;"	f
required_label	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def required_label(f, name, opts \\\\ []) do$/;"	f
required_label	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def required_label(f, name, opts \\\\ []) do$/;"	f
required_label	deps/coherence/test/support/view_helpers.exs	/^  def required_label(f, name, opts \\\\ []) do$/;"	f
reraise	deps/ecto/lib/ecto/query/planner.ex	/^  defp reraise(exception) do$/;"	f
reraise	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp reraise(exception) do$/;"	f
reraise	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def reraise(_conn, :error, %__MODULE__{stack: stack} = reason) do$/;"	f
reraise	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def reraise(_conn, kind, reason) do$/;"	f
reraise	deps/plug/lib/plug/conn/wrapper_error.ex	/^  def reraise(conn, :error, reason) do$/;"	f
resend	deps/coherence/priv/templates/coh.install/controllers/coherence/invitation_controller.ex	/^  def resend(conn, %{"id" => id} = params) do$/;"	f
resend	deps/coherence/priv/templates/coherence.install/controllers/coherence/invitation_controller.ex	/^  def resend(conn, %{"id" => id} = params) do$/;"	f
resend	deps/coherence/web/controllers/invitation_controller.ex	/^  def resend(conn, %{"id" => id} = params) do$/;"	f
resend_confirmation_email	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def resend_confirmation_email, do: dgettext(@domain, "Resend confirmation email")$/;"	f
resend_confirmation_email	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def resend_confirmation_email, do: dgettext(@domain, "Resend confirmation email")$/;"	f
resend_confirmation_email	deps/coherence/test/support/messages.exs	/^  def resend_confirmation_email, do: dgettext(@domain, "Resend confirmation email")$/;"	f
reserve_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reserve_msgs() do$/;"	f
reserve_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reserve_recv(s, status, buffer) do$/;"	f
reserve_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reserve_send(s, %{prepare: :named} = status, buffer) do$/;"	f
reserve_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reserve_send(s, %{prepare: :unnamed}, buffer) do$/;"	f
reserved_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp reserved_error(query, s) do$/;"	f
reset	deps/boltex/lib/boltex/bolt.ex	/^  def reset(transport, port, options \\\\ []) do$/;"	f
reset	deps/db_connection/lib/db_connection/backoff.ex	/^  def reset(%Backoff{type: :exp} = s), do: %Backoff{s | state: nil}$/;"	f
reset	deps/db_connection/lib/db_connection/backoff.ex	/^  def reset(%Backoff{type: :rand_exp, min: min, state: state} = s) do$/;"	f
reset	deps/db_connection/lib/db_connection/backoff.ex	/^  def reset(%Backoff{type: :rand} = s), do: s$/;"	f
reset	deps/ecto/lib/ecto/multi.ex	/^        def reset(account, params) do$/;"	f
reset	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def reset(value, opts \\\\ []) do$/;"	f
reset cache on paramterised query after alter column type	deps/ecto/integration_test/sql/alter.exs	/^  test "reset cache on paramterised query after alter column type" do$/;"	t
reset cache on returning query after alter column type	deps/ecto/integration_test/sql/alter.exs	/^  test "reset cache on returning query after alter column type" do$/;"	t
reset password creates rememberable	deps/coherence/test/controllers/password_controller_test.exs	/^    test "reset password creates rememberable", %{conn: conn, user: user} do$/;"	t
reset_delta	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  def reset_delta(%State{context: ctx, replica: replica} = state) do$/;"	f
reset_email_sent	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def reset_email_sent, do: dgettext(@domain, "Reset email sent. Check your email for a reset link.")$/;"	f
reset_email_sent	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def reset_email_sent, do: dgettext(@domain, "Reset email sent. Check your email for a reset link.")$/;"	f
reset_email_sent	deps/coherence/test/support/messages.exs	/^  def reset_email_sent, do: dgettext(@domain, "Reset email sent. Check your email for a reset link.")$/;"	f
reset_failed_attempts	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def reset_failed_attempts(conn, %{failed_attempts: attempts} = user, true) when attempts > 0 do$/;"	f
reset_failed_attempts	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def reset_failed_attempts(conn, _user, _), do: conn$/;"	f
reset_failed_attempts	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def reset_failed_attempts(conn, %{failed_attempts: attempts} = user, true) when attempts > 0 do$/;"	f
reset_failed_attempts	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def reset_failed_attempts(conn, _user, _), do: conn$/;"	f
reset_failed_attempts	deps/coherence/web/controllers/session_controller.ex	/^  def reset_failed_attempts(conn, %{failed_attempts: attempts} = user, true) when attempts > 0 do$/;"	f
reset_failed_attempts	deps/coherence/web/controllers/session_controller.ex	/^  def reset_failed_attempts(conn, _user, _), do: conn$/;"	f
reset_password_token	deps/coherence/web/services/password_service.ex	/^  def reset_password_token(user) do$/;"	f
resolve	deps/timex/lib/timezone/timezone.ex	/^  def resolve(name, seconds_from_zeroyear, utc_or_wall)$/;"	f
resolve	deps/timex/lib/timezone/timezone.ex	/^  def resolve(tzname, datetime, utc_or_wall \\\\ :wall)$/;"	f
resolve	deps/timex/lib/timezone/timezone.ex	/^  def resolve(tzname, {{y,m,d},{h,mm,s,ms}}, utc_or_wall)$/;"	f
resolve	deps/timex/lib/timezone/timezone.ex	/^  def resolve(tzname, {{y,m,d},{h,mm,s}} = datetime, utc_or_wall)$/;"	f
resolve_timezone_info	deps/timex/lib/datetime/datetime.ex	/^  defp resolve_timezone_info(%DateTime{:time_zone => tzname} = datetime) do$/;"	f
resource	deps/con_cache/lib/con_cache/lock.ex	/^  defp resource(%__MODULE__{resources: resources}, id) do$/;"	f
resource	deps/db_connection/lib/db_connection.ex	/^  defp resource(%DBConnection{} = conn, start, next, stop, opts) do$/;"	f
resource_name	deps/phoenix/lib/phoenix/naming.ex	/^  def resource_name(alias, suffix \\\\ "") do$/;"	f
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, do: nested_context) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, opts) do$/;"	a
resources	deps/phoenix/lib/phoenix/router.ex	/^  defmacro resources(path, controller, opts, do: nested_context) do$/;"	a
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{state: state}, status, _body)$/;"	f
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{} = conn, status, body)$/;"	f
resp	deps/plug/lib/plug/conn.ex	/^  def resp(%Conn{}, _status, nil) do$/;"	f
response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response(%Conn{state: :unset}, _status) do$/;"	f
response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response(%Conn{status: status, resp_body: body}, given) do$/;"	f
response_content_type	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def response_content_type(conn, format) when is_atom(format) do$/;"	f
response_content_type?	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp response_content_type?(header, format) do$/;"	f
restart_apps_if_migrated	deps/ecto/lib/mix/ecto.ex	/^  def restart_apps_if_migrated(_apps, []), do: :ok$/;"	f
restart_apps_if_migrated	deps/ecto/lib/mix/ecto.ex	/^  def restart_apps_if_migrated(apps, [_|_]) do$/;"	f
restricted_area	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def restricted_area, do: dgettext(@domain, "Restricted Area")$/;"	f
restricted_area	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def restricted_area, do: dgettext(@domain, "Restricted Area")$/;"	f
restricted_area	deps/coherence/test/support/messages.exs	/^  def restricted_area, do: dgettext(@domain, "Restricted Area")$/;"	f
resume	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def resume(module, fun, args) do$/;"	f
resume_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp resume_session(%{"token" => token}, endpoint, opts) do$/;"	f
resume_session	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp resume_session(_params, _endpoint, _opts), do: :error$/;"	f
retry	deps/retry/lib/retry.ex	/^  defmacro retry([with: stream_builder], do: block) do$/;"	a
retry_while	deps/retry/lib/retry.ex	/^  defmacro retry_while([with: stream_builder], do: block) do$/;"	a
return_value_for_file_list	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp return_value_for_file_list([]), do: {:unknown, nil}$/;"	f
return_value_for_file_list	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp return_value_for_file_list([one_line]) do$/;"	f
return_value_for_file_list	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp return_value_for_file_list(_) do$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning(%Query{select: %{fields: fields}} = query, sources),$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning(%Query{select: nil}, _sources),$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning([]),$/;"	f
returning	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp returning(returning),$/;"	f
returning	deps/ecto/lib/ecto/query/planner.ex	/^  def returning(%{select: nil} = query, false) do$/;"	f
returning	deps/ecto/lib/ecto/query/planner.ex	/^  def returning(%{select: nil} = query, fields) when is_list(fields) do$/;"	f
returning	deps/ecto/lib/ecto/query/planner.ex	/^  def returning(%{select: nil} = query, true) do$/;"	f
returning	deps/ecto/lib/ecto/query/planner.ex	/^  def returning(%{select: nil}, []) do$/;"	f
returning	deps/ecto/lib/ecto/query/planner.ex	/^  def returning(%{select: select} = query, _fields) when select != nil do$/;"	f
returning	deps/ecto/lib/ecto/repo/schema.ex	/^  defp returning(schema, opts) do$/;"	f
returns already started for started repos	deps/ecto/integration_test/cases/repo.exs	/^  test "returns already started for started repos" do$/;"	t
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse(_command), do: false$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:alter,  %Table{} = table, changes}) do$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:drop, %Index{} = index}),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:rename, %Table{} = table, current_column, new_column}),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({:rename, %Table{} = table_current, %Table{} = table_new}),$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({command, %Constraint{} = constraint}) when command in @creates,$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({command, %Index{} = index}) when command in @creates,$/;"	f
reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp reverse({command, %Table{} = table, _columns}) when command in @creates,$/;"	f
rewrite	deps/postgrex/lib/postgrex/type_module.ex	/^  defp rewrite(ast, [{:->, meta, _} | _original]) do$/;"	f
rewrite_ix	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_ix(_mapping, ix), do: ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_ix(ix, ix), do: 0$/;"	f
rewrite_ix	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_ix(mapping, ix) when ix > mapping, do: ix - 1$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(0, ix, _last_ix, _source_ix, _inc_x), do: ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(join_ix, _ix, _last_ix, _source_ix, inc_ix), do: join_ix + inc_ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(join_ix, _ix, last_ix, _source_ix, _inc_ix) when join_ix > last_ix, do: join_ix$/;"	f
rewrite_ix	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_ix(last_ix, _ix, last_ix, source_ix, _inc_x), do: source_ix$/;"	f
rewrite_join	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_join(%{on: on, ix: ix} = join, mapping) when ix >= mapping do$/;"	f
rewrite_join	deps/ecto/lib/ecto/association.ex	/^  defp rewrite_join(join, _mapping) do$/;"	f
rewrite_join	deps/ecto/lib/ecto/query/planner.ex	/^  defp rewrite_join(%{on: on, ix: join_ix} = join, qual, ix, last_ix, source_ix, inc_ix) do$/;"	f
rewrite_on	deps/plug/lib/plug/ssl.ex	/^  defp rewrite_on(conn, rewrites) do$/;"	f
rewrite_sources	deps/ecto/lib/ecto/query/planner.ex	/^  def rewrite_sources(%{expr: expr, params: params} = part, mapping) do$/;"	f
rfc1123	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc1123(opts \\\\ []) do$/;"	f
rfc2822	deps/plug/lib/plug/conn/cookies.ex	/^  defp rfc2822({{year, month, day} = date, {hour, minute, second}}) do$/;"	f
rfc3339	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc3339(_opts \\\\ []), do: Timex.Parse.DateTime.Parsers.ISO8601Extended.parse$/;"	f
rfc822	deps/timex/lib/parse/datetime/parsers.ex	/^  def rfc822(opts \\\\ []) do$/;"	f
right joins with missing entries	deps/ecto/integration_test/cases/joins.exs	/^  test "right joins with missing entries" do$/;"	t
rm!	deps/coherence/lib/mix/mix_utils.ex	/^  def rm!(file) do$/;"	f
rm_dir!	deps/coherence/lib/mix/mix_utils.ex	/^  def rm_dir!(dir) do$/;"	f
rollback	deps/bolt_sips/lib/bolt_sips.ex	/^  defdelegate rollback(conn), to: Transaction$/;"	d
rollback	deps/bolt_sips/lib/bolt_sips/transaction.ex	/^  def rollback(conn) do$/;"	f
rollback	deps/db_connection/lib/db_connection.ex	/^  def rollback(%DBConnection{conn_ref: conn_ref} = conn, err) do$/;"	f
rollback	deps/db_connection/lib/db_connection.ex	/^  defp rollback(conn, log, opts, result) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql.ex	/^      def rollback(repo, value) do$/;"	f
rollback	deps/ecto/lib/ecto/adapters/sql.ex	/^  def rollback(repo, value) do$/;"	f
rollback	deps/ecto/lib/ecto/repo.ex	/^        def rollback(value) do$/;"	f
rollback	deps/postgrex/lib/postgrex.ex	/^  defdelegate rollback(conn, any), to: DBConnection$/;"	d
rolls back references in change	deps/ecto/integration_test/sql/migration.exs	/^  test "rolls back references in change\/1" do$/;"	t
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :inf} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :qNaN} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(%Decimal{coef: :sNaN} = num, _, _) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(num, n, mode) do$/;"	f
round	deps/decimal/lib/decimal.ex	/^  def round(num, places \\\\ 0, mode \\\\ :half_up)$/;"	f
round_month	deps/timex/lib/timex/helpers.ex	/^  def round_month(m) do$/;"	f
route	deps/phoenix/lib/phoenix/router/scope.ex	/^  def route(module, kind, verb, path, plug, plug_opts, opts) do$/;"	f
route_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp route_name(name), do: name <> "_path"$/;"	f
route_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp route_name(nil),  do: ""$/;"	f
router	apps/flexcility_web/lib/flexcility_web.ex	/^  def router do$/;"	f
router	deps/coherence/web/web.ex	/^  def router do$/;"	f
router	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^  defp router(nil, base) do$/;"	f
router	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^  defp router(router_name, _base) do$/;"	f
router_helpers	deps/coherence/web/controllers/controller_helpers.ex	/^  def router_helpers do$/;"	f
router_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp router_instructions(%{base: base, router: router, controllers: controllers}) do$/;"	f
router_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp router_instructions(%{base: base, router: router, controllers: controllers}) do$/;"	f
router_module	deps/phoenix/lib/phoenix/controller.ex	/^  def router_module(conn), do: conn.private.phoenix_router$/;"	f
row_decode	deps/postgrex/lib/postgrex/types.ex	/^  defp row_decode(<<-1::int32, rest::binary>>) do$/;"	f
row_decode	deps/postgrex/lib/postgrex/types.ex	/^  defp row_decode(<<>>), do: []$/;"	f
row_decode	deps/postgrex/lib/postgrex/types.ex	/^  defp row_decode(<<len::uint32, value::binary(len), rest::binary>>) do$/;"	f
rows_msg	deps/postgrex/lib/postgrex/protocol.ex	/^  defp rows_msg(s, rows, buffer) do$/;"	f
rows_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp rows_recv(%{sock: {mod, sock}} = s, result_types, rows, buffer, more) do$/;"	f
rows_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp rows_recv(%{types: types} = s, result_types, rows, buffer) do$/;"	f
rpc	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp rpc(pid, func) do$/;"	f
rule_applies_for_year	deps/tzdata/lib/tzdata/util.ex	/^  def rule_applies_for_year(rule, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, :max, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, :only, year) do$/;"	f
rule_applies_for_year_h	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_h(rule_from, rule_to, year) do$/;"	f
rule_applies_for_year_ints	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_ints(_, _, _) do$/;"	f
rule_applies_for_year_ints	deps/tzdata/lib/tzdata/util.ex	/^  defp rule_applies_for_year_ints(rule_from, rule_to, year) when rule_from > year or rule_to < year do$/;"	f
rules	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def rules(from_initial_pass) do$/;"	f
rules	deps/tzdata/lib/tzdata/release_reader.ex	/^  def rules,                  do: simple_lookup(:rules) |> hd |> elem(1)$/;"	f
rules_applying_for_rule_name_and_year	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  defp rules_applying_for_rule_name_and_year(rule_name, year) do$/;"	f
rules_for_name	deps/tzdata/lib/tzdata/release_reader.ex	/^  def rules_for_name(rules_name) do$/;"	f
rules_for_year	deps/tzdata/lib/tzdata/util.ex	/^  def rules_for_year(rules, year) do$/;"	f
run	deps/bolt_sips/lib/mix/tasks/cypher.ex	/^  def run(args) do$/;"	f
run	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  def run(args) do$/;"	f
run	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def run(args) do$/;"	f
run	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  def run(args) do$/;"	f
run	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def run(args) do$/;"	f
run	deps/coherence/lib/mix/tasks/coherence.make_templates.ex	/^  def run(_) do$/;"	f
run	deps/db_connection/lib/db_connection.ex	/^  def run(%DBConnection{} = conn, fun, _) do$/;"	f
run	deps/db_connection/lib/db_connection.ex	/^  def run(conn, fun, opts \\\\ [])$/;"	f
run	deps/db_connection/lib/db_connection.ex	/^  def run(pool, fun, opts) do$/;"	f
run	deps/distillery/lib/distillery/tasks/clean.ex	/^  def run(args) do$/;"	f
run	deps/distillery/lib/distillery/tasks/init.ex	/^  def run(args) do$/;"	f
run	deps/distillery/lib/distillery/tasks/release.ex	/^  def run(args) do$/;"	f
run	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp run([], _, _), do: :ok$/;"	f
run	deps/distillery/lib/mix/lib/releases/plugins/plugin.ex	/^  defp run([{plugin, opts}|plugins], callback, args) do$/;"	f
run	deps/ecto/lib/ecto/migration/runner.ex	/^  def run(repo, module, direction, operation, migrator_direction, opts) do$/;"	f
run	deps/ecto/lib/ecto/migrator.ex	/^  def run(repo, migration_source, direction, opts) do$/;"	f
run	deps/ecto/lib/ecto/multi.ex	/^  def run(multi, name, mod, fun, args)$/;"	f
run	deps/ecto/lib/ecto/multi.ex	/^  def run(multi, name, run) when is_function(run, 1) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.create.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.dump.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.gen.repo.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.load.ex	/^  def run(args) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.migrate.ex	/^  def run(args, migrator \\\\ &Ecto.Migrator.run\/4) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.migrations.ex	/^  def run(args, migrations \\\\ &Ecto.Migrator.migrations\/2, puts \\\\ &IO.puts\/1) do$/;"	f
run	deps/ecto/lib/mix/tasks/ecto.rollback.ex	/^  def run(args, migrator \\\\ &Ecto.Migrator.run\/4) do$/;"	f
run	deps/elixir_make/lib/mix/tasks/compile.make.ex	/^  def run(args) do$/;"	f
run	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  def run(_, priv_dir \\\\ "priv") do$/;"	f
run	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  def run(args) do$/;"	f
run	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  def run(_args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.digest.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.presence.ex	/^  def run([]) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.presence.ex	/^  def run([alias_name]) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.gen.secret.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.routes.ex	/^  def run(args, base \\\\ Mix.Phoenix.base()) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phoenix.server.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.digest.clean.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.digest.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.channel.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.html.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.json.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.presence.ex	/^  def run([]) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.presence.ex	/^  def run([alias_name]) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def run(args) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  def run([]),    do: run(["64"])$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  def run([_|_]), do: invalid_args!()$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.gen.secret.ex	/^  def run([int]), do: int |> parse!() |> random_string() |> Mix.shell.info()$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.routes.ex	/^  def run(args, base \\\\ Mix.Phoenix.base()) do$/;"	f
run	deps/phoenix/lib/mix/tasks/phx.server.ex	/^  def run(args) do$/;"	f
run	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp run(scheme, plug, opts, cowboy_options) do$/;"	f
run	deps/swoosh/lib/mix/tasks/swoosh.mailbox.server.ex	/^  def run(args) do$/;"	f
run down to	deps/ecto/integration_test/cases/migrator.exs	/^  test "run down to\/step migration" do$/;"	t
run up to	deps/ecto/integration_test/cases/migrator.exs	/^  test "run up to\/step migration" do$/;"	t
run_all	deps/ecto/lib/ecto/migrator.ex	/^  defp run_all(repo, versions, migration_source, direction, opts) do$/;"	f
run_args	deps/phoenix/lib/mix/tasks/phx.server.ex	/^  defp run_args do$/;"	f
run_args	deps/swoosh/lib/mix/tasks/swoosh.mailbox.server.ex	/^  defp run_args do$/;"	f
run_before_send	deps/plug/lib/plug/conn.ex	/^  defp run_before_send(%Conn{before_send: before_send} = conn, new) do$/;"	f
run_begin	deps/db_connection/lib/db_connection.ex	/^  defp run_begin(conn, fun, opts) do$/;"	f
run_child	deps/db_connection/lib/db_connection/task.ex	/^  def run_child(mod, fun, state, opts) do$/;"	f
run_close	deps/db_connection/lib/db_connection.ex	/^  defp run_close(conn, query, opts) do$/;"	f
run_declare	deps/db_connection/lib/db_connection.ex	/^  defp run_declare(conn, query, params, opts) do$/;"	f
run_end	deps/db_connection/lib/db_connection.ex	/^  defp run_end(conn, opts) do$/;"	f
run_execute	deps/db_connection/lib/db_connection.ex	/^  defp run_execute(conn, query, params, opts) do$/;"	f
run_maybe_in_transaction	deps/ecto/lib/ecto/migrator.ex	/^  defp run_maybe_in_transaction(repo, module, fun) do$/;"	f
run_merge	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  defp run_merge(pot_files, argv) do$/;"	f
run_meter	deps/db_connection/lib/db_connection.ex	/^  defp run_meter(%DBConnection{} = conn, fun, opts) do$/;"	f
run_meter	deps/db_connection/lib/db_connection.ex	/^  defp run_meter(conn, log, times, fun, opts) do$/;"	f
run_meter	deps/db_connection/lib/db_connection.ex	/^  defp run_meter(pool, fun, opts) do$/;"	f
run_prepare	deps/db_connection/lib/db_connection.ex	/^  defp run_prepare(conn, query, opts) do$/;"	f
run_prepare	deps/ecto/lib/ecto/repo/schema.ex	/^  defp run_prepare(changeset, prepare) do$/;"	f
run_prepare_declare	deps/db_connection/lib/db_connection.ex	/^  defp run_prepare_declare(conn, query, params, opts) do$/;"	f
run_prepare_execute	deps/db_connection/lib/db_connection.ex	/^  defp run_prepare_execute(conn, query, params, opts) do$/;"	f
run_query	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def run_query(query) do$/;"	f
run_query	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp run_query(sql, opts) do$/;"	f
run_query	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp run_query(sql, opts) do$/;"	f
run_statement	deps/boltex/lib/boltex/bolt.ex	/^  def run_statement(transport, port, statement, params \\\\ %{}, options \\\\ []) do$/;"	f
run_step	deps/ecto/lib/ecto/migrator.ex	/^  defp run_step(repo, versions, migration_source, direction, count, opts) do$/;"	f
run_to	deps/ecto/lib/ecto/migrator.ex	/^  defp run_to(repo, versions, migration_source, direction, target, opts) do$/;"	f
run_with_cmd	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp run_with_cmd(cmd, opts, opt_args) do$/;"	f
run_with_cmd	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp run_with_cmd(cmd, opts, opt_args) do$/;"	f
run_with_one_arg	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp run_with_one_arg(arg, opts, gettext_config) do$/;"	f
run_with_two_args	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp run_with_two_args(arg1, arg2, opts, gettext_config) do$/;"	f
runner	deps/ecto/lib/ecto/migration/runner.ex	/^  defp runner do$/;"	f
runner_config	deps/ecto/lib/ecto/migration/runner.ex	/^  defp runner_config do$/;"	f
runs all migrations	deps/ecto/integration_test/cases/migrator.exs	/^  test "runs all migrations" do$/;"	t
runs inside a sandbox even with failed queries	deps/ecto/integration_test/sql/sandbox.exs	/^  test "runs inside a sandbox even with failed queries" do$/;"	t
runs inside a sandbox that is rolled back on checkin	deps/ecto/integration_test/sql/sandbox.exs	/^  test "runs inside a sandbox that is rolled back on checkin" do$/;"	t
runs inside a sandbox that may be disabled	deps/ecto/integration_test/sql/sandbox.exs	/^  test "runs inside a sandbox that may be disabled" do$/;"	t
runs inside a sandbox with custom isolation level	deps/ecto/integration_test/sql/sandbox.exs	/^  test "runs inside a sandbox with custom isolation level" do$/;"	t
runtime_config	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def runtime_config(type, repo, otp_app, custom) do$/;"	f
runtime_error!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp runtime_error!(value) do$/;"	f
runtime_field!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp runtime_field!(query, key, kw, acc) do$/;"	f
safe_binary_to_term	deps/plug/lib/plug/crypto.ex	/^  def safe_binary_to_term(binary) when is_binary(binary) do$/;"	f
safe_list	deps/plug/lib/plug/crypto.ex	/^  defp safe_list([]), do: :ok$/;"	f
safe_list	deps/plug/lib/plug/crypto.ex	/^  defp safe_list([h | t]) do$/;"	f
safe_list	deps/plug/lib/plug/crypto.ex	/^  defp safe_list([h | t]) when is_list(t) do$/;"	f
safe_load_zip	deps/ecto/lib/ecto/schema.ex	/^  defp safe_load_zip([], [], _struct, _loader) do$/;"	f
safe_load_zip	deps/ecto/lib/ecto/schema.ex	/^  defp safe_load_zip([{field, type} | fields], [value | values], struct, loader) do$/;"	f
safe_terms	deps/plug/lib/plug/crypto.ex	/^  defp safe_terms(list) when is_list(list) do$/;"	f
safe_terms	deps/plug/lib/plug/crypto.ex	/^  defp safe_terms(map) when is_map(map) do$/;"	f
safe_terms	deps/plug/lib/plug/crypto.ex	/^  defp safe_terms(other) do$/;"	f
safe_terms	deps/plug/lib/plug/crypto.ex	/^  defp safe_terms(other) when is_atom(other) or is_number(other) or is_bitstring(other) or$/;"	f
safe_terms	deps/plug/lib/plug/crypto.ex	/^  defp safe_terms(tuple) when is_tuple(tuple) do$/;"	f
safe_to_string	deps/phoenix_html/lib/phoenix_html.ex	/^  def safe_to_string({:safe, iodata}) do$/;"	f
safe_tuple	deps/plug/lib/plug/crypto.ex	/^  defp safe_tuple(_tuple, 0), do: :ok$/;"	f
safe_tuple	deps/plug/lib/plug/crypto.ex	/^  defp safe_tuple(tuple, n) do$/;"	f
same?	deps/gettext/lib/gettext/po/translations.ex	/^  def same?(translation1, translation2) do$/;"	f
sample_id	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp sample_id(opts) do$/;"	f
sample_id	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp sample_id(opts) do$/;"	f
sample_id	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp sample_id(opts) do$/;"	f
save_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp save_instructions(config, instructions) do$/;"	f
save_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp save_instructions(config, instructions) do$/;"	f
save_login_cookie	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def save_login_cookie(conn, id, series, token, opts \\\\ []) do$/;"	f
save_login_cookie	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def save_login_cookie(conn, id, series, token, opts \\\\ []) do$/;"	f
save_login_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^  def save_login_cookie(conn, id, series, token, key, expire) do$/;"	f
save_login_cookie	deps/coherence/web/controllers/session_controller.ex	/^  def save_login_cookie(conn, id, series, token, opts \\\\ []) do$/;"	f
save_manifest	deps/phoenix/lib/phoenix/digester.ex	/^  defp save_manifest(%{"latest" => _, "version" => _, "digests" => _} = manifest, output_path) do$/;"	f
save_rememberable	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp save_rememberable(conn, _user, none) when none in [nil, false], do: conn$/;"	f
save_rememberable	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  defp save_rememberable(conn, user, _) do$/;"	f
save_rememberable	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp save_rememberable(conn, _user, none) when none in [nil, false], do: conn$/;"	f
save_rememberable	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  defp save_rememberable(conn, user, _) do$/;"	f
save_rememberable	deps/coherence/web/controllers/session_controller.ex	/^  defp save_rememberable(conn, _user, none) when none in [nil, false], do: conn$/;"	f
save_rememberable	deps/coherence/web/controllers/session_controller.ex	/^  defp save_rememberable(conn, user, _) do$/;"	f
save_token_in_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def save_token_in_session({conn, creds}, param) do$/;"	f
save_token_in_session	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  def save_token_in_session({conn, nil}, _), do: {conn, nil}$/;"	f
savepoint_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_msgs(s, :flush, msgs) do$/;"	f
savepoint_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_msgs(s, :flushed_sync, msgs) do$/;"	f
savepoint_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_msgs(s, :sync, msgs) do$/;"	f
savepoint_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_recv(s, status, query, buffer, recv) do$/;"	f
savepoint_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_recv(s, status, res, buffer) do$/;"	f
savepoint_rollback	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_rollback(s, %{sync: :flush} = status, err, buffer) do$/;"	f
savepoint_rollback	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_rollback(s, status, err, buffer) do$/;"	f
savepoint_rollback	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_rollback(s, status, err, msgs, buffer) do$/;"	f
savepoint_rollback_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_rollback_recv(s, status, err, buffer) do$/;"	f
savepoint_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp savepoint_send(s, status, statements, res, buffer) do$/;"	f
scale	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp scale(coef, 0), do: coef$/;"	f
scale	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp scale(coef, diff) when diff < 0, do: div(coef, pow10(-diff))$/;"	f
scale	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp scale(coef, diff) when diff > 0, do: coef * pow10(diff)$/;"	f
scale	deps/timex/lib/time/duration.ex	/^  def scale(%Duration{megaseconds: mega, seconds: secs, microseconds: micro}, coef) do$/;"	f
scale_down	deps/decimal/lib/decimal.ex	/^  defp scale_down(num, den, exp) do$/;"	f
scale_up	deps/decimal/lib/decimal.ex	/^  defp scale_up(num, den, exp) when num >= den, do: {num, exp}$/;"	f
scale_up	deps/decimal/lib/decimal.ex	/^  defp scale_up(num, den, exp), do: scale_up(num <<< 1, den, exp - 1)$/;"	f
schedule_inactive_shutdown	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  defp schedule_inactive_shutdown(window_ms) do$/;"	f
schedule_next_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp schedule_next_heartbeat(state) do$/;"	f
schema	deps/ecto/lib/ecto/schema.ex	/^  defmacro schema(source, [do: block]) do$/;"	a
schema	deps/ecto/lib/ecto/schema.ex	/^  defp schema(source, meta?, type, block) do$/;"	f
schema migration	deps/ecto/integration_test/cases/migrator.exs	/^  test "schema migration" do$/;"	t
schema_defaults	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp schema_defaults(attrs) do$/;"	f
schema_defaults	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp schema_defaults(attrs) do$/;"	f
schema_fields	deps/coherence/lib/coherence/schema.ex	/^  def schema_fields, do: [$/;"	f
schema_for_association_join!	deps/ecto/lib/ecto/query/planner.ex	/^  defp schema_for_association_join!(query, join, source) do$/;"	f
schema_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp schema_instructions(%{base: base, found_model?: false}), do: """$/;"	f
schema_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp schema_instructions(_), do: ""$/;"	f
schema_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp schema_instructions(%{base: base, found_model?: false}), do: """$/;"	f
schema_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp schema_instructions(_), do: ""$/;"	f
schema_type	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp schema_type(:text), do: :string$/;"	f
schema_type	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp schema_type(:uuid), do: Ecto.UUID$/;"	f
schema_type	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp schema_type(val) do$/;"	f
schemaless calendar types	deps/ecto/integration_test/cases/type.exs	/^  test "schemaless calendar types" do$/;"	t
schemaless types	deps/ecto/integration_test/cases/type.exs	/^  test "schemaless types" do$/;"	t
scheme	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp scheme(:ssl), do: :https$/;"	f
scheme	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp scheme(:tcp), do: :http$/;"	f
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(options, do: context) do$/;"	a
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(path, alias, options, do: context) do$/;"	a
scope	deps/phoenix/lib/phoenix/router.ex	/^  defmacro scope(path, options, do: context) do$/;"	a
script_name	deps/phoenix/lib/phoenix/endpoint.ex	/^      def script_name do$/;"	f
script_name	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def script_name(endpoint) do$/;"	f
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(" " <> rest), do: scrub?(rest)$/;"	f
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(""), do: true$/;"	f
scrub?	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub?(_), do: false$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(%{__struct__: mod} = struct) when is_atom(mod) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(%{} = param) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(param) do$/;"	f
scrub_param	deps/phoenix/lib/phoenix/controller.ex	/^  defp scrub_param(param) when is_list(param) do$/;"	f
scrub_params	deps/phoenix/lib/phoenix/controller.ex	/^  def scrub_params(conn, required_key) when is_binary(required_key) do$/;"	f
search_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def search_input(form, field, opts \\\\ []) do$/;"	f
second	deps/timex/lib/parse/datetime/parsers.ex	/^  def second(opts \\\\ []) do$/;"	f
second login	deps/coherence/test/services/trackable_service_test.exs	/^    test "second login", %{conn: conn, user: user} do$/;"	t
second_fractional	deps/timex/lib/parse/datetime/parsers.ex	/^  def second_fractional(_) do$/;"	f
seconds_epoch	deps/timex/lib/parse/datetime/parsers.ex	/^  def seconds_epoch(opts \\\\ []) do$/;"	f
secure_check	deps/bcrypt_elixir/lib/bcrypt/tools.ex	/^  def secure_check(hash, stored) do$/;"	f
secure_check	deps/bcrypt_elixir/lib/bcrypt/tools.ex	/^  defp secure_check("", "", acc) do$/;"	f
secure_check	deps/bcrypt_elixir/lib/bcrypt/tools.ex	/^  defp secure_check(<<h, rest_h :: binary>>, <<s, rest_s :: binary>>, acc) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  def secure_compare(left, right) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  defp secure_compare(<<>>, <<>>, acc) do$/;"	f
secure_compare	deps/plug/lib/plug/crypto.ex	/^  defp secure_compare(<<x, left :: binary>>, <<y, right :: binary>>, acc) do$/;"	f
seed	deps/db_connection/lib/db_connection/backoff.ex	/^  defp seed() do$/;"	f
seeds_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp seeds_instructions(%{repo: repo, user_schema: user_schema, authenticatable: true} = config) do$/;"	f
seeds_instructions	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp seeds_instructions(_config), do: ""$/;"	f
seeds_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp seeds_instructions(%{repo: repo, user_schema: user_schema, authenticatable: true} = config) do$/;"	f
seeds_instructions	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp seeds_instructions(_config), do: ""$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match("*" <> argument, buffer, context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(":" <> argument, buffer, context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(<<>>, buffer, _context) do$/;"	f
segment_match	deps/plug/lib/plug/router/utils.ex	/^  defp segment_match(<<h, t::binary>>, buffer, context) do$/;"	f
segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp segments(segments, [], _reserved) do$/;"	f
segments	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp segments(segments, query, reserved) do$/;"	f
select	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp select(%Query{select: %{fields: fields}, distinct: distinct} = query,$/;"	f
select	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp select([], _sources, _query),$/;"	f
select	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp select(fields, sources, query) do$/;"	f
select	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp select(%Query{select: %{fields: fields}} = query, select_distinct, sources) do$/;"	f
select	deps/ecto/lib/ecto/query.ex	/^  defmacro select(query, binding \\\\ [], expr) do$/;"	a
select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def select(form, field, options, opts \\\\ []) do$/;"	f
select!	deps/ecto/lib/ecto/query/builder/select.ex	/^  def select!(kind, query, fields, file, line) do$/;"	f
select_dump	deps/ecto/lib/ecto/query/planner.ex	/^  defp select_dump(fields, dumper, ix) do$/;"	f
select_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_environment(%Config{selected_environment: :default, default_environment: :default} = c),$/;"	f
select_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_environment(%Config{selected_environment: :default, default_environment: name} = c),$/;"	f
select_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_environment(%Config{selected_environment: name} = c),$/;"	f
select_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_environment(_),            do: {:error, :missing_environment}$/;"	f
select_environment	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_environment({:ok, _} = e), do: e$/;"	f
select_field	deps/ecto/lib/ecto/query/planner.ex	/^  defp select_field(field, ix) do$/;"	f
select_fields	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp select_fields([], _sources, _query),$/;"	f
select_fields	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp select_fields(fields, sources, query) do$/;"	f
select_merge	deps/ecto/lib/ecto/query.ex	/^  defmacro select_merge(query, binding \\\\ [], expr) do$/;"	a
select_release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_release(%Config{selected_release: :default, default_release: :default} = c),$/;"	f
select_release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_release(%Config{selected_release: :default, default_release: name} = c),$/;"	f
select_release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_release(%Config{selected_release: name} = c),$/;"	f
select_release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_release(_),            do: {:error, :missing_release}$/;"	f
select_release	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def select_release({:ok, _} = r), do: r$/;"	f
select_versions	deps/ecto/lib/ecto/adapters/mysql.ex	/^  defp select_versions(table, config) do$/;"	f
select_versions	deps/ecto/lib/ecto/adapters/postgres.ex	/^  defp select_versions(table, config) do$/;"	f
selected	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp selected(form, field, opts) do$/;"	f
send	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def send(cn, query), do: send(cn, query, %{})$/;"	f
send	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def send(cn, query, params), do: pool_server(cn, query, params)$/;"	f
send	deps/connection/lib/connection.ex	/^        def send(conn, data), do: Connection.call(conn, {:send, data})$/;"	f
send!	deps/bolt_sips/lib/bolt_sips/query.ex	/^  defp send!(conn, statement, params, acc) do$/;"	f
send_an_unlock_email	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def send_an_unlock_email, do: dgettext(@domain, "Send an unlock email")$/;"	f
send_an_unlock_email	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def send_an_unlock_email, do: dgettext(@domain, "Send an unlock email")$/;"	f
send_an_unlock_email	deps/coherence/test/support/messages.exs	/^  def send_an_unlock_email, do: dgettext(@domain, "Send an unlock email")$/;"	f
send_and_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp send_and_recv(s, %{mode: :savepoint, sync: sync} = status, query, buffer, msgs, recv) do$/;"	f
send_and_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp send_and_recv(s, %{mode: :transaction, sync: sync} = status, query, buffer, msgs, recv) do$/;"	f
send_chunked	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_chunked(req, status, headers) do$/;"	f
send_chunked	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_chunked(state, _status, _headers),$/;"	f
send_chunked	deps/plug/lib/plug/conn.ex	/^  def send_chunked(%Conn{adapter: {adapter, payload}, owner: owner} = conn, status) do$/;"	f
send_chunked	deps/plug/lib/plug/conn.ex	/^  def send_chunked(%Conn{state: state}, status)$/;"	f
send_confirmation	deps/coherence/web/controllers/controller_helpers.ex	/^  def send_confirmation(conn, user, user_schema) do$/;"	f
send_download	deps/phoenix/lib/phoenix/controller.ex	/^  def send_download(conn, kind, opts \\\\ [])$/;"	f
send_download	deps/phoenix/lib/phoenix/controller.ex	/^  def send_download(conn, {:binary, contents}, opts) do$/;"	f
send_download	deps/phoenix/lib/phoenix/controller.ex	/^  def send_download(conn, {:file, path}, opts) do$/;"	f
send_file	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_file(req, status, headers, path, offset, length) do$/;"	f
send_file	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_file(%{method: "HEAD"} = state, status, headers, _path, _offset, _length) do$/;"	f
send_file	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_file(state, status, headers, path, offset, length) do$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(%Conn{adapter: {adapter, payload}, owner: owner} = conn, status, file, offset, length) when is_binary(file) do$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(%Conn{state: state}, status, _file, _offset, _length)$/;"	f
send_file	deps/plug/lib/plug/conn.ex	/^  def send_file(conn, status, file, offset \\\\ 0, length  \\\\ :all)$/;"	f
send_messages	deps/boltex/lib/boltex/bolt.ex	/^  def send_messages(transport, port, messages) do$/;"	f
send_resp	deps/phoenix/lib/phoenix/controller.ex	/^  defp send_resp(conn, default_status, default_content_type, body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  def send_resp(req, status, headers, body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_resp(%{method: "HEAD"} = state, status, headers, _body) do$/;"	f
send_resp	deps/plug/lib/plug/adapters/test/conn.ex	/^  def send_resp(state, status, headers, body) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{adapter: {adapter, payload}, state: :set, owner: owner} = conn) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{state: :unset}) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{} = conn, status, body) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(%Conn{}) do$/;"	f
send_resp	deps/plug/lib/plug/conn.ex	/^  def send_resp(conn)$/;"	f
send_stuttered_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp send_stuttered_heartbeat(pid, interval) do$/;"	f
send_user_email	deps/coherence/web/controllers/controller_helpers.ex	/^  def send_user_email(fun, model, url) do$/;"	f
sender	deps/swoosh/lib/swoosh/adapters/smtp/helpers.ex	/^    def sender(%Email{} = email) do$/;"	f
sent_resp	deps/plug/lib/plug/test.ex	/^  def sent_resp(%Conn{adapter: {Plug.Adapters.Test.Conn, %{ref: ref}}}) do$/;"	f
seq	deps/poison/lib/poison/encoder.ex	/^  defp seq(char) do$/;"	f
serve_static	deps/plug/lib/plug/static.ex	/^  defp serve_static({:error, conn}, _segments, _options) do$/;"	f
serve_static	deps/plug/lib/plug/static.ex	/^  defp serve_static({:ok, conn, file_info, path}, segments, options) do$/;"	f
server	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp server() do$/;"	f
server?	deps/phoenix/lib/phoenix/endpoint.ex	/^  def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do$/;"	f
server?	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def server?(conf) when is_list(conf) do$/;"	f
server?	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def server?(otp_app, endpoint) when is_atom(otp_app) and is_atom(endpoint) do$/;"	f
server_children	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp server_children(mod, conf, server?) do$/;"	f
server_fun	deps/exactor/lib/exactor/operations.ex	/^  defp server_fun(:abcast), do: :abcast$/;"	f
server_fun	deps/exactor/lib/exactor/operations.ex	/^  defp server_fun(:defcall), do: :call$/;"	f
server_fun	deps/exactor/lib/exactor/operations.ex	/^  defp server_fun(:defcast), do: :cast$/;"	f
server_fun	deps/exactor/lib/exactor/operations.ex	/^  defp server_fun(:multicall), do: :multi_call$/;"	f
server_info	deps/plug/lib/plug/adapters/translator.ex	/^  defp server_info(%Plug.Conn{host: host, port: port, scheme: scheme}) do$/;"	f
server_lookup	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp server_lookup(manager, opts) do$/;"	f
server_match	deps/exactor/lib/exactor/operations.ex	/^  defp server_match(_), do: []$/;"	f
server_match	deps/exactor/lib/exactor/operations.ex	/^  defp server_match(export) when export == nil or export == true, do: [quote(do: server)]$/;"	f
server_ref	deps/exactor/lib/exactor/operations.ex	/^  defp server_ref(options, _) do$/;"	f
server_ref	deps/exactor/lib/exactor/operations.ex	/^  defp server_ref(options, op) when op in [:multicall, :abcast] do$/;"	f
server_ref	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp server_ref(endpoint_id, id, pid, topic) do$/;"	f
service	deps/coherence/web/web.ex	/^  def service do$/;"	f
session_create	deps/coherence/lib/coherence/redirects.ex	/^      def session_create(conn, _) do$/;"	f
session_create	deps/coherence/lib/coherence/redirects.ex	/^      def session_create(conn, _), do: redirect(conn, to: landing_path(conn, :index))$/;"	f
session_create	deps/coherence/priv/templates/coh.install/controllers/coherence/redirects.ex	/^      def session_create(conn, _), do: redirect(conn, to: landing_path(conn, :index))$/;"	f
session_create	deps/coherence/priv/templates/coherence.install/controllers/coherence/redirects.ex	/^      def session_create(conn, _), do: redirect(conn, to: landing_path(conn, :index))$/;"	f
session_create	deps/coherence/test/support/redirect.exs	/^      def session_create(conn, _), do: redirect(conn, landing_path(conn, :index))$/;"	f
session_delete	deps/coherence/lib/coherence/redirects.ex	/^      def session_delete(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
session_delete	deps/coherence/lib/coherence/redirects.ex	/^      def session_delete(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
session_delete	deps/coherence/priv/templates/coh.install/controllers/coherence/redirects.ex	/^      def session_delete(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
session_delete	deps/coherence/priv/templates/coherence.install/controllers/coherence/redirects.ex	/^      def session_delete(conn, _), do: redirect(conn, to: session_path(conn, :new))$/;"	f
session_delete	deps/coherence/test/support/redirect.exs	/^      def session_delete(conn, _), do: redirect(conn, session_path(conn, :new))$/;"	f
session_key	deps/plug/lib/plug/conn.ex	/^  defp session_key(atom) when is_atom(atom), do: Atom.to_string(atom)$/;"	f
session_key	deps/plug/lib/plug/conn.ex	/^  defp session_key(binary) when is_binary(binary), do: binary$/;"	f
set	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defmacro set(opts) when is_list(opts) do$/;"	a
set	deps/timex/lib/date/date.ex	/^  def set(%Date{} = date, options) do$/;"	f
set	deps/timex/lib/datetime/datetime.ex	/^  def set(%DateTime{} = date, options) do$/;"	f
set	deps/timex/lib/datetime/erlang.ex	/^  def set(_,_), do: {:error, :invalid_date}$/;"	f
set	deps/timex/lib/datetime/erlang.ex	/^  def set({y,m,d} = date, options) when is_date(y,m,d),$/;"	f
set	deps/timex/lib/datetime/erlang.ex	/^  def set({{y,m,d},{h,mm,s,us}}, options) when is_datetime(y,m,d,h,mm,s) do$/;"	f
set	deps/timex/lib/datetime/erlang.ex	/^  def set({{y,m,d},{h,mm,s}} = datetime, options) when is_datetime(y,m,d,h,mm,s),$/;"	f
set	deps/timex/lib/datetime/map.ex	/^  def set(map, options),              do: convert(map, :set, [options])$/;"	f
set	deps/timex/lib/datetime/naivedatetime.ex	/^  def set(%NaiveDateTime{} = date, options) do$/;"	f
set	deps/timex/lib/protocol.ex	/^  def set(%{__struct__: _} = d, options), do: Timex.set(Map.from_struct(d), options)$/;"	f
set	deps/timex/lib/protocol.ex	/^  def set(_datetime, _options), do: {:error, :invalid_date}$/;"	f
set	deps/timex/lib/protocol.ex	/^  def set(datetime, options)$/;"	f
set	deps/timex/lib/timex.ex	/^  defdelegate set(date, options), to: Timex.Protocol$/;"	d
set_and_reply	deps/exactor/lib/exactor/responders.ex	/^  defmacro set_and_reply(new_state, response, timeout \\\\ nil) do$/;"	a
set_api_key	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp set_api_key(body, config), do: Map.put(body, :key, config[:api_key])$/;"	f
set_async	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp set_async(body, %Email{provider_options: %{async: true}}), do: Map.put(body, :async, true)$/;"	f
set_async	deps/swoosh/lib/swoosh/adapters/mandrill.ex	/^  defp set_async(body, _email), do: body$/;"	f
set_context	deps/decimal/lib/decimal.ex	/^  def set_context(%Context{} = context) do$/;"	f
set_current_release	deps/tzdata/lib/tzdata/ets_holder.ex	/^  defp set_current_release(release_version) do$/;"	f
set_latest_remote_poll_date	deps/tzdata/lib/tzdata/data_loader.ex	/^  def set_latest_remote_poll_date do$/;"	f
set_password	deps/coherence/lib/coherence/schema.ex	/^        defp set_password(changeset, _params) do$/;"	f
set_request_id	deps/plug/lib/plug/request_id.ex	/^  defp set_request_id({conn, request_id}, header) do$/;"	f
set_transaction_isolation_level	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  defp set_transaction_isolation_level(repo, isolation) do$/;"	f
set_ttl	deps/con_cache/lib/con_cache/operations.ex	/^  defp set_ttl(%ConCache{ttl_manager: nil}, _, _), do: :ok$/;"	f
set_ttl	deps/con_cache/lib/con_cache/operations.ex	/^  defp set_ttl(%ConCache{ttl_manager: ttl_manager}, key, ttl) do$/;"	f
set_ttl	deps/con_cache/lib/con_cache/operations.ex	/^  defp set_ttl(_, _, :no_update), do: :ok$/;"	f
set_view	deps/coherence/web/controllers/controller_helpers.ex	/^  def set_view(conn, opts) do$/;"	f
set_width	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  defp set_width(min, max, type, directive, opts) do$/;"	f
setopts	deps/postgrex/lib/postgrex/protocol.ex	/^  defp setopts(%{sock: {mod, sock}} = s, opts, buffer) do$/;"	f
setopts	deps/postgrex/lib/postgrex/protocol.ex	/^  defp setopts(:gen_tcp, sock, opts), do: :inet.setopts(sock, opts)$/;"	f
setopts	deps/postgrex/lib/postgrex/protocol.ex	/^  defp setopts(:ssl, sock, opts), do: :ssl.setopts(sock, opts)$/;"	f
setup_controller	deps/coherence/test/controllers/unlock_controller_test.exs	/^  def setup_controller %{conn: conn} do$/;"	f
setup_trackable_table	deps/coherence/test/controllers/password_controller_test.exs	/^  def setup_trackable_table(%{conn: conn}) do$/;"	f
setup_trackable_table	deps/coherence/test/controllers/session_controller_test.exs	/^  def setup_trackable_table %{conn: conn} do$/;"	f
setup_trackable_table	deps/coherence/test/controllers/unlock_controller_test.exs	/^  def setup_trackable_table %{conn: conn} do$/;"	f
share_and_reply	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp share_and_reply(%{checkouts: checkouts} = state, pid) do$/;"	f
shell_escape	deps/swoosh/lib/swoosh/adapters/sendmail.ex	/^    def shell_escape(s) do$/;"	f
shell_info	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp shell_info(%{silent: true} = config, _message), do: config$/;"	f
shell_info	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp shell_info(config, message) do$/;"	f
shell_info	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp shell_info(%{silent: true} = config, _message), do: config$/;"	f
shell_info	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp shell_info(config, message) do$/;"	f
shift	deps/coherence/web/controllers/controller_helpers.ex	/^  def shift(datetime, opts) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%Date{} = date, [{_, 0}]),               do: date$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(%Date{} = date, options) do$/;"	f
shift	deps/timex/lib/date/date.ex	/^  def shift(_, _), do: {:error, :badarg}$/;"	f
shift	deps/timex/lib/datetime/datetime.ex	/^  def shift(%DateTime{} = datetime, shifts) when is_list(shifts) do$/;"	f
shift	deps/timex/lib/datetime/erlang.ex	/^  def shift(_, _), do: {:error, :invalid_date}$/;"	f
shift	deps/timex/lib/datetime/erlang.ex	/^  def shift(date, [{_, 0}]),$/;"	f
shift	deps/timex/lib/datetime/erlang.ex	/^  def shift({y,m,d}=date, options) when is_date(y,m,d),$/;"	f
shift	deps/timex/lib/datetime/erlang.ex	/^  def shift({{y,m,d},{h,mm,s,_us}}=datetime, options) when is_datetime(y,m,d,h,mm,s),$/;"	f
shift	deps/timex/lib/datetime/erlang.ex	/^  def shift({{y,m,d},{h,mm,s}}=datetime, options) when is_datetime(y,m,d,h,mm,s),$/;"	f
shift	deps/timex/lib/datetime/map.ex	/^  def shift(map, options),            do: convert(map, :shift, [options])$/;"	f
shift	deps/timex/lib/datetime/naivedatetime.ex	/^  def shift(%NaiveDateTime{} = datetime, shifts) when is_list(shifts) do$/;"	f
shift	deps/timex/lib/protocol.ex	/^  def shift(%{__struct__: _} = d, options), do: Timex.shift(Map.from_struct(d), options)$/;"	f
shift	deps/timex/lib/protocol.ex	/^  def shift(_datetime, _options), do: {:error, :invalid_date}$/;"	f
shift	deps/timex/lib/protocol.ex	/^  def shift(datetime, options)$/;"	f
shift	deps/timex/lib/timex.ex	/^  defdelegate shift(date, options), to: Timex.Protocol$/;"	d
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%AmbiguousDateTime{:before => before_dt, :after => after_dt}, value, unit) do$/;"	f
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%DateTime{:year => year, :month => month} = datetime, value, :months) do$/;"	f
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%DateTime{:year => y} = datetime, value, :years) do$/;"	f
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%DateTime{microsecond: {current_usecs, _}} = datetime, value, :microseconds) do$/;"	f
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%DateTime{microsecond: {current_usecs, _}} = datetime, value, :milliseconds) do$/;"	f
shift_by	deps/timex/lib/datetime/datetime.ex	/^  defp shift_by(%DateTime{microsecond: {us, p}} = datetime, value, units) do$/;"	f
shift_by	deps/timex/lib/datetime/naivedatetime.ex	/^  defp shift_by(%NaiveDateTime{:year => year, :month => month} = datetime, value, :months) do$/;"	f
shift_by	deps/timex/lib/datetime/naivedatetime.ex	/^  defp shift_by(%NaiveDateTime{:year => y} = datetime, value, :years) do$/;"	f
shift_by	deps/timex/lib/datetime/naivedatetime.ex	/^  defp shift_by(%NaiveDateTime{microsecond: {current_usecs, _}} = datetime, value, :microseconds) do$/;"	f
shift_by	deps/timex/lib/datetime/naivedatetime.ex	/^  defp shift_by(%NaiveDateTime{microsecond: {current_usecs, _}} = datetime, value, :milliseconds) do$/;"	f
shift_by	deps/timex/lib/datetime/naivedatetime.ex	/^  defp shift_by(%NaiveDateTime{microsecond: {us, _}} = datetime, value, units) do$/;"	f
shift_to_week_of_year	deps/timex/lib/parse/datetime/parser.ex	/^  defp shift_to_week_of_year(:mon, %{year: y} = datetime, value) when is_integer(value) do$/;"	f
shift_to_week_of_year	deps/timex/lib/parse/datetime/parser.ex	/^  defp shift_to_week_of_year(:sun, %{year: y} = datetime, value) when is_integer(value) do$/;"	f
should raise if no view is set	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^  test "should raise if no view is set" do$/;"	t
shout broadcasts to	deps/phoenix/priv/templates/phoenix.gen.channel/channel_test.exs	/^  test "shout broadcasts to <%= singular %>:lobby", %{socket: socket} do$/;"	t
shout broadcasts to	deps/phoenix/priv/templates/phx.gen.channel/channel_test.exs	/^  test "shout broadcasts to <%= singular %>:lobby", %{socket: socket} do$/;"	t
show	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def show(conn, _) do$/;"	f
show	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def show(conn, _) do$/;"	f
show	deps/coherence/web/controllers/registration_controller.ex	/^  def show(conn, _) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, %{"id" => id}, current_user) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, _params) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^        def show(conn, params) do$/;"	f
show	deps/phoenix/lib/phoenix/controller.ex	/^      def show(conn, _params) do$/;"	f
show	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
show	deps/phoenix/priv/templates/phx.gen.json/controller.ex	/^  def show(conn, %{"id" => id}) do$/;"	f
shows chosen resource	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "shows chosen resource", %{conn: conn} do$/;"	t
shows chosen resource	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "shows chosen resource", %{conn: conn} do$/;"	t
shutdown	deps/plug/lib/plug/adapters/cowboy.ex	/^  def shutdown(ref) do$/;"	f
sigil_E	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro sigil_E(expr, opts) do$/;"	a
sigil_e	deps/phoenix_html/lib/phoenix_html.ex	/^  defmacro sigil_e(expr, opts) do$/;"	a
sign	deps/phoenix/lib/phoenix/token.ex	/^  def sign(context, salt, data, opts \\\\ []) when is_binary(salt) do$/;"	f
sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def sign(message, secret, :sha)$/;"	f
sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def sign(message, secret, digest_type \\\\ :sha256)$/;"	f
sign	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def sign(message, secret, digest_type)$/;"	f
sign_conn	deps/coherence/test/plugs/authentication/session_test.exs	/^  def sign_conn(conn, secret \\\\ @secret) do$/;"	f
sign_in	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def sign_in, do: dgettext(@domain, "Sign In")$/;"	f
sign_in	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def sign_in, do: dgettext(@domain, "Sign In")$/;"	f
sign_in	deps/coherence/test/support/messages.exs	/^  def sign_in, do: dgettext(@domain, "Sign In")$/;"	f
sign_out	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def sign_out, do: dgettext(@domain, "Sign Out")$/;"	f
sign_out	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def sign_out, do: dgettext(@domain, "Sign Out")$/;"	f
sign_out	deps/coherence/test/support/messages.exs	/^  def sign_out, do: dgettext(@domain, "Sign Out")$/;"	f
sign_token	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp sign_token(endpoint, data, opts) do$/;"	f
sign_user_token	deps/coherence/web/services/session_service.ex	/^  def sign_user_token(conn, user) do$/;"	f
signatures	deps/gettext/lib/gettext/compiler.ex	/^  defp signatures do$/;"	f
signed_in_successfully	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def signed_in_successfully, do: dgettext(@domain, "Signed in successfully.")$/;"	f
signed_in_successfully	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def signed_in_successfully, do: dgettext(@domain, "Signed in successfully.")$/;"	f
signed_in_successfully	deps/coherence/test/support/messages.exs	/^  def signed_in_successfully, do: dgettext(@domain, "Signed in successfully.")$/;"	f
signin_link	deps/coherence/test/support/view_helpers.exs	/^  def signin_link(conn, text \\\\ @signin_link) do$/;"	f
signing_input	deps/plug/lib/plug/crypto/message_verifier.ex	/^  defp signing_input(protected, payload)$/;"	f
signout_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def signout_link(conn, text \\\\ @signout_link, signout_class \\\\ "") do$/;"	f
signout_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def signout_link(conn, text \\\\ @signout_link, signout_class \\\\ "") do$/;"	f
signout_link	deps/coherence/test/support/view_helpers.exs	/^  def signout_link(conn, text \\\\ @signout_link, signout_class \\\\ "") do$/;"	f
simple_lookup	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp simple_lookup(key) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(%{on_replace: on_replace} = relation, new, current_pks, new_pks, fun, current) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(_relation, new, _current_pks, _new_pks, fun, nil) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(_relation, nil, _current_pks, _new_pks, fun, current) do$/;"	f
single_change	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp single_change(new, current, fun, allowed_actions, skippable?) do$/;"	f
single_quote	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp single_quote(value), do: [?', escape_string(value), ?']$/;"	f
site_changeset	apps/flexcility/lib/flexcility/admin/admin.ex	/^  defp site_changeset(%Site{} = site, attrs) do$/;"	f
site_name	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  defp site_name, do: Config.site_name(inspect Config.module)$/;"	f
site_name	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  defp site_name, do: Config.site_name(inspect Config.module)$/;"	f
site_name	deps/coherence/test/support/email.exs	/^  defp site_name, do: Coherence.Config.site_name(inspect Coherence.Config.module)$/;"	f
size	deps/con_cache/lib/con_cache.ex	/^  def size(cache_id),$/;"	f
size	deps/con_cache/lib/con_cache/operations.ex	/^  def size(%ConCache{ets: ets}) do$/;"	f
skip?	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp skip?(%{valid?: true, changes: empty, action: :update}) when empty == %{},$/;"	f
skip?	deps/ecto/lib/ecto/changeset/relation.ex	/^  defp skip?(_changeset),$/;"	f
skip_csrf_protection?	deps/plug/lib/plug/csrf_protection.ex	/^  defp skip_csrf_protection?(%Plug.Conn{private: %{plug_skip_csrf_protection: true}}), do: true$/;"	f
skip_csrf_protection?	deps/plug/lib/plug/csrf_protection.ex	/^  defp skip_csrf_protection?(%Plug.Conn{}), do: false$/;"	f
skip_replaced	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp skip_replaced(changesets) do$/;"	f
skip_safety_warnings?	deps/ecto/lib/mix/tasks/ecto.drop.ex	/^  defp skip_safety_warnings? do$/;"	f
skip_safety_warnings?	deps/ecto/lib/mix/tasks/ecto.load.ex	/^  defp skip_safety_warnings? do$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(<<char>> <> rest, pos) when char in '\\s\\n\\t\\r' do$/;"	f
skip_whitespace	deps/poison/lib/poison/parser.ex	/^  defp skip_whitespace(string, pos), do: {string, pos}$/;"	f
slashed	deps/timex/lib/parse/datetime/parsers.ex	/^  def slashed(_) do$/;"	f
smaller_than_or_equals	deps/tzdata/lib/tzdata.ex	/^  defp smaller_than_or_equals(:min, _), do: true$/;"	f
smaller_than_or_equals	deps/tzdata/lib/tzdata.ex	/^  defp smaller_than_or_equals(first, second), do: first <= second$/;"	f
sock_close	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sock_close(%{sock: {mod, sock}}), do: mod.close(sock)$/;"	f
socket	deps/phoenix/lib/phoenix/channel/server.ex	/^  def socket(pid) do$/;"	f
socket	deps/phoenix/lib/phoenix/endpoint.ex	/^  defmacro socket(path, module) do$/;"	a
socket	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro socket() do$/;"	a
socket	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defmacro socket(id, assigns) do$/;"	a
socket_ref	deps/phoenix/lib/phoenix/channel.ex	/^  def socket_ref(%Socket{joined: true, ref: ref} = socket) when not is_nil(ref) do$/;"	f
socket_ref	deps/phoenix/lib/phoenix/channel.ex	/^  def socket_ref(_socket) do$/;"	f
sort_by_id	deps/ecto/integration_test/cases/preload.exs	/^  defp sort_by_id(values) do$/;"	f
sort_by_id	deps/ecto/integration_test/sql/stream.exs	/^  defp sort_by_id(values) do$/;"	f
sort_references	deps/gettext/lib/gettext/extractor.ex	/^  defp sort_references(translation) do$/;"	f
sort_rules_by_time	deps/tzdata/lib/tzdata/period_builder.ex	/^  def sort_rules_by_time(rules) do$/;"	f
sort_versions	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def sort_versions(versions) do$/;"	f
source	apps/flexcility/lib/flexcility/utils/utils.ex	/^    def source(changeset) do$/;"	f
source	apps/flexcility/lib/flexcility/utils/utils.ex	/^    def source(resource) do$/;"	f
source	apps/flexcility/lib/flexcility/utils/utils.ex	/^    def source(resource) when is_map(resource) do$/;"	f
source	apps/flexcility/lib/flexcility/utils/utils.ex	/^    def source(resource)$/;"	f
source	deps/ecto/integration_test/cases/repo.exs	/^    test "source (without an ecto schema) on conflict query and conflict target" do$/;"	t
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache(%Ecto.SubQuery{params: inner, cache: key}, params),$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({:fragment, _, _} = source, params),$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({_, nil} = source, params),$/;"	f
source_cache	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_cache({bin, schema}, params),$/;"	f
source_repo_priv	deps/ecto/lib/mix/ecto.ex	/^  def source_repo_priv(repo) do$/;"	f
source_take!	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_take!(kind, query, take, field, ix) do$/;"	f
source_type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp source_type!(kind, query, expr, ix, field) do$/;"	f
space_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp space_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
space_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp space_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
spaces	deps/combine/lib/combine/parsers/text.ex	/^  def spaces(parser \\\\ nil), do: parser |> Base.map(Base.many1(space()), fn _ -> " " end)$/;"	f
spaces	deps/poison/lib/poison/encoder.ex	/^      defp spaces(count) do$/;"	f
spawn_pid	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp spawn_pid do$/;"	f
split	deps/ecto/lib/ecto/adapters/postgres/datetime.ex	/^    defp split(secs, microsecs) do$/;"	f
split	deps/plug/lib/plug/router/utils.ex	/^  def split(bin) do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  defp split(microsecs) do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  defp split(microsecs) when microsecs < 0 and rem(microsecs, 1_000_000) != 0 do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamp.ex	/^  defp split(secs, microsecs) do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  defp split(microsecs) do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  defp split(microsecs) when microsecs < 0 and rem(microsecs, 1_000_000) != 0 do$/;"	f
split	deps/postgrex/lib/postgrex/extensions/timestamptz.ex	/^  defp split(secs, microsecs) do$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<>>, consumed),$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<??, rest :: binary >>, consumed),$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<?\\\\, ??, rest :: binary >>, consumed),$/;"	f
split_binary	deps/ecto/lib/ecto/query/builder.ex	/^  defp split_binary(<<first :: utf8, rest :: binary>>, consumed),$/;"	f
split_country_codes	deps/tzdata/lib/tzdata/table_parser.ex	/^  defp split_country_codes(string) do$/;"	f
split_extension	deps/postgrex/lib/postgrex/type_module.ex	/^  defp split_extension({:->, _, [head, body]}) do$/;"	f
split_parts	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp split_parts(coef, scale) when scale < 0 do$/;"	f
split_parts	deps/postgrex/lib/postgrex/extensions/numeric.ex	/^  defp split_parts(coef, scale) when scale >= 0 do$/;"	f
split_path	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp split_path(path) do$/;"	f
split_path	deps/plug/lib/plug/adapters/cowboy/conn.ex	/^  defp split_path(path) do$/;"	f
split_path	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp split_path(path) do$/;"	f
split_super	deps/postgrex/lib/postgrex/type_module.ex	/^  defp split_super({:->, _, [head, body]}) do$/;"	f
split_unquoted	deps/plug/lib/plug/conn/utils.ex	/^  defp split_unquoted(<<>>, _s, groups, _quoted?),$/;"	f
split_unquoted	deps/plug/lib/plug/conn/utils.ex	/^  defp split_unquoted(<<?", t :: binary>>, s, [g | groups], quoted?),$/;"	f
split_unquoted	deps/plug/lib/plug/conn/utils.ex	/^  defp split_unquoted(<<h, t :: binary>>, s, [g | groups], quoted?),$/;"	f
split_unquoted	deps/plug/lib/plug/conn/utils.ex	/^  defp split_unquoted(<<h, t :: binary>>, s, groups, false) when <<h>> == s,$/;"	f
split_unquoted	deps/plug/lib/plug/conn/utils.ex	/^  defp split_unquoted(bin, s, groups \\\\ [<<>>], quoted? \\\\ false)$/;"	f
split_values	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp split_values([], values, _acc, true) do$/;"	f
split_values	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp split_values([], values, acc, false) do$/;"	f
split_values	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp split_values([_ | types], [nil | values], acc, all_nil?) do$/;"	f
split_values	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp split_values([_ | types], [value | values], acc, _all_nil?) do$/;"	f
split_while	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp split_while([id|ids], [struct|structs], id, acc),$/;"	f
split_while	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp split_while(ids, structs, _id, acc),$/;"	f
sql_call	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_call(repo, callback, args, params, mapper, opts) do$/;"	f
sql_call!	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_call!(repo, callback, args, params, mapper, opts) do$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("DELETE" <> _), do: :red$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("INSERT" <> _), do: :green$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("LOCK" <> _), do: :white$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("ROLLBACK" <> _), do: :red$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("SELECT" <> _), do: :cyan$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("UPDATE" <> _), do: :yellow$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("begin" <> _), do: :magenta$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color("commit" <> _), do: :magenta$/;"	f
sql_color	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp sql_color(_), do: nil$/;"	f
ssl	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ssl(s, status) do$/;"	f
ssl_connect	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ssl_connect(%{sock: {:gen_tcp, sock}, timeout: timeout} = s, status) do$/;"	f
ssl_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp ssl_recv(%{sock: {:gen_tcp, sock}} = s, status) do$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(:max, _), do: :max$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(:min, _), do: :min$/;"	f
standard_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def standard_time_from_utc(utc_time, utc_offset) do$/;"	f
standardize_option	deps/coherence/lib/coherence/config.ex	/^  defp standardize_option(option) when is_atom(option), do: {option, :all}$/;"	f
standardize_option	deps/coherence/lib/coherence/config.ex	/^  defp standardize_option(option), do: option$/;"	f
start	apps/flexcility/lib/flexcility/application.ex	/^  def start(_type, _args) do$/;"	f
start	apps/flexcility_web/lib/flexcility_web/application.ex	/^  def start(_type, _args) do$/;"	f
start	deps/bolt_sips/lib/bolt_sips/application.ex	/^  def start(_type, _args) do$/;"	f
start	deps/coherence/lib/coherence.ex	/^  def start(_type, _args) do$/;"	f
start	deps/con_cache/lib/con_cache/application.ex	/^  def start(_, _) do$/;"	f
start	deps/connection/lib/connection.ex	/^  def start(mod, args, opts \\\\ []) do$/;"	f
start	deps/connection/lib/connection.ex	/^  defp start(mod, args, options, link) do$/;"	f
start	deps/db_connection/lib/db_connection/app.ex	/^  def start(_, _) do$/;"	f
start	deps/ecto/lib/ecto.ex	/^      def start(_type, _args) do$/;"	f
start	deps/ecto/lib/ecto/application.ex	/^  def start(_type, _args) do$/;"	f
start	deps/gettext/lib/gettext/application.ex	/^  def start(_type, _args) do$/;"	f
start	deps/phoenix/lib/phoenix.ex	/^  def start(_type, _args) do$/;"	f
start	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def start() do$/;"	f
start	deps/phoenix_pubsub/lib/phoenix/pubsub/supervisor.ex	/^  def start(_type, _args) do$/;"	f
start	deps/plug/lib/plug.ex	/^  def start(_type, _args) do$/;"	f
start	deps/plug/lib/plug/adapters/cowboy.ex	/^        def start(_type, _args) do$/;"	f
start	deps/postgrex/lib/postgrex/app.ex	/^  def start(_, _) do$/;"	f
start	deps/swoosh/lib/swoosh/application.ex	/^  def start(_type, _args) do$/;"	f
start	deps/timex/lib/timex.ex	/^  def start(_type, _args) do$/;"	f
start	deps/tzdata/lib/tzdata/tzdata_app.ex	/^  def start(_type, _args) do$/;"	f
start_args	deps/exactor/lib/exactor/operations.ex	/^  def start_args(args) do$/;"	f
start_backoff	deps/connection/lib/connection.ex	/^  defp start_backoff(:infinity), do: nil$/;"	f
start_backoff	deps/connection/lib/connection.ex	/^  defp start_backoff(timeout) do$/;"	f
start_command	deps/ecto/lib/ecto/migration/runner.ex	/^  def start_command(command) do$/;"	f
start_conns	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^  defp start_conns(_, _, _), do: {:stop, :normal, nil}$/;"	f
start_conns	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^  defp start_conns(n, conn_sup, info) when n > 0 do$/;"	f
start_handshake_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp start_handshake_timer(:infinity, _), do: :infinity$/;"	f
start_handshake_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp start_handshake_timer(timeout, sock) do$/;"	f
start_link	deps/bolt_sips/lib/bolt_sips.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/coherence/lib/coherence/plugs/authorization/credential_store/agent.ex	/^  def start_link do$/;"	f
start_link	deps/coherence/lib/coherence/plugs/authorization/credential_store/session.ex	/^  def start_link do$/;"	f
start_link	deps/coherence/lib/coherence/rememberable_server.ex	/^  def start_link, do: GenServer.start_link(__MODULE__, [], name: @name)$/;"	f
start_link	deps/coherence/lib/coherence/supervisor.ex	/^  def start_link() do$/;"	f
start_link	deps/con_cache/lib/con_cache.ex	/^  def start_link(options \\\\ [], sup_opts \\\\ []) do$/;"	f
start_link	deps/con_cache/lib/con_cache/lock_supervisor.ex	/^  def start_link(n_partitions) do$/;"	f
start_link	deps/connection/lib/connection.ex	/^        def start_link(host, port, opts, timeout \\\\\\\\ 5000) do$/;"	f
start_link	deps/connection/lib/connection.ex	/^  def start_link(mod, args, opts \\\\ []) do$/;"	f
start_link	deps/db_connection/lib/db_connection.ex	/^  def start_link(conn_mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/connection.ex	/^  def start_link(mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/connection.ex	/^  def start_link(mod, opts, mode, info \\\\ nil) do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership.ex	/^  def start_link(module, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  def start_link(module, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership/pool.ex	/^  def start_link(owner, mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership/pool_supervisor.ex	/^  def start_link() do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def start_link(manager, caller, pool, pool_opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/ownership/proxy_supervisor.ex	/^  def start_link do$/;"	f
start_link	deps/db_connection/lib/db_connection/poolboy.ex	/^  def start_link(mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/poolboy/worker.ex	/^  def start_link({mod, opts}) do$/;"	f
start_link	deps/db_connection/lib/db_connection/sojourn.ex	/^  def start_link(mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  def start_link(owner, mod, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/sojourn/starter.ex	/^  def start_link(broker, opts) do$/;"	f
start_link	deps/db_connection/lib/db_connection/sojourn/supervisor.ex	/^  def start_link() do$/;"	f
start_link	deps/db_connection/lib/db_connection/task.ex	/^  def start_link() do$/;"	f
start_link	deps/db_connection/lib/db_connection/task.ex	/^  def start_link(_, _) do$/;"	f
start_link	deps/db_connection/lib/db_connection/watcher.ex	/^  def start_link(owner) do$/;"	f
start_link	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def start_link(_module, _opts) do$/;"	f
start_link	deps/ecto/lib/ecto/migration/runner.ex	/^  def start_link(parent, repo, direction, migrator_direction, log) do$/;"	f
start_link	deps/ecto/lib/ecto/migration/supervisor.ex	/^  def start_link do$/;"	f
start_link	deps/ecto/lib/ecto/registry.ex	/^  def start_link() do$/;"	f
start_link	deps/ecto/lib/ecto/repo.ex	/^      def start_link(opts \\\\ []) do$/;"	f
start_link	deps/ecto/lib/ecto/repo/supervisor.ex	/^  def start_link(repo, otp_app, adapter, opts) do$/;"	f
start_link	deps/exactor/lib/exactor/operations.ex	/^        def start_link(x, y) do$/;"	f
start_link	deps/gettext/lib/gettext/extractor_agent.ex	/^  def start_link do$/;"	f
start_link	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  def start_link() do$/;"	f
start_link	deps/phoenix/lib/phoenix/config.ex	/^  def start_link(module, config, defaults, opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint.ex	/^      def start_link do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/cowboy_handler.ex	/^  def start_link(scheme, endpoint, {m, f, [ref | _] = a}) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  def start_link(otp_app, endpoint, opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def start_link(otp_app, mod) do$/;"	f
start_link	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  def start_link(cmd, args, opts) do$/;"	f
start_link	deps/phoenix/lib/phoenix/presence.ex	/^      def start_link(opts \\\\ []) do$/;"	f
start_link	deps/phoenix/lib/phoenix/presence.ex	/^  def start_link(module, otp_app, task_supervisor, opts) do$/;"	f
start_link	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def start_link(endpoint, handler, transport_name, transport,$/;"	f
start_link	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def start_link(options) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^        def start_link(name, options) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  def start_link(server_name, local_name) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def start_link(server_name, gc_name) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub/local_supervisor.ex	/^  def start_link(server, pool_size, dispatch_rules) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2.ex	/^  def start_link(name, opts) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/pubsub/pg2_server.ex	/^  def start_link(server_name, pool_size) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^        def start_link(opts) do$/;"	f
start_link	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def start_link(tracker, tracker_opts, server_opts) do$/;"	f
start_link	deps/plug/lib/plug/supervisor.ex	/^  def start_link() do$/;"	f
start_link	deps/plug/lib/plug/upload.ex	/^  def start_link() do$/;"	f
start_link	deps/postgrex/lib/postgrex.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/postgrex/lib/postgrex/notifications.ex	/^  def start_link(opts) do$/;"	f
start_link	deps/postgrex/lib/postgrex/parameters.ex	/^  def start_link() do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_manager.ex	/^  def start_link() do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_server.ex	/^  def start_link(module, starter) do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def start_link(:manager) do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def start_link(:servers) do$/;"	f
start_link	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def start_link(mode \\\\ :manager)$/;"	f
start_link	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def start_link() do$/;"	f
start_link	deps/tzdata/lib/tzdata/ets_holder.ex	/^  def start_link() do$/;"	f
start_link	deps/tzdata/lib/tzdata/release_updater.ex	/^  def start_link() do$/;"	f
start_listener_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp start_listener_timer(:infinity, _), do: :infinity$/;"	f
start_listener_timer	deps/postgrex/lib/postgrex/protocol.ex	/^  defp start_listener_timer(timeout, {mod, sock}) do$/;"	f
start_opts	deps/db_connection/lib/db_connection/connection.ex	/^  defp start_opts(:connection, opts) do$/;"	f
start_opts	deps/db_connection/lib/db_connection/connection.ex	/^  defp start_opts(mode, opts) when mode in [:poolboy, :sojourn] do$/;"	f
start_owner	deps/db_connection/lib/db_connection/ownership/proxy_supervisor.ex	/^  def start_owner(sup, from, pool, opts) do$/;"	f
start_pool	deps/db_connection/lib/db_connection/ownership/pool_supervisor.ex	/^  def start_pool(mod, opts) do$/;"	f
start_pool	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp start_pool(mod, opts) do$/;"	f
start_pool	deps/db_connection/lib/db_connection/sojourn/supervisor.ex	/^  def start_pool(mod, opts) do$/;"	f
start_server	deps/postgrex/lib/postgrex/type_supervisor.ex	/^  def start_server(module, starter) do$/;"	f
start_timer	deps/db_connection/lib/db_connection/connection.ex	/^  defp start_timer(_, :infinity), do: nil$/;"	f
start_timer	deps/db_connection/lib/db_connection/connection.ex	/^  defp start_timer(pid, timeout) do$/;"	f
start_timer	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp start_timer(_, :infinity), do: nil$/;"	f
start_timer	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  defp start_timer(pid, timeout) do$/;"	f
start_ttl_loop	deps/con_cache/lib/con_cache/owner.ex	/^  defp start_ttl_loop(options) do$/;"	f
starter	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  defp starter(owner, opts) do$/;"	f
startup	deps/postgrex/lib/postgrex/protocol.ex	/^  defp startup(s, %{opts: opts} = status) do$/;"	f
state_var	deps/exactor/lib/exactor/helper.ex	/^  def state_var do$/;"	f
statements	deps/exactor/lib/exactor/delegator.ex	/^  defp statements(statement), do: [statement]$/;"	f
statements	deps/exactor/lib/exactor/delegator.ex	/^  defp statements({:__block__, _, statements}), do: statements$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint.ex	/^      def static_path(path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def static_path(_endpoint, "\/" <> _ = path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def static_path(_endpoint, path) when is_binary(path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def static_path(endpoint) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(%Conn{private: private} = conn, path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(%Socket{endpoint: endpoint} = conn, path) do$/;"	f
static_path	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_path(endpoint, path) when is_atom(endpoint) do$/;"	f
static_url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def static_url do$/;"	f
static_url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def static_url(endpoint) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(%Conn{private: private} = conn, path) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(%Socket{endpoint: endpoint} = conn, path) do$/;"	f
static_url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def static_url(endpoint, path) when is_atom(endpoint) do$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:error, error), do: Plug.Exception.status(error)$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:exit, _exit),   do: 500$/;"	f
status	deps/phoenix/lib/phoenix/endpoint/render_errors.ex	/^  defp status(:throw, _throw), do: 500$/;"	f
status	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^  def status(_), do: 400$/;"	f
status	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^  def status(_), do: 404$/;"	f
status	deps/phoenix_ecto/lib/phoenix_ecto/plug.ex	/^  def status(_), do: 422$/;"	f
status	deps/plug/lib/plug/debugger.ex	/^  defp status(:error, error), do: Plug.Exception.status(error)$/;"	f
status	deps/plug/lib/plug/debugger.ex	/^  defp status(_, _), do: 500$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:error, error),  do: Plug.Exception.status(error)$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:exit, _exit),   do: 500$/;"	f
status	deps/plug/lib/plug/error_handler.ex	/^  defp status(:throw, _throw), do: 500$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(%{plug_status: status}) when is_integer(status), do: status$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(_), do: 500$/;"	f
status	deps/plug/lib/plug/exceptions.ex	/^  def status(exception)$/;"	f
status_json	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp status_json(conn, data) do$/;"	f
step_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp step_for(:integer), do: [step: 1]$/;"	f
step_for	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp step_for(_other),   do: [step: "any"]$/;"	f
stop	deps/db_connection/lib/db_connection/connection.ex	/^  def stop({pid, ref}, err, state, _) do$/;"	f
stop	deps/db_connection/lib/db_connection/ownership.ex	/^  def stop(proxy, err, state, opts) do$/;"	f
stop	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def stop(proxy, caller) do$/;"	f
stop	deps/db_connection/lib/db_connection/ownership/proxy.ex	/^  def stop({proxy, ref}, exception, state, _opts) do$/;"	f
stop	deps/db_connection/lib/db_connection/poolboy.ex	/^  def stop({pool, worker, worker_ref}, err, state, opts) do$/;"	f
stop	deps/db_connection/lib/db_connection/sojourn.ex	/^  defdelegate stop(ref, err, state, opts), to: DBConnection.Connection$/;"	d
stop	deps/db_connection/lib/db_connection/task.ex	/^  defdelegate stop(info, err, state, opts), to: DBConnection.Connection$/;"	d
stop	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^    def stop(owner, reason, {_conn_mod, conn_state, _in_transaction?}, opts) do$/;"	f
stop	deps/ecto/lib/ecto/migration/runner.ex	/^  def stop() do$/;"	f
stop	deps/ecto/lib/ecto/repo.ex	/^      def stop(pid, timeout \\\\ 5000) do$/;"	f
stop	deps/gettext/lib/gettext/extractor_agent.ex	/^  def stop do$/;"	f
stop	deps/phoenix/lib/phoenix/code_reloader/proxy.ex	/^  def stop(proxy) do$/;"	f
stop	deps/phoenix/lib/phoenix/config.ex	/^  def stop(module) do$/;"	f
stop	deps/phoenix/lib/phoenix/config.ex	/^  defp stop(module, defaults) do$/;"	f
stop	deps/swoosh/lib/swoosh/adapters/local/storage/memory.ex	/^  def stop() do$/;"	f
stop_reason	deps/connection/lib/connection.ex	/^  defp stop_reason(:error, reason, stack), do: {reason, stack}$/;"	f
stop_reason	deps/connection/lib/connection.ex	/^  defp stop_reason(:exit, reason, _),      do: reason$/;"	f
stop_server	deps/exactor/lib/exactor/responders.ex	/^  defmacro stop_server(reason) do$/;"	a
stopper	deps/plug/lib/plug/builder.ex	/^        def stopper(conn, _opts) do$/;"	f
storage_down	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def storage_down(opts) do$/;"	f
storage_down	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def storage_down(opts) do$/;"	f
storage_driver	deps/swoosh/lib/swoosh/adapters/local.ex	/^  defp storage_driver(config) do$/;"	f
storage_up	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def storage_up(opts) do$/;"	f
storage_up	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def storage_up(opts) do$/;"	f
store_mfa_autogenerate!	deps/ecto/lib/ecto/schema.ex	/^  defp store_mfa_autogenerate!(mod, name, type, mfa) do$/;"	f
store_resource	deps/con_cache/lib/con_cache/lock.ex	/^  defp store_resource(%__MODULE__{resources: resources} = state, id, resource) do$/;"	f
store_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  defp store_ttl(%__MODULE__{pending: pending, ttls: ttls} = state, key, ttl) when($/;"	f
store_ttl	deps/con_cache/lib/con_cache/owner.ex	/^  defp store_ttl(state, _, 0), do: state$/;"	f
store_type_autogenerate!	deps/ecto/lib/ecto/schema.ex	/^  defp store_type_autogenerate!(mod, name, source, type, pk?) do$/;"	f
strategy	deps/db_connection/lib/db_connection/poolboy.ex	/^  defp strategy(opts) do$/;"	f
stream	deps/db_connection/lib/db_connection.ex	/^  def stream(%DBConnection{} = conn, query, params, opts \\\\ []) do$/;"	f
stream	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def stream(conn, sql, params, opts) do$/;"	f
stream	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def stream(conn, sql, params, opts) do$/;"	f
stream	deps/ecto/lib/ecto/adapters/sql.ex	/^      def stream(repo, meta, query, params, process, opts) do$/;"	f
stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  def stream(repo, meta, prepared, params, mapper, opts) do$/;"	f
stream	deps/ecto/lib/ecto/adapters/sql.ex	/^  def stream(repo, sql, params \\\\ [], opts \\\\ []) do$/;"	f
stream	deps/ecto/lib/ecto/repo.ex	/^      def stream(queryable, opts \\\\ []) do$/;"	f
stream	deps/ecto/lib/ecto/repo/queryable.ex	/^  def stream(repo, adapter, queryable, opts) when is_list(opts) do$/;"	f
stream	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp stream(operation, repo, adapter, query, opts) do$/;"	f
stream	deps/postgrex/lib/postgrex.ex	/^  def stream(%DBConnection{} = conn, query, params, options \\\\ [])  do$/;"	f
stream empty	deps/ecto/integration_test/sql/stream.exs	/^  test "stream empty" do$/;"	t
stream with assoc	deps/ecto/integration_test/sql/stream.exs	/^  test "stream with assoc" do$/;"	t
stream with preload	deps/ecto/integration_test/sql/stream.exs	/^  test "stream with preload" do$/;"	t
stream without schema	deps/ecto/integration_test/sql/stream.exs	/^  test "stream without schema" do$/;"	t
strftime_format_parser	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp strftime_format_parser() do$/;"	f
strftime_iso_clock	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_clock(_) do$/;"	f
strftime_iso_clock_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_clock_full(_) do$/;"	f
strftime_iso_shortdate	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_iso_shortdate(_) do$/;"	f
strftime_kitchen	deps/timex/lib/parse/datetime/parsers.ex	/^  def strftime_kitchen(opts \\\\ [padding: :zeroes]) do$/;"	f
strict_keys	deps/poison/lib/poison/encoder.ex	/^  defp strict_keys(map, false), do: map$/;"	f
strict_keys	deps/poison/lib/poison/encoder.ex	/^  defp strict_keys(map, true) do$/;"	f
string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  def string_amount_to_secs("0"), do: 0$/;"	f
string_amount_to_secs	deps/tzdata/lib/tzdata/util.ex	/^  def string_amount_to_secs(string) do$/;"	f
string_attr	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp string_attr(types) do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\"" <> _, pos, acc), do: {acc, pos}$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size("\\\\" <> _, pos, acc), do: {acc, pos}$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<char>> <> rest, pos, acc) when char < 0x80 do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(<<codepoint :: utf8>> <> rest, pos, acc) do$/;"	f
string_chunk_size	deps/poison/lib/poison/parser.ex	/^  defp string_chunk_size(other, pos, _acc), do: syntax_error(other, pos)$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(_),                                  do: 4$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x10000, do: 3$/;"	f
string_codepoint_size	deps/poison/lib/poison/parser.ex	/^  defp string_codepoint_size(codepoint) when codepoint < 0x800,   do: 2$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("", pos, _), do: throw({:invalid, pos})$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\"" <> rest, pos, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue("\\\\" <> rest, pos, acc) do$/;"	f
string_continue	deps/poison/lib/poison/parser.ex	/^  defp string_continue(string, pos, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^    defp string_escape(<<unquote(seq)>> <> rest, pos, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, a1, b1, c1, d1, "\\\\u", a2, b2, c2, d2>> <> rest, pos, acc)$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(<<?u, seq :: binary-size(4)>> <> rest, pos, acc) do$/;"	f
string_escape	deps/poison/lib/poison/parser.ex	/^  defp string_escape(other, pos, _), do: syntax_error(other, pos)$/;"	f
string_to_binary!	deps/uuid/lib/uuid.ex	/^  def string_to_binary!(<<uuid::binary>>) do$/;"	f
string_to_binary!	deps/uuid/lib/uuid.ex	/^  def string_to_binary!(_) do$/;"	f
stringify	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp stringify(item) do$/;"	f
stringify	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp stringify(item) do$/;"	f
stringify_kv	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  defp stringify_kv({k, v}),$/;"	f
stringify_kv	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_kv({k, v}),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(%{__struct__: mod} = struct) when is_atom(mod),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(%{} = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params([_|_] = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params([{_, _}|_] = params),$/;"	f
stringify_params	deps/plug/lib/plug/adapters/test/conn.ex	/^  defp stringify_params(other),$/;"	f
strip_caller	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  def strip_caller(%Macro.Env{module: mod, function: fun, file: file, line: line}) do$/;"	f
strip_comment	deps/tzdata/lib/tzdata/util.ex	/^  def strip_comment(line), do: Regex.replace(~r\/[\\s]*#.+\/, line, "")$/;"	f
strip_context	deps/exactor/lib/exactor/operations.ex	/^  defp strip_context(ast) do$/;"	f
strip_double_hash_comments	deps/gettext/lib/gettext/merger.ex	/^  defp strip_double_hash_comments(translations) when is_list(translations) do$/;"	f
strip_events	deps/phoenix/lib/phoenix/endpoint/instrument.ex	/^  defp strip_events(instrumenters) do$/;"	f
strip_quotes	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp strip_quotes(quoted) do$/;"	f
strip_quotes	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp strip_quotes(quoted) do$/;"	f
strip_release	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp strip_release(%Release{is_upgrade: false, profile: %Profile{strip_debug_info: true, dev_mode: false}}, strip_path) do$/;"	f
strip_release	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp strip_release(%Release{is_upgrade: true, profile: %Profile{strip_debug_info: true, dev_mode: false}}, _strip_path) do$/;"	f
strip_release	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp strip_release(%Release{profile: %Profile{strip_debug_info: true, dev_mode: true}}, _strip_path) do$/;"	f
strip_release	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp strip_release(_, _), do: :ok$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces("\\r\\n" <> t),$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces(<<h, t :: binary>>) when h in [?\\s, ?\\t],$/;"	f
strip_spaces	deps/plug/lib/plug/conn/utils.ex	/^  defp strip_spaces(t),$/;"	f
struct	deps/ecto/lib/ecto/adapters/sql.ex	/^  def struct(repo, conn, sql, {operation, source, params}, values, on_conflict, returning, opts) do$/;"	f
struct	deps/ecto/lib/ecto/association.ex	/^  def struct(module, name, opts) do$/;"	f
struct	deps/ecto/lib/ecto/embedded.ex	/^  def struct(module, name, opts) do$/;"	f
struct	deps/ecto/lib/ecto/query/api.ex	/^  def struct(source, fields), do: doc! [source, fields]$/;"	f
struct_from_changeset!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp struct_from_changeset!(_action, %{data: struct}),$/;"	f
struct_from_changeset!	deps/ecto/lib/ecto/repo/schema.ex	/^  defp struct_from_changeset!(action, %{data: nil}),$/;"	f
struct_url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def struct_url do$/;"	f
struct_url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def struct_url(endpoint) do$/;"	f
structure_dump	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def structure_dump(default, config) do$/;"	f
structure_dump	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def structure_dump(default, config) do$/;"	f
structure_load	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def structure_load(default, config) do$/;"	f
structure_load	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def structure_load(default, config) do$/;"	f
sub	deps/decimal/lib/decimal.ex	/^  def sub(%Decimal{} = num1, %Decimal{sign: sign} = num2) do$/;"	f
sub	deps/timex/lib/time/duration.ex	/^  def sub(%Duration{megaseconds: mega1, seconds: sec1, microseconds: micro1},$/;"	f
sub_find	deps/postgrex/lib/postgrex/types.ex	/^  defp sub_find([], _, _, acc) do$/;"	f
sub_find	deps/postgrex/lib/postgrex/types.ex	/^  defp sub_find([oid | oids], module, table, acc) do$/;"	f
subcommand	deps/ecto/lib/ecto/migration/runner.ex	/^  def subcommand(subcommand) do$/;"	f
subject	deps/coherence/test/support/email.exs	/^  defp subject(email, subject), do: Map.put(email, :subject, subject)$/;"	f
subject	deps/swoosh/lib/swoosh/email.ex	/^  def subject(email, subject), do: %{email|subject: subject}$/;"	f
submit	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def submit([do: _] = block_option), do: submit([], block_option)$/;"	f
submit	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def submit(_, opts \\\\ [])$/;"	f
submit	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def submit(opts, [do: _] = block_option) do$/;"	f
submit	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def submit(value, opts) do$/;"	f
subnet	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp subnet(num) when is_integer(num) do$/;"	f
subnet	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp subnet(string) when is_binary(string) do$/;"	f
subnet	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp subnet(tuple) when is_tuple(tuple), do: to_integer(tuple)$/;"	f
subquery	deps/ecto/lib/ecto/query.ex	/^  def subquery(%Ecto.Query{} = query),$/;"	f
subquery	deps/ecto/lib/ecto/query.ex	/^  def subquery(%Ecto.SubQuery{} = subquery),$/;"	f
subquery	deps/ecto/lib/ecto/query.ex	/^  def subquery(queryable),$/;"	f
subquery_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_fields(fields, ix) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select(%{select: %{expr: expr, take: take} = select} = query, adapter) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select(expr, _take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({:%, _, [name, map]}, take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({:%{}, _, [{:|, _, [{:&, [], [ix]}, pairs]}]} = expr, take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({:%{}, _, pairs} = expr, _take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({:&, _, [ix]}, take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({:merge, _, [left, right]}, take, query) do$/;"	f
subquery_select	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_select({{:., _, [{:&, _, [ix]}, field]}, _, []}, _take, _query) do$/;"	f
subquery_struct_and_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_struct_and_fields({:map, types}) do$/;"	f
subquery_struct_and_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_struct_and_fields({:source, {_, schema}, types}) do$/;"	f
subquery_struct_and_fields	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_struct_and_fields({:struct, name, types}) do$/;"	f
subquery_types	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_types(%{select: {:map, types}}), do: types$/;"	f
subquery_types	deps/ecto/lib/ecto/query/planner.ex	/^  defp subquery_types(%{select: {:struct, _name, types}}), do: types$/;"	f
subscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def subscribe(pid, topic) when is_pid(pid) and is_binary(topic) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def subscribe(pid, topic, opts) when is_pid(pid) and is_binary(topic) and is_list(opts) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def subscribe(topic) when is_binary(topic) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def subscribe(topic, opts) when is_binary(topic) and is_list(opts) do$/;"	f
subscribe	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp subscribe(_endpoint, pid) when is_pid(pid),$/;"	f
subscribe	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp subscribe(endpoint, topic) when is_binary(topic),$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def subscribe(server, pid, topic)$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def subscribe(server, pid, topic, opts) do$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def subscribe(server, topic) when is_atom(server) and is_binary(topic) do$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def subscribe(server, topic, opts)$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def subscribe(pubsub_server, pool_size, pid, topic, opts \\\\ []) when is_atom(pubsub_server) do$/;"	f
subscribe	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp subscribe(pubsub_server, namespaced_topic) do$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
subscribe_and_join	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join(%Socket{} = socket, topic, payload)$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, channel, topic, payload \\\\ %{})$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, topic) when is_binary(topic) do$/;"	f
subscribe_and_join!	deps/phoenix/lib/phoenix/test/channel_test.ex	/^  def subscribe_and_join!(%Socket{} = socket, topic, payload)$/;"	f
subscribers	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def subscribers(pubsub_server, topic, shard) when is_atom(pubsub_server) do$/;"	f
subscribers	deps/phoenix_pubsub/test/shared/pubsub_test.exs	/^  defp subscribers(config, topic) do$/;"	f
subscribers_with_fastlanes	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def subscribers_with_fastlanes(pubsub_server, topic, shard) when is_atom(pubsub_server) do$/;"	f
subscription	deps/phoenix_pubsub/lib/phoenix/pubsub/gc.ex	/^  defp subscription(pids_table, pid) do$/;"	f
subscription	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def subscription(pubsub_server, pool_size, pid) when is_atom(pubsub_server) do$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset([], actual),$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset([h|expected], [h|actual]),$/;"	f
subset	deps/plug/lib/plug/static.ex	/^  defp subset(_, _),$/;"	f
subtract	deps/timex/lib/timex.ex	/^  def subtract(date, %Duration{megaseconds: mega, seconds: sec, microseconds: micro}),$/;"	f
success	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def success(message), do: log(:warn, colorize("==> #{message}", @success_color))$/;"	f
sum	deps/ecto/lib/ecto/query/api.ex	/^  def sum(value), do: doc! [value]$/;"	f
super_find	deps/postgrex/lib/postgrex/types.ex	/^  defp super_find(sub_oids, extension, module, table) do$/;"	f
supports references	deps/ecto/integration_test/sql/migration.exs	/^  test "supports references" do$/;"	t
supports_ddl_transaction?	deps/ecto/lib/ecto/adapters/mysql.ex	/^  def supports_ddl_transaction? do$/;"	f
supports_ddl_transaction?	deps/ecto/lib/ecto/adapters/postgres.ex	/^  def supports_ddl_transaction? do$/;"	f
surface_changes	deps/ecto/lib/ecto/repo/schema.ex	/^  defp surface_changes(%{changes: changes, types: types} = changeset, struct, fields) do$/;"	f
suspend	deps/postgrex/lib/postgrex/protocol.ex	/^  defp suspend(s, status, query, cursor, rows, buffer) do$/;"	f
swap_case	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp swap_case(<<char::utf8, _::binary>> = str)$/;"	f
swap_case	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  defp swap_case(str), do: str$/;"	f
swoosh_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp swoosh_config(string, %{base: base, use_email?: true}) do$/;"	f
swoosh_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp swoosh_config(string, _), do: string$/;"	f
swoosh_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp swoosh_config(string, %{base: base, use_email?: true}) do$/;"	f
swoosh_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp swoosh_config(string, _), do: string$/;"	f
symlink?	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp symlink?(path) do$/;"	f
sync_connect	deps/postgrex/lib/postgrex/notifications.ex	/^  defp sync_connect(opts) do$/;"	f
sync_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sync_error(s, postgres) do$/;"	f
sync_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sync_error(s, postgres, buffer) do$/;"	f
sync_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sync_recv(s, %{mode: :savepoint} = status, res, buffer) do$/;"	f
sync_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sync_recv(s, %{mode: :transaction, sync: :flush} = status, res, buffer) do$/;"	f
sync_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp sync_recv(s, %{mode: :transaction} = status, res, buffer) do$/;"	f
sync_stop	deps/db_connection/lib/db_connection/connection.ex	/^  def sync_stop({pid, ref}, err, state, opts) do$/;"	f
sync_stop	deps/db_connection/lib/db_connection/connection.ex	/^  defp sync_stop(pid, ref, err, state, timeout) do$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(<<token :: utf8>> <> _, pos) do$/;"	f
syntax_error	deps/poison/lib/poison/parser.ex	/^  defp syntax_error(_, pos) do$/;"	f
tab_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp tab_impl(%ParserState{status: :ok, input: <<>>} = state) do$/;"	f
tab_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp tab_impl(%ParserState{status: :ok, line: line, column: col, input: <<c::utf8,_::binary>>} = state) do$/;"	f
table	deps/ecto/lib/ecto/migration.ex	/^  def table(name, opts \\\\ [])$/;"	f
table	deps/ecto/lib/ecto/migration.ex	/^  def table(name, opts) when is_atom(name) do$/;"	f
table	deps/ecto/lib/ecto/migration.ex	/^  def table(name, opts) when is_binary(name) and is_list(opts) do$/;"	f
table_name_for_release_name	deps/tzdata/lib/tzdata/release_reader.ex	/^  defp table_name_for_release_name(release_name) do$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse([], acc) do$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse([_ | _], _acc) do$/;"	f
table_reverse	deps/ecto/lib/ecto/migration/runner.ex	/^  defp table_reverse([{:add, name, _type, _opts} | t], acc) do$/;"	f
tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def tag(name), do: tag(name, [])$/;"	f
tag	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  def tag(name, attrs) when is_list(attrs) do$/;"	f
tag	deps/phoenix_pubsub/lib/phoenix/tracker/state.ex	/^  defp tag(%State{replica: rep} = state), do: {rep, clock(state)}$/;"	f
tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp tag(:gen_tcp), do: :tcp$/;"	f
tag	deps/postgrex/lib/postgrex/protocol.ex	/^  defp tag(:ssl), do: :ssl$/;"	f
tag_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp tag_attrs([]), do: []$/;"	f
tag_attrs	deps/phoenix_html/lib/phoenix_html/tag.ex	/^  defp tag_attrs(attrs) do$/;"	f
tag_files	deps/gettext/lib/gettext/extractor.ex	/^  defp tag_files({_path, {:merged, _}} = entry, _gettext_config),$/;"	f
tag_files	deps/gettext/lib/gettext/extractor.ex	/^  defp tag_files({path, :existing}, gettext_config),$/;"	f
tag_files	deps/gettext/lib/gettext/extractor.ex	/^  defp tag_files({path, new_po}, _gettext_config),$/;"	f
tagged types	deps/ecto/integration_test/cases/type.exs	/^  test "tagged types" do$/;"	t
take	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp take(take, field) do$/;"	f
take with assocs	deps/ecto/integration_test/cases/repo.exs	/^    test "take with assocs" do$/;"	t
take with maps	deps/ecto/integration_test/cases/repo.exs	/^    test "take with maps" do$/;"	t
take with nil assoc	deps/ecto/integration_test/cases/repo.exs	/^    test "take with nil assoc" do$/;"	t
take with single nil column	deps/ecto/integration_test/cases/repo.exs	/^    test "take with single nil column" do$/;"	t
take with structs	deps/ecto/integration_test/cases/repo.exs	/^    test "take with structs" do$/;"	t
take!	deps/ecto/lib/ecto/query/planner.ex	/^  defp take!(source, query, fetched, field, ix) do$/;"	f
take?	deps/ecto/lib/ecto/query/builder/select.ex	/^  defp take?(fields) do$/;"	f
take_while_gt	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp take_while_gt([], _, acc), do: Enum.reverse(acc)$/;"	f
take_while_gt	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp take_while_gt([h|rest], match, acc) when h > match, do: take_while_gt(rest, match, [h|acc])$/;"	f
take_while_gt	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp take_while_gt(_, _, acc),  do: Enum.reverse(acc)$/;"	f
take_while_gt	deps/timex/lib/parse/zoneinfo/parser.ex	/^  defp take_while_gt(xs, match),  do: take_while_gt(xs, match, [])$/;"	f
take_while_loop	deps/combine/lib/combine/parsers/text.ex	/^  defp take_while_loop(%ParserState{input: <<>>} = state, _predicate, acc), do: %{state | :results => [Enum.reverse(acc)|state.results]}$/;"	f
take_while_loop	deps/combine/lib/combine/parsers/text.ex	/^  defp take_while_loop(%ParserState{input: <<c::utf8, rest::binary>>, column: col} = state, predicate, acc) do$/;"	f
tear_alias	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp tear_alias(other), do: other$/;"	f
tear_alias	deps/phoenix/lib/phoenix/endpoint.ex	/^  defp tear_alias({:__aliases__, meta, [h|t]}) do$/;"	f
tear_alias	deps/phoenix/lib/phoenix/socket.ex	/^  defp tear_alias(other), do: other$/;"	f
tear_alias	deps/phoenix/lib/phoenix/socket.ex	/^  defp tear_alias({:__aliases__, meta, [h|t]}) do$/;"	f
telephone_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def telephone_input(form, field, opts \\\\ []) do$/;"	f
template	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def template(name, params \\\\ []) do$/;"	f
template	deps/phoenix/lib/phoenix/code_reloader.ex	/^  defp template(output) do$/;"	f
template_file	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  def template_file(path, overlay_vars) do$/;"	f
template_files	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def template_files, do: @template_files$/;"	f
template_files	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def template_files, do: @template_files$/;"	f
template_name	deps/phoenix/lib/phoenix/controller.ex	/^  defp template_name(name, _format) when is_binary(name), do:$/;"	f
template_name	deps/phoenix/lib/phoenix/controller.ex	/^  defp template_name(name, format) when is_atom(name), do:$/;"	f
template_name	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp template_name(name, _format) when is_binary(name), do:$/;"	f
template_name	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^  defp template_name(name, format) when is_atom(name), do:$/;"	f
template_not_found	apps/flexcility_web/lib/flexcility_web/views/error_view.ex	/^  def template_not_found(_template, assigns) do$/;"	f
template_not_found	deps/phoenix/lib/phoenix/template.ex	/^      def template_not_found(template, assigns) do$/;"	f
template_path	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def template_path(template_path, params \\\\ []) do$/;"	f
template_path_to_name	deps/phoenix/lib/phoenix/template.ex	/^  def template_path_to_name(path, root) do$/;"	f
template_str	deps/distillery/lib/mix/lib/releases/overlays.ex	/^  def template_str(str, overlay_vars) do$/;"	f
terminate	deps/bolt_sips/lib/bolt_sips/connection.ex	/^  def terminate(_reason, _state) do$/;"	f
terminate	deps/connection/lib/connection.ex	/^      def terminate(_reason, _state) do$/;"	f
terminate	deps/connection/lib/connection.ex	/^  def terminate(reason, %{mod: mod, mod_state: mod_state, raise: nil}) do$/;"	f
terminate	deps/connection/lib/connection.ex	/^  def terminate(stop, %{raise: {class, reason, stack}} = s) do$/;"	f
terminate	deps/exactor/lib/exactor/behaviour/strict.ex	/^      def terminate(_reason, _state) do$/;"	f
terminate	deps/exactor/lib/exactor/behaviour/tolerant.ex	/^      def terminate(_reason, _state) do$/;"	f
terminate	deps/phoenix/lib/phoenix/channel.ex	/^      def terminate(_reason, _socket), do: :ok$/;"	f
terminate	deps/phoenix/lib/phoenix/channel/server.ex	/^  def terminate(reason, socket) do$/;"	f
terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def terminate(_reason,  _req, _state) do$/;"	f
terminate	deps/phoenix/lib/phoenix/transports/long_poll_server.ex	/^  def terminate(_reason, _state) do$/;"	f
terminate	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  defp terminate(reason, req, stack) do$/;"	f
terminate_status	deps/db_connection/lib/db_connection/connection.ex	/^  defp terminate_status(mod, pdict, state) do$/;"	f
test	deps/boltex/lib/boltex.ex	/^  def test(host, port, query, params \\\\ %{}, auth \\\\ {}) do$/;"	f
test_adapters	deps/ecto/mix.exs	/^  defp test_adapters(args) do$/;"	f
test_ci	deps/swoosh/mix.exs	/^  defp test_ci(args) do$/;"	f
test_paths	deps/db_connection/mix.exs	/^  defp test_paths(_), do: ["test"]$/;"	f
test_paths	deps/db_connection/mix.exs	/^  defp test_paths(pool) when pool in @pools, do: ["integration_test\/#{pool}"]$/;"	f
test_paths	deps/ecto/mix.exs	/^  defp test_paths(_), do: ["test\/ecto", "test\/mix"]$/;"	f
test_paths	deps/ecto/mix.exs	/^  defp test_paths(adapter) when adapter in @adapters, do: ["integration_test\/#{adapter}"]$/;"	f
test_pools	deps/db_connection/mix.exs	/^  defp test_pools(args) do$/;"	f
test_prefix	deps/phoenix/lib/mix/phoenix.ex	/^  def test_prefix do$/;"	f
text	deps/phoenix/lib/phoenix/controller.ex	/^  def text(conn, data) do$/;"	f
text_body	deps/swoosh/lib/swoosh/email.ex	/^  def text_body(email, text_body), do: %{email|text_body: text_body}$/;"	f
text_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def text_input(form, field, opts \\\\ []) do$/;"	f
text_response	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  def text_response(conn, status) do$/;"	f
text_to_html	deps/phoenix_html/lib/phoenix_html/format.ex	/^  def text_to_html(string, opts \\\\ []) do$/;"	f
textarea	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def textarea(form, field, opts \\\\ []) do$/;"	f
through_pks	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp through_pks(map, pks, assoc) do$/;"	f
time	deps/db_connection/lib/db_connection.ex	/^  defmacrop time() do$/;"	a
time	deps/ecto/lib/ecto/log_entry.ex	/^  defp time(_label, nil, _force), do: []$/;"	f
time	deps/ecto/lib/ecto/log_entry.ex	/^  defp time(label, time, force) do$/;"	f
time_builder	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_builder(b, opts) do$/;"	f
time_for_rule	deps/tzdata/lib/tzdata/util.ex	/^  def time_for_rule(rule, year) do$/;"	f
time_modifier	deps/tzdata/lib/tzdata/util.ex	/^  def time_modifier(string) do$/;"	f
time_select	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def time_select(form, field, opts \\\\ []) do$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{"hour" => hour, "min" => min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{"hour" => hour, "minute" => min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{hour: hour, min: min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(%{hour: hour, minute: min} = map),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(nil),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value(other),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({_, {hour, min, sec, _msec}}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({_, {hour, min, sec}}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({hour, min, sec, _mseg}),$/;"	f
time_value	deps/phoenix_html/lib/phoenix_html/form.ex	/^  defp time_value({hour, min, sec}),$/;"	f
timeout_after	deps/exactor/lib/exactor/responders.ex	/^  defmacro timeout_after(time_ms) do$/;"	a
timeout_arg	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_arg(_, _), do: []$/;"	f
timeout_arg	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_arg(options, type) when type in [:defcall, :multicall] do$/;"	f
timeout_match	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_match(:infinity), do: []$/;"	f
timeout_match	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_match(nil), do: []$/;"	f
timeout_match	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_match(pattern), do: [pattern]$/;"	f
timeout_match	deps/exactor/lib/exactor/operations.ex	/^  defp timeout_match(timeout) when is_integer(timeout), do: []$/;"	f
timestamp	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp timestamp do$/;"	f
timestamp	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp timestamp do$/;"	f
timestamp	deps/ecto/lib/mix/tasks/ecto.gen.migration.ex	/^  defp timestamp do$/;"	f
timestamp	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp timestamp do$/;"	f
timestamp	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  defp timestamp do$/;"	f
timestamps	deps/ecto/lib/ecto/migration.ex	/^  def timestamps(opts \\\\ []) when is_list(opts) do$/;"	f
timestamps	deps/ecto/lib/ecto/schema.ex	/^  defmacro timestamps(opts \\\\ []) do$/;"	a
timezone	deps/timex/lib/timex.ex	/^  def timezone("Etc\/UTC", _), do: %TimezoneInfo{}$/;"	f
timezone	deps/timex/lib/timex.ex	/^  def timezone("UTC", _),     do: %TimezoneInfo{}$/;"	f
timezone	deps/timex/lib/timex.ex	/^  def timezone(%TimezoneInfo{} = tz, datetime), do: Timezone.get(tz, datetime)$/;"	f
timezone	deps/timex/lib/timex.ex	/^  def timezone(:utc, _),      do: %TimezoneInfo{}$/;"	f
timezone	deps/timex/lib/timex.ex	/^  def timezone(tz, datetime) do$/;"	f
timezone	deps/timex/lib/timex.ex	/^  def timezone(tz, datetime) when is_binary(tz) do$/;"	f
timezones	deps/timex/lib/timex.ex	/^  def timezones(), do: Tzdata.zone_list$/;"	f
title	deps/coherence/lib/coherence/config.ex	/^  def title, do: get_application_env(:title, get(:module))$/;"	f
tmp_path	deps/coherence/test/mix_helpers.exs	/^  def tmp_path do$/;"	f
tmp_path	deps/ecto/integration_test/support/file_helpers.exs	/^  def tmp_path do$/;"	f
to	deps/coherence/test/support/email.exs	/^  defp to(email, to), do: Map.put(email, :to, to)$/;"	f
to	deps/swoosh/lib/swoosh/email.ex	/^  def to(%__MODULE__{to: to} = email, recipients) when is_list(recipients) do$/;"	f
to	deps/swoosh/lib/swoosh/email.ex	/^  def to(%__MODULE__{} = email, recipient) do$/;"	f
to_12hour_clock	deps/timex/lib/time/time.ex	/^  def to_12hour_clock(hour) when hour in 0..24 do$/;"	f
to_24hour_clock	deps/timex/lib/time/time.ex	/^  def to_24hour_clock(hour, am_or_pm) when hour in 1..12 and am_or_pm in [:am, :pm] do$/;"	f
to_absolute_url	deps/swoosh/lib/plug/mailbox_preview.ex	/^    defp to_absolute_url(conn, path) do$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("AM"), do: [AM: "AM"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("PM"), do: [AM: "PM"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("am"), do: [am: "am"]$/;"	f
to_ampm	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_ampm("pm"), do: [am: "pm"]$/;"	f
to_app_source	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp to_app_source(app, source_dir) when is_atom(app),$/;"	f
to_app_source	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp to_app_source(path, source_dir) when is_binary(path),$/;"	f
to_app_source	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp to_app_source(app, source_dir) when is_atom(app),$/;"	f
to_app_source	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp to_app_source(path, source_dir) when is_binary(path),$/;"	f
to_app_source	deps/phoenix/lib/mix/phoenix.ex	/^  defp to_app_source(app, source_dir) when is_atom(app),$/;"	f
to_app_source	deps/phoenix/lib/mix/phoenix.ex	/^  defp to_app_source(path, source_dir) when is_binary(path),$/;"	f
to_args	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp to_args(opts, non_keyword_opts) do$/;"	f
to_changeset	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_changeset(%Ecto.Changeset{} = changeset, parent_action, _module, _cast),$/;"	f
to_changeset	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_changeset(%{} = data, parent_action, _module, cast) when is_function(cast, 2),$/;"	f
to_changeset	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp to_changeset(%{} = data, parent_action, _module, nil),$/;"	f
to_char_list	deps/plug/lib/plug/adapters/cowboy.ex	/^  defp to_char_list(cowboy_options, key) do$/;"	f
to_clock	deps/timex/lib/time/duration.ex	/^  def to_clock(%__MODULE__{megaseconds: mega, seconds: sec, microseconds: micro}) do$/;"	f
to_compare_result	deps/timex/lib/comparable/utils.ex	/^  def to_compare_result(%Duration{} = d),$/;"	f
to_compare_result	deps/timex/lib/comparable/utils.ex	/^  def to_compare_result(0), do: 0$/;"	f
to_compare_result	deps/timex/lib/comparable/utils.ex	/^  def to_compare_result(n) when is_integer(n) and n < 0, do: -1$/;"	f
to_compare_result	deps/timex/lib/comparable/utils.ex	/^  def to_compare_result(n) when is_integer(n) and n > 0, do: 1$/;"	f
to_compare_result	deps/timex/lib/comparable/utils.ex	/^  def to_compare_result({:error, _} = err),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{mariadb: %{code: 1062, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{mariadb: %{code: code, message: message}})$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def to_constraints(%Mariaex.Error{}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :check_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :check_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :exclusion_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :exclusion_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :foreign_key_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :foreign_key_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :unique_violation, constraint: constraint}}),$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{postgres: %{code: :unique_violation, message: message}}) do$/;"	f
to_constraints	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def to_constraints(%Postgrex.Error{}),$/;"	f
to_date	deps/ecto/lib/ecto/date_time.ex	/^  def to_date(%Ecto.DateTime{year: year, month: month, day: day}) do$/;"	f
to_date	deps/timex/lib/date/date.ex	/^  def to_date(date), do: date$/;"	f
to_date	deps/timex/lib/datetime/datetime.ex	/^  def to_date(date), do: DateTime.to_date(date)$/;"	f
to_date	deps/timex/lib/datetime/erlang.ex	/^  def to_date(_, _), do: {:error, :invalid_date}$/;"	f
to_date	deps/timex/lib/datetime/erlang.ex	/^  def to_date(date) do$/;"	f
to_date	deps/timex/lib/datetime/map.ex	/^  def to_date(map),                   do: convert!(map, :to_date)$/;"	f
to_date	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_date(date), do: NaiveDateTime.to_date(date)$/;"	f
to_date	deps/timex/lib/protocol.ex	/^  def to_date(%{__struct__: _} = d), do: Timex.to_date(Map.from_struct(d))$/;"	f
to_date	deps/timex/lib/protocol.ex	/^  def to_date(_datetime), do: {:error, :invalid_date}$/;"	f
to_date	deps/timex/lib/protocol.ex	/^  def to_date(datetime)$/;"	f
to_date	deps/timex/lib/timex.ex	/^  defdelegate to_date(date), to: Timex.Protocol$/;"	d
to_datetime	deps/timex/lib/date/date.ex	/^  def to_datetime(%Date{:year => y, :month => m, :day => d}, timezone) do$/;"	f
to_datetime	deps/timex/lib/datetime/datetime.ex	/^  def to_datetime(%DateTime{time_zone: timezone} = d, timezone), do: d$/;"	f
to_datetime	deps/timex/lib/datetime/datetime.ex	/^  def to_datetime(%DateTime{} = d, timezone), do: Timezone.convert(d, timezone)$/;"	f
to_datetime	deps/timex/lib/datetime/erlang.ex	/^  def to_datetime({y,m,d} = date, timezone) when is_date(y,m,d) do$/;"	f
to_datetime	deps/timex/lib/datetime/erlang.ex	/^  def to_datetime({{y,m,d},{h,mm,s,_us}} = dt, timezone) when is_datetime(y,m,d,h,mm,s) do$/;"	f
to_datetime	deps/timex/lib/datetime/erlang.ex	/^  def to_datetime({{y,m,d},{h,mm,s}} = dt, timezone) when is_datetime(y,m,d,h,mm,s) do$/;"	f
to_datetime	deps/timex/lib/datetime/map.ex	/^  def to_datetime(map, timezone),     do: convert(map, :to_datetime, [timezone])$/;"	f
to_datetime	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_datetime(%NaiveDateTime{:microsecond => {us,_}} = d, timezone) do$/;"	f
to_datetime	deps/timex/lib/parse/datetime/parser.ex	/^  defp to_datetime(%DateTime{} = dt), do: dt$/;"	f
to_datetime	deps/timex/lib/parse/datetime/parser.ex	/^  defp to_datetime(%NaiveDateTime{year: y, month: m, day: d, hour: h, minute: mm, second: ss, microsecond: us}) do$/;"	f
to_datetime	deps/timex/lib/protocol.ex	/^  def to_datetime(%{__struct__: _} = d, timezone), do: Timex.to_datetime(Map.from_struct(d), timezone)$/;"	f
to_datetime	deps/timex/lib/protocol.ex	/^  def to_datetime(_datetime, _timezone), do: {:error, :invalid_date}$/;"	f
to_datetime	deps/timex/lib/protocol.ex	/^  def to_datetime(datetime, timezone \\\\ :utc)$/;"	f
to_datetime	deps/timex/lib/timex.ex	/^  def to_datetime(from), do: Timex.Protocol.to_datetime(from, "Etc\/UTC")$/;"	f
to_datetime	deps/timex/lib/timex.ex	/^  defdelegate to_datetime(from, timezone), to: Timex.Protocol$/;"	d
to_days	deps/timex/lib/time/duration.ex	/^    def to_days(value, unquote(type)),$/;"	f
to_days	deps/timex/lib/time/duration.ex	/^  def to_days(%__MODULE__{} = d),   do: to_microseconds(d) \/ (1_000*1_000*60*60*24)$/;"	f
to_days	deps/timex/lib/time/duration.ex	/^  def to_days(%__MODULE__{} = d, [truncate: true]), do: trunc(to_days(d))$/;"	f
to_days	deps/timex/lib/time/duration.ex	/^  def to_days(%__MODULE__{} = d, _opts),            do: to_days(d)$/;"	f
to_desc	deps/postgrex/lib/postgrex/utils.ex	/^  defp to_desc(%Range{} = range), do: "an integer in #{inspect range}"$/;"	f
to_desc	deps/postgrex/lib/postgrex/utils.ex	/^  defp to_desc(desc) when is_binary(desc), do: desc$/;"	f
to_desc	deps/postgrex/lib/postgrex/utils.ex	/^  defp to_desc(struct) when is_atom(struct), do: "%#{inspect struct}{}"$/;"	f
to_desc	deps/postgrex/lib/postgrex/utils.ex	/^  defp to_desc({a, b}), do: to_desc(a) <> " or " <> to_desc(b)$/;"	f
to_eol_or_eof	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp to_eol_or_eof(<<>>, acc),$/;"	f
to_eol_or_eof	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp to_eol_or_eof(<<?\\n, _ :: binary>> = rest, acc),$/;"	f
to_eol_or_eof	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp to_eol_or_eof(<<char, rest :: binary>>, acc),$/;"	f
to_erl	deps/ecto/lib/ecto/date_time.ex	/^  def to_erl(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec}) do$/;"	f
to_erl	deps/ecto/lib/ecto/date_time.ex	/^  def to_erl(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
to_erl	deps/ecto/lib/ecto/date_time.ex	/^  def to_erl(%Ecto.Time{hour: hour, min: min, sec: sec}) do$/;"	f
to_erl	deps/timex/lib/date/date.ex	/^  def to_erl(%Date{year: y, month: m, day: d}), do: {y,m,d}$/;"	f
to_erl	deps/timex/lib/datetime/datetime.ex	/^  def to_erl(%DateTime{} = d) do$/;"	f
to_erl	deps/timex/lib/datetime/erlang.ex	/^  def to_erl(date) do$/;"	f
to_erl	deps/timex/lib/datetime/erlang.ex	/^  def to_erl({y,m,d} = date) when is_date(y,m,d), do: date$/;"	f
to_erl	deps/timex/lib/datetime/map.ex	/^  def to_erl(map),                    do: convert(map, :to_erl)$/;"	f
to_erl	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_erl(%NaiveDateTime{} = d), do: NaiveDateTime.to_erl(d)$/;"	f
to_erl	deps/timex/lib/protocol.ex	/^  def to_erl(%{__struct__: _} = d), do: Timex.to_erl(Map.from_struct(d))$/;"	f
to_erl	deps/timex/lib/protocol.ex	/^  def to_erl(_datetime), do: {:error, :invalid_date}$/;"	f
to_erl	deps/timex/lib/protocol.ex	/^  def to_erl(datetime)$/;"	f
to_erl	deps/timex/lib/time/duration.ex	/^  def to_erl(%__MODULE__{} = d),$/;"	f
to_erl	deps/timex/lib/timex.ex	/^  defdelegate to_erl(date), to: Timex.Protocol$/;"	d
to_erl_datetime	deps/timex/lib/datetime/erlang.ex	/^  defp to_erl_datetime(_),$/;"	f
to_erl_datetime	deps/timex/lib/datetime/erlang.ex	/^  defp to_erl_datetime({y,m,d} = date) when is_date(y,m,d),$/;"	f
to_erl_datetime	deps/timex/lib/datetime/erlang.ex	/^  defp to_erl_datetime({{y,m,d},{h,mm,s,_us}}) when is_datetime(y,m,d,h,mm,s),$/;"	f
to_erl_datetime	deps/timex/lib/datetime/erlang.ex	/^  defp to_erl_datetime({{y,m,d},{h,mm,s}} = dt) when is_datetime(y,m,d,h,mm,s),$/;"	f
to_escaped_field	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp to_escaped_field(binding, field),$/;"	f
to_field	deps/ecto/lib/ecto/query/builder/filter.ex	/^  defp to_field(binding, field),$/;"	f
to_field	deps/ecto/lib/ecto/query/builder/group_by.ex	/^  defp to_field(field), do: {{:., [], [{:&, [], [0]}, field]}, [], []}$/;"	f
to_field	deps/ecto/lib/ecto/query/builder/order_by.ex	/^  defp to_field(field), do: {{:., [], [{:&, [], [0]}, field]}, [], []}$/;"	f
to_float	deps/decimal/lib/decimal.ex	/^  def to_float(%Decimal{sign: sign, coef: coef, exp: exp}) when is_integer(coef) do$/;"	f
to_form	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_form(%{action: parent_action} = source, form, field, opts) do$/;"	f
to_form	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_form(changeset, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(conn, form, field, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(conn, opts) do$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(data, form, field, options)$/;"	f
to_form	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  def to_form(data, options)$/;"	f
to_gregorian_microseconds	deps/timex/lib/date/date.ex	/^  def to_gregorian_microseconds(date), do: (to_seconds(date, :zero) * (1_000*1_000))$/;"	f
to_gregorian_microseconds	deps/timex/lib/datetime/datetime.ex	/^  def to_gregorian_microseconds(%DateTime{microsecond: {us,_}} = date) do$/;"	f
to_gregorian_microseconds	deps/timex/lib/datetime/erlang.ex	/^  def to_gregorian_microseconds(date) do$/;"	f
to_gregorian_microseconds	deps/timex/lib/datetime/map.ex	/^  def to_gregorian_microseconds(map), do: convert!(map, :to_gregorian_microseconds)$/;"	f
to_gregorian_microseconds	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_gregorian_microseconds(%NaiveDateTime{microsecond: {us,_}} = date) do$/;"	f
to_gregorian_microseconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_microseconds(%{__struct__: _} = d), do: Timex.to_gregorian_microseconds(Map.from_struct(d))$/;"	f
to_gregorian_microseconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_microseconds(_datetime), do: {:error, :invalid_date}$/;"	f
to_gregorian_microseconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_microseconds(datetime)$/;"	f
to_gregorian_microseconds	deps/timex/lib/timex.ex	/^  defdelegate to_gregorian_microseconds(datetime), to: Timex.Protocol$/;"	d
to_gregorian_seconds	deps/timex/lib/date/date.ex	/^  def to_gregorian_seconds(date), do: to_seconds(date, :zero)$/;"	f
to_gregorian_seconds	deps/timex/lib/datetime/datetime.ex	/^  def to_gregorian_seconds(date), do: to_seconds(date, :zero)$/;"	f
to_gregorian_seconds	deps/timex/lib/datetime/erlang.ex	/^  def to_gregorian_seconds(date) do$/;"	f
to_gregorian_seconds	deps/timex/lib/datetime/map.ex	/^  def to_gregorian_seconds(map),      do: convert!(map, :to_gregorian_seconds)$/;"	f
to_gregorian_seconds	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_gregorian_seconds(date), do: to_seconds(date, :zero)$/;"	f
to_gregorian_seconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_seconds(%{__struct__: _} = d), do: Timex.to_gregorian_seconds(Map.from_struct(d))$/;"	f
to_gregorian_seconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_seconds(_datetime), do: {:error, :invalid_date}$/;"	f
to_gregorian_seconds	deps/timex/lib/protocol.ex	/^  def to_gregorian_seconds(datetime)$/;"	f
to_gregorian_seconds	deps/timex/lib/timex.ex	/^  defdelegate to_gregorian_seconds(datetime), to: Timex.Protocol$/;"	d
to_hex	deps/uuid/lib/uuid.ex	/^  defp to_hex(i) when i < 10 do$/;"	f
to_hex	deps/uuid/lib/uuid.ex	/^  defp to_hex(i) when i >= 10 and i < 16 do$/;"	f
to_hex_str	deps/uuid/lib/uuid.ex	/^  defp to_hex_str(n) when n < 256 do$/;"	f
to_hours	deps/timex/lib/time/duration.ex	/^    def to_hours(value, unquote(type)),$/;"	f
to_hours	deps/timex/lib/time/duration.ex	/^  def to_hours(%__MODULE__{} = d),   do: to_microseconds(d) \/ (1_000*1_000*60*60)$/;"	f
to_hours	deps/timex/lib/time/duration.ex	/^  def to_hours(%__MODULE__{} = d, [truncate: true]), do: trunc(to_hours(d))$/;"	f
to_hours	deps/timex/lib/time/duration.ex	/^  def to_hours(%__MODULE__{} = d, _opts),            do: to_hours(d)$/;"	f
to_i	deps/ecto/lib/ecto/date_time.ex	/^  def to_i(bin) when is_binary(bin) do$/;"	f
to_i	deps/ecto/lib/ecto/date_time.ex	/^  def to_i(int) when is_integer(int), do: int$/;"	f
to_i	deps/ecto/lib/ecto/date_time.ex	/^  def to_i(nil), do: nil$/;"	f
to_i	deps/ecto/lib/ecto/date_time.ex	/^  def to_i({int, _}) when is_integer(int), do: int$/;"	f
to_i	deps/ecto/lib/ecto/type.ex	/^  defp to_i(bin) when is_binary(bin) do$/;"	f
to_i	deps/ecto/lib/ecto/type.ex	/^  defp to_i(int) when is_integer(int), do: int$/;"	f
to_i	deps/ecto/lib/ecto/type.ex	/^  defp to_i(nil), do: nil$/;"	f
to_int	deps/tzdata/lib/tzdata/util.ex	/^  def to_int(string) do elem(Integer.parse(string),0) end$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?0 <= c and c <= ?9 do$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?A <= c and c <= ?F do$/;"	f
to_int	deps/uuid/lib/uuid.ex	/^  defp to_int(c) when ?a <= c and c <= ?f do$/;"	f
to_integer	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp to_integer({a,b,c,d}) do$/;"	f
to_integer	deps/decimal/lib/decimal.ex	/^  def to_integer(%Decimal{sign: sign, coef: coef, exp: 0})$/;"	f
to_integer	deps/decimal/lib/decimal.ex	/^  def to_integer(%Decimal{sign: sign, coef: coef, exp: exp})$/;"	f
to_interpolatable	deps/gettext/lib/gettext/interpolation.ex	/^  def to_interpolatable(string) do$/;"	f
to_interpolatable	deps/gettext/lib/gettext/interpolation.ex	/^  defp to_interpolatable(string, current, acc, start_pattern, end_pattern) do$/;"	f
to_iodata	deps/ecto/lib/ecto/log_entry.ex	/^  def to_iodata(entry) do$/;"	f
to_iodata	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^      def to_iodata(t) do$/;"	f
to_iodata	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    def to_iodata(t) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?"), do: "&quot;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?&), do: "&amp;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?'), do: "&#39;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?<), do: "&lt;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(?>), do: "&gt;"$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata([]) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata([h|t]) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(atom), do: Plug.HTML.html_escape(Atom.to_string(atom))$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data)$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(data), do: Integer.to_string(data)$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(h) when is_binary(h) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(h) when is_integer(h) and h <= 255 do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(h) when is_integer(h) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(nil),  do: ""$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(other) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata(value) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata({:safe, data}) do$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  def to_iodata({:safe, data}), do: data$/;"	f
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  defdelegate to_iodata(data), to: Date, as: :to_string$/;"	d
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  defdelegate to_iodata(data), to: NaiveDateTime, as: :to_string$/;"	d
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  defdelegate to_iodata(data), to: Plug.HTML, as: :html_escape$/;"	d
to_iodata	deps/phoenix_html/lib/phoenix_html/safe.ex	/^  defdelegate to_iodata(data), to: Time, as: :to_string$/;"	d
to_iso8601	deps/ecto/lib/ecto/date_time.ex	/^  def to_iso8601(%Ecto.DateTime{year: year, month: month, day: day,$/;"	f
to_iso8601	deps/ecto/lib/ecto/date_time.ex	/^  def to_iso8601(date) do$/;"	f
to_iso8601	deps/ecto/lib/ecto/date_time.ex	/^  def to_iso8601(time) do$/;"	f
to_julian	deps/timex/lib/date/date.ex	/^  def to_julian(%Date{:year => y, :month => m, :day => d}) do$/;"	f
to_julian	deps/timex/lib/datetime/datetime.ex	/^  def to_julian(%DateTime{:year => y, :month => m, :day => d}) do$/;"	f
to_julian	deps/timex/lib/datetime/erlang.ex	/^  def to_julian(date) do$/;"	f
to_julian	deps/timex/lib/datetime/map.ex	/^  def to_julian(map),                 do: convert!(map, :to_julian)$/;"	f
to_julian	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_julian(%NaiveDateTime{:year => y, :month => m, :day => d}) do$/;"	f
to_julian	deps/timex/lib/protocol.ex	/^  def to_julian(%{__struct__: _} = d), do: Timex.to_julian(Map.from_struct(d))$/;"	f
to_julian	deps/timex/lib/protocol.ex	/^  def to_julian(_datetime), do: {:error, :invalid_date}$/;"	f
to_julian	deps/timex/lib/protocol.ex	/^  def to_julian(datetime)$/;"	f
to_julian	deps/timex/lib/timex.ex	/^  defdelegate to_julian(datetime), to: Timex.Protocol$/;"	d
to_list	deps/ecto/lib/ecto/multi.ex	/^  def to_list(%Multi{operations: operations}) do$/;"	f
to_list	deps/ecto/lib/ecto/query/inspect.ex	/^  defp to_list(query) do$/;"	f
to_lower_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_lower_char(char) when char in ?A..?Z, do: char + 32$/;"	f
to_lower_char	deps/phoenix/lib/phoenix/naming.ex	/^  defp to_lower_char(char), do: char$/;"	f
to_map	deps/boltex/lib/boltex/pack_stream.ex	/^  defp to_map(map) do$/;"	f
to_map	deps/coherence/test/support/test_helpers.exs	/^  def to_map(attrs) when is_list(attrs), do: Enum.into(attrs, %{})$/;"	f
to_map	deps/coherence/test/support/test_helpers.exs	/^  def to_map(attrs), do: attrs$/;"	f
to_map	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp to_map(nil, _fields) do$/;"	f
to_map	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp to_map(value, fields) do$/;"	f
to_map	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp to_map(value, fields) when is_list(value) do$/;"	f
to_map	deps/phoenix/lib/phoenix/controller.ex	/^  defp to_map(assigns) when is_list(assigns), do: :maps.from_list(assigns)$/;"	f
to_map	deps/phoenix/lib/phoenix/controller.ex	/^  defp to_map(assigns) when is_map(assigns), do: assigns$/;"	f
to_map	deps/phoenix/lib/phoenix/view.ex	/^  defp to_map(assigns) when is_list(assigns), do: :maps.from_list(assigns)$/;"	f
to_map	deps/phoenix/lib/phoenix/view.ex	/^  defp to_map(assigns) when is_map(assigns), do: assigns$/;"	f
to_microseconds	deps/timex/lib/time/duration.ex	/^    def to_microseconds(value, unquote(type)),$/;"	f
to_microseconds	deps/timex/lib/time/duration.ex	/^  def to_microseconds(%Duration{megaseconds: mega, seconds: sec, microseconds: micro}) do$/;"	f
to_microseconds	deps/timex/lib/time/duration.ex	/^  def to_microseconds(%Duration{} = duration, _opts), do: to_microseconds(duration)$/;"	f
to_milliseconds	deps/timex/lib/time/duration.ex	/^    def to_milliseconds(value, unquote(type)),$/;"	f
to_milliseconds	deps/timex/lib/time/duration.ex	/^  def to_milliseconds(%__MODULE__{} = d),   do: to_microseconds(d) \/ 1_000$/;"	f
to_milliseconds	deps/timex/lib/time/duration.ex	/^  def to_milliseconds(%__MODULE__{} = d, [truncate: true]), do: trunc(to_milliseconds(d))$/;"	f
to_milliseconds	deps/timex/lib/time/duration.ex	/^  def to_milliseconds(%__MODULE__{} = d, _opts),            do: to_milliseconds(d)$/;"	f
to_minutes	deps/timex/lib/time/duration.ex	/^    def to_minutes(value, unquote(type)),$/;"	f
to_minutes	deps/timex/lib/time/duration.ex	/^  def to_minutes(%__MODULE__{} = d),   do: to_microseconds(d) \/ (1_000*1_000*60)$/;"	f
to_minutes	deps/timex/lib/time/duration.ex	/^  def to_minutes(%__MODULE__{} = d, [truncate: true]), do: trunc(to_minutes(d))$/;"	f
to_minutes	deps/timex/lib/time/duration.ex	/^  def to_minutes(%__MODULE__{} = d, _opts),            do: to_minutes(d)$/;"	f
to_month	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month(month) when is_integer(month), do: [month: month]$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["April", "Apr"],     do: to_month(4)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["August", "Aug"],    do: to_month(8)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["December", "Dec"],  do: to_month(12)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["February", "Feb"],  do: to_month(2)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["January", "Jan"],   do: to_month(1)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["July", "Jul"],      do: to_month(7)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["June", "Jun"],      do: to_month(6)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["March", "Mar"],     do: to_month(3)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["May", "May"],       do: to_month(5)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["November", "Nov"],  do: to_month(11)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["October", "Oct"],   do: to_month(10)$/;"	f
to_month_num	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_month_num(m) when m in ["September", "Sep"], do: to_month(9)$/;"	f
to_naive_datetime	deps/timex/lib/date/date.ex	/^  def to_naive_datetime(%Date{:year => y, :month => m, :day => d}) do$/;"	f
to_naive_datetime	deps/timex/lib/datetime/datetime.ex	/^  def to_naive_datetime(%DateTime{time_zone: nil} = d) do$/;"	f
to_naive_datetime	deps/timex/lib/datetime/datetime.ex	/^  def to_naive_datetime(%DateTime{} = d) do$/;"	f
to_naive_datetime	deps/timex/lib/datetime/erlang.ex	/^  def to_naive_datetime(date) do$/;"	f
to_naive_datetime	deps/timex/lib/datetime/erlang.ex	/^  def to_naive_datetime({{y,m,d},{h,mm,s,us}}) when is_datetime(y,m,d,h,mm,s) do$/;"	f
to_naive_datetime	deps/timex/lib/datetime/map.ex	/^  def to_naive_datetime(map),         do: convert(map, :to_naive_datetime)$/;"	f
to_naive_datetime	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_naive_datetime(%NaiveDateTime{} = date), do: date$/;"	f
to_naive_datetime	deps/timex/lib/protocol.ex	/^  def to_naive_datetime(%{__struct__: _} = d), do: Timex.to_naive_datetime(Map.from_struct(d))$/;"	f
to_naive_datetime	deps/timex/lib/protocol.ex	/^  def to_naive_datetime(_datetime), do: {:error, :invalid_date}$/;"	f
to_naive_datetime	deps/timex/lib/protocol.ex	/^  def to_naive_datetime(datetime)$/;"	f
to_naive_datetime	deps/timex/lib/timex.ex	/^  defdelegate to_naive_datetime(date), to: Timex.Protocol$/;"	d
to_olson	deps/timex/lib/timezone/utils.ex	/^      def to_olson(unquote(key)), do: unquote(value)$/;"	f
to_olson	deps/timex/lib/timezone/utils.ex	/^  def to_olson(_tz), do: nil$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}) when is_binary(key), do: key$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}) when is_integer(key), do: Integer.to_string(key)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => key}), do: Phoenix.Param.to_param(key)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^        def to_param(%{unquote(key) => nil}) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}) when is_binary(id), do: id$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}) when is_integer(id), do: Integer.to_string(id)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: id}), do: Phoenix.Param.to_param(id)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(%{id: nil}) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(atom) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(bin) when is_binary(bin), do: bin$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(data) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(int), do: Integer.to_string(int)$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(map) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(map) when is_map(map) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(nil) do$/;"	f
to_param	deps/phoenix/lib/phoenix/param.ex	/^  def to_param(term)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(bin) when is_binary(bin), do: bin$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(data), do: Phoenix.Param.to_param(data)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(false), do: "false"$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(int) when is_integer(int), do: Integer.to_string(int)$/;"	f
to_param	deps/phoenix/lib/phoenix/router/helpers.ex	/^      defp to_param(true), do: "true"$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp to_port(binary)  when is_binary(binary), do: String.to_integer(binary)$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp to_port(integer) when is_integer(integer), do: integer$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp to_port(nil), do: raise "server can't start because :port in config is nil, please use a valid port number"$/;"	f
to_port	deps/phoenix/lib/phoenix/endpoint/handler.ex	/^  defp to_port({:system, env_var}), do: to_port(System.get_env(env_var))$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(data)$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(module) do$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(query), do: query$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(source) when is_binary(source),$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query(subquery), do: %Ecto.Query{from: subquery}$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query({source, %Ecto.Query{from: {_, schema}} = query}) when is_binary(source),$/;"	f
to_query	deps/ecto/lib/ecto/queryable.ex	/^  def to_query({source, schema} = from) when is_binary(source) and is_atom(schema) and not is_nil(schema),$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(expr, line) do$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(literal, _line) when is_binary(literal) or is_atom(literal) or is_number(literal) do$/;"	f
to_safe	deps/phoenix_html/lib/phoenix_html/engine.ex	/^  defp to_safe(literal, line) when is_list(literal) do$/;"	f
to_sec_ms	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_sec_ms(fraction) do$/;"	f
to_seconds	deps/timex/lib/date/date.ex	/^  defp to_seconds(%Date{year: y, month: m, day: d}, :epoch),$/;"	f
to_seconds	deps/timex/lib/date/date.ex	/^  defp to_seconds(%Date{year: y, month: m, day: d}, :zero),$/;"	f
to_seconds	deps/timex/lib/datetime/datetime.ex	/^  defp to_seconds(%DateTime{} = date, :epoch) do$/;"	f
to_seconds	deps/timex/lib/datetime/datetime.ex	/^  defp to_seconds(%DateTime{} = date, :zero) do$/;"	f
to_seconds	deps/timex/lib/datetime/datetime.ex	/^  defp to_seconds(_, _), do: {:error, :badarg}$/;"	f
to_seconds	deps/timex/lib/datetime/naivedatetime.ex	/^  defp to_seconds(%NaiveDateTime{year: y, month: m, day: d, hour: h, minute: mm, second: s}, :epoch) do$/;"	f
to_seconds	deps/timex/lib/datetime/naivedatetime.ex	/^  defp to_seconds(%NaiveDateTime{year: y, month: m, day: d, hour: h, minute: mm, second: s}, :zero) do$/;"	f
to_seconds	deps/timex/lib/time/duration.ex	/^    def to_seconds(value, unquote(type)),$/;"	f
to_seconds	deps/timex/lib/time/duration.ex	/^  def to_seconds(%__MODULE__{} = d),   do: to_microseconds(d) \/ (1_000*1_000)$/;"	f
to_seconds	deps/timex/lib/time/duration.ex	/^  def to_seconds(%__MODULE__{} = d, [truncate: true]), do: trunc(to_seconds(d))$/;"	f
to_seconds	deps/timex/lib/time/duration.ex	/^  def to_seconds(%__MODULE__{} = d, _opts),            do: to_seconds(d)$/;"	f
to_sql	deps/ecto/integration_test/sql/sql.exs	/^  test "to_sql\/3" do$/;"	t
to_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^      def to_sql(operation, queryable) do$/;"	f
to_sql	deps/ecto/lib/ecto/adapters/sql.ex	/^  def to_sql(kind, repo, queryable) do$/;"	f
to_string	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def to_string(string) when is_binary(string), do: string$/;"	f
to_string	deps/coherence/lib/coherence/plugs/authorization/utils.ex	/^  def to_string({a,b,c,d}), do: "#{a}.#{b}.#{c}.#{d}"$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :inf}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :qNaN}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: :sNaN}, _type) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :normal) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :raw) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(%Decimal{sign: sign, coef: coef, exp: exp}, :scientific) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(dec) do$/;"	f
to_string	deps/decimal/lib/decimal.ex	/^  def to_string(num, type \\\\ :scientific)$/;"	f
to_string	deps/ecto/lib/ecto/date_time.ex	/^  def to_string(%Ecto.DateTime{year: year, month: month, day: day, hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_string	deps/ecto/lib/ecto/date_time.ex	/^  def to_string(%Ecto.Date{year: year, month: month, day: day}) do$/;"	f
to_string	deps/ecto/lib/ecto/date_time.ex	/^  def to_string(%Ecto.Time{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_string	deps/ecto/lib/ecto/date_time.ex	/^  def to_string(dt) do$/;"	f
to_string	deps/ecto/lib/ecto/query/inspect.ex	/^  def to_string(query) do$/;"	f
to_string	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def to_string(%Fuzzyurl{}=fuzzy_url) do$/;"	f
to_string	deps/fuzzyurl/lib/fuzzyurl/strings.ex	/^  def to_string(%Fuzzyurl{}=fu) do$/;"	f
to_string	deps/postgrex/lib/postgrex/query.ex	/^  def to_string(%Postgrex.Query{statement: statement}) do$/;"	f
to_string	deps/postgrex/lib/postgrex/stream.ex	/^  def to_string(%Postgrex.Copy{query: query}) do$/;"	f
to_string	deps/postgrex/lib/postgrex/stream.ex	/^  def to_string(%Postgrex.Stream{query: query}) do$/;"	f
to_string	deps/timex/lib/time/duration.ex	/^  def to_string(%__MODULE__{} = duration) do$/;"	f
to_struct	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp to_struct(_config, :releases, []) do$/;"	f
to_struct	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp to_struct(config) when is_list(config) do$/;"	f
to_struct	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp to_struct(config, :environments, []) do$/;"	f
to_struct	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp to_struct(config, :environments, envs) do$/;"	f
to_struct	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  defp to_struct(config, :releases, rs) do$/;"	f
to_struct	deps/ecto/lib/ecto/changeset.ex	/^  defp to_struct(%{__struct__: struct}, _opts), do: "#" <> Kernel.inspect(struct) <> "<>"$/;"	f
to_struct	deps/ecto/lib/ecto/changeset.ex	/^  defp to_struct(other, opts), do: to_doc(other, opts)$/;"	f
to_struct	deps/ecto/lib/ecto/embedded.ex	/^  defp to_struct(%Changeset{changes: changes, data: schema}, :update,$/;"	f
to_struct	deps/ecto/lib/ecto/embedded.ex	/^  defp to_struct(%Changeset{data: %{__struct__: actual}}, _action,$/;"	f
to_struct	deps/ecto/lib/ecto/embedded.ex	/^  defp to_struct(%Changeset{valid?: false}, _action,$/;"	f
to_struct	deps/ecto/lib/ecto/embedded.ex	/^  defp to_struct(%Changeset{} = changeset, action, %{related: schema}, adapter) do$/;"	f
to_struct	deps/ecto/lib/ecto/embedded.ex	/^  defp to_struct(%Changeset{}, :delete, _embed, _adapter) do$/;"	f
to_struct	deps/gettext/lib/gettext/po/parser.ex	/^  defp to_struct({:plural_translation, translation}),$/;"	f
to_struct	deps/gettext/lib/gettext/po/parser.ex	/^  defp to_struct({:translation, translation}),$/;"	f
to_time	deps/ecto/lib/ecto/date_time.ex	/^  def to_time(%Ecto.DateTime{hour: hour, min: min, sec: sec, usec: usec}) do$/;"	f
to_time	deps/timex/lib/time/duration.ex	/^  def to_time(%__MODULE__{} = d) do$/;"	f
to_time!	deps/timex/lib/time/duration.ex	/^  def to_time!(%__MODULE__{} = d) do$/;"	f
to_topic_match	deps/phoenix/lib/phoenix/socket.ex	/^  defp to_topic_match(topic_pattern) do$/;"	f
to_tuple	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp to_tuple(string) when is_binary(string) do$/;"	f
to_unix	deps/timex/lib/date/date.ex	/^  def to_unix(date), do: trunc(to_seconds(date, :epoch))$/;"	f
to_unix	deps/timex/lib/datetime/datetime.ex	/^  def to_unix(date), do: trunc(to_seconds(date, :epoch))$/;"	f
to_unix	deps/timex/lib/datetime/erlang.ex	/^  def to_unix(date) do$/;"	f
to_unix	deps/timex/lib/datetime/map.ex	/^  def to_unix(map),                   do: convert!(map, :to_unix)$/;"	f
to_unix	deps/timex/lib/datetime/naivedatetime.ex	/^  def to_unix(date), do: trunc(to_seconds(date, :epoch))$/;"	f
to_unix	deps/timex/lib/protocol.ex	/^  def to_unix(%{__struct__: _} = d), do: Timex.to_unix(Map.from_struct(d))$/;"	f
to_unix	deps/timex/lib/protocol.ex	/^  def to_unix(_datetime), do: {:error, :invalid_date}$/;"	f
to_unix	deps/timex/lib/protocol.ex	/^  def to_unix(datetime)$/;"	f
to_unix	deps/timex/lib/timex.ex	/^  defdelegate to_unix(datetime), to: Timex.Protocol$/;"	d
to_weekday	deps/timex/lib/parse/datetime/helpers.ex	/^  def to_weekday(name) do$/;"	f
to_weeks	deps/timex/lib/time/duration.ex	/^    def to_weeks(value, unquote(type)),$/;"	f
to_weeks	deps/timex/lib/time/duration.ex	/^  def to_weeks(%__MODULE__{} = d),   do: to_microseconds(d) \/ (1_000*1_000*60*60*24*7)$/;"	f
to_weeks	deps/timex/lib/time/duration.ex	/^  def to_weeks(%__MODULE__{} = d, [truncate: true]), do: trunc(to_weeks(d))$/;"	f
to_weeks	deps/timex/lib/time/duration.ex	/^  def to_weeks(%__MODULE__{} = d, _opts),            do: to_weeks(d)$/;"	f
today	deps/timex/lib/timex.ex	/^  def today() do$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(""),$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(<<?", quoted :: binary>>),$/;"	f
token	deps/plug/lib/plug/conn/utils.ex	/^  def token(token),$/;"	f
tokenize	deps/gettext/lib/gettext/po/tokenizer.ex	/^  def tokenize(str) do$/;"	f
tokenize	deps/timex/lib/format/datetime/formatters/default.ex	/^  defdelegate tokenize(format_string), to: Tokenizer$/;"	d
tokenize	deps/timex/lib/format/datetime/formatters/relative.ex	/^  def tokenize(format_string) do$/;"	f
tokenize	deps/timex/lib/format/datetime/formatters/strftime.ex	/^  defdelegate tokenize(format_string), to: Strftime$/;"	d
tokenize	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def tokenize(<<>>), do: {:error, "Format string cannot be empty."}$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/default.ex	/^  def tokenize(str) do$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def tokenize(<<>>), do: {:error, "Format string cannot be empty."}$/;"	f
tokenize	deps/timex/lib/parse/datetime/tokenizers/strftime.ex	/^  def tokenize(str) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^    defp tokenize_line(unquote(kw) <> <<char, rest :: binary>>, line, acc)$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^    defp tokenize_line(unquote(kw) <> _rest, line, _acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line("msgstr" <> <<char, rest :: binary>>, line, acc)$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line("msgstr" <> _rest, line, _acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line("msgstr[" <> <<rest :: binary>>, line, acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<>>, _line, acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<?", rest :: binary>>, line, acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<?#, _ :: binary>> = rest, line, acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<?\\n, rest :: binary>>, line, acc) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<char, rest :: binary>>, line, acc)$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(<<letter, _ :: binary>> = binary, line, _acc)$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(binary, line, _acc) when is_binary(binary) do$/;"	f
tokenize_line	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_line(str, line, acc)$/;"	f
tokenize_plural_form	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_plural_form(<<?], _rest :: binary>>, acc)$/;"	f
tokenize_plural_form	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_plural_form(<<?], char, rest :: binary>>, acc)$/;"	f
tokenize_plural_form	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_plural_form(<<digit, rest :: binary>>, acc)$/;"	f
tokenize_plural_form	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_plural_form(_binary, _acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<>>, _acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<?", rest :: binary>>, acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<?\\\\, _char, _rest :: binary>>, _acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<?\\\\, char, rest :: binary>>, acc)$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<?\\n, _rest :: binary>>, _acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(<<char, rest :: binary>>, acc),$/;"	f
tokenize_string	deps/gettext/lib/gettext/po/tokenizer.ex	/^  defp tokenize_string(str, acc)$/;"	f
too_long	deps/ecto/lib/ecto/changeset.ex	/^  defp too_long(:list, _length, value, opts), do:$/;"	f
too_long	deps/ecto/lib/ecto/changeset.ex	/^  defp too_long(:string, _length, value, opts), do:$/;"	f
too_long	deps/ecto/lib/ecto/changeset.ex	/^  defp too_long(_type, length, value, _opts) when length <= value, do: nil$/;"	f
too_many_failed_login_attempts	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def too_many_failed_login_attempts, do: dgettext(@domain, "Too many failed login attempts. Account has been locked.")$/;"	f
too_many_failed_login_attempts	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def too_many_failed_login_attempts, do: dgettext(@domain, "Too many failed login attempts. Account has been locked.")$/;"	f
too_many_failed_login_attempts	deps/coherence/test/support/messages.exs	/^  def too_many_failed_login_attempts, do: dgettext(@domain, "Too many failed login attempts. Account has been locked.")$/;"	f
too_short	deps/ecto/lib/ecto/changeset.ex	/^  defp too_short(:list, _length, value, opts), do:$/;"	f
too_short	deps/ecto/lib/ecto/changeset.ex	/^  defp too_short(:string, _length, value, opts), do:$/;"	f
too_short	deps/ecto/lib/ecto/changeset.ex	/^  defp too_short(_type, length, value, _opts) when length >= value, do: nil$/;"	f
topological_sort	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp topological_sort(instructions) do$/;"	f
total_offset	deps/timex/lib/timezone/timezone.ex	/^  def total_offset(%TimezoneInfo{offset_std: std, offset_utc: utc}) do$/;"	f
total_offset	deps/timex/lib/timezone/timezone.ex	/^  def total_offset(std_offset, utc_offset) when is_integer(std_offset) and is_integer(utc_offset) do$/;"	f
touch	deps/con_cache/lib/con_cache.ex	/^  def touch(cache_id, key), do: Operations.touch(Owner.cache(cache_id), key)$/;"	f
touch	deps/con_cache/lib/con_cache/operations.ex	/^  def touch(cache, key) do$/;"	f
touch	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  def touch do$/;"	f
touch_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp touch_config(config) do$/;"	f
touch_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp touch_config(config) do$/;"	f
touch_if_exists	deps/phoenix/lib/mix/tasks/compile.phoenix.ex	/^  defp touch_if_exists(path) do$/;"	f
touch_last_heartbeat	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  defp touch_last_heartbeat(replica) do$/;"	f
track	deps/coherence/web/services/trackable_service.ex	/^  defp track(conn, user, action) do$/;"	f
track	deps/phoenix/lib/phoenix/presence.ex	/^      def track(%Phoenix.Socket{} = socket, key, meta) do$/;"	f
track	deps/phoenix/lib/phoenix/presence.ex	/^      def track(pid, topic, key, meta) do$/;"	f
track	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def track(server_name, pid, topic, key, meta) when is_pid(pid) and is_map(meta) do$/;"	f
track login	deps/coherence/test/controllers/session_controller_test.exs	/^    test "track login", %{conn: conn, user: user} do$/;"	t
track logout	deps/coherence/test/controllers/session_controller_test.exs	/^    test "track logout", %{conn: conn, user: user} do$/;"	t
track_failed_login	deps/coherence/web/services/trackable_service.ex	/^  def track_failed_login(conn, _user, false),$/;"	f
track_failed_login	deps/coherence/web/services/trackable_service.ex	/^  def track_failed_login(conn, user, true),$/;"	f
track_lock	deps/coherence/web/services/trackable_service.ex	/^  def track_lock(conn, _user, false),$/;"	f
track_lock	deps/coherence/web/services/trackable_service.ex	/^  def track_lock(conn, user, true),$/;"	f
track_login	deps/coherence/web/services/trackable_service.ex	/^  def track_login(conn, _, false, false), do: conn$/;"	f
track_login	deps/coherence/web/services/trackable_service.ex	/^  def track_login(conn, user, false, true) do$/;"	f
track_login	deps/coherence/web/services/trackable_service.ex	/^  def track_login(conn, user, true, false) do$/;"	f
track_logout	deps/coherence/test/services/trackable_service_test.exs	/^    test "track_logout", %{conn: conn, user: user} do$/;"	t
track_logout	deps/coherence/web/services/trackable_service.ex	/^  def track_logout(conn, _, false, false), do: conn$/;"	f
track_logout	deps/coherence/web/services/trackable_service.ex	/^  def track_logout(conn, user, false, true) do$/;"	f
track_logout	deps/coherence/web/services/trackable_service.ex	/^  def track_logout(conn, user, true, false) do$/;"	f
track_password_reset	deps/coherence/web/services/trackable_service.ex	/^  def track_password_reset(conn, _user, false),$/;"	f
track_password_reset	deps/coherence/web/services/trackable_service.ex	/^  def track_password_reset(conn, user, true),$/;"	f
track_unlock	deps/coherence/web/services/trackable_service.ex	/^  def track_unlock(conn, _user, false),$/;"	f
track_unlock	deps/coherence/web/services/trackable_service.ex	/^  def track_unlock(conn, user, true),$/;"	f
track_unlock_token	deps/coherence/web/services/trackable_service.ex	/^  def track_unlock_token(conn, _user, false),$/;"	f
track_unlock_token	deps/coherence/web/services/trackable_service.ex	/^  def track_unlock_token(conn, user, true),$/;"	f
trackable?	deps/coherence/lib/coherence/schema.ex	/^      def trackable? do$/;"	f
trackable_table?	deps/coherence/lib/coherence/schema.ex	/^      def trackable_table? do$/;"	f
transaction	deps/db_connection/lib/db_connection.ex	/^  def transaction(conn, fun, opts \\\\ []) do$/;"	f
transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^      def transaction(repo, opts, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/adapters/sql.ex	/^  def transaction(repo, opts, fun) do$/;"	f
transaction	deps/ecto/lib/ecto/repo.ex	/^        def transaction(fun_or_multi, opts \\\\ []) do$/;"	f
transaction	deps/ecto/lib/ecto/repo/queryable.ex	/^  def transaction(adapter, repo, %Ecto.Multi{} = multi, opts) do$/;"	f
transaction	deps/ecto/lib/ecto/repo/queryable.ex	/^  def transaction(adapter, repo, fun, opts) when is_function(fun, 0) do$/;"	f
transaction	deps/postgrex/lib/postgrex.ex	/^  def transaction(conn, fun, opts \\\\ []) do$/;"	f
transaction commits	deps/ecto/integration_test/sql/transaction.exs	/^  test "transaction commits" do$/;"	t
transaction re	deps/ecto/integration_test/sql/transaction.exs	/^  test "transaction re-raises" do$/;"	t
transaction returns value	deps/ecto/integration_test/sql/transaction.exs	/^  test "transaction returns value" do$/;"	t
transaction rolls back	deps/ecto/integration_test/sql/transaction.exs	/^  test "transaction rolls back" do$/;"	t
transaction rolls back per repository	deps/ecto/integration_test/sql/transaction.exs	/^  test "transaction rolls back per repository" do$/;"	t
transaction_call	deps/db_connection/lib/db_connection.ex	/^  defp transaction_call(:handle_begin), do: :begin$/;"	f
transaction_call	deps/db_connection/lib/db_connection.ex	/^  defp transaction_call(:handle_commit), do: :commit$/;"	f
transaction_call	deps/db_connection/lib/db_connection.ex	/^  defp transaction_call(:handle_rollback), do: :rollback$/;"	f
transaction_failed	deps/db_connection/lib/db_connection.ex	/^  defp transaction_failed(conn) do$/;"	f
transaction_log	deps/db_connection/lib/db_connection.ex	/^  defp transaction_log(nil), do: :ok$/;"	f
transaction_log	deps/db_connection/lib/db_connection.ex	/^  defp transaction_log({log, times, callback, result}) do$/;"	f
transaction_meter	deps/db_connection/lib/db_connection.ex	/^  defp transaction_meter(%DBConnection{} = conn, fun, opts) do$/;"	f
transaction_meter	deps/db_connection/lib/db_connection.ex	/^  defp transaction_meter(pool, fun, opts) do$/;"	f
transaction_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_msgs(%{queries: nil} = s, [statement | statements]) do$/;"	f
transaction_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_msgs(_, [:sync]) do$/;"	f
transaction_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_msgs(_, []) do$/;"	f
transaction_msgs	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_msgs(s, [name | names]) do$/;"	f
transaction_nested	deps/db_connection/lib/db_connection.ex	/^  defp transaction_nested(conn, fun) do$/;"	f
transaction_ok	deps/db_connection/lib/db_connection.ex	/^  defp transaction_ok(conn, result) do$/;"	f
transaction_recv	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_recv(s, status, next_postgres, res, buffer) do$/;"	f
transaction_result	deps/db_connection/lib/db_connection.ex	/^  defp transaction_result({:ok, _} = ok), do: ok$/;"	f
transaction_result	deps/db_connection/lib/db_connection.ex	/^  defp transaction_result({:raise, err}), do: {:error, err}$/;"	f
transaction_result	deps/db_connection/lib/db_connection.ex	/^  defp transaction_result({_kind, _reason, _stack} = raised), do: raised$/;"	f
transaction_run	deps/db_connection/lib/db_connection.ex	/^  defp transaction_run(conn, log, fun, opts) do$/;"	f
transaction_send	deps/postgrex/lib/postgrex/protocol.ex	/^  defp transaction_send(s, status, statement, next_postgres, res, buffer) do$/;"	f
transactions are not shared in repo	deps/ecto/integration_test/sql/transaction.exs	/^  test "transactions are not shared in repo" do$/;"	t
transform	deps/bolt_sips/lib/bolt_sips/response.ex	/^  def transform(raw, _stats \\\\ :no) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(nil, _keys, _as, _options), do: nil$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, _keys, _as, _options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, %{__struct__: _} = as, options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, [as], options) do$/;"	f
transform	deps/poison/lib/poison/decoder.ex	/^  defp transform(value, keys, as, options) when is_map(as) do$/;"	f
transform_map	deps/poison/lib/poison/decoder.ex	/^  defp transform_map(value, keys, as, options) do$/;"	f
transform_rule_at	deps/tzdata/lib/tzdata/util.ex	/^  def transform_rule_at("0"), do: transform_rule_at "0:00"$/;"	f
transform_rule_at	deps/tzdata/lib/tzdata/util.ex	/^  def transform_rule_at(string) do$/;"	f
transform_state	deps/combine/lib/combine.ex	/^  defp transform_state(state, options) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, keys, as, options) do$/;"	f
transform_struct	deps/poison/lib/poison/decoder.ex	/^  defp transform_struct(value, keys, as, options) when keys in [:atoms, :atoms!] do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_date, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_date_time, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_month, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(:year_only, map) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(input_date_string) do$/;"	f
transform_until_datetime	deps/tzdata/lib/tzdata/util.ex	/^  def transform_until_datetime(nil), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules("-"), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules("0"), do: nil$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string) do$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string, false), do: {:named_rules, string}$/;"	f
transform_zone_line_rules	deps/tzdata/lib/tzdata/parser.ex	/^  defp transform_zone_line_rules(string, true) do$/;"	f
translate	deps/plug/lib/plug/adapters/translator.ex	/^  def translate(_min_level, _level, _kind, _data) do$/;"	f
translate	deps/plug/lib/plug/adapters/translator.ex	/^  def translate(min_level, :error, :format,$/;"	f
translate	deps/timex/lib/l10n/translator.ex	/^  def translate(locale, domain, msgid) do$/;"	f
translate_error	apps/flexcility_web/lib/flexcility_web/views/error_helpers.ex	/^  def translate_error({msg, opts}) do$/;"	f
translate_errors	apps/flexcility_web/lib/flexcility_web/views/changeset_view.ex	/^  def translate_errors(changeset) do$/;"	f
translate_errors	deps/phoenix/priv/templates/phoenix.gen.json/changeset_view.ex	/^  def translate_errors(changeset) do$/;"	f
translate_errors	deps/phoenix/priv/templates/phx.gen.json/changeset_view.ex	/^  def translate_errors(changeset) do$/;"	f
translate_plural	deps/timex/lib/l10n/translator.ex	/^  def translate_plural(locale, domain, msgid, msgid_plural, n) do$/;"	f
translate_ranch	deps/plug/lib/plug/adapters/translator.ex	/^  defp translate_ranch(_min_level, ref, protocol, pid, reason) do$/;"	f
translate_ranch	deps/plug/lib/plug/adapters/translator.ex	/^  defp translate_ranch(min_level, _ref, :cowboy_protocol, pid,$/;"	f
transport	deps/phoenix/lib/phoenix/socket.ex	/^  defmacro transport(name, module, config \\\\ []) do$/;"	a
transport_dispatch	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp transport_dispatch(endpoint, server_ref, msg, opts) do$/;"	f
transport_log	deps/phoenix/lib/phoenix/socket/transport.ex	/^  def transport_log(conn, level) do$/;"	f
traverse_errors	deps/ecto/lib/ecto/changeset.ex	/^  def traverse_errors(%Changeset{errors: errors, changes: changes, types: types} = changeset, msg_func)$/;"	f
traverse_exprs	deps/ecto/lib/ecto/query/planner.ex	/^  defp traverse_exprs(query, operation, acc, fun) do$/;"	f
traverse_record	deps/bolt_sips/lib/bolt_sips/response.ex	/^  defp traverse_record(record, acc) do$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([], %ParserState{line: line, column: col} = state, _) do$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([], _, %ParserState{status: :ok} = success),            do: success$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([_|_], _, %ParserState{status: :ok} = success),         do: success$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([parser|rest], state, %ParserState{}),                  do: try_choice(rest, state, parser.(state))$/;"	f
try_choice	deps/combine/lib/combine/parsers/base.ex	/^  defp try_choice([parser|rest], state, nil),                             do: try_choice(rest, state, parser.(state))$/;"	f
try_convert	deps/timex/lib/convert/convert.ex	/^  def try_convert(_), do: {:error, :invalid_date}$/;"	f
try_exec	deps/con_cache/lib/con_cache/lock.ex	/^  def try_exec(server, id, timeout \\\\ 5000, fun) do$/;"	f
try_expansion	deps/ecto/lib/ecto/query/builder.ex	/^  defp try_expansion(expr, type, params, vars, %Macro.Env{} = env) do$/;"	f
try_expansion	deps/ecto/lib/ecto/query/builder.ex	/^  defp try_expansion(expr, type, params, vars, {env, fun} = env_fun) do$/;"	f
try_isolated	deps/con_cache/lib/con_cache.ex	/^  def try_isolated(cache_id, key, timeout \\\\ nil, on_success),$/;"	f
try_isolated	deps/con_cache/lib/con_cache/operations.ex	/^  def try_isolated(cache, key, timeout \\\\ nil, on_success) do$/;"	f
tx	deps/bolt_sips/lib/bolt_sips/query.ex	/^  defp tx(conn, statements, params) do$/;"	f
tx	deps/bolt_sips/lib/bolt_sips/query.ex	/^  defp tx(conn, statements, params) when length(statements) == 1 do$/;"	f
type	deps/ecto/integration_test/support/types.exs	/^  def type, do: :id$/;"	f
type	deps/ecto/lib/ecto/date_time.ex	/^  def type, do: :date$/;"	f
type	deps/ecto/lib/ecto/date_time.ex	/^  def type, do: :naive_datetime$/;"	f
type	deps/ecto/lib/ecto/date_time.ex	/^  def type, do: :time$/;"	f
type	deps/ecto/lib/ecto/query/api.ex	/^  def type(interpolated_value, type), do: doc! [interpolated_value, type]$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^        def type, do: :integer$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type(type) do$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type(type)$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type({:array, type}), do: {:array, type(type)}$/;"	f
type	deps/ecto/lib/ecto/type.ex	/^  def type({:map, type}), do: {:map, type(type)}$/;"	f
type	deps/ecto/lib/ecto/uuid.ex	/^  def type, do: :uuid$/;"	f
type	deps/mime/lib/mime.ex	/^  def type(file_extension) do$/;"	f
type	deps/plug/lib/plug/mime.ex	/^  def type(file_extension) do$/;"	f
type	deps/timex_ecto/lib/types/date.ex	/^  def type, do: :date$/;"	f
type	deps/timex_ecto/lib/types/datetime.ex	/^  def type, do: :datetime$/;"	f
type	deps/timex_ecto/lib/types/datetimetz.ex	/^  def type, do: :datetimetz$/;"	f
type	deps/timex_ecto/lib/types/time.ex	/^  def type, do: :time$/;"	f
type!	deps/ecto/lib/ecto/changeset.ex	/^  defp type!(types, key) do$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(_kind, _lookup, _query, _expr, nil, _field), do: :any$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(kind, lookup, query, expr, ix, field) when is_integer(ix) do$/;"	f
type!	deps/ecto/lib/ecto/query/planner.ex	/^  defp type!(kind, lookup, query, expr, schema, field) when is_atom(schema) do$/;"	f
type_fetch_error	deps/postgrex/lib/postgrex/protocol.ex	/^  defp type_fetch_error() do$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(:pull, type), do: {:out, type}$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(:push, type), do: {:out, type}$/;"	f
type_for_key	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp type_for_key(_, type),     do: type$/;"	f
type_msg	deps/postgrex/lib/postgrex/utils.ex	/^  def type_msg(%Postgrex.TypeInfo{type: json}, module)$/;"	f
type_msg	deps/postgrex/lib/postgrex/utils.ex	/^  def type_msg(%Postgrex.TypeInfo{type: type}, module) do$/;"	f
type_to_default	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp type_to_default(key, t, :create) do$/;"	f
type_to_default	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp type_to_default(key, t, :update) do$/;"	f
type_to_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp type_to_expr(type) do$/;"	f
type_to_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp type_to_expr({composite, type}) when is_atom(composite) do$/;"	f
type_to_expr	deps/ecto/lib/ecto/query/inspect.ex	/^  defp type_to_expr({part, type}) when is_integer(part) do$/;"	f
type_to_module	deps/ecto/lib/ecto/schema.ex	/^  defp type_to_module(:naive_datetime), do: NaiveDateTime$/;"	f
type_to_module	deps/ecto/lib/ecto/schema.ex	/^  defp type_to_module(:utc_datetime), do: DateTime$/;"	f
type_to_module	deps/ecto/lib/ecto/schema.ex	/^  defp type_to_module(other), do: other$/;"	f
typed aggregations	deps/ecto/integration_test/cases/type.exs	/^  test "typed aggregations" do$/;"	t
typed map	deps/ecto/integration_test/cases/type.exs	/^  test "typed map" do$/;"	t
types	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp types(attrs) do$/;"	f
types	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp types(attrs) do$/;"	f
tz_day_to_int	deps/tzdata/lib/tzdata/util.ex	/^  def tz_day_to_int(year, month, day) do$/;"	f
tzdata_to_timezone	deps/timex/lib/timezone/timezone.ex	/^  def tzdata_to_timezone(%{from: %{wall: from}, std_off: std_off_secs, until: %{wall: until}, utc_off: utc_off_secs, zone_abbr: abbr} = _tzdata, zone) do$/;"	f
tzdata_version	deps/tzdata/lib/tzdata.ex	/^  def tzdata_version, do: Tzdata.ReleaseReader.release_version$/;"	f
unauthorized_ip_address	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def unauthorized_ip_address, do: dgettext(@domain, "Unauthorized IP Address")$/;"	f
unauthorized_ip_address	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def unauthorized_ip_address, do: dgettext(@domain, "Unauthorized IP Address")$/;"	f
unauthorized_ip_address	deps/coherence/test/support/messages.exs	/^  def unauthorized_ip_address, do: dgettext(@domain, "Unauthorized IP Address")$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(%Ecto.Query{} = query) do$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(%Ecto.SubQuery{query: query}) do$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(from = {source, schema}) do$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from(nil),           do: "query"$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from({nil, schema}),  do: inspect schema$/;"	f
unbound_from	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unbound_from({source, nil}), do: inspect source$/;"	f
unboxed_run	deps/ecto/lib/ecto/adapters/sql/sandbox.ex	/^  def unboxed_run(repo, fun) do$/;"	f
uncomment_expiry_line	deps/tzdata/lib/tzdata/leap_sec_parser.ex	/^  defp uncomment_expiry_line(line) do$/;"	f
uncompressed_digested_file?	deps/phoenix/lib/phoenix/digester.ex	/^  defp uncompressed_digested_file?(file_path) do$/;"	f
unconfirmed_access?	deps/coherence/web/services/confirmable_service.ex	/^  def unconfirmed_access?(user) do$/;"	f
underload_meters	deps/db_connection/lib/db_connection/sojourn/regulator.ex	/^  defp underload_meters(opts) do$/;"	f
underscore	deps/phoenix/lib/phoenix/naming.ex	/^  def underscore(value), do: Macro.underscore(value)$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query(other) do$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query({:%, _, [Query, {:%{}, _, list}]}) do$/;"	f
unescape_query	deps/ecto/lib/ecto/query/builder.ex	/^  defp unescape_query({:%{}, _, list} = ast) do$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract([], [], _fun),                   do: []$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract([h1|structs], [[_|t1]|t2], fun), do: [fun.([h1|t1])|unextract(structs, t2, fun)]$/;"	f
unextract	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unextract(structs, [[nil|_] = h2|t2], fun),  do: [fun.(h2)|unextract(structs, t2, fun)]$/;"	f
unhandled_handle_info	deps/phoenix/lib/phoenix/channel/server.ex	/^  def unhandled_handle_info(msg, state) do$/;"	f
unique constraint	deps/ecto/integration_test/cases/repo.exs	/^  test "unique constraint" do$/;"	t
unique constraint from association	deps/ecto/integration_test/cases/repo.exs	/^  test "unique constraint from association" do$/;"	t
unique constraint violation error message with join table and separate changesets	deps/ecto/integration_test/cases/repo.exs	/^  test "unique constraint violation error message with join table and separate changesets" do$/;"	t
unique constraint violation error message with join table in single changeset	deps/ecto/integration_test/cases/repo.exs	/^  test "unique constraint violation error message with join table in single changeset" do$/;"	t
unique constraint with binary_id	deps/ecto/integration_test/cases/repo.exs	/^  test "unique constraint with binary_id" do$/;"	t
unique pseudo	deps/ecto/integration_test/cases/repo.exs	/^  test "unique pseudo-constraint violation error message with join table at the repository" do$/;"	t
unique_constraint	deps/ecto/lib/ecto/changeset.ex	/^  def unique_constraint(changeset, field, opts \\\\ []) do$/;"	f
unique_index	deps/ecto/lib/ecto/migration.ex	/^  def unique_index(table, columns, opts \\\\ [])$/;"	f
unique_index	deps/ecto/lib/ecto/migration.ex	/^  def unique_index(table, columns, opts) when is_list(opts) do$/;"	f
unique_vsn	deps/phoenix_pubsub/lib/phoenix/tracker/replica.ex	/^  defp unique_vsn do$/;"	f
uniques	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def uniques(attrs) do$/;"	f
unix	deps/timex/lib/parse/datetime/parsers.ex	/^  def unix(opts \\\\ []) do$/;"	f
unlisten	deps/postgrex/lib/postgrex/notifications.ex	/^  def unlisten(pid, ref, opts \\\\ []) do$/;"	f
unlisten!	deps/postgrex/lib/postgrex/notifications.ex	/^  def unlisten!(pid, ref, opts \\\\ []) do$/;"	f
unlock	deps/coherence/lib/coherence/schema.ex	/^        def unlock(user) do$/;"	f
unlock	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  def unlock(user, url) do$/;"	f
unlock	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  def unlock(user, url) do$/;"	f
unlock	deps/coherence/test/controllers/session_controller_test.exs	/^    test "unlock", %{conn: conn, user: user} do$/;"	t
unlock	deps/coherence/test/services/trackable_service_test.exs	/^    test "unlock", %{conn: conn, user: user} do$/;"	t
unlock	deps/coherence/test/support/email.exs	/^  def unlock(user, url) do$/;"	f
unlock token	deps/coherence/test/controllers/unlock_controller_test.exs	/^    test "unlock token", %{conn: conn, user: user} do$/;"	t
unlock!	deps/coherence/lib/coherence/schema.ex	/^        def unlock!(user) do$/;"	f
unlock!	deps/coherence/test/controllers/controller_helpers_test.exs	/^  test "unlock!" do$/;"	t
unlock!	deps/coherence/web/controllers/controller_helpers.ex	/^  def unlock!(user) do$/;"	f
unlock_create	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_create(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_create_invalid	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_create_invalid(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_create_not_locked	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_create_not_locked(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_edit	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_edit(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_edit_invalid	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_edit_invalid(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_edit_not_locked	deps/coherence/lib/coherence/redirects.ex	/^      def unlock_edit_not_locked(conn, _), do: redirect(conn, to: logged_out_url(conn))$/;"	f
unlock_instructions_sent	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def unlock_instructions_sent, do: dgettext(@domain, "Unlock Instructions sent.")$/;"	f
unlock_instructions_sent	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def unlock_instructions_sent, do: dgettext(@domain, "Unlock Instructions sent.")$/;"	f
unlock_instructions_sent	deps/coherence/test/support/messages.exs	/^  def unlock_instructions_sent, do: dgettext(@domain, "Unlock Instructions sent.")$/;"	f
unlock_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(_conn, _user_schema, false), do: []$/;"	f
unlock_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(conn, _user_schema, text) do$/;"	f
unlock_link	deps/coherence/priv/templates/coh.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(conn, text \\\\ @unlock_link), do:$/;"	f
unlock_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(_conn, _user_schema, false), do: []$/;"	f
unlock_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(conn, _user_schema, text) do$/;"	f
unlock_link	deps/coherence/priv/templates/coherence.install/views/coherence/coherence_view_helpers.ex	/^  def unlock_link(conn, text \\\\ @unlock_link), do:$/;"	f
unlock_link	deps/coherence/test/support/view_helpers.exs	/^  def unlock_link(_conn, _user_schema, false), do: []$/;"	f
unlock_link	deps/coherence/test/support/view_helpers.exs	/^  def unlock_link(conn, _user_schema, text) do$/;"	f
unlock_link	deps/coherence/test/support/view_helpers.exs	/^  def unlock_link(conn, text \\\\ @unlock_link), do:$/;"	f
unlock_link	deps/coherence/test/support/views.exs	/^  defp unlock_link(conn, _user_schema) do$/;"	f
unlock_link	deps/coherence/test/view_helpers_test.exs	/^  test "unlock_link", %{conn: conn} do$/;"	t
unlock_token	deps/coherence/test/services/trackable_service_test.exs	/^    test "unlock_token", %{conn: conn, user: user} do$/;"	t
unlock_token	deps/coherence/web/services/lockable_service.ex	/^  def unlock_token(user) do$/;"	f
unlockable_with_token?	deps/coherence/lib/coherence/schema.ex	/^      def unlockable_with_token? do$/;"	f
unmasked_csrf_token	deps/plug/lib/plug/csrf_protection.ex	/^  defp unmasked_csrf_token do$/;"	f
unmerge_fragments	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unmerge_fragments([{:raw, s}, {:expr, v}|t], frag, args, names, part) do$/;"	f
unmerge_fragments	deps/ecto/lib/ecto/query/inspect.ex	/^  defp unmerge_fragments([{:raw, s}], frag, args, _names, _part) do$/;"	f
unmonitor	deps/con_cache/lib/con_cache/lock.ex	/^  defp unmonitor(%__MODULE__{monitors: monitors} = state, caller_pid) do$/;"	f
unnamed	deps/postgrex/lib/postgrex/protocol.ex	/^  defp unnamed(%Query{name: ""} = query), do: query$/;"	f
unnamed	deps/postgrex/lib/postgrex/protocol.ex	/^  defp unnamed(query), do: %Query{query | name: ""}$/;"	f
unnamed_query_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp unnamed_query_delete(_, _), do: :ok$/;"	f
unnamed_query_delete	deps/postgrex/lib/postgrex/protocol.ex	/^  defp unnamed_query_delete(s, %Query{name: ""} = query) do$/;"	f
unpack	deps/boltex/lib/boltex/bolt.ex	/^  def unpack(<< 0x0B :: 4, packages :: 4, status, message :: binary >>) do$/;"	f
unpublished_by_title	deps/ecto/lib/ecto/query/api.ex	/^      def unpublished_by_title(title) do$/;"	f
unquote	deps/coherence/lib/coherence/config.ex	/^          def unquote(key)(opts \\\\ nil) do$/;"	f
unquote	deps/coherence/lib/coherence/config.ex	/^          def unquote(key)(opts \\\\ unquote(default)) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      def unquote(name)(parser \\\\ nil, unquote_splicing(other_args))$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      defp unquote(call) do$/;"	f
unquote	deps/combine/lib/combine/helpers.ex	/^      defp unquote(impl_name)(%Combine.ParserState{status: :error} = state, unquote_splicing(other_args)), do: state$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^            def unquote(fun)(unquote_splicing(interface_matches)) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^            def unquote(fun)(unquote_splicing(interface_matches)) when unquote(guard) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^            defp unquote(fun)(unquote_splicing(interface_matches)) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^            defp unquote(fun)(unquote_splicing(interface_matches)) when unquote(guard) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^          def unquote(req_name)(unquote_splicing(interface_args)) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^          def unquote(req_name)(unquote_splicing(interface_args))$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^          defp unquote(req_name)(unquote_splicing(interface_args)) do$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^          defp unquote(req_name)(unquote_splicing(interface_args))$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^        def unquote(handler_name)(unquote_splicing(handler_args))$/;"	f
unquote	deps/exactor/lib/exactor/operations.ex	/^        def unquote(handler_name)(unquote_splicing(handler_args)),$/;"	f
unquote	deps/phoenix/lib/phoenix/router.ex	/^        def unquote(plug)(unquote(conn), _) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router.ex	/^    defmacro unquote(verb)(path, plug, plug_opts, options \\\\ []) do$/;"	a
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^          def unquote(:"#{helper}_path")(conn_or_endpoint, action, unquote_splicing(binding)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^          def unquote(:"#{helper}_path")(conn_or_endpoint, action, unquote_splicing(binding), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^          def unquote(:"#{helper}_url")(conn_or_endpoint, action, unquote_splicing(binding)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^          def unquote(:"#{helper}_url")(conn_or_endpoint, action, unquote_splicing(binding), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_path")(conn_or_endpoint, unquote(opts), unquote_splicing(vars)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_path")(conn_or_endpoint, unquote(opts), unquote_splicing(vars), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_url")(conn_or_endpoint, unquote(opts), unquote_splicing(vars)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def unquote(:"#{helper}_url")(conn_or_endpoint, unquote(opts), unquote_splicing(vars), params) do$/;"	f
unquote	deps/phoenix/lib/phoenix/template.ex	/^      defp unquote(defp)(var!(assigns)) do$/;"	f
unquote	deps/phoenix/lib/phoenix/test/conn_test.ex	/^    defmacro unquote(method)(conn, path_or_action, params_or_body \\\\ nil) do$/;"	a
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<-1::int32, rest::binary>>, acc) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<-1::int32, rest::binary>>,$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<-1::int32, unquote(rest)::binary>>,$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<>>, _sub_oid, _sub_types, acc) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<>>, acc) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<unquote(pattern), rest::binary>>, acc) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<unquote(pattern), rest::binary>>, acc)$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<unquote(pattern), rest::binary>>,$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(<<unquote(pattern), unquote(rest)::binary>>,$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(@null), do: <<-1::int32>>$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(@null, _sub_oids, _sub_types), do: <<-1::int32>>$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(unquote(pattern)) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(unquote(pattern)) when unquote(guard) do$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(unquote(pattern), unquote(sub_oids),$/;"	f
unquote	deps/postgrex/lib/postgrex/type_module.ex	/^      defp unquote(extension)(unquote(pattern),$/;"	f
unquote	deps/timex/lib/timex/macros.ex	/^      def unquote(head) do$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token("\\r\\n" <> t, acc),$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<>>, acc),$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, _ :: binary>>, _acc) when h in @specials or h < 32 or h === 127,$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, t :: binary>>, acc) when h in @space,$/;"	f
unquoted_token	deps/plug/lib/plug/conn/utils.ex	/^  defp unquoted_token(<<h, t :: binary>>, acc),$/;"	f
unregister	deps/connection/lib/connection.ex	/^  defp unregister(name) when name === self(), do: :ok$/;"	f
unregister	deps/connection/lib/connection.ex	/^  defp unregister({:global, name}), do: :global.unregister_name(name)$/;"	f
unregister	deps/connection/lib/connection.ex	/^  defp unregister({:local, name}), do: Process.unregister(name)$/;"	f
unregister	deps/connection/lib/connection.ex	/^  defp unregister({:via, mod, name}), do: apply(mod, :unregister_name, [name])$/;"	f
unsafe_validate_unique	deps/ecto/integration_test/cases/repo.exs	/^  test "unsafe_validate_unique\/3" do$/;"	t
unsafe_validate_unique	deps/ecto/lib/ecto/changeset.ex	/^  def unsafe_validate_unique(changeset, fields, repo, opts \\\\ []) do$/;"	f
unshare	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp unshare(%{mode_ref: ref} = state, ref) do$/;"	f
unshare	deps/db_connection/lib/db_connection/ownership/manager.ex	/^  defp unshare(state, _ref) do$/;"	f
unsubscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def unsubscribe(pid, topic) do$/;"	f
unsubscribe	deps/phoenix/lib/phoenix/endpoint.ex	/^      def unsubscribe(topic) do$/;"	f
unsubscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def unsubscribe(server, pid, topic) when is_atom(server) do$/;"	f
unsubscribe	deps/phoenix_pubsub/lib/phoenix/pubsub.ex	/^  def unsubscribe(server, topic) when is_atom(server) do$/;"	f
unsubscribe	deps/phoenix_pubsub/lib/phoenix/pubsub/local.ex	/^  def unsubscribe(pubsub_server, pool_size, pid, topic) when is_atom(pubsub_server) do$/;"	f
unsuffix	deps/phoenix/lib/phoenix/naming.ex	/^  def unsuffix(value, suffix) do$/;"	f
untrack	deps/phoenix/lib/phoenix/presence.ex	/^      def untrack(%Phoenix.Socket{} = socket, key) do$/;"	f
untrack	deps/phoenix/lib/phoenix/presence.ex	/^      def untrack(pid, topic, key) do$/;"	f
untrack	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def untrack(server_name, pid) when is_pid(pid) do$/;"	f
untrack	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def untrack(server_name, pid, topic, key) when is_pid(pid) do$/;"	f
untyped map	deps/ecto/integration_test/cases/type.exs	/^  test "untyped map" do$/;"	t
unzip_ids	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unzip_ids([], acc1, acc2), do: {acc1, acc2}$/;"	f
unzip_ids	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp unzip_ids([{k, v}|t], acc1, acc2), do: unzip_ids(t, [k|acc1], [v|acc2])$/;"	f
unzip_inserts	deps/ecto/lib/ecto/adapters/sql.ex	/^  def unzip_inserts(header, rows) do$/;"	f
up	deps/ecto/integration_test/cases/migrator.exs	/^      def up do$/;"	f
up	deps/ecto/integration_test/cases/migrator.exs	/^    def up do$/;"	f
up	deps/ecto/integration_test/sql/alter.exs	/^    def up do$/;"	f
up	deps/ecto/integration_test/sql/migration.exs	/^    def up do$/;"	f
up	deps/ecto/lib/ecto/migration.ex	/^        def up do$/;"	f
up	deps/ecto/lib/ecto/migration.ex	/^      def up do$/;"	f
up	deps/ecto/lib/ecto/migration/schema_migration.ex	/^  def up(repo, version, prefix) do$/;"	f
up	deps/ecto/lib/ecto/migrator.ex	/^        def up do$/;"	f
up	deps/ecto/lib/ecto/migrator.ex	/^  def up(repo, version, module, opts \\\\ []) do$/;"	f
up	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  defp up(state, remote_replica) do$/;"	f
update	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def update(changeset) do$/;"	f
update	apps/flexcility_web/lib/flexcility_web/controllers/site_controller.ex	/^  def update(conn, %{"id" => id, "site" => site_params}) do$/;"	f
update	apps/flexcility_web/lib/flexcility_web/controllers/user_controller.ex	/^  def update(conn, %{"id" => id, "user" => user_params}) do$/;"	f
update	deps/coherence/priv/templates/coh.install/controllers/coherence/password_controller.ex	/^  def update(conn, %{"password" => password_params} = params) do$/;"	f
update	deps/coherence/priv/templates/coh.install/controllers/coherence/registration_controller.ex	/^  def update(conn, %{"registration" => user_params} = params) do$/;"	f
update	deps/coherence/priv/templates/coherence.install/controllers/coherence/password_controller.ex	/^  def update(conn, %{"password" => password_params} = params) do$/;"	f
update	deps/coherence/priv/templates/coherence.install/controllers/coherence/registration_controller.ex	/^  def update(conn, %{"registration" => user_params} = params) do$/;"	f
update	deps/coherence/web/controllers/password_controller.ex	/^  def update(conn, %{"password" => password_params} = params) do$/;"	f
update	deps/coherence/web/controllers/registration_controller.ex	/^  def update(conn, %{"registration" => user_params} = params) do$/;"	f
update	deps/con_cache/lib/con_cache.ex	/^  def update(cache_id, key, update_fun),$/;"	f
update	deps/con_cache/lib/con_cache/operations.ex	/^  def update(cache, key, fun) do$/;"	f
update	deps/ecto/integration_test/cases/migrator.exs	/^      defp update(fun) do$/;"	f
update	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update(prefix, table, fields, filters, _returning) do$/;"	f
update	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def update(prefix, table, fields, filters, returning) do$/;"	f
update	deps/ecto/lib/ecto/adapters/sql.ex	/^      def update(repo, %{source: {prefix, source}}, fields, params, returning, opts) do$/;"	f
update	deps/ecto/lib/ecto/multi.ex	/^  def update(multi, name, %Changeset{} = changeset, opts \\\\ []) do$/;"	f
update	deps/ecto/lib/ecto/query.ex	/^  defmacro update(query, binding \\\\ [], expr) do$/;"	a
update	deps/ecto/lib/ecto/repo.ex	/^      def update(struct, opts \\\\ []) do$/;"	f
update	deps/ecto/lib/ecto/repo/schema.ex	/^  def update(repo, _adapter, %{__struct__: _}, opts) when is_list(opts) do$/;"	f
update	deps/ecto/lib/ecto/repo/schema.ex	/^  def update(repo, adapter, %Changeset{} = changeset, opts) when is_list(opts) do$/;"	f
update	deps/phoenix/lib/phoenix/config.ex	/^  defp update(module, config) do$/;"	f
update	deps/phoenix/lib/phoenix/presence.ex	/^      def update(%Phoenix.Socket{} = socket, key, meta) do$/;"	f
update	deps/phoenix/lib/phoenix/presence.ex	/^      def update(pid, topic, key, meta) do$/;"	f
update	deps/phoenix/priv/templates/phoenix.gen.html/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update	deps/phoenix/priv/templates/phoenix.gen.json/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect singular %> => <%= singular %>_params}) do$/;"	f
update	deps/phoenix/priv/templates/phx.gen.html/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect schema.singular %> => <%= schema.singular %>_params}) do$/;"	f
update	deps/phoenix/priv/templates/phx.gen.json/controller.ex	/^  def update(conn, %{"id" => id, <%= inspect schema.singular %> => <%= schema.singular %>_params}) do$/;"	f
update	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def update(server_name, pid, topic, key, meta) when is_pid(pid) and (is_map(meta) or is_function(meta)) do$/;"	f
update	deps/postgrex/lib/postgrex/type_server.ex	/^  def update(server, ref, type_infos) do$/;"	f
update all	deps/ecto/integration_test/cases/repo.exs	/^  test "update all" do$/;"	t
update all increment syntax	deps/ecto/integration_test/cases/repo.exs	/^  test "update all increment syntax" do$/;"	t
update all no entries	deps/ecto/integration_test/cases/repo.exs	/^  test "update all no entries" do$/;"	t
update all with casting and dumping	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with casting and dumping" do$/;"	t
update all with casting and dumping on id type field	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with casting and dumping on id type field" do$/;"	t
update all with filter	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with filter" do$/;"	t
update all with invalid prefix	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with invalid prefix" do$/;"	t
update all with joins	deps/ecto/integration_test/cases/joins.exs	/^  test "update all with joins" do$/;"	t
update all with returning with schema	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with returning with schema" do$/;"	t
update all with returning without schema	deps/ecto/integration_test/cases/repo.exs	/^  test "update all with returning without schema" do$/;"	t
update!	deps/ecto/lib/ecto/query/builder/update.ex	/^  def update!(_query, runtime, _file, _line) do$/;"	f
update!	deps/ecto/lib/ecto/query/builder/update.ex	/^  def update!(query, runtime, file, line) when is_list(runtime) do$/;"	f
update!	deps/ecto/lib/ecto/repo.ex	/^      def update!(struct, opts \\\\ []) do$/;"	f
update!	deps/ecto/lib/ecto/repo/schema.ex	/^  def update!(repo, adapter, struct_or_changeset, opts) do$/;"	f
update_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "update_<%= schema.singular %>\/2 with invalid data returns error changeset" do$/;"	t
update_	deps/phoenix/priv/templates/phx.gen.context/context_test.exs	/^  test "update_<%= schema.singular %>\/2 with valid data updates the <%= schema.singular %>" do$/;"	t
update_	deps/phoenix/priv/templates/phx.gen.context/schema_access.ex	/^  def update_<%= schema.singular %>(%<%= inspect schema.alias %>{} = <%= schema.singular %>, attrs) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update_all(%{from: from, select: nil} = query, prefix) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update_all(_query, _prefix) do$/;"	f
update_all	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    def update_all(query, prefix \\\\ nil)$/;"	f
update_all	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    def update_all(%{from: from} = query, prefix \\\\ nil) do$/;"	f
update_all	deps/ecto/lib/ecto/multi.ex	/^  def update_all(multi, name, queryable, updates, opts \\\\ []) when is_list(opts) do$/;"	f
update_all	deps/ecto/lib/ecto/repo.ex	/^      def update_all(queryable, updates, opts \\\\ []) do$/;"	f
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def update_all(repo, adapter, queryable, [], opts) when is_list(opts) do$/;"	f
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  def update_all(repo, adapter, queryable, updates, opts) when is_list(opts) do$/;"	f
update_all	deps/ecto/lib/ecto/repo/queryable.ex	/^  defp update_all(repo, adapter, queryable, opts) do$/;"	f
update_attribute	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_attribute(module, attr, fun) do$/;"	f
update_change	deps/ecto/lib/ecto/changeset.ex	/^  def update_change(%Changeset{changes: changes} = changeset, key, function) when is_atom(key) do$/;"	f
update_changeset	deps/ecto/lib/ecto.ex	/^      def update_changeset(user, params) do$/;"	f
update_context	deps/decimal/lib/decimal.ex	/^  def update_context(fun) when is_function(fun, 1) do$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{cookies: %Unfetched{}} = conn, _fun),$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{cookies: cookies} = conn, fun),$/;"	f
update_cookies	deps/plug/lib/plug/conn.ex	/^  defp update_cookies(%Conn{state: :sent}, _fun),$/;"	f
update_create_changeset_to_string	apps/flexcility/lib/flexcility/graph/graph.ex	/^  def update_create_changeset_to_string(changeset, node_var) do$/;"	f
update_date	deps/timex/lib/parse/datetime/parser.ex	/^  defp update_date(%AmbiguousDateTime{} = adt, token, value, tokenizer) when is_atom(token) do$/;"	f
update_date	deps/timex/lib/parse/datetime/parser.ex	/^  defp update_date(%{year: year, hour: hh} = date, token, value, tokenizer) when is_atom(token) do$/;"	f
update_existing	deps/con_cache/lib/con_cache.ex	/^  def update_existing(cache_id, key, update_fun),$/;"	f
update_existing	deps/con_cache/lib/con_cache/operations.ex	/^  def update_existing(cache, key, fun) do$/;"	f
update_fields	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_fields(type, %Query{updates: updates} = query, sources) do$/;"	f
update_fields	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_fields(%Query{updates: updates} = query, sources) do$/;"	f
update_key	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_key(:on_conflict, key, _query, _sources) do$/;"	f
update_key	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_key(:update, key, %Query{from: from} = query, sources) do$/;"	f
update_login	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  def update_login(email, password, user_data, opts  \\\\ []) do$/;"	f
update_login	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  def update_login(conn, user_data, opts  \\\\ []) do$/;"	f
update_login	deps/coherence/test/models/rememberable_test.exs	/^  test "update_login", %{user: user} do$/;"	t
update_login	deps/coherence/web/models/rememberable.ex	/^  def update_login(rememberable) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([{:context, context}|t], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([{:prefix, prefix}|t], %{source: {_, source}} = meta) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([{:source, source}|t], %{source: {prefix, _}} = meta) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([{:state, state}|t], meta) do$/;"	f
update_meta	deps/ecto/lib/ecto.ex	/^  defp update_meta([{k, _}], _meta) do$/;"	f
update_meters	deps/db_connection/lib/db_connection/sojourn/broker.ex	/^  defp update_meters(opts) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(:inc, quoted_key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(:set, quoted_key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp update_op(command, _quoted_key, _value, _sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:inc, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:pull, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:push, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(:set, key, value, sources, query) do$/;"	f
update_op	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp update_op(command, _key, _value, _sources, query) do$/;"	f
update_parent_key	deps/ecto/lib/ecto/association.ex	/^  defp update_parent_key(changeset, :delete, _key, _value),$/;"	f
update_parent_key	deps/ecto/lib/ecto/association.ex	/^  defp update_parent_key(changeset, _action, key, value),$/;"	f
update_parent_prefix	deps/ecto/lib/ecto/association.ex	/^  def update_parent_prefix(changeset, parent) do$/;"	f
update_pipes	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_pipes(module, fun) do$/;"	f
update_req_header	deps/plug/lib/plug/conn.ex	/^  def update_req_header(%Conn{state: :sent}, _key, _initial, _fun) do$/;"	f
update_req_header	deps/plug/lib/plug/conn.ex	/^  def update_req_header(%Conn{} = conn, key, initial, fun) when$/;"	f
update_resp_header	deps/plug/lib/plug/conn.ex	/^  def update_resp_header(%Conn{state: :sent}, _key, _initial, _fun) do$/;"	f
update_resp_header	deps/plug/lib/plug/conn.ex	/^  def update_resp_header(%Conn{} = conn, key, initial, fun) when$/;"	f
update_site	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def update_site(%Site{} = site, attrs) do$/;"	f
update_site	apps/flexcility_web/test/admin_test.exs	/^  test "update_site\/2 with invalid data returns error changeset" do$/;"	t
update_site	apps/flexcility_web/test/admin_test.exs	/^  test "update_site\/2 with valid data updates the site" do$/;"	t
update_stack	deps/phoenix/lib/phoenix/router/scope.ex	/^  defp update_stack(module, fun) do$/;"	f
update_tar	deps/distillery/lib/mix/lib/releases/archiver.ex	/^  defp update_tar(release) do$/;"	f
update_user	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def update_user(user, attrs) do$/;"	f
updates and renders chosen resource when data is valid	deps/phoenix/priv/templates/phoenix.gen.json/controller_test.exs	/^  test "updates and renders chosen resource when data is valid", %{conn: conn} do$/;"	t
updates chosen	deps/phoenix/priv/templates/phx.gen.html/controller_test.exs	/^  test "updates chosen <%= schema.singular %> and redirects when data is valid", %{conn: conn} do$/;"	t
updates chosen	deps/phoenix/priv/templates/phx.gen.json/controller_test.exs	/^  test "updates chosen <%= schema.singular %> and renders <%= schema.singular %> when data is valid", %{conn: conn} do$/;"	t
updates chosen resource and redirects when data is valid	deps/phoenix/priv/templates/phoenix.gen.html/controller_test.exs	/^  test "updates chosen resource and redirects when data is valid", %{conn: conn} do$/;"	t
updates chosen site and renders site when data is valid	apps/flexcility_web/test/controllers/site_controller_test.exs	/^  test "updates chosen site and renders site when data is valid", %{conn: conn} do$/;"	t
upgrade	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def upgrade(_req, _env, __MODULE__, {:error, mfa, kind, reason, stack}) do$/;"	f
upgrade	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def upgrade(req, env, __MODULE__, {handler, opts}) do$/;"	f
upgrade	deps/plug/lib/plug/adapters/cowboy/handler.ex	/^  def upgrade(req, env, __MODULE__, {transport, plug, opts}) do$/;"	f
upper_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp upper_impl(%ParserState{status: :ok} = state) do$/;"	f
upperbound	deps/phoenix_pubsub/lib/phoenix/tracker/clock.ex	/^  def upperbound(c1, c2) do$/;"	f
uri_decode	deps/plug/lib/plug/static.ex	/^  defp uri_decode(path) do$/;"	f
url	deps/phoenix/lib/phoenix/controller.ex	/^  defp url(opts) do$/;"	f
url	deps/phoenix/lib/phoenix/endpoint.ex	/^      def url do$/;"	f
url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def url(endpoint) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^      def url(data) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %Conn{private: private}) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %Socket{endpoint: endpoint}) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, %URI{} = uri) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(_router, endpoint) when is_atom(endpoint) do$/;"	f
url	deps/phoenix/lib/phoenix/router/helpers.ex	/^  def url(router, other) do$/;"	f
url	deps/plug/lib/plug/debugger.ex	/^  defp url(%Plug.Conn{scheme: scheme, host: host, port: port} = conn), do:$/;"	f
url_input	deps/phoenix_html/lib/phoenix_html/form.ex	/^  def url_input(form, field, opts \\\\ []) do$/;"	f
use_binary_id?	deps/coherence/lib/coherence/config.ex	/^  def use_binary_id? do$/;"	f
usec	deps/ecto/lib/ecto/date_time.ex	/^  def usec("." <> rest) do$/;"	f
usec	deps/ecto/lib/ecto/date_time.ex	/^  def usec(_), do: nil$/;"	f
usec	deps/ecto/lib/ecto/date_time.ex	/^  def usec(rest) when is_iso_8601(rest), do: 0$/;"	f
user_account_confirmed_successfully	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def user_account_confirmed_successfully, do: dgettext(@domain, "User account confirmed successfully.")$/;"	f
user_account_confirmed_successfully	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def user_account_confirmed_successfully, do: dgettext(@domain, "User account confirmed successfully.")$/;"	f
user_account_confirmed_successfully	deps/coherence/test/support/messages.exs	/^  def user_account_confirmed_successfully, do: dgettext(@domain, "User account confirmed successfully.")$/;"	f
user_already_has_an_account	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def user_already_has_an_account, do: dgettext(@domain, "User already has an account!")$/;"	f
user_already_has_an_account	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def user_already_has_an_account, do: dgettext(@domain, "User already has an account!")$/;"	f
user_already_has_an_account	deps/coherence/test/support/messages.exs	/^  def user_already_has_an_account, do: dgettext(@domain, "User already has an account!")$/;"	f
user_changeset	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def user_changeset(user, attrs) do$/;"	f
user_changeset	apps/flexcility/lib/flexcility/admin/admin.ex	/^  def user_changeset(user, attrs) do$/;"	f
user_email	deps/coherence/priv/templates/coh.install/emails/coherence/user_email.ex	/^  defp user_email(user) do$/;"	f
user_email	deps/coherence/priv/templates/coherence.install/emails/coherence/user_email.ex	/^  defp user_email(user) do$/;"	f
user_email	deps/coherence/test/support/email.exs	/^  defp user_email(user) do$/;"	f
user_token	deps/coherence/lib/coherence.ex	/^  def user_token(conn), do: conn.assigns[Config.token_assigns_key]$/;"	f
user_update_changeset	apps/flexcility/lib/flexcility/accounts/accounts.ex	/^  def user_update_changeset(user, attrs) do$/;"	f
uses login token with lost session store	deps/coherence/test/plugs/authentication/session_test.exs	/^    test "uses login token with lost session store", meta do$/;"	t
uses session over remember me	deps/coherence/test/plugs/authentication/session_test.exs	/^    test "uses session over remember me", meta do$/;"	t
using_join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp using_join(%Query{joins: []}, _kind, _prefix, _sources), do: {[], []}$/;"	f
using_join	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp using_join(%Query{joins: joins} = query, kind, prefix, sources) do$/;"	f
utc	deps/ecto/lib/ecto/date_time.ex	/^  def utc do$/;"	f
utc	deps/ecto/lib/ecto/date_time.ex	/^  def utc(:sec) do$/;"	f
utc	deps/ecto/lib/ecto/date_time.ex	/^  def utc(:usec) do$/;"	f
utc	deps/ecto/lib/ecto/date_time.ex	/^  def utc(precision \\\\ :sec) do$/;"	f
utc	deps/ecto/lib/ecto/date_time.ex	/^  def utc(precision \\\\ :sec)$/;"	f
utc_to_secs	deps/timex/lib/datetime/datetime.ex	/^  defp utc_to_secs(%DateTime{:year => y, :month => m, :day => d, :hour => h, :minute => mm, :second => s}) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(<<clock_seq::14>>, <<node::48>>, format) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(_, _, _) do$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(clock_seq, node, format \\\\ :default)$/;"	f
uuid1	deps/uuid/lib/uuid.ex	/^  def uuid1(format \\\\ :default) do$/;"	f
uuid1_clockseq	deps/uuid/lib/uuid.ex	/^  defp uuid1_clockseq() do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node() do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node([{_if_name, if_config} | rest]) do$/;"	f
uuid1_node	deps/uuid/lib/uuid.ex	/^  defp uuid1_node(_) do$/;"	f
uuid1_time	deps/uuid/lib/uuid.ex	/^  defp uuid1_time() do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:dns, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:nil, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:oid, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:url, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(:x500, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(<<uuid::binary>>, <<name::binary>>, format) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(_, _, _) do$/;"	f
uuid3	deps/uuid/lib/uuid.ex	/^  def uuid3(namespace_or_uuid, name, format \\\\ :default)$/;"	f
uuid4	deps/uuid/lib/uuid.ex	/^  def uuid4(), do: uuid4(:default)$/;"	f
uuid4	deps/uuid/lib/uuid.ex	/^  def uuid4(:strong), do: uuid4(:default) # For backwards compatibility.$/;"	f
uuid4	deps/uuid/lib/uuid.ex	/^  def uuid4(:weak),   do: uuid4(:default) # For backwards compatibility.$/;"	f
uuid4	deps/uuid/lib/uuid.ex	/^  def uuid4(format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:dns, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:nil, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:oid, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:url, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(:x500, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(<<uuid::binary>>, <<name::binary>>, format) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(_, _, _) do$/;"	f
uuid5	deps/uuid/lib/uuid.ex	/^  def uuid5(namespace_or_uuid, name, format \\\\ :default)$/;"	f
uuid_string_to_hex_pair	deps/uuid/lib/uuid.ex	/^  defp uuid_string_to_hex_pair(<<uuid::binary>>) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u0::32, u1::16, u2::16, u3::16, u4::48>>, :default) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u::128>>, :hex) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(<<u::128>>, :urn) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(_u, format) do$/;"	f
uuid_to_string	deps/uuid/lib/uuid.ex	/^  defp uuid_to_string(_u, format) when format in [:default, :hex, :urn] do$/;"	f
valid email	deps/coherence/test/schema_test.exs	/^  test "valid email" do$/;"	t
valid token	deps/coherence/test/controllers/password_controller_test.exs	/^    test "valid token", %{conn: conn} do$/;"	t
valid token has expired	deps/coherence/test/controllers/password_controller_test.exs	/^    test "valid token has expired", %{conn: conn} do$/;"	t
valid token has expired	deps/coherence/test/controllers/password_controller_test.exs	/^    test "valid token has expired, reset token gets removed", %{conn: conn} do$/;"	t
valid token hasn	deps/coherence/test/controllers/password_controller_test.exs	/^    test "valid token hasn't expired", %{conn: conn} do$/;"	t
valid?	deps/mime/lib/mime.ex	/^  def valid?(type) do$/;"	f
valid?	deps/phoenix/lib/mix/phoenix/context.ex	/^  def valid?(context) do$/;"	f
valid?	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def valid?(schema) do$/;"	f
valid?	deps/plug/lib/plug/mime.ex	/^  def valid?(type) do$/;"	f
valid_csrf_token?	deps/plug/lib/plug/csrf_protection.ex	/^  defp valid_csrf_token?(<<csrf_token::@encoded_token_size-binary>>,$/;"	f
valid_csrf_token?	deps/plug/lib/plug/csrf_protection.ex	/^  defp valid_csrf_token?(_csrf_token, _user_token), do: false$/;"	f
valid_ets_type?	deps/con_cache/lib/con_cache/operations.ex	/^  defp valid_ets_type?(%ConCache{ets: ets}) do$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<>>), do: true$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<_, t::binary>>), do: valid_header_key?(t)$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(<<h, _::binary>>) when h in ?A..?Z, do: false$/;"	f
valid_header_key?	deps/plug/lib/plug/conn.ex	/^  defp valid_header_key?(_), do: false$/;"	f
valid_login_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^  def valid_login_cookie(_) do$/;"	f
valid_option?	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp valid_option?(all_options, option) do$/;"	f
valid_option?	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp valid_option?(all_options, option) do$/;"	f
valid_request_id?	deps/plug/lib/plug/request_id.ex	/^  defp valid_request_id?(s), do: byte_size(s) in 20..200$/;"	f
valid_start_type?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  def valid_start_type?(_), do: false$/;"	f
valid_start_type?	deps/distillery/lib/mix/lib/releases/models/app.ex	/^  def valid_start_type?(start_type)$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(_),                        do: {:error, :invalid_step}$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [days: _]),         do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [hours: _]),        do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [microseconds: _]), do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [milliseconds: _]), do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [minutes: _]),      do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [months: _]),       do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [seconds: _]),      do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [weeks: _]),        do: step$/;"	f
valid_step_or_error	deps/timex/lib/interval/interval.ex	/^  defp valid_step_or_error(step = [years: _]),       do: step$/;"	f
valid_subquery_value?	deps/ecto/lib/ecto/query/planner.ex	/^  defp valid_subquery_value?(_), do: true$/;"	f
valid_subquery_value?	deps/ecto/lib/ecto/query/planner.ex	/^  defp valid_subquery_value?(args) when is_list(args), do: false$/;"	f
valid_subquery_value?	deps/ecto/lib/ecto/query/planner.ex	/^  defp valid_subquery_value?({_, _}), do: false$/;"	f
valid_subquery_value?	deps/ecto/lib/ecto/query/planner.ex	/^  defp valid_subquery_value?({container, _, args})$/;"	f
valid_types	deps/phoenix/lib/mix/phoenix/schema.ex	/^  def valid_types, do: @valid_types$/;"	f
validate	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  defp validate("node", [script|_], merged_opts) do$/;"	f
validate	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  defp validate(_cmd, _args, _opts) do$/;"	f
validate	deps/timex/lib/format/datetime/formatter.ex	/^  def validate(_, _), do: {:error, :badarg}$/;"	f
validate	deps/timex/lib/format/datetime/formatter.ex	/^  def validate(format_string, formatter \\\\ Default)$/;"	f
validate	deps/timex/lib/format/datetime/formatter.ex	/^  def validate(format_string, formatter) when is_binary(format_string) and is_atom(formatter) do$/;"	f
validate!	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def validate!(%__MODULE__{:releases => []}) do$/;"	f
validate!	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def validate!(%__MODULE__{} = config) do$/;"	f
validate!	deps/distillery/lib/mix/lib/releases/config/config.ex	/^  def validate!(config) do$/;"	f
validate_acceptance	deps/ecto/lib/ecto/changeset.ex	/^  def validate_acceptance(%{params: nil} = changeset, _, _) do$/;"	f
validate_acceptance	deps/ecto/lib/ecto/changeset.ex	/^  def validate_acceptance(%{params: params} = changeset, field, opts) when is_map(params) do$/;"	f
validate_acceptance	deps/ecto/lib/ecto/changeset.ex	/^  def validate_acceptance(changeset, field, opts \\\\ [])$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(:from, query, %Ecto.SubQuery{}, _counter, kind, _adapter) when kind != :all do$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(:from, query, expr, counter, _kind, adapter) do$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(:join, query, exprs, counter, _operation, adapter) do$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(kind, query, expr, counter, _operation, adapter)$/;"	f
validate_and_increment	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_and_increment(kind, query, exprs, counter, _operation, adapter)$/;"	f
validate_and_return	deps/timex/lib/timezone/timezone_info.ex	/^  defp validate_and_return(%__MODULE__{} = tz) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.channel.ex	/^  defp validate_args!(args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.html.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.json.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp validate_args!([_, plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phx.gen.channel.ex	/^  defp validate_args!(args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  defp validate_args!([context, schema, _plural | _] = args) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  defp validate_args!(_) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def validate_args!([schema, plural | _] = args, help) do$/;"	f
validate_args!	deps/phoenix/lib/mix/tasks/phx.gen.schema.ex	/^  def validate_args!(_, help) do$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp validate_attr!({_, type}) do$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp validate_attr!({_name, type} = attr) when type in @valid_types, do: attr$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp validate_attr!({_name, {type, _}} = attr) when type in @valid_types, do: attr$/;"	f
validate_attr!	deps/phoenix/lib/mix/phoenix/schema.ex	/^  defp validate_attr!({name, :datetime}), do: validate_attr!({name, :naive_datetime})$/;"	f
validate_bind	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_bind(bind, all) do$/;"	f
validate_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp validate_cast(:error), do: :error$/;"	f
validate_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp validate_cast({:ok, %{year: y, month: m, day: d} = datetime}) do$/;"	f
validate_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp validate_cast({:ok, %{year: y, month: m, day: d} = date}) do$/;"	f
validate_cast	deps/ecto/lib/ecto/date_time.ex	/^  defp validate_cast({:ok, nil}), do: {:ok, nil}$/;"	f
validate_change	deps/ecto/lib/ecto/changeset.ex	/^  def validate_change(%Changeset{validations: validations} = changeset,$/;"	f
validate_change	deps/ecto/lib/ecto/changeset.ex	/^  def validate_change(%Changeset{} = changeset, field, validator) when is_atom(field) do$/;"	f
validate_coherence	deps/coherence/lib/coherence/schema.ex	/^        def validate_coherence(changeset, _params), do: changeset$/;"	f
validate_coherence	deps/coherence/lib/coherence/schema.ex	/^        def validate_coherence(changeset, params) do$/;"	f
validate_coherence_password_reset	deps/coherence/lib/coherence/schema.ex	/^        def validate_coherence_password_reset(changeset, params) do$/;"	f
validate_config	deps/swoosh/lib/swoosh/adapter.ex	/^      def validate_config(config) do$/;"	f
validate_configuration	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  def validate_configuration(%Release{} = release) do$/;"	f
validate_configuration	deps/distillery/lib/mix/lib/releases/models/release.ex	/^  def validate_configuration(%__MODULE__{version: _, profile: profile}) do$/;"	f
validate_confirmation	deps/ecto/lib/ecto/changeset.ex	/^  def validate_confirmation(%{params: nil} = changeset, _, _) do$/;"	f
validate_confirmation	deps/ecto/lib/ecto/changeset.ex	/^  def validate_confirmation(%{params: params} = changeset, field, opts) when is_map(params) do$/;"	f
validate_confirmation	deps/ecto/lib/ecto/changeset.ex	/^  def validate_confirmation(changeset, field, opts \\\\ [])$/;"	f
validate_current_password	deps/coherence/lib/coherence/schema.ex	/^        def validate_current_password(changeset, params) do$/;"	f
validate_down_period	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def validate_down_period(_d_period, _b_period), do: :ok$/;"	f
validate_down_period	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def validate_down_period(d_period, b_period) when d_period < (2 * b_period) do$/;"	f
validate_erts	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def validate_erts(include_erts) when is_nil(include_erts) or is_boolean(include_erts),$/;"	f
validate_erts	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def validate_erts(path) when is_binary(path) do$/;"	f
validate_exclusion	deps/ecto/lib/ecto/changeset.ex	/^  def validate_exclusion(changeset, field, data, opts \\\\ []) do$/;"	f
validate_fallback	deps/phoenix/lib/phoenix/controller/pipeline.ex	/^  def validate_fallback(plug, module, fallback) do$/;"	f
validate_format	deps/ecto/lib/ecto/changeset.ex	/^  def validate_format(changeset, field, format, opts \\\\ []) do$/;"	f
validate_format	deps/timex/lib/timex.ex	/^  defdelegate validate_format(format_string),$/;"	d
validate_format	deps/timex/lib/timex.ex	/^  defdelegate validate_format(format_string, formatter),$/;"	d
validate_header_key!	deps/plug/lib/plug/conn.ex	/^  defp validate_header_key!(_adapter, _key) do$/;"	f
validate_header_key!	deps/plug/lib/plug/conn.ex	/^  defp validate_header_key!({Plug.Adapters.Test.Conn, _}, key) do$/;"	f
validate_header_value!	deps/plug/lib/plug/conn.ex	/^  defp validate_header_value!(value) do$/;"	f
validate_in	deps/ecto/lib/ecto/query/planner.ex	/^  defp validate_in(meta, expr, param, acc) do$/;"	f
validate_inclusion	deps/ecto/lib/ecto/changeset.ex	/^  def validate_inclusion(changeset, field, data, opts \\\\ []) do$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(<<>>), do: :ok$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(<<h, t::binary>>)$/;"	f
validate_jsonp_callback!	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_jsonp_callback!(_),$/;"	f
validate_key!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp validate_key!(key) when key in @keys, do: :ok$/;"	f
validate_key!	deps/ecto/lib/ecto/query/builder/update.ex	/^  defp validate_key!(key), do: Builder.error! "unknown key `#{inspect(key)}` in update"$/;"	f
validate_length	deps/ecto/lib/ecto/changeset.ex	/^  def validate_length(changeset, field, opts) when is_list(opts) do$/;"	f
validate_list!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_list!(value, _what) when is_list(value) or is_nil(value), do: value$/;"	f
validate_list!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_list!(value, what) do$/;"	f
validate_local_url	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_local_url("\/" <> _ = to) do$/;"	f
validate_local_url	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_local_url("\/\/" <> _ = to), do: raise_invalid_url(to)$/;"	f
validate_local_url	deps/phoenix/lib/phoenix/controller.ex	/^  defp validate_local_url(to), do: raise_invalid_url(to)$/;"	f
validate_login	deps/coherence/priv/templates/coh.install/controllers/coherence/session_controller.ex	/^  def validate_login(user_id, series, token) do$/;"	f
validate_login	deps/coherence/priv/templates/coherence.install/controllers/coherence/session_controller.ex	/^  def validate_login(user_id, series, token) do$/;"	f
validate_login	deps/coherence/web/controllers/session_controller.ex	/^  def validate_login(user_id, series, token) do$/;"	f
validate_map!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_map!(value, _what) when is_map(value) or is_nil(value), do: value$/;"	f
validate_map!	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validate_map!(value, what) do$/;"	f
validate_merging_opts!	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp validate_merging_opts!(opts, gettext_config) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  def validate_number(changeset, field, opts) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  defp validate_number(field, %Decimal{} = value, message, spec_key, _spec_function, target_value) do$/;"	f
validate_number	deps/ecto/lib/ecto/changeset.ex	/^  defp validate_number(field, value, message, _spec_key, spec_function, target_value) do$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp validate_option(%{opts: opts}, opt) do$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp validate_option(%{use_email?: true}, :use_email?), do: true$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp validate_option(_, :all), do: true$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp validate_option(%{opts: opts}, opt) do$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp validate_option(%{use_email?: true}, :use_email?), do: true$/;"	f
validate_option	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp validate_option(_, :all), do: true$/;"	f
validate_options!	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp validate_options!(options, all_options) do$/;"	f
validate_options!	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp validate_options!(options, all_options) do$/;"	f
validate_password	deps/coherence/lib/coherence/schema.ex	/^        def validate_password(changeset, params) do$/;"	f
validate_path	deps/phoenix/lib/phoenix/router/scope.ex	/^  def validate_path("\/" <> _ = path), do: path$/;"	f
validate_path	deps/phoenix/lib/phoenix/router/scope.ex	/^  def validate_path(path) do$/;"	f
validate_path	deps/phoenix/lib/phoenix/router/scope.ex	/^  def validate_path(path) when is_binary(path) do$/;"	f
validate_permdown_period	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def validate_permdown_period(_p_period, _d_period), do: :ok$/;"	f
validate_permdown_period	deps/phoenix_pubsub/lib/phoenix/tracker.ex	/^  def validate_permdown_period(p_period, d_period) when p_period <= d_period do$/;"	f
validate_qual	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_qual(qual) do$/;"	f
validate_qual	deps/ecto/lib/ecto/query/builder/join.ex	/^  defp validate_qual(qual) when is_atom(qual) do$/;"	f
validate_required	deps/ecto/lib/ecto/changeset.ex	/^  def validate_required(%Changeset{} = changeset, fields, opts \\\\ []) do$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(nil), do:$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(secret_key_base) when byte_size(secret_key_base) < 64, do:$/;"	f
validate_secret_key_base	deps/plug/lib/plug/session/cookie.ex	/^  defp validate_secret_key_base(secret_key_base), do:$/;"	f
validate_subset	deps/ecto/lib/ecto/changeset.ex	/^  def validate_subset(changeset, field, data, opts \\\\ []) do$/;"	f
validate_sys_config	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp validate_sys_config(_sys_config), do: {:error, {:assembler, {:invalid_sys_config, :invalid_terms}}}$/;"	f
validate_sys_config	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp validate_sys_config(sys_config) when is_list(sys_config) do$/;"	f
validate_token	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def validate_token(conn, token) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!(%Reference{} = reference) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!(type) when is_atom(type) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!({type, subtype}) when is_atom(type) and is_atom(subtype) do$/;"	f
validate_type!	deps/ecto/lib/ecto/migration.ex	/^  defp validate_type!({type, subtype}) when is_atom(type) and is_tuple(subtype) do$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!(type, _vars) do$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!(type, _vars) when is_atom(type),$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!({:^, _, [type]}, _vars),$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!({:__aliases__, _, _} = type, _vars),$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!({:field, _, [{var, _, context}, field]}, vars)$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!({composite, type}, vars) do$/;"	f
validate_type!	deps/ecto/lib/ecto/query/builder.ex	/^  def validate_type!({{:., _, [{var, _, context}, field]}, _, []}, vars)$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<>>, _exception, _context) do$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<_ :: utf8, t :: binary>>, exception, context) do$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(<<h, _ :: binary>>, exception, context) do$/;"	f
validate_utf8!	deps/plug/lib/plug/conn/utils.ex	/^  def validate_utf8!(binary, exception, context)$/;"	f
validates correct password	deps/coherence/test/schema_test.exs	/^  test "validates correct password" do$/;"	t
validates login_cookie	deps/coherence/test/plugs/authentication/session_test.exs	/^    test "validates login_cookie", meta do$/;"	t
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs(_validation, _field, _changeset) do$/;"	f
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs({:length, opts}, _field, _changeset) do$/;"	f
validation_to_attrs	deps/phoenix_ecto/lib/phoenix_ecto/html.ex	/^    defp validation_to_attrs({:number, opts}, field, changeset) do$/;"	f
value	deps/con_cache/lib/con_cache/operations.ex	/^  defp value(%ConCache.Item{value: value}), do: value$/;"	f
value	deps/con_cache/lib/con_cache/operations.ex	/^  defp value(value), do: value$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("[" <> rest, pos, keys) do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("\\"" <> rest, pos, _keys) do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("false" <> rest, pos, _keys), do: {false, pos+5, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("null" <> rest, pos, _keys),  do: {nil, pos+4, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("true" <> rest, pos, _keys),  do: {true, pos+4, rest}$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value("{" <> rest, pos, keys) do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(<<char, _ :: binary>> = string, pos, _keys) when char in '-0123456789' do$/;"	f
value	deps/poison/lib/poison/parser.ex	/^  defp value(other, pos, _keys), do: syntax_error(other, pos)$/;"	f
value_from_headers	deps/tzdata/lib/tzdata/data_loader.ex	/^  defp value_from_headers(headers, key) do$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:text), do: :string$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(:uuid), do: Ecto.UUID$/;"	f
value_to_type	deps/phoenix/lib/mix/tasks/phoenix.gen.model.ex	/^  defp value_to_type(v) do$/;"	f
var_name?	deps/exactor/lib/exactor/operations.ex	/^  defmacrop var_name?(arg_name) do$/;"	a
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<0, _v::2-binary>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 0, _v>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 1, 1>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(<<1, 1, _v>>) do$/;"	f
variant	deps/uuid/lib/uuid.ex	/^  defp variant(_) do$/;"	f
vary	deps/cors_plug/lib/cors_plug.ex	/^  defp vary("*"), do: ""$/;"	f
vary	deps/cors_plug/lib/cors_plug.ex	/^  defp vary(_allowed_origin), do: "Origin"$/;"	f
verb_match	deps/phoenix/lib/phoenix/router/route.ex	/^  defp verb_match(:*), do: Macro.var(:_verb, nil)$/;"	f
verb_match	deps/phoenix/lib/phoenix/router/route.ex	/^  defp verb_match(verb), do: verb |> to_string() |> String.upcase()$/;"	f
verb_name	deps/phoenix/lib/phoenix/router/console_formatter.ex	/^  defp verb_name(verb), do: verb |> to_string() |> String.upcase()$/;"	f
verbose_schema_migration	deps/ecto/lib/ecto/migrator.ex	/^  defp verbose_schema_migration(repo, reason, fun) do$/;"	f
verified_request?	deps/plug/lib/plug/csrf_protection.ex	/^  defp verified_request?(conn, csrf_token) do$/;"	f
verify	deps/comeonin/lib/comeonin/base.ex	/^          def verify(attrs) do$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(_context, salt, nil, _opts) when is_binary(salt) do$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(context, salt, token, opts \\\\ [])$/;"	f
verify	deps/phoenix/lib/phoenix/token.ex	/^  def verify(context, salt, token, opts) when is_binary(salt) and is_binary(token) do$/;"	f
verify	deps/plug/lib/plug/crypto/message_verifier.ex	/^  def verify(signed, secret)$/;"	f
verify_and_decrypt	deps/plug/lib/plug/crypto/message_encryptor.ex	/^  def verify_and_decrypt(encrypted, secret, sign_secret, cipher \\\\ nil)$/;"	f
verify_args!	deps/coherence/lib/mix/mix_utils.ex	/^  def verify_args!(parsed, unknown) do$/;"	f
verify_auth_key	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp verify_auth_key({conn, auth_key}, %{db_model: db_model, id_key: id_key}, store),$/;"	f
verify_auth_key	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp verify_auth_key({conn, nil}, _, _), do: {conn, nil}$/;"	f
verify_cookie!	deps/plug/lib/plug/conn.ex	/^  defp verify_cookie!(cookie, _key) do$/;"	f
verify_cookie!	deps/plug/lib/plug/conn.ex	/^  defp verify_cookie!(cookie, key) when byte_size(cookie) > 4096 do$/;"	f
verify_creds	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp verify_creds({conn, << "Basic ", creds::binary >>}, store), do: {conn, store.get_user_data(creds)}$/;"	f
verify_creds	deps/coherence/lib/coherence/plugs/authorization/basic.ex	/^  defp verify_creds({conn, _}, _), do: {conn, nil}$/;"	f
verify_creds	deps/coherence/lib/coherence/plugs/authorization/token.ex	/^  defp verify_creds({conn, creds}, store), do: {conn, store.get_user_data(creds)}$/;"	f
verify_ip	deps/coherence/lib/coherence/plugs/authorization/ip_address.ex	/^  defp verify_ip(conn, ip, %{allow: allow, deny: deny}), do: {conn, ip, in?(ip, allow) && !in?(ip, deny)}$/;"	f
verify_opts	deps/coherence/lib/mix/tasks/coh.clean.ex	/^  defp verify_opts(opts, parsed, unknown) do$/;"	f
verify_opts	deps/coherence/lib/mix/tasks/coherence.clean.ex	/^  defp verify_opts(opts, parsed, unknown) do$/;"	f
verify_pass	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def verify_pass(_, _) do$/;"	f
verify_pass	deps/bcrypt_elixir/lib/bcrypt.ex	/^  def verify_pass(password, stored_hash) when is_binary(password) do$/;"	f
verify_pass	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  def verify_pass(password, stored_hash) do$/;"	f
verify_rememberable	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp verify_rememberable(other, _opts), do: other$/;"	f
verify_rememberable	deps/coherence/lib/coherence/plugs/authorization/session.ex	/^  defp verify_rememberable({conn, nil}, %{rememberable: true, login_key: key} = opts)  do$/;"	f
verify_token	apps/flexcility_web/lib/flexcility_web/plugs/authenticate.ex	/^  def verify_token(conn, token) do$/;"	f
verify_token	deps/phoenix/lib/phoenix/transports/long_poll.ex	/^  defp verify_token(endpoint, signed, opts) do$/;"	f
verify_user_token	deps/coherence/lib/coherence.ex	/^  def verify_user_token(socket, token, assign_fun) do$/;"	f
verify_user_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def verify_user_token(opts),$/;"	f
verify_user_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def verify_user_token(opts),$/;"	f
verify_user_token	deps/coherence/test/support/messages.exs	/^  def verify_user_token(opts),$/;"	f
verify_user_token	deps/coherence/web/services/session_service.ex	/^  def verify_user_token(socket, token) do$/;"	f
version	deps/swoosh/lib/swoosh.ex	/^  def version, do: @version$/;"	f
versions_to_clean	deps/phoenix/lib/phoenix/digester.ex	/^  defp versions_to_clean(versions, max_age, keep) do$/;"	f
via	deps/db_connection/lib/db_connection/sojourn.ex	/^  defp via(broker, opts) do$/;"	f
view	apps/flexcility_web/lib/flexcility_web.ex	/^  def view do$/;"	f
view	deps/coherence/priv/templates/coh.install/coherence_web.ex	/^  def view do$/;"	f
view	deps/coherence/priv/templates/coherence.install/coherence_web.ex	/^  def view do$/;"	f
view	deps/coherence/test/support/web.exs	/^  def view do$/;"	f
view	deps/phoenix/lib/phoenix/view.ex	/^        def view do$/;"	f
view_files	deps/coherence/lib/mix/tasks/coh.install.ex	/^  def view_files, do: @view_files$/;"	f
view_files	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  def view_files, do: @view_files$/;"	f
view_module	deps/phoenix/lib/phoenix/controller.ex	/^  def view_module(conn) do$/;"	f
view_template	deps/phoenix/lib/phoenix/controller.ex	/^  def view_template(conn) do$/;"	f
virtual field	deps/ecto/integration_test/cases/repo.exs	/^  test "virtual field" do$/;"	t
vsn	deps/distillery/lib/mix/lib/releases/appups.ex	/^  defp vsn(props) do$/;"	f
wait	deps/postgrex/lib/postgrex/type_server.ex	/^  defp wait(state, {pid, _} = from) do$/;"	f
wait	deps/retry/lib/retry.ex	/^  defmacro wait(stream_builder, clauses) do$/;"	a
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(:max, _, _), do: :max$/;"	f
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(:min, _, _), do: :min$/;"	f
wall_time_from_utc	deps/tzdata/lib/tzdata/period_builder.ex	/^  def wall_time_from_utc(utc_time, utc_offset, standard_offset) do$/;"	f
warmup	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  def warmup(endpoint) do$/;"	f
warmup_static	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp warmup_static(endpoint) do$/;"	f
warmup_url	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp warmup_url(endpoint) do$/;"	f
warn	deps/distillery/lib/mix/lib/releases/logger.ex	/^  def warn(message) do$/;"	f
warn_for_missing_pot_file	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp warn_for_missing_pot_file(po_file, pot_dir) do$/;"	f
warn_if_ajax	deps/phoenix/lib/phoenix/controller.ex	/^  defp warn_if_ajax(conn) do$/;"	f
warn_if_domain_contains_slashes	deps/gettext/lib/gettext/compiler.ex	/^  def warn_if_domain_contains_slashes(domain) do$/;"	f
warn_name	deps/phoenix_html/lib/phoenix_html/form_data.ex	/^  defp warn_name(opts) do$/;"	f
watch	deps/phoenix/lib/phoenix/endpoint/watcher.ex	/^  def watch(cmd, args, opts) do$/;"	f
watcher	deps/db_connection/lib/db_connection/ownership/pool.ex	/^  defp watcher(owner) do$/;"	f
watcher	deps/db_connection/lib/db_connection/sojourn/pool.ex	/^  defp watcher(owner) do$/;"	f
watcher_args	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp watcher_args(cmd, cmd_args) do$/;"	f
watcher_children	deps/phoenix/lib/phoenix/endpoint/supervisor.ex	/^  defp watcher_children(_mod, conf, server?) do$/;"	f
web_module	deps/phoenix/lib/mix/phoenix.ex	/^  defp web_module(base) do$/;"	f
web_module	deps/phoenix/lib/mix/phoenix/context.ex	/^  defp web_module(base) do$/;"	f
web_path	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp web_path() do$/;"	f
web_path	deps/coherence/test/mix/tasks/coh.install_test.exs	/^  def web_path(path) do$/;"	f
web_path	deps/coherence/test/mix/tasks/coherence.install_test.exs	/^  def web_path(path) do$/;"	f
web_path	deps/phoenix/lib/mix/phoenix.ex	/^  def web_path(rel_path) do$/;"	f
web_prefix	deps/phoenix/lib/mix/phoenix.ex	/^  def web_prefix do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle(_other, req, {handler, state}) do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle({opcode = :binary, payload}, req, {handler, state}) do$/;"	f
websocket_handle	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_handle({opcode = :text, payload}, req, {handler, state}) do$/;"	f
websocket_info	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_info(message, req, {handler, state}) do$/;"	f
websocket_init	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_init(_transport, req, {handler, args}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate(reason, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:error, :closed}, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:remote, :closed}, _req, {handler, state}) do$/;"	f
websocket_terminate	deps/phoenix/lib/phoenix/endpoint/cowboy_websocket.ex	/^  def websocket_terminate({:remote, code, _}, _req, {handler, state})$/;"	f
week_of_month	deps/timex/lib/date/date.ex	/^  def week_of_month(%Date{:year => y, :month => m, :day => d}), do: Timex.week_of_month(y,m,d)$/;"	f
week_of_month	deps/timex/lib/datetime/datetime.ex	/^  def week_of_month(%DateTime{:year => y, :month => m, :day => d}), do: Timex.week_of_month(y,m,d)$/;"	f
week_of_month	deps/timex/lib/datetime/erlang.ex	/^  def week_of_month(_), do: {:error, :invalid_date}$/;"	f
week_of_month	deps/timex/lib/datetime/erlang.ex	/^  def week_of_month({y,m,d}) when is_date(y,m,d), do: Timex.week_of_month(y,m,d)$/;"	f
week_of_month	deps/timex/lib/datetime/erlang.ex	/^  def week_of_month({{y,m,d},_}) when is_date(y,m,d), do: Timex.week_of_month(y,m,d)$/;"	f
week_of_month	deps/timex/lib/datetime/map.ex	/^  def week_of_month(map),             do: convert!(map, :week_of_month)$/;"	f
week_of_month	deps/timex/lib/datetime/naivedatetime.ex	/^  def week_of_month(%NaiveDateTime{:year => y, :month => m, :day => d}), do: Timex.week_of_month(y,m,d)$/;"	f
week_of_month	deps/timex/lib/protocol.ex	/^  def week_of_month(%{__struct__: _} = d), do: Timex.week_of_month(Map.from_struct(d))$/;"	f
week_of_month	deps/timex/lib/protocol.ex	/^  def week_of_month(_datetime), do: {:error, :invalid_date}$/;"	f
week_of_month	deps/timex/lib/protocol.ex	/^  def week_of_month(datetime)$/;"	f
week_of_month	deps/timex/lib/timex.ex	/^  def week_of_month(_, _, _), do: {:error, :invalid_date}$/;"	f
week_of_month	deps/timex/lib/timex.ex	/^  def week_of_month(year, month, day) when is_date(year, month, day) do$/;"	f
week_of_month	deps/timex/lib/timex.ex	/^  defdelegate week_of_month(datetime), to: Timex.Protocol$/;"	d
week_of_year	deps/timex/lib/parse/datetime/parsers.ex	/^  def week_of_year(opts \\\\ []) do$/;"	f
week_of_year_sun	deps/timex/lib/parse/datetime/parsers.ex	/^  defdelegate week_of_year_sun(opts \\\\ []), to: __MODULE__, as: :week_of_year$/;"	d
weekday	deps/timex/lib/date/date.ex	/^  def weekday(%Date{:year => y, :month => m, :day => d}), do: :calendar.day_of_the_week({y, m, d})$/;"	f
weekday	deps/timex/lib/datetime/datetime.ex	/^  def weekday(%DateTime{:year => y, :month => m, :day => d}),      do: :calendar.day_of_the_week({y, m, d})$/;"	f
weekday	deps/timex/lib/datetime/erlang.ex	/^  def weekday(_), do: {:error, :invalid_date}$/;"	f
weekday	deps/timex/lib/datetime/erlang.ex	/^  def weekday({y,m,d} = date) when is_date(y,m,d), do: :calendar.day_of_the_week(date)$/;"	f
weekday	deps/timex/lib/datetime/erlang.ex	/^  def weekday({{y,m,d} = date,_}) when is_date(y,m,d), do: :calendar.day_of_the_week(date)$/;"	f
weekday	deps/timex/lib/datetime/map.ex	/^  def weekday(map),                   do: convert!(map, :weekday)$/;"	f
weekday	deps/timex/lib/datetime/naivedatetime.ex	/^  def weekday(%NaiveDateTime{:year => y, :month => m, :day => d}), do: :calendar.day_of_the_week({y, m, d})$/;"	f
weekday	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday(_) do$/;"	f
weekday	deps/timex/lib/protocol.ex	/^  def weekday(%{__struct__: _} = d), do: Timex.weekday(Map.from_struct(d))$/;"	f
weekday	deps/timex/lib/protocol.ex	/^  def weekday(_datetime), do: {:error, :invalid_date}$/;"	f
weekday	deps/timex/lib/protocol.ex	/^  def weekday(datetime)$/;"	f
weekday	deps/timex/lib/timex.ex	/^  defdelegate weekday(datetime), to: Timex.Protocol$/;"	d
weekday_full	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday_full(_) do$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(1), do: "Mon"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(2), do: "Tue"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(3), do: "Wed"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(4), do: "Thu"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(5), do: "Fri"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(6), do: "Sat"$/;"	f
weekday_name	deps/plug/lib/plug/conn/cookies.ex	/^  defp weekday_name(7), do: "Sun"$/;"	f
weekday_short	deps/timex/lib/parse/datetime/parsers.ex	/^  def weekday_short(_) do$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("fri"), do: 5$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("mon"), do: 1$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("sat"), do: 6$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("sun"), do: 7$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("thu"), do: 4$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("tue"), do: 2$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!("wed"), do: 3$/;"	f
weekday_string_to_number!	deps/tzdata/lib/tzdata/util.ex	/^  def weekday_string_to_number!(parm), do: parm$/;"	f
welcome	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^        def welcome(user) do$/;"	f
welcome	deps/phoenix_swoosh/lib/phoenix_swoosh.ex	/^      def welcome(user) do$/;"	f
welcome	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome() do$/;"	f
welcome	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome(), do: email() |> render_body(:welcome, %{})$/;"	f
welcome_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_assigns(), do: email() |> render_body(:welcome_assigns, %{name: "Tony"})$/;"	f
welcome_html	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html(), do: email() |> render_body("welcome.html", %{})$/;"	f
welcome_html_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html_assigns(), do: email() |> render_body("welcome_assigns.html", %{name: "Tony"})$/;"	f
welcome_html_layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html_layout() do$/;"	f
welcome_html_layout_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html_layout_assigns() do$/;"	f
welcome_html_layout_without_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html_layout_without_assigns() do$/;"	f
welcome_html_without_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_html_without_assigns(), do: email() |> render_body("welcome.html")$/;"	f
welcome_layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_layout() do$/;"	f
welcome_layout_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_layout_assigns() do$/;"	f
welcome_text	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text(), do: email() |> render_body("welcome.text", %{})$/;"	f
welcome_text_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text_assigns(), do: email() |> render_body("welcome_assigns.text", %{name: "Tony"})$/;"	f
welcome_text_layout	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text_layout() do$/;"	f
welcome_text_layout_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text_layout_assigns() do$/;"	f
welcome_text_layout_without_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text_layout_without_assigns() do$/;"	f
welcome_text_without_assigns	deps/phoenix_swoosh/test/phoenix_swoosh_test.exs	/^    def welcome_text_without_assigns(), do: email() |> render_body("welcome.text")$/;"	f
where	deps/ecto/lib/ecto/adapters/mysql/connection.ex	/^    defp where(%Query{wheres: wheres} = query, sources) do$/;"	f
where	deps/ecto/lib/ecto/adapters/postgres/connection.ex	/^    defp where(%Query{wheres: wheres} = query, sources) do$/;"	f
where	deps/ecto/lib/ecto/query.ex	/^  defmacro where(query, binding \\\\ [], expr) do$/;"	a
width_spec	deps/timex/lib/format/datetime/formatter.ex	/^  defp width_spec(min, max), do: [min: min, max: max]$/;"	f
width_spec	deps/timex/lib/format/datetime/formatter.ex	/^  defp width_spec(min..max), do: [min: min, max: max]$/;"	f
with	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def with(fuzzy_url, %{} = params) do$/;"	f
with	deps/fuzzyurl/lib/fuzzyurl.ex	/^  def with(fuzzy_url, params) do$/;"	f
with_cache	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp with_cache(ets, key, fun) do$/;"	f
with_cache	deps/plug/lib/plug/crypto/key_generator.ex	/^  defp with_cache(nil, _key, fun), do: fun.()$/;"	f
with_context	deps/decimal/lib/decimal.ex	/^  def with_context(%Context{} = context, fun) when is_function(fun, 0) do$/;"	f
with_existing	deps/con_cache/lib/con_cache/operations.ex	/^  defp with_existing(cache, key, fun) do$/;"	f
with_generator_env	deps/coherence/test/mix_helpers.exs	/^  def with_generator_env(new_env, fun) do$/;"	f
with_line_number	deps/plug/lib/plug/debugger.ex	/^  defp with_line_number(lines, initial, highlight) do$/;"	f
with_locale	deps/gettext/lib/gettext.ex	/^  def with_locale(backend, locale, fun) do$/;"	f
with_locale	deps/timex/lib/l10n/translator.ex	/^  defmacro with_locale(locale, do: block) do$/;"	a
with_log	deps/ecto/lib/ecto/adapters/sql.ex	/^  defp with_log(repo, params, opts) do$/;"	f
with_minimum	deps/ecto/lib/ecto/query.ex	/^      def with_minimum(age, height_ft) do$/;"	f
with_session	deps/coherence/test/controllers/rememberable_test.exs	/^  def with_session(conn) do$/;"	f
with_step	deps/timex/lib/interval/interval.ex	/^  def with_step(%__MODULE__{} = interval, step) do$/;"	f
word	deps/combine/lib/combine/parsers/text.ex	/^  def word(parser \\\\ nil),       do: word_of(parser, ~r\/\\w+\/)$/;"	f
word_of_impl	deps/combine/lib/combine/parsers/text.ex	/^  defp word_of_impl(%ParserState{status: :ok} = state, _pattern) do$/;"	f
works when preloading associations from another process	deps/ecto/integration_test/sql/sandbox.exs	/^  test "works when preloading associations from another process" do$/;"	t
wrap	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp wrap(atom, _original) when is_atom(atom),$/;"	f
wrap	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp wrap(list, _original) when is_list(list),$/;"	f
wrap	deps/ecto/lib/ecto/repo/preloader.ex	/^  defp wrap(other, original) do$/;"	f
wrap_in_transaction	deps/ecto/lib/ecto/repo/schema.ex	/^  defp wrap_in_transaction(repo, adapter, opts, assocs, prepare, fun) do$/;"	f
wrap_nil	deps/ecto/lib/ecto/query/builder.ex	/^  defp wrap_nil(params, _other) do$/;"	f
wrap_nil	deps/ecto/lib/ecto/query/builder.ex	/^  defp wrap_nil(params, {:{}, _, [:^, _, [ix]]}) do$/;"	f
wrap_paragraph	deps/phoenix_html/lib/phoenix_html/format.ex	/^  defp wrap_paragraph(text, tag, attributes, insert_brs?) do$/;"	f
wrap_request	deps/phoenix/lib/phoenix/test/conn_test.ex	/^  defp wrap_request(func) do$/;"	f
write_backup	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp write_backup(:error), do: :ok$/;"	f
write_backup	deps/phoenix/lib/phoenix/code_reloader/server.ex	/^  defp write_backup({:ok, path, file}), do: File.write!(path, file)$/;"	f
write_binfile	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp write_binfile(release, rel_dir) do$/;"	f
write_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp write_config(string, %{config: true, confirm: confirm?} = config) do$/;"	f
write_config	deps/coherence/lib/mix/tasks/coh.install.ex	/^  defp write_config(string, config), do: Enum.into([log_config?: true, config_string: string], config)$/;"	f
write_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp write_config(string, %{config: true, confirm: confirm?} = config) do$/;"	f
write_config	deps/coherence/lib/mix/tasks/coherence.install.ex	/^  defp write_config(string, config), do: Enum.into([log_config?: true, config_string: string], config)$/;"	f
write_context	deps/phoenix/lib/mix/tasks/phx.gen.context.ex	/^  defp write_context(content, file) do$/;"	f
write_extracted_files	deps/gettext/lib/mix/tasks/gettext.extract.ex	/^  defp write_extracted_files(pot_files) do$/;"	f
write_file	deps/gettext/lib/mix/tasks/gettext.merge.ex	/^  defp write_file({path, contents}) do$/;"	f
write_manifest	deps/gettext/lib/mix/tasks/compile.gettext.ex	/^  defp write_manifest(manifest, pos) do$/;"	f
write_relfile	deps/distillery/lib/mix/lib/releases/assembler.ex	/^  defp write_relfile(path, %Release{applications: apps} = release) do$/;"	f
write_term	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def write_term(path, term) do$/;"	f
write_terms	deps/distillery/lib/mix/lib/releases/utils.ex	/^  def write_terms(path, terms) when is_list(terms) do$/;"	f
write_to_disk	deps/phoenix/lib/phoenix/digester.ex	/^  defp write_to_disk(file, manifest, output_path) do$/;"	f
wrong_length	deps/ecto/lib/ecto/changeset.ex	/^  defp wrong_length(:list, _length, value, opts), do:$/;"	f
wrong_length	deps/ecto/lib/ecto/changeset.ex	/^  defp wrong_length(:string, _length, value, opts), do:$/;"	f
wrong_length	deps/ecto/lib/ecto/changeset.ex	/^  defp wrong_length(_type, value, value, _opts), do: nil$/;"	f
ws_close	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_close(state) do$/;"	f
ws_handle	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_handle(opcode, payload, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(%Broadcast{event: "disconnect"}, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(:garbage_collect, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info(_, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info({:EXIT, channel_pid, reason}, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info({:graceful_exit, channel_pid, %Phoenix.Socket.Message{} = msg}, state) do$/;"	f
ws_info	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_info({:socket_push, _, _encoded_payload} = msg, state) do$/;"	f
ws_init	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_init({socket, config}) do$/;"	f
ws_terminate	deps/phoenix/lib/phoenix/transports/websocket.ex	/^  def ws_terminate(_reason, _state) do$/;"	f
xhr?	deps/plug/lib/plug/csrf_protection.ex	/^  defp xhr?(conn) do$/;"	f
year2	deps/timex/lib/parse/datetime/parsers.ex	/^  def year2(opts \\\\ []) do$/;"	f
year4	deps/timex/lib/parse/datetime/parsers.ex	/^  def year4(opts \\\\ []) do$/;"	f
you_are_using_an_invalid_security_token	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def you_are_using_an_invalid_security_token,$/;"	f
you_are_using_an_invalid_security_token	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def you_are_using_an_invalid_security_token,$/;"	f
you_are_using_an_invalid_security_token	deps/coherence/test/support/messages.exs	/^  def you_are_using_an_invalid_security_token,$/;"	f
you_must_confirm_your_account	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def you_must_confirm_your_account, do: dgettext(@domain, "You must confirm your account before you can login.")$/;"	f
you_must_confirm_your_account	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def you_must_confirm_your_account, do: dgettext(@domain, "You must confirm your account before you can login.")$/;"	f
you_must_confirm_your_account	deps/coherence/test/support/messages.exs	/^  def you_must_confirm_your_account, do: dgettext(@domain, "You must confirm your account before you can login.")$/;"	f
your_account_has_been_unlocked	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def your_account_has_been_unlocked, do: dgettext(@domain, "Your account has been unlocked")$/;"	f
your_account_has_been_unlocked	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def your_account_has_been_unlocked, do: dgettext(@domain, "Your account has been unlocked")$/;"	f
your_account_has_been_unlocked	deps/coherence/test/support/messages.exs	/^  def your_account_has_been_unlocked, do: dgettext(@domain, "Your account has been unlocked")$/;"	f
your_account_is_not_locked	deps/coherence/priv/templates/coh.install/coherence_messages.ex	/^  def your_account_is_not_locked, do: dgettext(@domain, "Your account is not locked.")$/;"	f
your_account_is_not_locked	deps/coherence/priv/templates/coherence.install/coherence_messages.ex	/^  def your_account_is_not_locked, do: dgettext(@domain, "Your account is not locked.")$/;"	f
your_account_is_not_locked	deps/coherence/test/support/messages.exs	/^  def your_account_is_not_locked, do: dgettext(@domain, "Your account is not locked.")$/;"	f
zero	deps/timex/lib/comparable/diff.ex	/^  defp zero(:duration), do: Duration.zero$/;"	f
zero	deps/timex/lib/comparable/diff.ex	/^  defp zero(_type), do: 0$/;"	f
zero	deps/timex/lib/time/duration.ex	/^  def zero, do: %Duration{megaseconds: 0, seconds: 0, microseconds: 0}$/;"	f
zero	deps/timex/lib/timex.ex	/^  def zero(), do: %Date{year: 0, month: 1, day: 1}$/;"	f
zero_pad	deps/ecto/lib/ecto/date_time.ex	/^  def zero_pad(val, count) do$/;"	f
zero_str	deps/bcrypt_elixir/lib/bcrypt.ex	/^  defp zero_str(log_rounds) do$/;"	f
zero_str	deps/bcrypt_elixir/lib/bcrypt/base.ex	/^  defp zero_str(log_rounds) do$/;"	f
zname	deps/timex/lib/parse/datetime/parsers.ex	/^  def zname(_) do$/;"	f
zoffs	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs(_) do$/;"	f
zoffs_colon	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs_colon(_) do$/;"	f
zoffs_sec	deps/timex/lib/parse/datetime/parsers.ex	/^  def zoffs_sec(_) do$/;"	f
zone	deps/tzdata/lib/tzdata/period_builder.ex	/^  defp zone(btz_data, zone_name) do$/;"	f
zone	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone(zone_name) do$/;"	f
zone_alias?	deps/tzdata/lib/tzdata.ex	/^  def zone_alias?(name), do: Enum.member?(zone_alias_list(), name)$/;"	f
zone_alias_list	deps/tzdata/lib/tzdata.ex	/^  def zone_alias_list, do: Tzdata.ReleaseReader.link_list$/;"	f
zone_and_link_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zone_and_link_list(from_initial_pass) do$/;"	f
zone_and_link_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone_and_link_list,     do: simple_lookup(:zone_and_link_list) |> hd |> elem(1)$/;"	f
zone_exists?	deps/tzdata/lib/tzdata.ex	/^  def zone_exists?(name), do: Enum.member?(zone_list(), name)$/;"	f
zone_in_30_years_in_eternal_period?	deps/tzdata/lib/tzdata/far_future_dynamic_periods.ex	/^  def zone_in_30_years_in_eternal_period?(zone_name) do$/;"	f
zone_list	deps/tzdata/lib/tzdata.ex	/^  def zone_list, do: Tzdata.ReleaseReader.zone_and_link_list$/;"	f
zone_list	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zone_list(from_initial_pass) do$/;"	f
zone_list	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zone_list,              do: simple_lookup(:zone_list) |> hd |> elem(1)$/;"	f
zone_lists_grouped	deps/tzdata/lib/tzdata.ex	/^  def zone_lists_grouped, do: Tzdata.ReleaseReader.by_group$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  def zone_mapped(line) do$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  defp zone_mapped(_line, []), do: {:error, :no_regex_matched}$/;"	f
zone_mapped	deps/tzdata/lib/tzdata/parser.ex	/^  defp zone_mapped(line,[regex_head|tail]) do$/;"	f
zones	deps/tzdata/lib/tzdata/parser_organizer.ex	/^  def zones(from_initial_pass), do: map_with_name_key(from_initial_pass, :zone)$/;"	f
zones	deps/tzdata/lib/tzdata/release_reader.ex	/^  def zones,                  do: simple_lookup(:zones) |> hd |> elem(1)$/;"	f
